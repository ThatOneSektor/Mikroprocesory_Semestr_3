
PROJEKT_SEMESTR3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c248  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e4  0800c418  0800c418  0001c418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbfc  0800cbfc  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbfc  0800cbfc  0001cbfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc04  0800cc04  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800cc04  0800cc04  0001cc04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800cc0c  0800cc0c  0001cc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800cc14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ac4  200001f0  0800ce04  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002cb4  0800ce04  00022cb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012bd8  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029ef  00000000  00000000  00032e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc8  00000000  00000000  00035830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000090a  00000000  00000000  000363f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026853  00000000  00000000  00036d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000efbf  00000000  00000000  0005d555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1ceb  00000000  00000000  0006c514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ab0  00000000  00000000  0014e200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00153cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c400 	.word	0x0800c400

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800c400 	.word	0x0800c400

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff f939 	bl	80002b0 <strlen>
 800103e:	4603      	mov	r3, r0
      }
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af02      	add	r7, sp, #8
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f006 fcbf 	bl	80079d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800105a:	4602      	mov	r2, r0
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	4904      	ldr	r1, [pc, #16]	; (8001074 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 8001066:	f001 ff6a 	bl	8002f3e <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 800106a:	4603      	mov	r3, r0
					__idx, __base); }
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	0800c418 	.word	0x0800c418
 8001078:	08008ba9 	.word	0x08008ba9

0800107c <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>:
			     __idx, __base); }

  // NB: strtof vs strtod.
  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f006 fca6 	bl	80079d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800108c:	4602      	mov	r2, r0
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	4905      	ldr	r1, [pc, #20]	; (80010a8 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj+0x2c>)
 8001092:	4806      	ldr	r0, [pc, #24]	; (80010ac <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj+0x30>)
 8001094:	f001 ffd3 	bl	800303e <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 8001098:	eef0 7a40 	vmov.f32	s15, s0
 800109c:	eeb0 0a67 	vmov.f32	s0, s15
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	0800c420 	.word	0x0800c420
 80010ac:	080089d9 	.word	0x080089d9

080010b0 <_ZNSt7__cxx119to_stringEi>:

  // DR 1261. Insufficent overloads for to_string / to_wstring

  inline string
  to_string(int __val)
  {
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b087      	sub	sp, #28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	0fdb      	lsrs	r3, r3, #31
 80010be:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <_ZNSt7__cxx119to_stringEi+0x1c>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	425b      	negs	r3, r3
 80010ca:	e000      	b.n	80010ce <_ZNSt7__cxx119to_stringEi+0x1e>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 80010d0:	210a      	movs	r1, #10
 80010d2:	6938      	ldr	r0, [r7, #16]
 80010d4:	f001 fffc 	bl	80030d0 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 80010d8:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 80010da:	7dfa      	ldrb	r2, [r7, #23]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	18d4      	adds	r4, r2, r3
 80010e0:	f107 0308 	add.w	r3, r7, #8
 80010e4:	4618      	mov	r0, r3
 80010e6:	f006 f871 	bl	80071cc <_ZNSaIcEC1Ev>
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	222d      	movs	r2, #45	; 0x2d
 80010f0:	4621      	mov	r1, r4
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f006 fa38 	bl	8007568 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	4618      	mov	r0, r3
 80010fe:	f006 f867 	bl	80071d0 <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 8001102:	7dfb      	ldrb	r3, [r7, #23]
 8001104:	4619      	mov	r1, r3
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f006 fac1 	bl	800768e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800110c:	4603      	mov	r3, r0
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	68f9      	ldr	r1, [r7, #12]
 8001112:	4618      	mov	r0, r3
 8001114:	f002 f81c 	bl	8003150 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 8001118:	bf00      	nop
  }
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	371c      	adds	r7, #28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd90      	pop	{r4, r7, pc}

08001122 <_ZN14CircularBufferILj4096EEC1Ev>:
  None,
  Char
};
uint16_t endcharcounter=0;
template <std::size_t maxSize>
class CircularBuffer {
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001130:	461a      	mov	r2, r3
 8001132:	2300      	movs	r3, #0
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800113c:	461a      	mov	r2, r3
 800113e:	2300      	movs	r3, #0
 8001140:	6053      	str	r3, [r2, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001148:	2200      	movs	r2, #0
 800114a:	721a      	strb	r2, [r3, #8]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
};
uint8_t itemRx;
CircularBuffer<4096> rx;
uint8_t itemTx;
CircularBuffer<4096> tx;
void USART_send(std::string a) {
 800115c:	b590      	push	{r4, r7, lr}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  //tx.push(a);
	if(tx.size()+a.length()>tx.capacity())return;
 8001164:	4831      	ldr	r0, [pc, #196]	; (800122c <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>)
 8001166:	f002 f849 	bl	80031fc <_ZN14CircularBufferILj4096EE4sizeEv>
 800116a:	4604      	mov	r4, r0
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f006 fa5d 	bl	800762c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001172:	4603      	mov	r3, r0
 8001174:	441c      	add	r4, r3
 8001176:	482d      	ldr	r0, [pc, #180]	; (800122c <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>)
 8001178:	f002 f869 	bl	800324e <_ZN14CircularBufferILj4096EE8capacityEv>
 800117c:	4603      	mov	r3, r0
 800117e:	429c      	cmp	r4, r3
 8001180:	bf8c      	ite	hi
 8001182:	2301      	movhi	r3, #1
 8001184:	2300      	movls	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d14a      	bne.n	8001222 <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc6>
  for(uint8_t charr:a)tx.push(charr);//dodaj do bufora znaki ze stringa
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	6978      	ldr	r0, [r7, #20]
 8001192:	f006 fa3d 	bl	8007610 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 8001196:	4603      	mov	r3, r0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	6978      	ldr	r0, [r7, #20]
 800119c:	f006 fa3c 	bl	8007618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 80011a0:	4603      	mov	r3, r0
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	e011      	b.n	80011ca <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e>
 80011a6:	f107 030c 	add.w	r3, r7, #12
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 f883 	bl	80032b6 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 80011b0:	4603      	mov	r3, r0
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	74fb      	strb	r3, [r7, #19]
 80011b6:	7cfb      	ldrb	r3, [r7, #19]
 80011b8:	4619      	mov	r1, r3
 80011ba:	481c      	ldr	r0, [pc, #112]	; (800122c <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>)
 80011bc:	f002 f887 	bl	80032ce <_ZN14CircularBufferILj4096EE4pushEh>
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 f866 	bl	8003296 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 80011ca:	f107 0208 	add.w	r2, r7, #8
 80011ce:	f107 030c 	add.w	r3, r7, #12
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f002 f846 	bl	8003266 <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1e2      	bne.n	80011a6 <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
}
 80011e2:	bf00      	nop
  __disable_irq();//zatrzymaj przerwania w celu nieprzerwanej transmisji
  if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) != RESET) {//sprawdzanie czy linia jest obecnie wykorzystywana
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ee:	2b80      	cmp	r3, #128	; 0x80
 80011f0:	bf0c      	ite	eq
 80011f2:	2301      	moveq	r3, #1
 80011f4:	2300      	movne	r3, #0
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	bf14      	ite	ne
 80011fc:	2301      	movne	r3, #1
 80011fe:	2300      	moveq	r3, #0
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00b      	beq.n	800121e <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc2>
    itemTx= tx.pop();//zczytaj znak na końcu
 8001206:	4809      	ldr	r0, [pc, #36]	; (800122c <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>)
 8001208:	f002 f894 	bl	8003334 <_ZN14CircularBufferILj4096EE3popEv>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd8>)
 8001212:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_IT(&huart2, &itemTx, 1);//prześlij pierwszy znak z
 8001214:	2201      	movs	r2, #1
 8001216:	4907      	ldr	r1, [pc, #28]	; (8001234 <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd8>)
 8001218:	4805      	ldr	r0, [pc, #20]	; (8001230 <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>)
 800121a:	f005 f872 	bl	8006302 <HAL_UART_Transmit_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 800121e:	b662      	cpsie	i
}
 8001220:	e000      	b.n	8001224 <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>
	if(tx.size()+a.length()>tx.capacity())return;
 8001222:	bf00      	nop
  }
  __enable_irq();//wznów przerwania
}
 8001224:	371c      	adds	r7, #28
 8001226:	46bd      	mov	sp, r7
 8001228:	bd90      	pop	{r4, r7, pc}
 800122a:	bf00      	nop
 800122c:	2000130c 	.word	0x2000130c
 8001230:	200002b4 	.word	0x200002b4
 8001234:	20001308 	.word	0x20001308

08001238 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	if (!(huart == &huart2)) return;//jeżeli odpowiedni interfejs
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <HAL_UART_TxCpltCallback+0x44>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d112      	bne.n	800126e <HAL_UART_TxCpltCallback+0x36>
	if (tx.empty()) return;//jeżeli nie koniec buforu
 8001248:	480d      	ldr	r0, [pc, #52]	; (8001280 <HAL_UART_TxCpltCallback+0x48>)
 800124a:	f002 f89f 	bl	800338c <_ZN14CircularBufferILj4096EE5emptyEv>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d10e      	bne.n	8001272 <HAL_UART_TxCpltCallback+0x3a>
	itemTx = tx.pop();//zczytaj znak na końcu
 8001254:	480a      	ldr	r0, [pc, #40]	; (8001280 <HAL_UART_TxCpltCallback+0x48>)
 8001256:	f002 f86d 	bl	8003334 <_ZN14CircularBufferILj4096EE3popEv>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_UART_TxCpltCallback+0x4c>)
 8001260:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart2, &itemTx, 1);//prześlij
 8001262:	2201      	movs	r2, #1
 8001264:	4907      	ldr	r1, [pc, #28]	; (8001284 <HAL_UART_TxCpltCallback+0x4c>)
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <HAL_UART_TxCpltCallback+0x44>)
 8001268:	f005 f84b 	bl	8006302 <HAL_UART_Transmit_IT>
 800126c:	e002      	b.n	8001274 <HAL_UART_TxCpltCallback+0x3c>
	if (!(huart == &huart2)) return;//jeżeli odpowiedni interfejs
 800126e:	bf00      	nop
 8001270:	e000      	b.n	8001274 <HAL_UART_TxCpltCallback+0x3c>
	if (tx.empty()) return;//jeżeli nie koniec buforu
 8001272:	bf00      	nop

}
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200002b4 	.word	0x200002b4
 8001280:	2000130c 	.word	0x2000130c
 8001284:	20001308 	.word	0x20001308

08001288 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	if (!(huart == &huart2)) return;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <HAL_UART_RxCpltCallback+0x30>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d10b      	bne.n	80012b0 <HAL_UART_RxCpltCallback+0x28>
	rx.push(itemRx);
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_UART_RxCpltCallback+0x34>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	4808      	ldr	r0, [pc, #32]	; (80012c0 <HAL_UART_RxCpltCallback+0x38>)
 80012a0:	f002 f815 	bl	80032ce <_ZN14CircularBufferILj4096EE4pushEh>
	//if(itemRx=='|')endcharcounter++;
	HAL_UART_Receive_IT(&huart2, &itemRx, 1);
 80012a4:	2201      	movs	r2, #1
 80012a6:	4905      	ldr	r1, [pc, #20]	; (80012bc <HAL_UART_RxCpltCallback+0x34>)
 80012a8:	4803      	ldr	r0, [pc, #12]	; (80012b8 <HAL_UART_RxCpltCallback+0x30>)
 80012aa:	f005 f86f 	bl	800638c <HAL_UART_Receive_IT>
 80012ae:	e000      	b.n	80012b2 <HAL_UART_RxCpltCallback+0x2a>
	if (!(huart == &huart2)) return;
 80012b0:	bf00      	nop
}
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200002b4 	.word	0x200002b4
 80012bc:	200002f8 	.word	0x200002f8
 80012c0:	200002fc 	.word	0x200002fc

080012c4 <_Z10replaceAllRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS4_S7_>:

//----------------------------//
//POWYŻEJ UART, PONIŻEJ RAMKA
//----------------------------//todo:
void replaceAll(std::string& str, const std::string& from, const std::string& to) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
    size_t start_pos = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
    while ((start_pos = str.find(from, start_pos)) != std::string::npos) {
 80012d4:	e00f      	b.n	80012f6 <_Z10replaceAllRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS4_S7_+0x32>
        str.replace(start_pos, from.length(), to);
 80012d6:	68b8      	ldr	r0, [r7, #8]
 80012d8:	f006 f9a8 	bl	800762c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80012dc:	4602      	mov	r2, r0
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6979      	ldr	r1, [r7, #20]
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f006 fb22 	bl	800792c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjRKS4_>
        start_pos += to.length();
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f006 f99f 	bl	800762c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80012ee:	4602      	mov	r2, r0
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	4413      	add	r3, r2
 80012f4:	617b      	str	r3, [r7, #20]
    while ((start_pos = str.find(from, start_pos)) != std::string::npos) {
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f006 fba0 	bl	8007a40 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 8001300:	6178      	str	r0, [r7, #20]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001308:	bf14      	ite	ne
 800130a:	2301      	movne	r3, #1
 800130c:	2300      	moveq	r3, #0
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1e0      	bne.n	80012d6 <_Z10replaceAllRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS4_S7_+0x12>
    }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <_Z22trimStartEndCharactersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcc>:
void trimStartEndCharacters(std::string& str, char startChar, char endChar) {
 800131e:	b580      	push	{r7, lr}
 8001320:	b084      	sub	sp, #16
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	460b      	mov	r3, r1
 8001328:	70fb      	strb	r3, [r7, #3]
 800132a:	4613      	mov	r3, r2
 800132c:	70bb      	strb	r3, [r7, #2]

    // przycinanie do pierwszej instancji znaku
    size_t startPos = str.find_first_not_of(startChar);
 800132e:	78fb      	ldrb	r3, [r7, #3]
 8001330:	2200      	movs	r2, #0
 8001332:	4619      	mov	r1, r3
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f006 fb9e 	bl	8007a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17find_first_not_ofEcj>
 800133a:	60f8      	str	r0, [r7, #12]
    if (startPos != std::string::npos) {
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001342:	d006      	beq.n	8001352 <_Z22trimStartEndCharactersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcc+0x34>
        str.erase(0, startPos-1);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3b01      	subs	r3, #1
 8001348:	461a      	mov	r2, r3
 800134a:	2100      	movs	r1, #0
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f006 f9c1 	bl	80076d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj>
    }

    // ucinanie do jakiegoś znaku
    size_t endPos = str.find_last_not_of(endChar);
 8001352:	78bb      	ldrb	r3, [r7, #2]
 8001354:	f04f 32ff 	mov.w	r2, #4294967295
 8001358:	4619      	mov	r1, r3
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f006 fb99 	bl	8007a92 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16find_last_not_ofEcj>
 8001360:	60b8      	str	r0, [r7, #8]
    if (endPos != std::string::npos) {
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001368:	d007      	beq.n	800137a <_Z22trimStartEndCharactersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcc+0x5c>
        str.erase(endPos + 2);
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	3302      	adds	r3, #2
 800136e:	f04f 32ff 	mov.w	r2, #4294967295
 8001372:	4619      	mov	r1, r3
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f006 f9ad 	bl	80076d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj>
    }
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <_Z14calculateCRC16RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

uint16_t calculateCRC16(const std::string& data) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
    const uint16_t polynomial = 0x8005; //  wielomian
 800138c:	f248 0305 	movw	r3, #32773	; 0x8005
 8001390:	83fb      	strh	r3, [r7, #30]
    uint16_t crc = 0xFFFF; // wstepna wartość dla crc
 8001392:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001396:	84fb      	strh	r3, [r7, #38]	; 0x26

    for (char c : data) {//dla każdego znaku w stringu
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	61bb      	str	r3, [r7, #24]
 800139c:	69b8      	ldr	r0, [r7, #24]
 800139e:	f006 f939 	bl	8007614 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 80013a2:	4603      	mov	r3, r0
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	69b8      	ldr	r0, [r7, #24]
 80013a8:	f006 f93a 	bl	8007620 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 80013ac:	4603      	mov	r3, r0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	e02c      	b.n	800140c <_Z14calculateCRC16RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x88>
 80013b2:	f107 0310 	add.w	r3, r7, #16
 80013b6:	4618      	mov	r0, r3
 80013b8:	f002 f827 	bl	800340a <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 80013bc:	4603      	mov	r3, r0
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	75fb      	strb	r3, [r7, #23]
        crc ^= static_cast<uint16_t>(c) << 8;//XOR obecnego CRC z przesuniętym w lewo o 8 bit obecnym znakiem
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	b21a      	sxth	r2, r3
 80013c8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80013cc:	4053      	eors	r3, r2
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	84fb      	strh	r3, [r7, #38]	; 0x26

        for (int i = 0; i < 8; ++i) {//dla nowego bitu w nowym bajcie po kolei:
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
 80013d6:	e011      	b.n	80013fc <_Z14calculateCRC16RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>
            if (crc & 0x8000) {//jeżeli najważniejszy bit po lewej stronie
 80013d8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80013dc:	2b00      	cmp	r3, #0
 80013de:	da07      	bge.n	80013f0 <_Z14calculateCRC16RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6c>
                crc = (crc << 1) ^ polynomial;//leftshift o 1 i xor z wielomianem
 80013e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <_Z14calculateCRC16RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa8>)
 80013e8:	4053      	eors	r3, r2
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80013ee:	e002      	b.n	80013f6 <_Z14calculateCRC16RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x72>
            } else {//jeżeli najważniejszy bit to 0
                crc <<= 1;//bitshift w lewo o 1
 80013f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	84fb      	strh	r3, [r7, #38]	; 0x26
        for (int i = 0; i < 8; ++i) {//dla nowego bitu w nowym bajcie po kolei:
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	3301      	adds	r3, #1
 80013fa:	623b      	str	r3, [r7, #32]
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	2b07      	cmp	r3, #7
 8001400:	ddea      	ble.n	80013d8 <_Z14calculateCRC16RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>
    for (char c : data) {//dla każdego znaku w stringu
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4618      	mov	r0, r3
 8001408:	f001 ffef 	bl	80033ea <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 800140c:	f107 020c 	add.w	r2, r7, #12
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f001 ffcf 	bl	80033ba <_ZN9__gnu_cxxneIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1c7      	bne.n	80013b2 <_Z14calculateCRC16RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2e>
            }
        }
    }
    //USART_send("DEBUG:Calculated checksum: "+std::to_string(crc)+"\r\n");

    return crc;
 8001422:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8001424:	4618      	mov	r0, r3
 8001426:	3728      	adds	r7, #40	; 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	ffff8005 	.word	0xffff8005

08001430 <_ZNKSt17integral_constantIbLb1EEcvbEv>:
    struct integral_constant
    {
      static constexpr _Tp                  value = __v;
      typedef _Tp                           value_type;
      typedef integral_constant<_Tp, __v>   type;
      constexpr operator value_type() const noexcept { return value; }
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	2301      	movs	r3, #1
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
std::string reconstructdata(std::string data){
 8001446:	b590      	push	{r4, r7, lr}
 8001448:	b085      	sub	sp, #20
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
	std::string unescapedData;
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f006 f87b 	bl	800754c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	//przejście przez dane przekazane
	  for (size_t i = 0; i < data.length(); ++i) {
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	e046      	b.n	80014ea <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa4>
	        // sprawdzanie czy jest znak escape
	        if (data[i] == '\\' && i + 1 < data.length()) {
 800145c:	68f9      	ldr	r1, [r7, #12]
 800145e:	6838      	ldr	r0, [r7, #0]
 8001460:	f006 f915 	bl	800768e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001464:	4603      	mov	r3, r0
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b5c      	cmp	r3, #92	; 0x5c
 800146a:	d109      	bne.n	8001480 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	1c5c      	adds	r4, r3, #1
 8001470:	6838      	ldr	r0, [r7, #0]
 8001472:	f006 f8db 	bl	800762c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001476:	4603      	mov	r3, r0
 8001478:	429c      	cmp	r4, r3
 800147a:	d201      	bcs.n	8001480 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a>
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
 8001480:	2300      	movs	r3, #0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d024      	beq.n	80014d0 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8a>
	            // zamiana w wyniku escape
	            switch (data[i + 1]) {
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	3301      	adds	r3, #1
 800148a:	4619      	mov	r1, r3
 800148c:	6838      	ldr	r0, [r7, #0]
 800148e:	f006 f8fe 	bl	800768e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001492:	4603      	mov	r3, r0
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b40      	cmp	r3, #64	; 0x40
 8001498:	d010      	beq.n	80014bc <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x76>
 800149a:	2b40      	cmp	r3, #64	; 0x40
 800149c:	dc13      	bgt.n	80014c6 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>
 800149e:	2b3a      	cmp	r3, #58	; 0x3a
 80014a0:	d002      	beq.n	80014a8 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
 80014a2:	2b3b      	cmp	r3, #59	; 0x3b
 80014a4:	d005      	beq.n	80014b2 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6c>
	                case '@':
	                    unescapedData.push_back('\\');
	                    break;
	                default:
	                    // Handle other cases as needed
	                    break;
 80014a6:	e00e      	b.n	80014c6 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>
	                    unescapedData.push_back('^');
 80014a8:	215e      	movs	r1, #94	; 0x5e
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f006 f8f2 	bl	8007694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
	                    break;
 80014b0:	e00a      	b.n	80014c8 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	                    unescapedData.push_back('|');
 80014b2:	217c      	movs	r1, #124	; 0x7c
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f006 f8ed 	bl	8007694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
	                    break;
 80014ba:	e005      	b.n	80014c8 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	                    unescapedData.push_back('\\');
 80014bc:	215c      	movs	r1, #92	; 0x5c
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f006 f8e8 	bl	8007694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
	                    break;
 80014c4:	e000      	b.n	80014c8 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	                    break;
 80014c6:	bf00      	nop
	            }
	            // Skip the next character as it was part of the escape sequence
	            ++i;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3301      	adds	r3, #1
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	e009      	b.n	80014e4 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9e>
	        } else {
	            // Regular character, add to the unescaped data
	            unescapedData.push_back(data[i]);
 80014d0:	68f9      	ldr	r1, [r7, #12]
 80014d2:	6838      	ldr	r0, [r7, #0]
 80014d4:	f006 f8db 	bl	800768e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80014d8:	4603      	mov	r3, r0
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f006 f8d8 	bl	8007694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
	  for (size_t i = 0; i < data.length(); ++i) {
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3301      	adds	r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	6838      	ldr	r0, [r7, #0]
 80014ec:	f006 f89e 	bl	800762c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	4293      	cmp	r3, r2
 80014f6:	bf34      	ite	cc
 80014f8:	2301      	movcc	r3, #1
 80014fa:	2300      	movcs	r3, #0
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1ac      	bne.n	800145c <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16>
	        }
	    }
	  	  //zwrócenie buforu string tymczasowego
	    return unescapedData;
 8001502:	bf00      	nop
}
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	bd90      	pop	{r4, r7, pc}

0800150c <_Z16escapeCharactersRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
std::string escapeCharacters(const std::string& data) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b0ac      	sub	sp, #176	; 0xb0
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
    std::string escapedData = data;//zamiana znaków
 8001516:	6839      	ldr	r1, [r7, #0]
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f006 faef 	bl	8007afc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    replaceAll(escapedData, "\\", "\\@");
 800151e:	f107 0320 	add.w	r3, r7, #32
 8001522:	4618      	mov	r0, r3
 8001524:	f005 fe52 	bl	80071cc <_ZNSaIcEC1Ev>
 8001528:	f107 0220 	add.w	r2, r7, #32
 800152c:	f107 0308 	add.w	r3, r7, #8
 8001530:	494e      	ldr	r1, [pc, #312]	; (800166c <_Z16escapeCharactersRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x160>)
 8001532:	4618      	mov	r0, r3
 8001534:	f006 fb16 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001538:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800153c:	4618      	mov	r0, r3
 800153e:	f005 fe45 	bl	80071cc <_ZNSaIcEC1Ev>
 8001542:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154a:	4949      	ldr	r1, [pc, #292]	; (8001670 <_Z16escapeCharactersRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x164>)
 800154c:	4618      	mov	r0, r3
 800154e:	f006 fb09 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001552:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001556:	f107 0308 	add.w	r3, r7, #8
 800155a:	4619      	mov	r1, r3
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff feb1 	bl	80012c4 <_Z10replaceAllRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS4_S7_>
 8001562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001566:	4618      	mov	r0, r3
 8001568:	f006 f821 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800156c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001570:	4618      	mov	r0, r3
 8001572:	f005 fe2d 	bl	80071d0 <_ZNSaIcED1Ev>
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4618      	mov	r0, r3
 800157c:	f006 f817 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001580:	f107 0320 	add.w	r3, r7, #32
 8001584:	4618      	mov	r0, r3
 8001586:	f005 fe23 	bl	80071d0 <_ZNSaIcED1Ev>
    replaceAll(escapedData, "|", "\\;");
 800158a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800158e:	4618      	mov	r0, r3
 8001590:	f005 fe1c 	bl	80071cc <_ZNSaIcEC1Ev>
 8001594:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001598:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800159c:	4935      	ldr	r1, [pc, #212]	; (8001674 <_Z16escapeCharactersRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x168>)
 800159e:	4618      	mov	r0, r3
 80015a0:	f006 fae0 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80015a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015a8:	4618      	mov	r0, r3
 80015aa:	f005 fe0f 	bl	80071cc <_ZNSaIcEC1Ev>
 80015ae:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80015b2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015b6:	4930      	ldr	r1, [pc, #192]	; (8001678 <_Z16escapeCharactersRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16c>)
 80015b8:	4618      	mov	r0, r3
 80015ba:	f006 fad3 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80015be:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80015c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015c6:	4619      	mov	r1, r3
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff fe7b 	bl	80012c4 <_Z10replaceAllRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS4_S7_>
 80015ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015d2:	4618      	mov	r0, r3
 80015d4:	f005 ffeb 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80015d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015dc:	4618      	mov	r0, r3
 80015de:	f005 fdf7 	bl	80071d0 <_ZNSaIcED1Ev>
 80015e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015e6:	4618      	mov	r0, r3
 80015e8:	f005 ffe1 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80015ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015f0:	4618      	mov	r0, r3
 80015f2:	f005 fded 	bl	80071d0 <_ZNSaIcED1Ev>
    replaceAll(escapedData, "^", "\\:");
 80015f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015fa:	4618      	mov	r0, r3
 80015fc:	f005 fde6 	bl	80071cc <_ZNSaIcEC1Ev>
 8001600:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001604:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001608:	491c      	ldr	r1, [pc, #112]	; (800167c <_Z16escapeCharactersRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x170>)
 800160a:	4618      	mov	r0, r3
 800160c:	f006 faaa 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001610:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001614:	4618      	mov	r0, r3
 8001616:	f005 fdd9 	bl	80071cc <_ZNSaIcEC1Ev>
 800161a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800161e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001622:	4917      	ldr	r1, [pc, #92]	; (8001680 <_Z16escapeCharactersRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x174>)
 8001624:	4618      	mov	r0, r3
 8001626:	f006 fa9d 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800162a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800162e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001632:	4619      	mov	r1, r3
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff fe45 	bl	80012c4 <_Z10replaceAllRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS4_S7_>
 800163a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800163e:	4618      	mov	r0, r3
 8001640:	f005 ffb5 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001644:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001648:	4618      	mov	r0, r3
 800164a:	f005 fdc1 	bl	80071d0 <_ZNSaIcED1Ev>
 800164e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001652:	4618      	mov	r0, r3
 8001654:	f005 ffab 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001658:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800165c:	4618      	mov	r0, r3
 800165e:	f005 fdb7 	bl	80071d0 <_ZNSaIcED1Ev>
    return escapedData;
 8001662:	bf00      	nop
}
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	37b0      	adds	r7, #176	; 0xb0
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	0800c428 	.word	0x0800c428
 8001670:	0800c42c 	.word	0x0800c42c
 8001674:	0800c430 	.word	0x0800c430
 8001678:	0800c434 	.word	0x0800c434
 800167c:	0800c438 	.word	0x0800c438
 8001680:	0800c43c 	.word	0x0800c43c

08001684 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
//generowanie ramki odpowiedzi
void respondframe(std::string response){
 8001684:	b580      	push	{r7, lr}
 8001686:	b0c4      	sub	sp, #272	; 0x110
 8001688:	af00      	add	r7, sp, #0
 800168a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800168e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001692:	6018      	str	r0, [r3, #0]
	std::string escapedresponse=escapeCharacters(response);//zamiana znaków
 8001694:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001698:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800169c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016a0:	6819      	ldr	r1, [r3, #0]
 80016a2:	4610      	mov	r0, r2
 80016a4:	f7ff ff32 	bl	800150c <_Z16escapeCharactersRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
	char rspchksmbuf[5],rpslenbuf[3];//temp tablice znaków
	uint8_t resplen=static_cast<uint8_t>(escapedresponse.length()-1);//obliczanie długości
 80016a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ac:	4618      	mov	r0, r3
 80016ae:	f005 ffbd 	bl	800762c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80016b2:	4603      	mov	r3, r0
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	3b01      	subs	r3, #1
 80016b8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	std::snprintf(rpslenbuf,3,"%02d",resplen);//formatowanie długości
 80016bc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80016c0:	f107 0020 	add.w	r0, r7, #32
 80016c4:	4a58      	ldr	r2, [pc, #352]	; (8001828 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a4>)
 80016c6:	2103      	movs	r1, #3
 80016c8:	f008 f928 	bl	800991c <sniprintf>
	uint16_t respchecksum=calculateCRC16("n"+escapedresponse);//checksuma
 80016cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016d0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80016d4:	4955      	ldr	r1, [pc, #340]	; (800182c <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a8>)
 80016d6:	4618      	mov	r0, r3
 80016d8:	f001 fea3 	bl	8003422 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 80016dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fe4f 	bl	8001384 <_Z14calculateCRC16RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 80016ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016f0:	4618      	mov	r0, r3
 80016f2:	f005 ff5c 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	std::snprintf(rspchksmbuf,5,"%04X",respchecksum);//formatowanie checksumy
 80016f6:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80016fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80016fe:	4a4c      	ldr	r2, [pc, #304]	; (8001830 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ac>)
 8001700:	2105      	movs	r1, #5
 8001702:	f008 f90b 	bl	800991c <sniprintf>
	std::string outputresponse="^"+(std::string)rpslenbuf+"n"+escapedresponse+(std::string)rspchksmbuf+"|\r\n";//składanie całości
 8001706:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800170a:	4618      	mov	r0, r3
 800170c:	f005 fd5e 	bl	80071cc <_ZNSaIcEC1Ev>
 8001710:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8001714:	f107 0120 	add.w	r1, r7, #32
 8001718:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800171c:	4618      	mov	r0, r3
 800171e:	f006 fa21 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001722:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001726:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800172a:	4942      	ldr	r1, [pc, #264]	; (8001834 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b0>)
 800172c:	4618      	mov	r0, r3
 800172e:	f001 feb8 	bl	80034a2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8001732:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001736:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 800173a:	4a3c      	ldr	r2, [pc, #240]	; (800182c <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a8>)
 800173c:	4618      	mov	r0, r3
 800173e:	f001 fec8 	bl	80034d2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001742:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001746:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800174a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800174e:	4618      	mov	r0, r3
 8001750:	f001 fed6 	bl	8003500 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8001754:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001758:	4618      	mov	r0, r3
 800175a:	f005 fd37 	bl	80071cc <_ZNSaIcEC1Ev>
 800175e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001762:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001766:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800176a:	4618      	mov	r0, r3
 800176c:	f006 f9fa 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001770:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001774:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8001778:	f107 0174 	add.w	r1, r7, #116	; 0x74
 800177c:	4618      	mov	r0, r3
 800177e:	f001 fed6 	bl	800352e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8001782:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800178a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800178e:	4a2a      	ldr	r2, [pc, #168]	; (8001838 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b4>)
 8001790:	4618      	mov	r0, r3
 8001792:	f001 fe9e 	bl	80034d2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001796:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800179a:	4618      	mov	r0, r3
 800179c:	f005 ff07 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017a0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80017a4:	4618      	mov	r0, r3
 80017a6:	f005 ff02 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017aa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f005 fd0e 	bl	80071d0 <_ZNSaIcED1Ev>
 80017b4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017b8:	4618      	mov	r0, r3
 80017ba:	f005 fef8 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017c2:	4618      	mov	r0, r3
 80017c4:	f005 fef3 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017cc:	4618      	mov	r0, r3
 80017ce:	f005 feee 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017d2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017d6:	4618      	mov	r0, r3
 80017d8:	f005 fee9 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017e0:	4618      	mov	r0, r3
 80017e2:	f005 fcf5 	bl	80071d0 <_ZNSaIcED1Ev>
	USART_send(outputresponse);
 80017e6:	f107 0208 	add.w	r2, r7, #8
 80017ea:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f006 f983 	bl	8007afc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80017f6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fcae 	bl	800115c <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001800:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001804:	4618      	mov	r0, r3
 8001806:	f005 fed2 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800180a:	f107 0308 	add.w	r3, r7, #8
 800180e:	4618      	mov	r0, r3
 8001810:	f005 fecd 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001818:	4618      	mov	r0, r3
 800181a:	f005 fec8 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800181e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	0800c440 	.word	0x0800c440
 800182c:	0800c448 	.word	0x0800c448
 8001830:	0800c44c 	.word	0x0800c44c
 8001834:	0800c438 	.word	0x0800c438
 8001838:	0800c454 	.word	0x0800c454

0800183c <_Z13resettimevalsv>:
//ZMIENNE CZASOWE SYSTEMU GAZOWO-STRZELAJĄCEGO ORAZ RESET
int shotdelay=DELTIME, timebetween=BEWTIME,valvetime=GVOTIME,sparktime=SPTTIME;
float timemul=MULTIPL,realshotdelay=DELTIME*timemul;
void resettimevals(){
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
	shotdelay=DELTIME;
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <_Z13resettimevalsv+0x34>)
 8001842:	2264      	movs	r2, #100	; 0x64
 8001844:	601a      	str	r2, [r3, #0]
	timebetween=BEWTIME;
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <_Z13resettimevalsv+0x38>)
 8001848:	2250      	movs	r2, #80	; 0x50
 800184a:	601a      	str	r2, [r3, #0]
	valvetime=GVOTIME;
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <_Z13resettimevalsv+0x3c>)
 800184e:	2232      	movs	r2, #50	; 0x32
 8001850:	601a      	str	r2, [r3, #0]
	sparktime=SPTTIME;
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <_Z13resettimevalsv+0x40>)
 8001854:	2232      	movs	r2, #50	; 0x32
 8001856:	601a      	str	r2, [r3, #0]
	timemul=MULTIPL;
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <_Z13resettimevalsv+0x44>)
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <_Z13resettimevalsv+0x48>)
 800185c:	601a      	str	r2, [r3, #0]
	realshotdelay=DELTIME*MULTIPL;
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <_Z13resettimevalsv+0x4c>)
 8001860:	4a0a      	ldr	r2, [pc, #40]	; (800188c <_Z13resettimevalsv+0x50>)
 8001862:	601a      	str	r2, [r3, #0]
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	20000000 	.word	0x20000000
 8001874:	20000004 	.word	0x20000004
 8001878:	20000008 	.word	0x20000008
 800187c:	2000000c 	.word	0x2000000c
 8001880:	20000010 	.word	0x20000010
 8001884:	40a00000 	.word	0x40a00000
 8001888:	20002318 	.word	0x20002318
 800188c:	43fa0000 	.word	0x43fa0000

08001890 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
//zmienne średnich i median ADC DMA
float c1avg,c2avg,c1med,c2med;
uint8_t FBpressed=0,LOCKpressed=0;
uint16_t ButtonPresses=0;
void processcmd(char cmd,const std::string& data){
 8001890:	b580      	push	{r7, lr}
 8001892:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 8001896:	af02      	add	r7, sp, #8
 8001898:	4602      	mov	r2, r0
 800189a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800189e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80018a2:	6019      	str	r1, [r3, #0]
 80018a4:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80018a8:	f2a3 3309 	subw	r3, r3, #777	; 0x309
 80018ac:	701a      	strb	r2, [r3, #0]
	std::string respstr="0.00000";
 80018ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018b2:	4618      	mov	r0, r3
 80018b4:	f005 fc8a 	bl	80071cc <_ZNSaIcEC1Ev>
 80018b8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80018bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018c0:	49dc      	ldr	r1, [pc, #880]	; (8001c34 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a4>)
 80018c2:	4618      	mov	r0, r3
 80018c4:	f006 f94e 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80018c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018cc:	4618      	mov	r0, r3
 80018ce:	f005 fc7f 	bl	80071d0 <_ZNSaIcED1Ev>
	char str1[20]={0},str2[20]={0};
 80018d2:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80018d6:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	3304      	adds	r3, #4
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80018ee:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	3304      	adds	r3, #4
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]

	switch(cmd){
 8001902:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001906:	f2a3 3309 	subw	r3, r3, #777	; 0x309
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	3b61      	subs	r3, #97	; 0x61
 800190e:	2b15      	cmp	r3, #21
 8001910:	f200 82ed 	bhi.w	8001eee <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x65e>
 8001914:	a201      	add	r2, pc, #4	; (adr r2, 800191c <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8c>)
 8001916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191a:	bf00      	nop
 800191c:	08001c71 	.word	0x08001c71
 8001920:	08001a6d 	.word	0x08001a6d
 8001924:	08001bcb 	.word	0x08001bcb
 8001928:	080019a3 	.word	0x080019a3
 800192c:	08001975 	.word	0x08001975
 8001930:	08001eaf 	.word	0x08001eaf
 8001934:	08001eef 	.word	0x08001eef
 8001938:	08001eef 	.word	0x08001eef
 800193c:	08001d75 	.word	0x08001d75
 8001940:	08001eef 	.word	0x08001eef
 8001944:	08001eef 	.word	0x08001eef
 8001948:	08001eef 	.word	0x08001eef
 800194c:	08001a0b 	.word	0x08001a0b
 8001950:	08001f29 	.word	0x08001f29
 8001954:	08001eef 	.word	0x08001eef
 8001958:	08001e6d 	.word	0x08001e6d
 800195c:	08001eef 	.word	0x08001eef
 8001960:	08001b8d 	.word	0x08001b8d
 8001964:	08001b2d 	.word	0x08001b2d
 8001968:	08001eef 	.word	0x08001eef
 800196c:	08001eef 	.word	0x08001eef
 8001970:	08001acd 	.word	0x08001acd
		//noop do fucking nothing
	break;

	case 'e':
		//echo
		respondframe("ECH:"+data);
 8001974:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001978:	f5a3 7030 	sub.w	r0, r3, #704	; 0x2c0
 800197c:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001980:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	49ac      	ldr	r1, [pc, #688]	; (8001c38 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a8>)
 8001988:	f001 fd4b 	bl	8003422 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 800198c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff fe77 	bl	8001684 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001996:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800199a:	4618      	mov	r0, r3
 800199c:	f005 fe07 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	break;
 80019a0:	e2c3      	b.n	8001f2a <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x69a>

	case 'd':
		//delay
		shotdelay=stof(data);
 80019a2:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80019a6:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 80019aa:	2100      	movs	r1, #0
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	f7ff fb65 	bl	800107c <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 80019b2:	eef0 7a40 	vmov.f32	s15, s0
 80019b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ba:	ee17 2a90 	vmov	r2, s15
 80019be:	4b9f      	ldr	r3, [pc, #636]	; (8001c3c <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3ac>)
 80019c0:	601a      	str	r2, [r3, #0]
		respondframe("DEL:"+std::to_string(shotdelay));
 80019c2:	4b9e      	ldr	r3, [pc, #632]	; (8001c3c <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3ac>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80019ca:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fb6d 	bl	80010b0 <_ZNSt7__cxx119to_stringEi>
 80019d6:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80019da:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 80019de:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80019e2:	4997      	ldr	r1, [pc, #604]	; (8001c40 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3b0>)
 80019e4:	4618      	mov	r0, r3
 80019e6:	f001 fd5c 	bl	80034a2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 80019ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fe48 	bl	8001684 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80019f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019f8:	4618      	mov	r0, r3
 80019fa:	f005 fdd8 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80019fe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a02:	4618      	mov	r0, r3
 8001a04:	f005 fdd3 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8001a08:	e28f      	b.n	8001f2a <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x69a>

	case 'm':
		//timemul
		timemul=stof(data);
 8001a0a:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001a0e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8001a12:	2100      	movs	r1, #0
 8001a14:	6818      	ldr	r0, [r3, #0]
 8001a16:	f7ff fb31 	bl	800107c <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 8001a1a:	eef0 7a40 	vmov.f32	s15, s0
 8001a1e:	4b89      	ldr	r3, [pc, #548]	; (8001c44 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3b4>)
 8001a20:	edc3 7a00 	vstr	s15, [r3]
		respondframe("MUL:"+std::to_string(timebetween));
 8001a24:	4b88      	ldr	r3, [pc, #544]	; (8001c48 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3b8>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001a2c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001a30:	4611      	mov	r1, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fb3c 	bl	80010b0 <_ZNSt7__cxx119to_stringEi>
 8001a38:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001a3c:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 8001a40:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001a44:	4981      	ldr	r1, [pc, #516]	; (8001c4c <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3bc>)
 8001a46:	4618      	mov	r0, r3
 8001a48:	f001 fd2b 	bl	80034a2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8001a4c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fe17 	bl	8001684 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001a56:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f005 fda7 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a60:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f005 fda2 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	break;
 8001a6a:	e25e      	b.n	8001f2a <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x69a>

	case 'b':
		//timebetween
		timebetween=stoi(data);
 8001a6c:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001a70:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8001a74:	220a      	movs	r2, #10
 8001a76:	2100      	movs	r1, #0
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	f7ff fae5 	bl	8001048 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	4a71      	ldr	r2, [pc, #452]	; (8001c48 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3b8>)
 8001a82:	6013      	str	r3, [r2, #0]
		respondframe("BEW:"+std::to_string(timebetween));
 8001a84:	4b70      	ldr	r3, [pc, #448]	; (8001c48 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3b8>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001a8c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8001a90:	4611      	mov	r1, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fb0c 	bl	80010b0 <_ZNSt7__cxx119to_stringEi>
 8001a98:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001a9c:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8001aa0:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001aa4:	496a      	ldr	r1, [pc, #424]	; (8001c50 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c0>)
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f001 fcfb 	bl	80034a2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8001aac:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fde7 	bl	8001684 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001ab6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001aba:	4618      	mov	r0, r3
 8001abc:	f005 fd77 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001ac0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f005 fd72 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	break;
 8001aca:	e22e      	b.n	8001f2a <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x69a>

	case 'v':
		//valvetime
		valvetime=stoi(data);
 8001acc:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001ad0:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8001ad4:	220a      	movs	r2, #10
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	f7ff fab5 	bl	8001048 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4a5c      	ldr	r2, [pc, #368]	; (8001c54 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c4>)
 8001ae2:	6013      	str	r3, [r2, #0]
		respondframe("GVO:"+std::to_string(valvetime));
 8001ae4:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c4>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001aec:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001af0:	4611      	mov	r1, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fadc 	bl	80010b0 <_ZNSt7__cxx119to_stringEi>
 8001af8:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001afc:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001b00:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b04:	4954      	ldr	r1, [pc, #336]	; (8001c58 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c8>)
 8001b06:	4618      	mov	r0, r3
 8001b08:	f001 fccb 	bl	80034a2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8001b0c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fdb7 	bl	8001684 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001b16:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f005 fd47 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001b20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b24:	4618      	mov	r0, r3
 8001b26:	f005 fd42 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	break;
 8001b2a:	e1fe      	b.n	8001f2a <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x69a>

	case 's':
		//sparktime
		sparktime=stoi(data);
 8001b2c:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001b30:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8001b34:	220a      	movs	r2, #10
 8001b36:	2100      	movs	r1, #0
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	f7ff fa85 	bl	8001048 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a46      	ldr	r2, [pc, #280]	; (8001c5c <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3cc>)
 8001b42:	6013      	str	r3, [r2, #0]
		respondframe("SPT:"+std::to_string(sparktime));
 8001b44:	4b45      	ldr	r3, [pc, #276]	; (8001c5c <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3cc>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001b4c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b50:	4611      	mov	r1, r2
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff faac 	bl	80010b0 <_ZNSt7__cxx119to_stringEi>
 8001b58:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001b5c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001b60:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001b64:	493e      	ldr	r1, [pc, #248]	; (8001c60 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3d0>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f001 fc9b 	bl	80034a2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8001b6c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fd87 	bl	8001684 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001b76:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f005 fd17 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001b80:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b84:	4618      	mov	r0, r3
 8001b86:	f005 fd12 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	break;
 8001b8a:	e1ce      	b.n	8001f2a <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x69a>

	case 'r':
		resettimevals();
 8001b8c:	f7ff fe56 	bl	800183c <_Z13resettimevalsv>
		respondframe("RESET");
 8001b90:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001b94:	4618      	mov	r0, r3
 8001b96:	f005 fb19 	bl	80071cc <_ZNSaIcEC1Ev>
 8001b9a:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8001b9e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001ba2:	4930      	ldr	r1, [pc, #192]	; (8001c64 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3d4>)
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f005 ffdd 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001baa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fd68 	bl	8001684 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001bb4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f005 fcf8 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001bbe:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f005 fb04 	bl	80071d0 <_ZNSaIcED1Ev>
		//reset
	break;
 8001bc8:	e1af      	b.n	8001f2a <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x69a>
	case 'c':

		//custom - output string is respstr
		respstr="DEBUG:CUSTOM STATEMENTS UNDEFINED YET\r\n";
 8001bca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bce:	4926      	ldr	r1, [pc, #152]	; (8001c68 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3d8>)
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f005 fe74 	bl	80078be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		//respondframe("CST:"+respstr);
		USART_send(respstr);
 8001bd6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001bda:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001bde:	4611      	mov	r1, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f005 ff8b 	bl	8007afc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001be6:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fab6 	bl	800115c <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001bf0:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f005 fcda 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		respondframe("CMDERR");
 8001bfa:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f005 fae4 	bl	80071cc <_ZNSaIcEC1Ev>
 8001c04:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8001c08:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001c0c:	4917      	ldr	r1, [pc, #92]	; (8001c6c <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3dc>)
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f005 ffa8 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001c14:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fd33 	bl	8001684 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001c1e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001c22:	4618      	mov	r0, r3
 8001c24:	f005 fcc3 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001c28:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f005 facf 	bl	80071d0 <_ZNSaIcED1Ev>
		//TODO:ADD COMMANDS
	break;
 8001c32:	e17a      	b.n	8001f2a <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x69a>
 8001c34:	0800c458 	.word	0x0800c458
 8001c38:	0800c460 	.word	0x0800c460
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	0800c468 	.word	0x0800c468
 8001c44:	20000010 	.word	0x20000010
 8001c48:	20000004 	.word	0x20000004
 8001c4c:	0800c470 	.word	0x0800c470
 8001c50:	0800c478 	.word	0x0800c478
 8001c54:	20000008 	.word	0x20000008
 8001c58:	0800c480 	.word	0x0800c480
 8001c5c:	2000000c 	.word	0x2000000c
 8001c60:	0800c488 	.word	0x0800c488
 8001c64:	0800c490 	.word	0x0800c490
 8001c68:	0800c498 	.word	0x0800c498
 8001c6c:	0800c4c0 	.word	0x0800c4c0
	case 'a':
		//DMAbufferavearage
		snprintf(str1,10,"%f",c1avg);
 8001c70:	4bb2      	ldr	r3, [pc, #712]	; (8001f3c <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6ac>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fc87 	bl	8000588 <__aeabi_f2d>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	f107 0020 	add.w	r0, r7, #32
 8001c82:	e9cd 2300 	strd	r2, r3, [sp]
 8001c86:	4aae      	ldr	r2, [pc, #696]	; (8001f40 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6b0>)
 8001c88:	210a      	movs	r1, #10
 8001c8a:	f007 fe47 	bl	800991c <sniprintf>
		snprintf(str2,10,"%f",c2avg);
 8001c8e:	4bad      	ldr	r3, [pc, #692]	; (8001f44 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6b4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fc78 	bl	8000588 <__aeabi_f2d>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	f107 000c 	add.w	r0, r7, #12
 8001ca0:	e9cd 2300 	strd	r2, r3, [sp]
 8001ca4:	4aa6      	ldr	r2, [pc, #664]	; (8001f40 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6b0>)
 8001ca6:	210a      	movs	r1, #10
 8001ca8:	f007 fe38 	bl	800991c <sniprintf>
		respondframe("AVG:"+(std::string)str1+":"+(std::string)str2);
 8001cac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f005 fa8b 	bl	80071cc <_ZNSaIcEC1Ev>
 8001cb6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cba:	f107 0120 	add.w	r1, r7, #32
 8001cbe:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f005 ff4e 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001cc8:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001ccc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001cd0:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8001cd4:	499c      	ldr	r1, [pc, #624]	; (8001f48 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6b8>)
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f001 fbe3 	bl	80034a2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8001cdc:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001ce0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ce4:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
 8001ce8:	4a98      	ldr	r2, [pc, #608]	; (8001f4c <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6bc>)
 8001cea:	4618      	mov	r0, r3
 8001cec:	f001 fbf1 	bl	80034d2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001cf0:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f005 fa69 	bl	80071cc <_ZNSaIcEC1Ev>
 8001cfa:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8001cfe:	f107 010c 	add.w	r1, r7, #12
 8001d02:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001d06:	4618      	mov	r0, r3
 8001d08:	f005 ff2c 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001d0c:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001d10:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001d14:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8001d18:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f001 fc06 	bl	800352e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8001d22:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fcac 	bl	8001684 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001d2c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001d30:	4618      	mov	r0, r3
 8001d32:	f005 fc3c 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001d36:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f005 fc37 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001d40:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8001d44:	4618      	mov	r0, r3
 8001d46:	f005 fa43 	bl	80071d0 <_ZNSaIcED1Ev>
 8001d4a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f005 fc2d 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001d54:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f005 fc28 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001d5e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f005 fc23 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f005 fa2f 	bl	80071d0 <_ZNSaIcED1Ev>

	break;
 8001d72:	e0da      	b.n	8001f2a <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x69a>
	case 'i':
		//DMAbuffermean
		snprintf(str1,10,"%f",c1med);
 8001d74:	4b76      	ldr	r3, [pc, #472]	; (8001f50 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6c0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fc05 	bl	8000588 <__aeabi_f2d>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	f107 0020 	add.w	r0, r7, #32
 8001d86:	e9cd 2300 	strd	r2, r3, [sp]
 8001d8a:	4a6d      	ldr	r2, [pc, #436]	; (8001f40 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6b0>)
 8001d8c:	210a      	movs	r1, #10
 8001d8e:	f007 fdc5 	bl	800991c <sniprintf>
		snprintf(str2,10,"%f",c2med);
 8001d92:	4b70      	ldr	r3, [pc, #448]	; (8001f54 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6c4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fbf6 	bl	8000588 <__aeabi_f2d>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	f107 000c 	add.w	r0, r7, #12
 8001da4:	e9cd 2300 	strd	r2, r3, [sp]
 8001da8:	4a65      	ldr	r2, [pc, #404]	; (8001f40 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6b0>)
 8001daa:	210a      	movs	r1, #10
 8001dac:	f007 fdb6 	bl	800991c <sniprintf>
		respondframe("MED:"+(std::string)str1+":"+(std::string)str2);
 8001db0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001db4:	4618      	mov	r0, r3
 8001db6:	f005 fa09 	bl	80071cc <_ZNSaIcEC1Ev>
 8001dba:	f507 7222 	add.w	r2, r7, #648	; 0x288
 8001dbe:	f107 0120 	add.w	r1, r7, #32
 8001dc2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f005 fecc 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001dcc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001dd0:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8001dd4:	4960      	ldr	r1, [pc, #384]	; (8001f58 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6c8>)
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f001 fb63 	bl	80034a2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8001ddc:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001de0:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8001de4:	4a59      	ldr	r2, [pc, #356]	; (8001f4c <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6bc>)
 8001de6:	4618      	mov	r0, r3
 8001de8:	f001 fb73 	bl	80034d2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001dec:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8001df0:	4618      	mov	r0, r3
 8001df2:	f005 f9eb 	bl	80071cc <_ZNSaIcEC1Ev>
 8001df6:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8001dfa:	f107 010c 	add.w	r1, r7, #12
 8001dfe:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8001e02:	4618      	mov	r0, r3
 8001e04:	f005 feae 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001e08:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001e0c:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8001e10:	f507 7110 	add.w	r1, r7, #576	; 0x240
 8001e14:	4618      	mov	r0, r3
 8001e16:	f001 fb8a 	bl	800352e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8001e1a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fc30 	bl	8001684 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001e24:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f005 fbc0 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001e2e:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8001e32:	4618      	mov	r0, r3
 8001e34:	f005 fbbb 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001e38:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f005 f9c7 	bl	80071d0 <_ZNSaIcED1Ev>
 8001e42:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001e46:	4618      	mov	r0, r3
 8001e48:	f005 fbb1 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001e4c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001e50:	4618      	mov	r0, r3
 8001e52:	f005 fbac 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001e56:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f005 fba7 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001e60:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001e64:	4618      	mov	r0, r3
 8001e66:	f005 f9b3 	bl	80071d0 <_ZNSaIcED1Ev>

	break;
 8001e6a:	e05e      	b.n	8001f2a <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x69a>
	case 'p':
		//Button Press counter
		respondframe("PSS:"+std::to_string(ButtonPresses));
 8001e6c:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6cc>)
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff f919 	bl	80010b0 <_ZNSt7__cxx119to_stringEi>
 8001e7e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001e82:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8001e86:	4936      	ldr	r1, [pc, #216]	; (8001f60 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6d0>)
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f001 fb0a 	bl	80034a2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8001e8e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fbf6 	bl	8001684 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001e98:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f005 fb86 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001ea2:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f005 fb81 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8001eac:	e03d      	b.n	8001f2a <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x69a>
	case 'f':
		FBpressed=1;
 8001eae:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6d4>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
		respondframe("FIRE!");
 8001eb4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f005 f987 	bl	80071cc <_ZNSaIcEC1Ev>
 8001ebe:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8001ec2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001ec6:	4928      	ldr	r1, [pc, #160]	; (8001f68 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6d8>)
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f005 fe4b 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001ece:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fbd6 	bl	8001684 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001ed8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8001edc:	4618      	mov	r0, r3
 8001ede:	f005 fb66 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001ee2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f005 f972 	bl	80071d0 <_ZNSaIcED1Ev>
		break;
 8001eec:	e01d      	b.n	8001f2a <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x69a>
	default:
		respondframe("CMDERR");
 8001eee:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f005 f96a 	bl	80071cc <_ZNSaIcEC1Ev>
 8001ef8:	f507 7243 	add.w	r2, r7, #780	; 0x30c
 8001efc:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8001f00:	491a      	ldr	r1, [pc, #104]	; (8001f6c <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6dc>)
 8001f02:	4618      	mov	r0, r3
 8001f04:	f005 fe2e 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001f08:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fbb9 	bl	8001684 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001f12:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8001f16:	4618      	mov	r0, r3
 8001f18:	f005 fb49 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001f1c:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8001f20:	4618      	mov	r0, r3
 8001f22:	f005 f955 	bl	80071d0 <_ZNSaIcED1Ev>
 8001f26:	e000      	b.n	8001f2a <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x69a>
	break;
 8001f28:	bf00      	nop

	}
}
 8001f2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f005 fb3d 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001f34:	f507 7744 	add.w	r7, r7, #784	; 0x310
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	2000231c 	.word	0x2000231c
 8001f40:	0800c4c8 	.word	0x0800c4c8
 8001f44:	20002320 	.word	0x20002320
 8001f48:	0800c4cc 	.word	0x0800c4cc
 8001f4c:	0800c4d4 	.word	0x0800c4d4
 8001f50:	20002324 	.word	0x20002324
 8001f54:	20002328 	.word	0x20002328
 8001f58:	0800c4d8 	.word	0x0800c4d8
 8001f5c:	2000232e 	.word	0x2000232e
 8001f60:	0800c4e0 	.word	0x0800c4e0
 8001f64:	2000232c 	.word	0x2000232c
 8001f68:	0800c4e8 	.word	0x0800c4e8
 8001f6c:	0800c4c0 	.word	0x0800c4c0

08001f70 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

//dekonstrukcja oraz analiza ramki
bool decodePAWNET(const std::string& message) {
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b0d5      	sub	sp, #340	; 0x154
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001f7a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f7e:	6018      	str	r0, [r3, #0]
	//USART_send("\r\nSTARTING DECODING: "+message+" \r\n");
    //zmienna,znajdywanie końca bo długość to długość danych po rozkodowaniu
    uint8_t endidx=message.find('|');
 8001f80:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001f84:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f88:	2200      	movs	r2, #0
 8001f8a:	217c      	movs	r1, #124	; 0x7c
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	f005 fd5d 	bl	8007a4c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
    if(endidx<=8){return false;}
 8001f98:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d801      	bhi.n	8001fa4 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	e17c      	b.n	800229e <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x32e>
    std::string fixedData;
 8001fa4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f005 facf 	bl	800754c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
    USART_send("\r\n");
 8001fae:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f005 f90a 	bl	80071cc <_ZNSaIcEC1Ev>
 8001fb8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001fbc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fc0:	49ba      	ldr	r1, [pc, #744]	; (80022ac <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x33c>)
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f005 fdce 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001fc8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff f8c5 	bl	800115c <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001fd2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f005 fae9 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001fdc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f005 f8f5 	bl	80071d0 <_ZNSaIcED1Ev>
    //dlugosc
    std::string lengthStr = message.substr(1, 2);
 8001fe6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001fea:	f5a3 7088 	sub.w	r0, r3, #272	; 0x110
 8001fee:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001ff2:	f5a3 71a6 	sub.w	r1, r3, #332	; 0x14c
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	6809      	ldr	r1, [r1, #0]
 8001ffc:	f005 fdea 	bl	8007bd4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
    for (char ch:lengthStr){//sprawdzanie czy aby na pewno pierwsze 2 znaki po start to cyfry dziesiętne
 8002000:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002004:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002008:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 800200c:	f005 fb00 	bl	8007610 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 8002010:	4602      	mov	r2, r0
 8002012:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002016:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8002020:	f005 fafa 	bl	8007618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 8002024:	4602      	mov	r2, r0
 8002026:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800202a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	e033      	b.n	800209a <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x12a>
 8002032:	f107 030c 	add.w	r3, r7, #12
 8002036:	4618      	mov	r0, r3
 8002038:	f001 f93d 	bl	80032b6 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800203c:	4603      	mov	r3, r0
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    			if (!(ch >= '0' && ch <= '9')) {
 8002044:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8002048:	2b2f      	cmp	r3, #47	; 0x2f
 800204a:	d903      	bls.n	8002054 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe4>
 800204c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8002050:	2b39      	cmp	r3, #57	; 0x39
 8002052:	d91d      	bls.n	8002090 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x120>
    	            respondframe("LENERR");
 8002054:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002058:	4618      	mov	r0, r3
 800205a:	f005 f8b7 	bl	80071cc <_ZNSaIcEC1Ev>
 800205e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002062:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002066:	4992      	ldr	r1, [pc, #584]	; (80022b0 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x340>)
 8002068:	4618      	mov	r0, r3
 800206a:	f005 fd7b 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800206e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fb06 	bl	8001684 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002078:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800207c:	4618      	mov	r0, r3
 800207e:	f005 fa96 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002082:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002086:	4618      	mov	r0, r3
 8002088:	f005 f8a2 	bl	80071d0 <_ZNSaIcED1Ev>
    	            return false;
 800208c:	2400      	movs	r4, #0
 800208e:	e0fc      	b.n	800228a <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x31a>
    for (char ch:lengthStr){//sprawdzanie czy aby na pewno pierwsze 2 znaki po start to cyfry dziesiętne
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	4618      	mov	r0, r3
 8002096:	f001 f8fe 	bl	8003296 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 800209a:	f107 0208 	add.w	r2, r7, #8
 800209e:	f107 030c 	add.w	r3, r7, #12
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f001 f8de 	bl	8003266 <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1c0      	bne.n	8002032 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc2>
    	        }
    }
    size_t length = std::stoi(lengthStr)+1;//długość
 80020b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020b4:	220a      	movs	r2, #10
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe ffc5 	bl	8001048 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 80020be:	4603      	mov	r3, r0
 80020c0:	3301      	adds	r3, #1
 80020c2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

    //komenda i dane
    char command = message[3];
 80020c6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80020ca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80020ce:	2103      	movs	r1, #3
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	f005 fad9 	bl	8007688 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80020d6:	4603      	mov	r3, r0
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
    std::string data=message.substr(4,endidx-8);
 80020de:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 80020e2:	3b08      	subs	r3, #8
 80020e4:	461a      	mov	r2, r3
 80020e6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80020ea:	f5a3 7094 	sub.w	r0, r3, #296	; 0x128
 80020ee:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80020f2:	f5a3 71a6 	sub.w	r1, r3, #332	; 0x14c
 80020f6:	4613      	mov	r3, r2
 80020f8:	2204      	movs	r2, #4
 80020fa:	6809      	ldr	r1, [r1, #0]
 80020fc:	f005 fd6a 	bl	8007bd4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>

    //rekonstrukcja danych z escapeowania
    fixedData=reconstructdata(data);
 8002100:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002104:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002108:	4611      	mov	r1, r2
 800210a:	4618      	mov	r0, r3
 800210c:	f005 fcf6 	bl	8007afc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002110:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002114:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff f993 	bl	8001446 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002120:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002124:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002128:	4611      	mov	r1, r2
 800212a:	4618      	mov	r0, r3
 800212c:	f005 fa45 	bl	80075ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8002130:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002134:	4618      	mov	r0, r3
 8002136:	f005 fa3a 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800213a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800213e:	4618      	mov	r0, r3
 8002140:	f005 fa35 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    //USART_send("\r\nDEBUG:RECONSTRUCTED DATA: "+fixedData+" \r\n");

    //porównywanie długości danych zrekonstruowanych z długością w ramce
    if(length!=fixedData.length()){
 8002144:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002148:	4618      	mov	r0, r3
 800214a:	f005 fa6f 	bl	800762c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800214e:	4602      	mov	r2, r0
 8002150:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002154:	4293      	cmp	r3, r2
 8002156:	bf14      	ite	ne
 8002158:	2301      	movne	r3, #1
 800215a:	2300      	moveq	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d01d      	beq.n	800219e <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22e>
    	respondframe("LENERR");
 8002162:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002166:	4618      	mov	r0, r3
 8002168:	f005 f830 	bl	80071cc <_ZNSaIcEC1Ev>
 800216c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002170:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002174:	494e      	ldr	r1, [pc, #312]	; (80022b0 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x340>)
 8002176:	4618      	mov	r0, r3
 8002178:	f005 fcf4 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800217c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff fa7f 	bl	8001684 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002186:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800218a:	4618      	mov	r0, r3
 800218c:	f005 fa0f 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002190:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002194:	4618      	mov	r0, r3
 8002196:	f005 f81b 	bl	80071d0 <_ZNSaIcED1Ev>
    	//USART_send("\r\nLENERR\r\n DEBUGGIVEN "+std::to_string(length)+" != GATHERED "+std::to_string(fixedData.length())+"\r\n");
    	return false;
 800219a:	2400      	movs	r4, #0
 800219c:	e070      	b.n	8002280 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x310>
    }
    //checksuma
    std::string checksumString="0x"+message.substr(endidx-4,4);//0x dodane aby stoi z automatu konwertował na hex
 800219e:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 80021a2:	3b04      	subs	r3, #4
 80021a4:	461a      	mov	r2, r3
 80021a6:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 80021aa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80021ae:	f5a3 71a6 	sub.w	r1, r3, #332	; 0x14c
 80021b2:	2304      	movs	r3, #4
 80021b4:	6809      	ldr	r1, [r1, #0]
 80021b6:	f005 fd0d 	bl	8007bd4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 80021ba:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80021be:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80021c2:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 80021c6:	493b      	ldr	r1, [pc, #236]	; (80022b4 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x344>)
 80021c8:	4618      	mov	r0, r3
 80021ca:	f001 f96a 	bl	80034a2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 80021ce:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80021d2:	4618      	mov	r0, r3
 80021d4:	f005 f9eb 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    uint16_t packetchecksum=static_cast<uint16_t>(std::stoi(checksumString, 0, 0));
 80021d8:	f107 0310 	add.w	r3, r7, #16
 80021dc:	2200      	movs	r2, #0
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe ff31 	bl	8001048 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 80021e6:	4603      	mov	r3, r0
 80021e8:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140
    //USART_send("DEBUG:ChecksumGathered: "+std::to_string(packetchecksum)+"\r\n");

    //sprawdzanie poprawnosci checksumy
      if(calculateCRC16(command+fixedData)==packetchecksum){
 80021ec:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80021f0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80021f4:	f897 1143 	ldrb.w	r1, [r7, #323]	; 0x143
 80021f8:	4618      	mov	r0, r3
 80021fa:	f001 fa13 	bl	8003624 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EES5_RKS8_>
 80021fe:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff f8be 	bl	8001384 <_Z14calculateCRC16RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002208:	4603      	mov	r3, r0
 800220a:	461a      	mov	r2, r3
 800220c:	f8b7 3140 	ldrh.w	r3, [r7, #320]	; 0x140
 8002210:	4293      	cmp	r3, r2
 8002212:	bf0c      	ite	eq
 8002214:	2301      	moveq	r3, #1
 8002216:	2300      	movne	r3, #0
 8002218:	b2dc      	uxtb	r4, r3
 800221a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800221e:	4618      	mov	r0, r3
 8002220:	f005 f9c5 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002224:	2c00      	cmp	r4, #0
 8002226:	d009      	beq.n	800223c <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2cc>
    	//sprawdzanie komendy i danych po potwierdzeniu zgodności
    	processcmd(command, fixedData);
 8002228:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800222c:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fb2c 	bl	8001890 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    	return true;
 8002238:	2401      	movs	r4, #1
 800223a:	e01c      	b.n	8002276 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x306>
    }else{//błąd w obliczeniach checksumy
    	respondframe("CVCERR");
 800223c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8002240:	4618      	mov	r0, r3
 8002242:	f004 ffc3 	bl	80071cc <_ZNSaIcEC1Ev>
 8002246:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 800224a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800224e:	491a      	ldr	r1, [pc, #104]	; (80022b8 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x348>)
 8002250:	4618      	mov	r0, r3
 8002252:	f005 fc87 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002256:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fa12 	bl	8001684 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002260:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8002264:	4618      	mov	r0, r3
 8002266:	f005 f9a2 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800226a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800226e:	4618      	mov	r0, r3
 8002270:	f004 ffae 	bl	80071d0 <_ZNSaIcED1Ev>
    	return false;
 8002274:	2400      	movs	r4, #0
    }
}
 8002276:	f107 0310 	add.w	r3, r7, #16
 800227a:	4618      	mov	r0, r3
 800227c:	f005 f997 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002280:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002284:	4618      	mov	r0, r3
 8002286:	f005 f992 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800228a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800228e:	4618      	mov	r0, r3
 8002290:	f005 f98d 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002294:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002298:	4618      	mov	r0, r3
 800229a:	f005 f988 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800229e:	4623      	mov	r3, r4
 80022a0:	4618      	mov	r0, r3
 80022a2:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd90      	pop	{r4, r7, pc}
 80022aa:	bf00      	nop
 80022ac:	0800c4f0 	.word	0x0800c4f0
 80022b0:	0800c4f4 	.word	0x0800c4f4
 80022b4:	0800c4fc 	.word	0x0800c4fc
 80022b8:	0800c500 	.word	0x0800c500

080022bc <_Z22ADC_DMA_updateAveragesv>:
//Powyżej ramka, poniżej DMA//TODO:
//--------//
float POTBufferMin,POTBufferMax,POTBufNormAvg;
uint16_t chn1=0,chn2=0,ADC_DMA_Buffer[ADC_DMABUFFERSIZE*2]={0};
bool convcompl=false;
void ADC_DMA_updateAverages() {
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
	uint16_t valid_entries=0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	81fb      	strh	r3, [r7, #14]
	float tmpc1avg,tmpc2avg;
    for (int i = 0; i < ADC_DMABUFFERSIZE-1 * 2; i += 2) {
 80022c6:	2300      	movs	r3, #0
 80022c8:	603b      	str	r3, [r7, #0]
 80022ca:	e02f      	b.n	800232c <_Z22ADC_DMA_updateAveragesv+0x70>
    	if (ADC_DMA_Buffer[i] == 0 || ADC_DMA_Buffer[i + 1] == 0) {
 80022cc:	4a2c      	ldr	r2, [pc, #176]	; (8002380 <_Z22ADC_DMA_updateAveragesv+0xc4>)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d02d      	beq.n	8002334 <_Z22ADC_DMA_updateAveragesv+0x78>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	3301      	adds	r3, #1
 80022dc:	4a28      	ldr	r2, [pc, #160]	; (8002380 <_Z22ADC_DMA_updateAveragesv+0xc4>)
 80022de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d026      	beq.n	8002334 <_Z22ADC_DMA_updateAveragesv+0x78>
            break;//zakończ jeżeli którykolwiek z kanałów ma 0
        }

        tmpc1avg += ADC_DMA_Buffer[i]; //dodawanie do średniej.
 80022e6:	4a26      	ldr	r2, [pc, #152]	; (8002380 <_Z22ADC_DMA_updateAveragesv+0xc4>)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022ee:	ee07 3a90 	vmov	s15, r3
 80022f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80022fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022fe:	edc7 7a02 	vstr	s15, [r7, #8]
        tmpc2avg += ADC_DMA_Buffer[i + 1];
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	3301      	adds	r3, #1
 8002306:	4a1e      	ldr	r2, [pc, #120]	; (8002380 <_Z22ADC_DMA_updateAveragesv+0xc4>)
 8002308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800230c:	ee07 3a90 	vmov	s15, r3
 8002310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002314:	ed97 7a01 	vldr	s14, [r7, #4]
 8002318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800231c:	edc7 7a01 	vstr	s15, [r7, #4]
        valid_entries++;
 8002320:	89fb      	ldrh	r3, [r7, #14]
 8002322:	3301      	adds	r3, #1
 8002324:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < ADC_DMABUFFERSIZE-1 * 2; i += 2) {
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	3302      	adds	r3, #2
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8002332:	dbcb      	blt.n	80022cc <_Z22ADC_DMA_updateAveragesv+0x10>

    }

    // nie dziel przez zero lol
    if (valid_entries > 0) {
 8002334:	89fb      	ldrh	r3, [r7, #14]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d01b      	beq.n	8002372 <_Z22ADC_DMA_updateAveragesv+0xb6>
        tmpc1avg /= valid_entries;
 800233a:	89fb      	ldrh	r3, [r7, #14]
 800233c:	ee07 3a90 	vmov	s15, r3
 8002340:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002344:	edd7 6a02 	vldr	s13, [r7, #8]
 8002348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800234c:	edc7 7a02 	vstr	s15, [r7, #8]
        tmpc2avg /= valid_entries;
 8002350:	89fb      	ldrh	r3, [r7, #14]
 8002352:	ee07 3a90 	vmov	s15, r3
 8002356:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800235a:	edd7 6a01 	vldr	s13, [r7, #4]
 800235e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002362:	edc7 7a01 	vstr	s15, [r7, #4]
        c1avg=tmpc1avg;
 8002366:	4a07      	ldr	r2, [pc, #28]	; (8002384 <_Z22ADC_DMA_updateAveragesv+0xc8>)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	6013      	str	r3, [r2, #0]
        c2avg=tmpc2avg;
 800236c:	4a06      	ldr	r2, [pc, #24]	; (8002388 <_Z22ADC_DMA_updateAveragesv+0xcc>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6013      	str	r3, [r2, #0]
    }
}
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	2000233c 	.word	0x2000233c
 8002384:	2000231c 	.word	0x2000231c
 8002388:	20002320 	.word	0x20002320

0800238c <_Z13compareUint16PKvS0_>:
int compareUint16(const void* a, const void* b) {
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
    return (*(uint16_t*)a - *(uint16_t*)b);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	461a      	mov	r2, r3
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	1ad3      	subs	r3, r2, r3
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <_Z21extractAndSortChannelPti>:
int extractAndSortChannel(uint16_t* channel_buffer, int channel_index) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
    int extracted_entries = 0;//zapamiętaj ile jest prawidłowych wartości
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < ADC_DMABUFFERSIZE; ++i) {
 80023be:	2300      	movs	r3, #0
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	e018      	b.n	80023f6 <_Z21extractAndSortChannelPti+0x46>
        channel_buffer[i] = ADC_DMA_Buffer[i * 2 + channel_index];
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	005a      	lsls	r2, r3, #1
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	441a      	add	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	440b      	add	r3, r1
 80023d4:	490f      	ldr	r1, [pc, #60]	; (8002414 <_Z21extractAndSortChannelPti+0x64>)
 80023d6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80023da:	801a      	strh	r2, [r3, #0]
        if (channel_buffer[i] != 0) {
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	4413      	add	r3, r2
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <_Z21extractAndSortChannelPti+0x40>
            extracted_entries++;//zlicz ilość prawidłowych nie zerowych wpisów
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	3301      	adds	r3, #1
 80023ee:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < ADC_DMABUFFERSIZE; ++i) {
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	3301      	adds	r3, #1
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023fc:	dbe2      	blt.n	80023c4 <_Z21extractAndSortChannelPti+0x14>
        }
    }
    // sortowanie
    qsort(channel_buffer, extracted_entries, sizeof(uint16_t), compareUint16);
 80023fe:	68f9      	ldr	r1, [r7, #12]
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <_Z21extractAndSortChannelPti+0x68>)
 8002402:	2202      	movs	r2, #2
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f006 fc11 	bl	8008c2c <qsort>
    return extracted_entries;
 800240a:	68fb      	ldr	r3, [r7, #12]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	2000233c 	.word	0x2000233c
 8002418:	0800238d 	.word	0x0800238d

0800241c <_Z13calculateMeanPti>:


int calculateMean(uint16_t* sorted_buffer, int entries) {
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
    if (entries == 0) {
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <_Z13calculateMeanPti+0x14>
        return 0;  // Avoid division by zero
 800242c:	2300      	movs	r3, #0
 800242e:	e017      	b.n	8002460 <_Z13calculateMeanPti+0x44>
    }
    return (sorted_buffer[entries / 2 - 1] + sorted_buffer[entries / 2]) / 2;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	0fda      	lsrs	r2, r3, #31
 8002434:	4413      	add	r3, r2
 8002436:	105b      	asrs	r3, r3, #1
 8002438:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800243c:	3b01      	subs	r3, #1
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	4413      	add	r3, r2
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	4619      	mov	r1, r3
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	0fda      	lsrs	r2, r3, #31
 800244c:	4413      	add	r3, r2
 800244e:	105b      	asrs	r3, r3, #1
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	440b      	add	r3, r1
 800245a:	0fda      	lsrs	r2, r3, #31
 800245c:	4413      	add	r3, r2
 800245e:	105b      	asrs	r3, r3, #1
}
 8002460:	4618      	mov	r0, r3
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <_Z19ADC_DMA_updateMeansv>:
void ADC_DMA_updateMeans() {
 800246c:	b580      	push	{r7, lr}
 800246e:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 8002472:	af00      	add	r7, sp, #0
		uint16_t channel1_buffer[ADC_DMABUFFERSIZE];
	    uint16_t channel2_buffer[ADC_DMABUFFERSIZE];

	    int entries_channel1 = extractAndSortChannel(channel1_buffer, 0);
 8002474:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002478:	2100      	movs	r1, #0
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff ff98 	bl	80023b0 <_Z21extractAndSortChannelPti>
 8002480:	f8c7 0804 	str.w	r0, [r7, #2052]	; 0x804
	    int entries_channel2 = extractAndSortChannel(channel2_buffer, 1);
 8002484:	463b      	mov	r3, r7
 8002486:	2101      	movs	r1, #1
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff91 	bl	80023b0 <_Z21extractAndSortChannelPti>
 800248e:	f8c7 0800 	str.w	r0, [r7, #2048]	; 0x800

	    // Calculate mean for each channel using the middle values
	    c1med = calculateMean(channel1_buffer, entries_channel1);
 8002492:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002496:	f8d7 1804 	ldr.w	r1, [r7, #2052]	; 0x804
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff ffbe 	bl	800241c <_Z13calculateMeanPti>
 80024a0:	ee07 0a90 	vmov	s15, r0
 80024a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a8:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <_Z19ADC_DMA_updateMeansv+0x68>)
 80024aa:	edc3 7a00 	vstr	s15, [r3]
	    c2med = calculateMean(channel2_buffer, entries_channel2);
 80024ae:	463b      	mov	r3, r7
 80024b0:	f8d7 1800 	ldr.w	r1, [r7, #2048]	; 0x800
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ffb1 	bl	800241c <_Z13calculateMeanPti>
 80024ba:	ee07 0a90 	vmov	s15, r0
 80024be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <_Z19ADC_DMA_updateMeansv+0x6c>)
 80024c4:	edc3 7a00 	vstr	s15, [r3]
}
 80024c8:	bf00      	nop
 80024ca:	f607 0708 	addw	r7, r7, #2056	; 0x808
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20002324 	.word	0x20002324
 80024d8:	20002328 	.word	0x20002328

080024dc <_Z15normaliseADCOutv>:
void normaliseADCOut(){
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
	POTBufNormAvg=(c1avg-POTBufferMin)/(POTBufferMax-POTBufferMin);
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <_Z15normaliseADCOutv+0x38>)
 80024e2:	ed93 7a00 	vldr	s14, [r3]
 80024e6:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <_Z15normaliseADCOutv+0x3c>)
 80024e8:	edd3 7a00 	vldr	s15, [r3]
 80024ec:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024f0:	4b0a      	ldr	r3, [pc, #40]	; (800251c <_Z15normaliseADCOutv+0x40>)
 80024f2:	ed93 7a00 	vldr	s14, [r3]
 80024f6:	4b08      	ldr	r3, [pc, #32]	; (8002518 <_Z15normaliseADCOutv+0x3c>)
 80024f8:	edd3 7a00 	vldr	s15, [r3]
 80024fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <_Z15normaliseADCOutv+0x44>)
 8002506:	edc3 7a00 	vstr	s15, [r3]
}
 800250a:	bf00      	nop
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	2000231c 	.word	0x2000231c
 8002518:	20002330 	.word	0x20002330
 800251c:	20002334 	.word	0x20002334
 8002520:	20002338 	.word	0x20002338

08002524 <_Z14ADC_DMA_UPDATEv>:
bool ReadyToUpdateAvg=false;
void ADC_DMA_UPDATE(){
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
	ADC_DMA_updateAverages();
 8002528:	f7ff fec8 	bl	80022bc <_Z22ADC_DMA_updateAveragesv>
	if(convcompl){
 800252c:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <_Z14ADC_DMA_UPDATEv+0x7c>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d02f      	beq.n	8002594 <_Z14ADC_DMA_UPDATEv+0x70>
		if(c1avg<POTBufferMin)POTBufferMin=c1avg;
 8002534:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <_Z14ADC_DMA_UPDATEv+0x80>)
 8002536:	ed93 7a00 	vldr	s14, [r3]
 800253a:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <_Z14ADC_DMA_UPDATEv+0x84>)
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002548:	d503      	bpl.n	8002552 <_Z14ADC_DMA_UPDATEv+0x2e>
 800254a:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <_Z14ADC_DMA_UPDATEv+0x80>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a16      	ldr	r2, [pc, #88]	; (80025a8 <_Z14ADC_DMA_UPDATEv+0x84>)
 8002550:	6013      	str	r3, [r2, #0]
		if(c1avg>POTBufferMax)POTBufferMax=c1avg;
 8002552:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <_Z14ADC_DMA_UPDATEv+0x80>)
 8002554:	ed93 7a00 	vldr	s14, [r3]
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <_Z14ADC_DMA_UPDATEv+0x88>)
 800255a:	edd3 7a00 	vldr	s15, [r3]
 800255e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002566:	dd03      	ble.n	8002570 <_Z14ADC_DMA_UPDATEv+0x4c>
 8002568:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <_Z14ADC_DMA_UPDATEv+0x80>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a0f      	ldr	r2, [pc, #60]	; (80025ac <_Z14ADC_DMA_UPDATEv+0x88>)
 800256e:	6013      	str	r3, [r2, #0]
		if(POTBufferMax>4100)POTBufferMax=c1avg;
 8002570:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <_Z14ADC_DMA_UPDATEv+0x88>)
 8002572:	edd3 7a00 	vldr	s15, [r3]
 8002576:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80025b0 <_Z14ADC_DMA_UPDATEv+0x8c>
 800257a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800257e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002582:	dd03      	ble.n	800258c <_Z14ADC_DMA_UPDATEv+0x68>
 8002584:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <_Z14ADC_DMA_UPDATEv+0x80>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a08      	ldr	r2, [pc, #32]	; (80025ac <_Z14ADC_DMA_UPDATEv+0x88>)
 800258a:	6013      	str	r3, [r2, #0]
		normaliseADCOut();
 800258c:	f7ff ffa6 	bl	80024dc <_Z15normaliseADCOutv>
		ADC_DMA_updateMeans();
 8002590:	f7ff ff6c 	bl	800246c <_Z19ADC_DMA_updateMeansv>
	}
	ReadyToUpdateAvg=false;
 8002594:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <_Z14ADC_DMA_UPDATEv+0x90>)
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20002b3c 	.word	0x20002b3c
 80025a4:	2000231c 	.word	0x2000231c
 80025a8:	20002330 	.word	0x20002330
 80025ac:	20002334 	.word	0x20002334
 80025b0:	45802000 	.word	0x45802000
 80025b4:	20002b3d 	.word	0x20002b3d

080025b8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	ReadyToUpdateAvg=true;
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_ADC_ConvCpltCallback+0x20>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	701a      	strb	r2, [r3, #0]

	convcompl=true;//doszło do konwersji na całej długości bufora
 80025c6:	4b05      	ldr	r3, [pc, #20]	; (80025dc <HAL_ADC_ConvCpltCallback+0x24>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	20002b3d 	.word	0x20002b3d
 80025dc:	20002b3c 	.word	0x20002b3c

080025e0 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	ReadyToUpdateAvg=true;
 80025e8:	4b14      	ldr	r3, [pc, #80]	; (800263c <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	701a      	strb	r2, [r3, #0]
	if(!convcompl)POTBufferMin=ADC_DMA_Buffer[0];//inicjalizacja min max
 80025ee:	4b14      	ldr	r3, [pc, #80]	; (8002640 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	f083 0301 	eor.w	r3, r3, #1
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_ADC_ConvHalfCpltCallback+0x2e>
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	ee07 3a90 	vmov	s15, r3
 8002604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 800260a:	edc3 7a00 	vstr	s15, [r3]
	if(!convcompl)POTBufferMax=ADC_DMA_Buffer[0];
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	f083 0301 	eor.w	r3, r3, #1
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_ADC_ConvHalfCpltCallback+0x4e>
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	ee07 3a90 	vmov	s15, r3
 8002624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002628:	4b08      	ldr	r3, [pc, #32]	; (800264c <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 800262a:	edc3 7a00 	vstr	s15, [r3]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20002b3d 	.word	0x20002b3d
 8002640:	20002b3c 	.word	0x20002b3c
 8002644:	2000233c 	.word	0x2000233c
 8002648:	20002330 	.word	0x20002330
 800264c:	20002334 	.word	0x20002334

08002650 <_Z18hardcloseallvalvesv>:
//TODO:Powyżej DMA ADC, Poniżej GPIO EXTI
void hardcloseallvalves(){
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GV_GPIO_Port, GV_Pin, GPIO_PIN_RESET);
 8002654:	2200      	movs	r2, #0
 8002656:	2180      	movs	r1, #128	; 0x80
 8002658:	4807      	ldr	r0, [pc, #28]	; (8002678 <_Z18hardcloseallvalvesv+0x28>)
 800265a:	f002 ffeb 	bl	8005634 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OV_GPIO_Port, OV_Pin, GPIO_PIN_RESET);
 800265e:	2200      	movs	r2, #0
 8002660:	2140      	movs	r1, #64	; 0x40
 8002662:	4806      	ldr	r0, [pc, #24]	; (800267c <_Z18hardcloseallvalvesv+0x2c>)
 8002664:	f002 ffe6 	bl	8005634 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SP_GPIO_Port, SP_Pin, GPIO_PIN_RESET);
 8002668:	2200      	movs	r2, #0
 800266a:	2180      	movs	r1, #128	; 0x80
 800266c:	4804      	ldr	r0, [pc, #16]	; (8002680 <_Z18hardcloseallvalvesv+0x30>)
 800266e:	f002 ffe1 	bl	8005634 <HAL_GPIO_WritePin>
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40020800 	.word	0x40020800
 800267c:	40020400 	.word	0x40020400
 8002680:	40020000 	.word	0x40020000

08002684 <HAL_GPIO_EXTI_Callback>:
enum firingstateenum{GasValvesOpen,WaitForGasMix,SparkPlugIgnite,FiringDelay};
firingstateenum firingstate=GasValvesOpen;
float firingcounter=1;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	80fb      	strh	r3, [r7, #6]
	ButtonPresses++;//zlicz nacisniecia
 800268e:	4b28      	ldr	r3, [pc, #160]	; (8002730 <HAL_GPIO_EXTI_Callback+0xac>)
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	3301      	adds	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	4b26      	ldr	r3, [pc, #152]	; (8002730 <HAL_GPIO_EXTI_Callback+0xac>)
 8002698:	801a      	strh	r2, [r3, #0]
	switch(GPIO_Pin){//co wykonalo przerwanie
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_EXTI_Callback+0x26>
 80026a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a6:	d018      	beq.n	80026da <HAL_GPIO_EXTI_Callback+0x56>
				firingcounter=1;//reset FC
				HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);//ponowne odpalenie przerwań
				}
		break;
	}
}
 80026a8:	e03d      	b.n	8002726 <HAL_GPIO_EXTI_Callback+0xa2>
		if(HAL_GPIO_ReadPin(FB_GPIO_Port, FB_Pin)==GPIO_PIN_SET){
 80026aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026ae:	4821      	ldr	r0, [pc, #132]	; (8002734 <HAL_GPIO_EXTI_Callback+0xb0>)
 80026b0:	f002 ffa8 	bl	8005604 <HAL_GPIO_ReadPin>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	bf0c      	ite	eq
 80026ba:	2301      	moveq	r3, #1
 80026bc:	2300      	movne	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d02d      	beq.n	8002720 <HAL_GPIO_EXTI_Callback+0x9c>
			FBpressed=1;
 80026c4:	4b1c      	ldr	r3, [pc, #112]	; (8002738 <HAL_GPIO_EXTI_Callback+0xb4>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	701a      	strb	r2, [r3, #0]
			firingcounter=1;
 80026ca:	4b1c      	ldr	r3, [pc, #112]	; (800273c <HAL_GPIO_EXTI_Callback+0xb8>)
 80026cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80026d0:	601a      	str	r2, [r3, #0]
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80026d2:	2017      	movs	r0, #23
 80026d4:	f002 f9e5 	bl	8004aa2 <HAL_NVIC_DisableIRQ>
		break;
 80026d8:	e022      	b.n	8002720 <HAL_GPIO_EXTI_Callback+0x9c>
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==GPIO_PIN_SET){
 80026da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026de:	4818      	ldr	r0, [pc, #96]	; (8002740 <HAL_GPIO_EXTI_Callback+0xbc>)
 80026e0:	f002 ff90 	bl	8005604 <HAL_GPIO_ReadPin>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	bf0c      	ite	eq
 80026ea:	2301      	moveq	r3, #1
 80026ec:	2300      	movne	r3, #0
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d017      	beq.n	8002724 <HAL_GPIO_EXTI_Callback+0xa0>
				hardcloseallvalves();//zamknij wszystko
 80026f4:	f7ff ffac 	bl	8002650 <_Z18hardcloseallvalvesv>
				LOCKpressed++;//nacisnięto lock
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_GPIO_EXTI_Callback+0xc0>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	4b10      	ldr	r3, [pc, #64]	; (8002744 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002702:	701a      	strb	r2, [r3, #0]
				FBpressed=0;//reset FBpressed;
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <HAL_GPIO_EXTI_Callback+0xb4>)
 8002706:	2200      	movs	r2, #0
 8002708:	701a      	strb	r2, [r3, #0]
				firingstate=GasValvesOpen;//reset FS
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <HAL_GPIO_EXTI_Callback+0xc4>)
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
				firingcounter=1;//reset FC
 8002710:	4b0a      	ldr	r3, [pc, #40]	; (800273c <HAL_GPIO_EXTI_Callback+0xb8>)
 8002712:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002716:	601a      	str	r2, [r3, #0]
				HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);//ponowne odpalenie przerwań
 8002718:	2017      	movs	r0, #23
 800271a:	f002 f9b4 	bl	8004a86 <HAL_NVIC_EnableIRQ>
		break;
 800271e:	e001      	b.n	8002724 <HAL_GPIO_EXTI_Callback+0xa0>
		break;
 8002720:	bf00      	nop
 8002722:	e000      	b.n	8002726 <HAL_GPIO_EXTI_Callback+0xa2>
		break;
 8002724:	bf00      	nop
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	2000232e 	.word	0x2000232e
 8002734:	40020000 	.word	0x40020000
 8002738:	2000232c 	.word	0x2000232c
 800273c:	20000014 	.word	0x20000014
 8002740:	40020800 	.word	0x40020800
 8002744:	2000232d 	.word	0x2000232d
 8002748:	20002b3e 	.word	0x20002b3e

0800274c <_Z17switchfiringstatev>:
float interval=GVOTIME;
//todo: Powyżej GPIO EXTI, Poniżej kod programu
void switchfiringstate(){
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
	switch(firingstate){
 8002750:	4b4d      	ldr	r3, [pc, #308]	; (8002888 <_Z17switchfiringstatev+0x13c>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b03      	cmp	r3, #3
 8002756:	f200 808f 	bhi.w	8002878 <_Z17switchfiringstatev+0x12c>
 800275a:	a201      	add	r2, pc, #4	; (adr r2, 8002760 <_Z17switchfiringstatev+0x14>)
 800275c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002760:	08002771 	.word	0x08002771
 8002764:	0800279f 	.word	0x0800279f
 8002768:	080027cd 	.word	0x080027cd
 800276c:	080027f1 	.word	0x080027f1
			case GasValvesOpen://otwarte zawory gazu
				HAL_GPIO_WritePin(GV_GPIO_Port, GV_Pin, GPIO_PIN_SET);
 8002770:	2201      	movs	r2, #1
 8002772:	2180      	movs	r1, #128	; 0x80
 8002774:	4845      	ldr	r0, [pc, #276]	; (800288c <_Z17switchfiringstatev+0x140>)
 8002776:	f002 ff5d 	bl	8005634 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OV_GPIO_Port, OV_Pin, GPIO_PIN_SET);
 800277a:	2201      	movs	r2, #1
 800277c:	2140      	movs	r1, #64	; 0x40
 800277e:	4844      	ldr	r0, [pc, #272]	; (8002890 <_Z17switchfiringstatev+0x144>)
 8002780:	f002 ff58 	bl	8005634 <HAL_GPIO_WritePin>
				interval=valvetime;
 8002784:	4b43      	ldr	r3, [pc, #268]	; (8002894 <_Z17switchfiringstatev+0x148>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	ee07 3a90 	vmov	s15, r3
 800278c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002790:	4b41      	ldr	r3, [pc, #260]	; (8002898 <_Z17switchfiringstatev+0x14c>)
 8002792:	edc3 7a00 	vstr	s15, [r3]
				firingstate=WaitForGasMix;
 8002796:	4b3c      	ldr	r3, [pc, #240]	; (8002888 <_Z17switchfiringstatev+0x13c>)
 8002798:	2201      	movs	r2, #1
 800279a:	701a      	strb	r2, [r3, #0]
				break;
 800279c:	e072      	b.n	8002884 <_Z17switchfiringstatev+0x138>
			case WaitForGasMix://zamkniete zawory, czekanie na mieszanke
				HAL_GPIO_WritePin(GV_GPIO_Port, GV_Pin, GPIO_PIN_RESET);
 800279e:	2200      	movs	r2, #0
 80027a0:	2180      	movs	r1, #128	; 0x80
 80027a2:	483a      	ldr	r0, [pc, #232]	; (800288c <_Z17switchfiringstatev+0x140>)
 80027a4:	f002 ff46 	bl	8005634 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OV_GPIO_Port, OV_Pin, GPIO_PIN_RESET);
 80027a8:	2200      	movs	r2, #0
 80027aa:	2140      	movs	r1, #64	; 0x40
 80027ac:	4838      	ldr	r0, [pc, #224]	; (8002890 <_Z17switchfiringstatev+0x144>)
 80027ae:	f002 ff41 	bl	8005634 <HAL_GPIO_WritePin>
				interval=timebetween;
 80027b2:	4b3a      	ldr	r3, [pc, #232]	; (800289c <_Z17switchfiringstatev+0x150>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	ee07 3a90 	vmov	s15, r3
 80027ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027be:	4b36      	ldr	r3, [pc, #216]	; (8002898 <_Z17switchfiringstatev+0x14c>)
 80027c0:	edc3 7a00 	vstr	s15, [r3]
				firingstate=SparkPlugIgnite;
 80027c4:	4b30      	ldr	r3, [pc, #192]	; (8002888 <_Z17switchfiringstatev+0x13c>)
 80027c6:	2202      	movs	r2, #2
 80027c8:	701a      	strb	r2, [r3, #0]
				break;
 80027ca:	e05b      	b.n	8002884 <_Z17switchfiringstatev+0x138>
			case SparkPlugIgnite://swieca w ruch, wyliczamy delay
				HAL_GPIO_WritePin(SP_GPIO_Port, SP_Pin, GPIO_PIN_SET);
 80027cc:	2201      	movs	r2, #1
 80027ce:	2180      	movs	r1, #128	; 0x80
 80027d0:	4833      	ldr	r0, [pc, #204]	; (80028a0 <_Z17switchfiringstatev+0x154>)
 80027d2:	f002 ff2f 	bl	8005634 <HAL_GPIO_WritePin>
				interval=sparktime;
 80027d6:	4b33      	ldr	r3, [pc, #204]	; (80028a4 <_Z17switchfiringstatev+0x158>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	ee07 3a90 	vmov	s15, r3
 80027de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027e2:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <_Z17switchfiringstatev+0x14c>)
 80027e4:	edc3 7a00 	vstr	s15, [r3]
				firingstate=FiringDelay;
 80027e8:	4b27      	ldr	r3, [pc, #156]	; (8002888 <_Z17switchfiringstatev+0x13c>)
 80027ea:	2203      	movs	r2, #3
 80027ec:	701a      	strb	r2, [r3, #0]
				break;
 80027ee:	e049      	b.n	8002884 <_Z17switchfiringstatev+0x138>
			case FiringDelay://wszystko zamkniete, oczekujemy do nastepnego strzalu
				HAL_GPIO_WritePin(SP_GPIO_Port, SP_Pin, GPIO_PIN_RESET);
 80027f0:	2200      	movs	r2, #0
 80027f2:	2180      	movs	r1, #128	; 0x80
 80027f4:	482a      	ldr	r0, [pc, #168]	; (80028a0 <_Z17switchfiringstatev+0x154>)
 80027f6:	f002 ff1d 	bl	8005634 <HAL_GPIO_WritePin>
				normaliseADCOut();
 80027fa:	f7ff fe6f 	bl	80024dc <_Z15normaliseADCOutv>
				realshotdelay=shotdelay*timemul*POTBufNormAvg;
 80027fe:	4b2a      	ldr	r3, [pc, #168]	; (80028a8 <_Z17switchfiringstatev+0x15c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800280a:	4b28      	ldr	r3, [pc, #160]	; (80028ac <_Z17switchfiringstatev+0x160>)
 800280c:	edd3 7a00 	vldr	s15, [r3]
 8002810:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002814:	4b26      	ldr	r3, [pc, #152]	; (80028b0 <_Z17switchfiringstatev+0x164>)
 8002816:	edd3 7a00 	vldr	s15, [r3]
 800281a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800281e:	4b25      	ldr	r3, [pc, #148]	; (80028b4 <_Z17switchfiringstatev+0x168>)
 8002820:	edc3 7a00 	vstr	s15, [r3]
				//powyżej zaktualizowanie i obliczenie czasu między strzałami
				realshotdelay<5?interval=2.0:interval=realshotdelay;
 8002824:	4b23      	ldr	r3, [pc, #140]	; (80028b4 <_Z17switchfiringstatev+0x168>)
 8002826:	edd3 7a00 	vldr	s15, [r3]
 800282a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800282e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002836:	d504      	bpl.n	8002842 <_Z17switchfiringstatev+0xf6>
 8002838:	4b17      	ldr	r3, [pc, #92]	; (8002898 <_Z17switchfiringstatev+0x14c>)
 800283a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	e003      	b.n	800284a <_Z17switchfiringstatev+0xfe>
 8002842:	4b1c      	ldr	r3, [pc, #112]	; (80028b4 <_Z17switchfiringstatev+0x168>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a14      	ldr	r2, [pc, #80]	; (8002898 <_Z17switchfiringstatev+0x14c>)
 8002848:	6013      	str	r3, [r2, #0]
				if(HAL_GPIO_ReadPin(FB_GPIO_Port, FB_Pin)!=GPIO_PIN_SET){
 800284a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800284e:	4814      	ldr	r0, [pc, #80]	; (80028a0 <_Z17switchfiringstatev+0x154>)
 8002850:	f002 fed8 	bl	8005604 <HAL_GPIO_ReadPin>
 8002854:	4603      	mov	r3, r0
 8002856:	2b01      	cmp	r3, #1
 8002858:	bf14      	ite	ne
 800285a:	2301      	movne	r3, #1
 800285c:	2300      	moveq	r3, #0
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <_Z17switchfiringstatev+0x124>
					FBpressed=0;
 8002864:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <_Z17switchfiringstatev+0x16c>)
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
					HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800286a:	2017      	movs	r0, #23
 800286c:	f002 f90b 	bl	8004a86 <HAL_NVIC_EnableIRQ>
				}
				firingstate=GasValvesOpen;
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <_Z17switchfiringstatev+0x13c>)
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
				break;
 8002876:	e005      	b.n	8002884 <_Z17switchfiringstatev+0x138>
			default:
				//jakim cudem tu jesteś powiedz ty to mi
				hardcloseallvalves();
 8002878:	f7ff feea 	bl	8002650 <_Z18hardcloseallvalvesv>
				interval=1000;
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <_Z17switchfiringstatev+0x14c>)
 800287e:	4a0f      	ldr	r2, [pc, #60]	; (80028bc <_Z17switchfiringstatev+0x170>)
 8002880:	601a      	str	r2, [r3, #0]
				break;
 8002882:	bf00      	nop
			}
}
 8002884:	bf00      	nop
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20002b3e 	.word	0x20002b3e
 800288c:	40020800 	.word	0x40020800
 8002890:	40020400 	.word	0x40020400
 8002894:	20000008 	.word	0x20000008
 8002898:	20000018 	.word	0x20000018
 800289c:	20000004 	.word	0x20000004
 80028a0:	40020000 	.word	0x40020000
 80028a4:	2000000c 	.word	0x2000000c
 80028a8:	20000000 	.word	0x20000000
 80028ac:	20000010 	.word	0x20000010
 80028b0:	20002338 	.word	0x20002338
 80028b4:	20002318 	.word	0x20002318
 80028b8:	2000232c 	.word	0x2000232c
 80028bc:	447a0000 	.word	0x447a0000

080028c0 <firingswitch>:
void firingswitch(){
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
	if(FBpressed){
 80028c4:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <firingswitch+0x44>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d018      	beq.n	80028fe <firingswitch+0x3e>
		if(firingcounter<=0){
 80028cc:	4b0e      	ldr	r3, [pc, #56]	; (8002908 <firingswitch+0x48>)
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028da:	d806      	bhi.n	80028ea <firingswitch+0x2a>
			switchfiringstate();
 80028dc:	f7ff ff36 	bl	800274c <_Z17switchfiringstatev>
			firingcounter=interval;
 80028e0:	4b0a      	ldr	r3, [pc, #40]	; (800290c <firingswitch+0x4c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a08      	ldr	r2, [pc, #32]	; (8002908 <firingswitch+0x48>)
 80028e6:	6013      	str	r3, [r2, #0]
		}else{
			firingcounter--;
		}
	}
}
 80028e8:	e009      	b.n	80028fe <firingswitch+0x3e>
			firingcounter--;
 80028ea:	4b07      	ldr	r3, [pc, #28]	; (8002908 <firingswitch+0x48>)
 80028ec:	edd3 7a00 	vldr	s15, [r3]
 80028f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028f8:	4b03      	ldr	r3, [pc, #12]	; (8002908 <firingswitch+0x48>)
 80028fa:	edc3 7a00 	vstr	s15, [r3]
}
 80028fe:	bf00      	nop
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	2000232c 	.word	0x2000232c
 8002908:	20000014 	.word	0x20000014
 800290c:	20000018 	.word	0x20000018

08002910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b094      	sub	sp, #80	; 0x50
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002916:	f001 f9f7 	bl	8003d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800291a:	f000 f8e7 	bl	8002aec <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800291e:	f000 fa1b 	bl	8002d58 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002922:	f000 f9f9 	bl	8002d18 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8002926:	f000 f9c9 	bl	8002cbc <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 800292a:	f000 f957 	bl	8002bdc <_ZL12MX_ADC1_Initv>
  /* USER CODE BEGIN 2 */
  hardcloseallvalves();
 800292e:	f7ff fe8f 	bl	8002650 <_Z18hardcloseallvalvesv>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *) ADC_DMA_Buffer, ADC_DMABUFFERSIZE*2);
 8002932:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002936:	4962      	ldr	r1, [pc, #392]	; (8002ac0 <main+0x1b0>)
 8002938:	4862      	ldr	r0, [pc, #392]	; (8002ac4 <main+0x1b4>)
 800293a:	f001 fbab 	bl	8004094 <HAL_ADC_Start_DMA>
  HAL_UART_Receive_IT(&huart2, &itemRx, 1);
 800293e:	2201      	movs	r2, #1
 8002940:	4961      	ldr	r1, [pc, #388]	; (8002ac8 <main+0x1b8>)
 8002942:	4862      	ldr	r0, [pc, #392]	; (8002acc <main+0x1bc>)
 8002944:	f003 fd22 	bl	800638c <HAL_UART_Receive_IT>
  USART_send("\r\n----------------------\r\n  STM32 Gas Gun INIT\r\n----------------------\r\n");
 8002948:	f107 0318 	add.w	r3, r7, #24
 800294c:	4618      	mov	r0, r3
 800294e:	f004 fc3d 	bl	80071cc <_ZNSaIcEC1Ev>
 8002952:	f107 0218 	add.w	r2, r7, #24
 8002956:	463b      	mov	r3, r7
 8002958:	495d      	ldr	r1, [pc, #372]	; (8002ad0 <main+0x1c0>)
 800295a:	4618      	mov	r0, r3
 800295c:	f005 f902 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002960:	463b      	mov	r3, r7
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe fbfa 	bl	800115c <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002968:	463b      	mov	r3, r7
 800296a:	4618      	mov	r0, r3
 800296c:	f004 fe1f 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002970:	f107 0318 	add.w	r3, r7, #24
 8002974:	4618      	mov	r0, r3
 8002976:	f004 fc2b 	bl	80071d0 <_ZNSaIcED1Ev>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //todo: main
  while (1)
  {
	  if (rx.written()&&__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) != RESET) {
 800297a:	4856      	ldr	r0, [pc, #344]	; (8002ad4 <main+0x1c4>)
 800297c:	f000 fe90 	bl	80036a0 <_ZN14CircularBufferILj4096EE7writtenEv>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00d      	beq.n	80029a2 <main+0x92>
 8002986:	4b51      	ldr	r3, [pc, #324]	; (8002acc <main+0x1bc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002990:	2b80      	cmp	r3, #128	; 0x80
 8002992:	bf0c      	ite	eq
 8002994:	2301      	moveq	r3, #1
 8002996:	2300      	movne	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <main+0x92>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <main+0x94>
 80029a2:	2300      	movs	r3, #0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00f      	beq.n	80029c8 <main+0xb8>
	  	  USART_send(rx.read());
 80029a8:	f107 031c 	add.w	r3, r7, #28
 80029ac:	4949      	ldr	r1, [pc, #292]	; (8002ad4 <main+0x1c4>)
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 fe89 	bl	80036c6 <_ZN14CircularBufferILj4096EE4readB5cxx11Ev>
 80029b4:	f107 031c 	add.w	r3, r7, #28
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe fbcf 	bl	800115c <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80029be:	f107 031c 	add.w	r3, r7, #28
 80029c2:	4618      	mov	r0, r3
 80029c4:	f004 fdf3 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	  	}

	  if(ReadyToUpdateAvg){
 80029c8:	4b43      	ldr	r3, [pc, #268]	; (8002ad8 <main+0x1c8>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <main+0xc4>
		  ADC_DMA_UPDATE();
 80029d0:	f7ff fda8 	bl	8002524 <_Z14ADC_DMA_UPDATEv>
	  }
	  if(frameMainBuffer.length()>250){
 80029d4:	4841      	ldr	r0, [pc, #260]	; (8002adc <main+0x1cc>)
 80029d6:	f004 fe29 	bl	800762c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80029da:	4603      	mov	r3, r0
 80029dc:	2bfa      	cmp	r3, #250	; 0xfa
 80029de:	bf8c      	ite	hi
 80029e0:	2301      	movhi	r3, #1
 80029e2:	2300      	movls	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d021      	beq.n	8002a2e <main+0x11e>
		  //Jeżeli w buforze znajdzie się za dużo danych to czyścimy i
		  frameMainBuffer.clear();
 80029ea:	483c      	ldr	r0, [pc, #240]	; (8002adc <main+0x1cc>)
 80029ec:	f004 fe47 	bl	800767e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
		  FrameState=noInput;
 80029f0:	4b3b      	ldr	r3, [pc, #236]	; (8002ae0 <main+0x1d0>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
		  respondframe("LENERR");
 80029f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029fa:	4618      	mov	r0, r3
 80029fc:	f004 fbe6 	bl	80071cc <_ZNSaIcEC1Ev>
 8002a00:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002a04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a08:	4936      	ldr	r1, [pc, #216]	; (8002ae4 <main+0x1d4>)
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f005 f8aa 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002a10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fe fe35 	bl	8001684 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002a1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f004 fdc5 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002a24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f004 fbd1 	bl	80071d0 <_ZNSaIcED1Ev>
	  }
	  if(!rx.empty()){//jeżeli coś jest w buforze nie przeanalizowane
 8002a2e:	4829      	ldr	r0, [pc, #164]	; (8002ad4 <main+0x1c4>)
 8002a30:	f000 fcac 	bl	800338c <_ZN14CircularBufferILj4096EE5emptyEv>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f083 0301 	eor.w	r3, r3, #1
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d02e      	beq.n	8002a9e <main+0x18e>
	  readchar=rx.pop();
 8002a40:	4824      	ldr	r0, [pc, #144]	; (8002ad4 <main+0x1c4>)
 8002a42:	f000 fc77 	bl	8003334 <_ZN14CircularBufferILj4096EE3popEv>
 8002a46:	4603      	mov	r3, r0
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <main+0x1d8>)
 8002a4c:	701a      	strb	r2, [r3, #0]
	  if(readchar=='^'){//jeżeli znak start
 8002a4e:	4b26      	ldr	r3, [pc, #152]	; (8002ae8 <main+0x1d8>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b5e      	cmp	r3, #94	; 0x5e
 8002a54:	d10b      	bne.n	8002a6e <main+0x15e>
	  		  frameMainBuffer.clear();//czyść bufor
 8002a56:	4821      	ldr	r0, [pc, #132]	; (8002adc <main+0x1cc>)
 8002a58:	f004 fe11 	bl	800767e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
	  		  FrameState=startReceived;
 8002a5c:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <main+0x1d0>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	701a      	strb	r2, [r3, #0]
	  		  frameMainBuffer.push_back(readchar);//dodaj znak
 8002a62:	4b21      	ldr	r3, [pc, #132]	; (8002ae8 <main+0x1d8>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	4619      	mov	r1, r3
 8002a68:	481c      	ldr	r0, [pc, #112]	; (8002adc <main+0x1cc>)
 8002a6a:	f004 fe13 	bl	8007694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
	  	  }
	  	  if(FrameState==startReceived){//jeżeli doszedł znak początku
 8002a6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ae0 <main+0x1d0>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d113      	bne.n	8002a9e <main+0x18e>
	  		  if(readchar!='|'){//dopóki nie ma znaku końca dodawaj znaki normalnie
 8002a76:	4b1c      	ldr	r3, [pc, #112]	; (8002ae8 <main+0x1d8>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b7c      	cmp	r3, #124	; 0x7c
 8002a7c:	d006      	beq.n	8002a8c <main+0x17c>
	  			  frameMainBuffer.push_back(readchar);
 8002a7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ae8 <main+0x1d8>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	4619      	mov	r1, r3
 8002a84:	4815      	ldr	r0, [pc, #84]	; (8002adc <main+0x1cc>)
 8002a86:	f004 fe05 	bl	8007694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 8002a8a:	e008      	b.n	8002a9e <main+0x18e>
	  		  }else{
	  			  frameMainBuffer.push_back(readchar);
 8002a8c:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <main+0x1d8>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	4619      	mov	r1, r3
 8002a92:	4812      	ldr	r0, [pc, #72]	; (8002adc <main+0x1cc>)
 8002a94:	f004 fdfe 	bl	8007694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
	  			  FrameState=frameReady;//ustaw flagę końca.
 8002a98:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <main+0x1d0>)
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	701a      	strb	r2, [r3, #0]
	  		  }
	  	  }
	  }

	  if(FrameState==frameReady)
 8002a9e:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <main+0x1d0>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	f47f af69 	bne.w	800297a <main+0x6a>
	   {
		    //USART_send("\r\n END CHAR FOUND\r\n");
	        //std::string msg = rx.popUntilIncl('|');
	        //przycinanie ramki
		  	//trimStartEndCharacters(msg, '^', '|');
		      trimStartEndCharacters(frameMainBuffer, '^', '|');
 8002aa8:	227c      	movs	r2, #124	; 0x7c
 8002aaa:	215e      	movs	r1, #94	; 0x5e
 8002aac:	480b      	ldr	r0, [pc, #44]	; (8002adc <main+0x1cc>)
 8002aae:	f7fe fc36 	bl	800131e <_Z22trimStartEndCharactersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcc>
	        //rozkoduj ramkę
	        //if(decodePAWNET(msg)){

		  	  if(decodePAWNET(frameMainBuffer)){
 8002ab2:	480a      	ldr	r0, [pc, #40]	; (8002adc <main+0x1cc>)
 8002ab4:	f7ff fa5c 	bl	8001f70 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
	        	//USART_send("\r\nDEBUG:MESSAGE DECODE SUCCESS\r\n");
	        }else{
	        	//jeżeli gdziekolwiek podczas rozkodowania wystąpi błąd
	        	//USART_send("\r\nDEBUG:MESSAGE DECODE FAIL\r\n");
	        }
	        FrameState=noInput;
 8002ab8:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <main+0x1d0>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	701a      	strb	r2, [r3, #0]
	  if (rx.written()&&__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) != RESET) {
 8002abe:	e75c      	b.n	800297a <main+0x6a>
 8002ac0:	2000233c 	.word	0x2000233c
 8002ac4:	2000020c 	.word	0x2000020c
 8002ac8:	200002f8 	.word	0x200002f8
 8002acc:	200002b4 	.word	0x200002b4
 8002ad0:	0800c508 	.word	0x0800c508
 8002ad4:	200002fc 	.word	0x200002fc
 8002ad8:	20002b3d 	.word	0x20002b3d
 8002adc:	20002b40 	.word	0x20002b40
 8002ae0:	20002b59 	.word	0x20002b59
 8002ae4:	0800c4f4 	.word	0x0800c4f4
 8002ae8:	20002b58 	.word	0x20002b58

08002aec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b094      	sub	sp, #80	; 0x50
 8002af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002af2:	f107 031c 	add.w	r3, r7, #28
 8002af6:	2234      	movs	r2, #52	; 0x34
 8002af8:	2100      	movs	r1, #0
 8002afa:	4618      	mov	r0, r3
 8002afc:	f006 ffaf 	bl	8009a5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b00:	f107 0308 	add.w	r3, r7, #8
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b10:	2300      	movs	r3, #0
 8002b12:	607b      	str	r3, [r7, #4]
 8002b14:	4b2f      	ldr	r3, [pc, #188]	; (8002bd4 <_Z18SystemClock_Configv+0xe8>)
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	4a2e      	ldr	r2, [pc, #184]	; (8002bd4 <_Z18SystemClock_Configv+0xe8>)
 8002b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b20:	4b2c      	ldr	r3, [pc, #176]	; (8002bd4 <_Z18SystemClock_Configv+0xe8>)
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b28:	607b      	str	r3, [r7, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	603b      	str	r3, [r7, #0]
 8002b30:	4b29      	ldr	r3, [pc, #164]	; (8002bd8 <_Z18SystemClock_Configv+0xec>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002b38:	4a27      	ldr	r2, [pc, #156]	; (8002bd8 <_Z18SystemClock_Configv+0xec>)
 8002b3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	4b25      	ldr	r3, [pc, #148]	; (8002bd8 <_Z18SystemClock_Configv+0xec>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b50:	2301      	movs	r3, #1
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b54:	2310      	movs	r3, #16
 8002b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002b60:	2310      	movs	r3, #16
 8002b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002b64:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002b68:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002b6a:	2304      	movs	r3, #4
 8002b6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002b72:	2302      	movs	r3, #2
 8002b74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b76:	f107 031c 	add.w	r3, r7, #28
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f003 f8d6 	bl	8005d2c <HAL_RCC_OscConfig>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	bf14      	ite	ne
 8002b86:	2301      	movne	r3, #1
 8002b88:	2300      	moveq	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8002b90:	f000 f996 	bl	8002ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b94:	230f      	movs	r3, #15
 8002b96:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ba4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002baa:	f107 0308 	add.w	r3, r7, #8
 8002bae:	2102      	movs	r1, #2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f002 fd71 	bl	8005698 <HAL_RCC_ClockConfig>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	bf14      	ite	ne
 8002bbc:	2301      	movne	r3, #1
 8002bbe:	2300      	moveq	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 8002bc6:	f000 f97b 	bl	8002ec0 <Error_Handler>
  }
}
 8002bca:	bf00      	nop
 8002bcc:	3750      	adds	r7, #80	; 0x50
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40007000 	.word	0x40007000

08002bdc <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002be2:	463b      	mov	r3, r7
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002bee:	4b30      	ldr	r3, [pc, #192]	; (8002cb0 <_ZL12MX_ADC1_Initv+0xd4>)
 8002bf0:	4a30      	ldr	r2, [pc, #192]	; (8002cb4 <_ZL12MX_ADC1_Initv+0xd8>)
 8002bf2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002bf4:	4b2e      	ldr	r3, [pc, #184]	; (8002cb0 <_ZL12MX_ADC1_Initv+0xd4>)
 8002bf6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002bfa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002bfc:	4b2c      	ldr	r3, [pc, #176]	; (8002cb0 <_ZL12MX_ADC1_Initv+0xd4>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002c02:	4b2b      	ldr	r3, [pc, #172]	; (8002cb0 <_ZL12MX_ADC1_Initv+0xd4>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002c08:	4b29      	ldr	r3, [pc, #164]	; (8002cb0 <_ZL12MX_ADC1_Initv+0xd4>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c0e:	4b28      	ldr	r3, [pc, #160]	; (8002cb0 <_ZL12MX_ADC1_Initv+0xd4>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c16:	4b26      	ldr	r3, [pc, #152]	; (8002cb0 <_ZL12MX_ADC1_Initv+0xd4>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c1c:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <_ZL12MX_ADC1_Initv+0xd4>)
 8002c1e:	4a26      	ldr	r2, [pc, #152]	; (8002cb8 <_ZL12MX_ADC1_Initv+0xdc>)
 8002c20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c22:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <_ZL12MX_ADC1_Initv+0xd4>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002c28:	4b21      	ldr	r3, [pc, #132]	; (8002cb0 <_ZL12MX_ADC1_Initv+0xd4>)
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002c2e:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <_ZL12MX_ADC1_Initv+0xd4>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c36:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <_ZL12MX_ADC1_Initv+0xd4>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c3c:	481c      	ldr	r0, [pc, #112]	; (8002cb0 <_ZL12MX_ADC1_Initv+0xd4>)
 8002c3e:	f001 f8d5 	bl	8003dec <HAL_ADC_Init>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	bf14      	ite	ne
 8002c48:	2301      	movne	r3, #1
 8002c4a:	2300      	moveq	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 8002c52:	f000 f935 	bl	8002ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002c5e:	2307      	movs	r3, #7
 8002c60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c62:	463b      	mov	r3, r7
 8002c64:	4619      	mov	r1, r3
 8002c66:	4812      	ldr	r0, [pc, #72]	; (8002cb0 <_ZL12MX_ADC1_Initv+0xd4>)
 8002c68:	f001 fb38 	bl	80042dc <HAL_ADC_ConfigChannel>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bf14      	ite	ne
 8002c72:	2301      	movne	r3, #1
 8002c74:	2300      	moveq	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8002c7c:	f000 f920 	bl	8002ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002c80:	2301      	movs	r3, #1
 8002c82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002c84:	2302      	movs	r3, #2
 8002c86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c88:	463b      	mov	r3, r7
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4808      	ldr	r0, [pc, #32]	; (8002cb0 <_ZL12MX_ADC1_Initv+0xd4>)
 8002c8e:	f001 fb25 	bl	80042dc <HAL_ADC_ConfigChannel>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf14      	ite	ne
 8002c98:	2301      	movne	r3, #1
 8002c9a:	2300      	moveq	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <_ZL12MX_ADC1_Initv+0xca>
  {
    Error_Handler();
 8002ca2:	f000 f90d 	bl	8002ec0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	2000020c 	.word	0x2000020c
 8002cb4:	40012000 	.word	0x40012000
 8002cb8:	0f000001 	.word	0x0f000001

08002cbc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cc0:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002cc2:	4a14      	ldr	r2, [pc, #80]	; (8002d14 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cc6:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002cc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cd4:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cec:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cf2:	4807      	ldr	r0, [pc, #28]	; (8002d10 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002cf4:	f003 fab8 	bl	8006268 <HAL_UART_Init>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bf14      	ite	ne
 8002cfe:	2301      	movne	r3, #1
 8002d00:	2300      	moveq	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002d08:	f000 f8da 	bl	8002ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d0c:	bf00      	nop
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	200002b4 	.word	0x200002b4
 8002d14:	40004400 	.word	0x40004400

08002d18 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	607b      	str	r3, [r7, #4]
 8002d22:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <_ZL11MX_DMA_Initv+0x3c>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	4a0b      	ldr	r2, [pc, #44]	; (8002d54 <_ZL11MX_DMA_Initv+0x3c>)
 8002d28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2e:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <_ZL11MX_DMA_Initv+0x3c>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d36:	607b      	str	r3, [r7, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 1);
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	2038      	movs	r0, #56	; 0x38
 8002d40:	f001 fe85 	bl	8004a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002d44:	2038      	movs	r0, #56	; 0x38
 8002d46:	f001 fe9e 	bl	8004a86 <HAL_NVIC_EnableIRQ>

}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800

08002d58 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08a      	sub	sp, #40	; 0x28
 8002d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d5e:	f107 0314 	add.w	r3, r7, #20
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	605a      	str	r2, [r3, #4]
 8002d68:	609a      	str	r2, [r3, #8]
 8002d6a:	60da      	str	r2, [r3, #12]
 8002d6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
 8002d72:	4b4f      	ldr	r3, [pc, #316]	; (8002eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	4a4e      	ldr	r2, [pc, #312]	; (8002eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8002d78:	f043 0304 	orr.w	r3, r3, #4
 8002d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7e:	4b4c      	ldr	r3, [pc, #304]	; (8002eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	4b48      	ldr	r3, [pc, #288]	; (8002eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	4a47      	ldr	r2, [pc, #284]	; (8002eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8002d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d98:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9a:	4b45      	ldr	r3, [pc, #276]	; (8002eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	4b41      	ldr	r3, [pc, #260]	; (8002eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	4a40      	ldr	r2, [pc, #256]	; (8002eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	6313      	str	r3, [r2, #48]	; 0x30
 8002db6:	4b3e      	ldr	r3, [pc, #248]	; (8002eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	607b      	str	r3, [r7, #4]
 8002dc6:	4b3a      	ldr	r3, [pc, #232]	; (8002eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	4a39      	ldr	r2, [pc, #228]	; (8002eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8002dcc:	f043 0302 	orr.w	r3, r3, #2
 8002dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd2:	4b37      	ldr	r3, [pc, #220]	; (8002eb0 <_ZL12MX_GPIO_Initv+0x158>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	607b      	str	r3, [r7, #4]
 8002ddc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SP_Pin, GPIO_PIN_RESET);
 8002dde:	2200      	movs	r2, #0
 8002de0:	21a0      	movs	r1, #160	; 0xa0
 8002de2:	4834      	ldr	r0, [pc, #208]	; (8002eb4 <_ZL12MX_GPIO_Initv+0x15c>)
 8002de4:	f002 fc26 	bl	8005634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GV_GPIO_Port, GV_Pin, GPIO_PIN_RESET);
 8002de8:	2200      	movs	r2, #0
 8002dea:	2180      	movs	r1, #128	; 0x80
 8002dec:	4832      	ldr	r0, [pc, #200]	; (8002eb8 <_ZL12MX_GPIO_Initv+0x160>)
 8002dee:	f002 fc21 	bl	8005634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OV_GPIO_Port, OV_Pin, GPIO_PIN_RESET);
 8002df2:	2200      	movs	r2, #0
 8002df4:	2140      	movs	r1, #64	; 0x40
 8002df6:	4831      	ldr	r0, [pc, #196]	; (8002ebc <_ZL12MX_GPIO_Initv+0x164>)
 8002df8:	f002 fc1c 	bl	8005634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002dfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e0c:	f107 0314 	add.w	r3, r7, #20
 8002e10:	4619      	mov	r1, r3
 8002e12:	4829      	ldr	r0, [pc, #164]	; (8002eb8 <_ZL12MX_GPIO_Initv+0x160>)
 8002e14:	f002 fa62 	bl	80052dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SP_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SP_Pin;
 8002e18:	23a0      	movs	r3, #160	; 0xa0
 8002e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e24:	2300      	movs	r3, #0
 8002e26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e28:	f107 0314 	add.w	r3, r7, #20
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4821      	ldr	r0, [pc, #132]	; (8002eb4 <_ZL12MX_GPIO_Initv+0x15c>)
 8002e30:	f002 fa54 	bl	80052dc <HAL_GPIO_Init>

  /*Configure GPIO pin : GV_Pin */
  GPIO_InitStruct.Pin = GV_Pin;
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e40:	2300      	movs	r3, #0
 8002e42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GV_GPIO_Port, &GPIO_InitStruct);
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	4619      	mov	r1, r3
 8002e4a:	481b      	ldr	r0, [pc, #108]	; (8002eb8 <_ZL12MX_GPIO_Initv+0x160>)
 8002e4c:	f002 fa46 	bl	80052dc <HAL_GPIO_Init>

  /*Configure GPIO pin : FB_Pin */
  GPIO_InitStruct.Pin = FB_Pin;
 8002e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e56:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FB_GPIO_Port, &GPIO_InitStruct);
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	4619      	mov	r1, r3
 8002e66:	4813      	ldr	r0, [pc, #76]	; (8002eb4 <_ZL12MX_GPIO_Initv+0x15c>)
 8002e68:	f002 fa38 	bl	80052dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OV_Pin */
  GPIO_InitStruct.Pin = OV_Pin;
 8002e6c:	2340      	movs	r3, #64	; 0x40
 8002e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e70:	2301      	movs	r3, #1
 8002e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OV_GPIO_Port, &GPIO_InitStruct);
 8002e7c:	f107 0314 	add.w	r3, r7, #20
 8002e80:	4619      	mov	r1, r3
 8002e82:	480e      	ldr	r0, [pc, #56]	; (8002ebc <_ZL12MX_GPIO_Initv+0x164>)
 8002e84:	f002 fa2a 	bl	80052dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 1);
 8002e88:	2201      	movs	r2, #1
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	2017      	movs	r0, #23
 8002e8e:	f001 fdde 	bl	8004a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e92:	2017      	movs	r0, #23
 8002e94:	f001 fdf7 	bl	8004a86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 8002e98:	2201      	movs	r2, #1
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	2028      	movs	r0, #40	; 0x28
 8002e9e:	f001 fdd6 	bl	8004a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ea2:	2028      	movs	r0, #40	; 0x28
 8002ea4:	f001 fdef 	bl	8004a86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ea8:	bf00      	nop
 8002eaa:	3728      	adds	r7, #40	; 0x28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40020000 	.word	0x40020000
 8002eb8:	40020800 	.word	0x40020800
 8002ebc:	40020400 	.word	0x40020400

08002ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002ec4:	b672      	cpsid	i
}
 8002ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ec8:	e7fe      	b.n	8002ec8 <Error_Handler+0x8>

08002eca <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	f006 fe7d 	bl	8009bd0 <__errno>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	f006 fe77 	bl	8009bd0 <__errno>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	f006 fe69 	bl	8009bd0 <__errno>
 8002efe:	4603      	mov	r3, r0
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	bf0c      	ite	eq
 8002f06:	2301      	moveq	r3, #1
 8002f08:	2300      	movne	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8002f10:	f006 fe5e 	bl	8009bd0 <__errno>
 8002f14:	4602      	mov	r2, r0
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 8002f30:	2300      	movs	r3, #0
	  }
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8002f3e:	b590      	push	{r4, r7, lr}
 8002f40:	b08b      	sub	sp, #44	; 0x2c
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8002f4c:	f107 0314 	add.w	r3, r7, #20
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff ffba 	bl	8002eca <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8002f56:	f107 0118 	add.w	r1, r7, #24
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	4798      	blx	r3
 8002f62:	6278      	str	r0, [r7, #36]	; 0x24

      if (__endptr == __str)
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d102      	bne.n	8002f72 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8002f6c:	68b8      	ldr	r0, [r7, #8]
 8002f6e:	f004 f936 	bl	80071de <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8002f72:	f006 fe2d 	bl	8009bd0 <__errno>
 8002f76:	4603      	mov	r3, r0
 8002f78:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8002f7a:	2b22      	cmp	r3, #34	; 0x22
 8002f7c:	d006      	beq.n	8002f8c <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 8002f7e:	4621      	mov	r1, r4
 8002f80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f82:	f7ff ffd0 	bl	8002f26 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8002f90:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 8002f96:	68b8      	ldr	r0, [r7, #8]
 8002f98:	f004 f927 	bl	80071ea <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	623b      	str	r3, [r7, #32]

      if (__idx)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d005      	beq.n	8002fb2 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	601a      	str	r2, [r3, #0]

      return __ret;
 8002fb2:	6a3c      	ldr	r4, [r7, #32]
    }
 8002fb4:	f107 0314 	add.w	r3, r7, #20
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff ff9a 	bl	8002ef2 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8002fbe:	4623      	mov	r3, r4
    }
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	372c      	adds	r7, #44	; 0x2c
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd90      	pop	{r4, r7, pc}

08002fc8 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	f006 fdfe 	bl	8009bd0 <__errno>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	f006 fdf8 	bl	8009bd0 <__errno>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	f006 fdea 	bl	8009bd0 <__errno>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	bf0c      	ite	eq
 8003004:	2301      	moveq	r3, #1
 8003006:	2300      	movne	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d005      	beq.n	800301a <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 800300e:	f006 fddf 	bl	8009bd0 <__errno>
 8003012:	4602      	mov	r2, r0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEfSt17integral_constantIbLb0EE>:
	  _S_chk(_TRet, std::false_type) { return false; }
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	ed87 0a01 	vstr	s0, [r7, #4]
 800302e:	7038      	strb	r0, [r7, #0]
 8003030:	2300      	movs	r3, #0
 8003032:	4618      	mov	r0, r3
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 800303e:	b590      	push	{r4, r7, lr}
 8003040:	b08b      	sub	sp, #44	; 0x2c
 8003042:	af00      	add	r7, sp, #0
 8003044:	60f8      	str	r0, [r7, #12]
 8003046:	60b9      	str	r1, [r7, #8]
 8003048:	607a      	str	r2, [r7, #4]
 800304a:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff ffb9 	bl	8002fc8 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8003056:	f107 0218 	add.w	r2, r7, #24
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4611      	mov	r1, r2
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	4798      	blx	r3
 8003062:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
      if (__endptr == __str)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	429a      	cmp	r2, r3
 800306c:	d102      	bne.n	8003074 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x36>
	std::__throw_invalid_argument(__name);
 800306e:	68b8      	ldr	r0, [r7, #8]
 8003070:	f004 f8b5 	bl	80071de <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8003074:	f006 fdac 	bl	8009bd0 <__errno>
 8003078:	4603      	mov	r3, r0
 800307a:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 800307c:	2b22      	cmp	r3, #34	; 0x22
 800307e:	d007      	beq.n	8003090 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8003080:	4620      	mov	r0, r4
 8003082:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003086:	f7ff ffcd 	bl	8003024 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEfSt17integral_constantIbLb0EE>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x56>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x58>
 8003094:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x62>
	std::__throw_out_of_range(__name);
 800309a:	68b8      	ldr	r0, [r7, #8]
 800309c:	f004 f8a5 	bl	80071ea <_ZSt20__throw_out_of_rangePKc>
	__ret = __tmp;
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	623b      	str	r3, [r7, #32]
      if (__idx)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x78>
	*__idx = __endptr - __str;
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	461a      	mov	r2, r3
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	601a      	str	r2, [r3, #0]
      return __ret;
 80030b6:	6a3c      	ldr	r4, [r7, #32]
    }
 80030b8:	f107 0314 	add.w	r3, r7, #20
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff97 	bl	8002ff0 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 80030c2:	ee07 4a90 	vmov	s15, r4
    }
 80030c6:	eeb0 0a67 	vmov.f32	s0, s15
 80030ca:	372c      	adds	r7, #44	; 0x2c
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd90      	pop	{r4, r7, pc}

080030d0 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 80030d0:	b480      	push	{r7}
 80030d2:	b087      	sub	sp, #28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 80030da:	2301      	movs	r3, #1
 80030dc:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	fb03 f303 	mul.w	r3, r3, r3
 80030e4:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	fb02 f303 	mul.w	r3, r2, r3
 80030ee:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	fb02 f303 	mul.w	r3, r2, r3
 80030f8:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d201      	bcs.n	8003106 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	e01d      	b.n	8003142 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	429a      	cmp	r2, r3
 800310c:	d202      	bcs.n	8003114 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	3301      	adds	r3, #1
 8003112:	e016      	b.n	8003142 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	429a      	cmp	r2, r3
 800311a:	d202      	bcs.n	8003122 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	3302      	adds	r3, #2
 8003120:	e00f      	b.n	8003142 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	429a      	cmp	r2, r3
 8003128:	d202      	bcs.n	8003130 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	3303      	adds	r3, #3
 800312e:	e008      	b.n	8003142 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	fbb2 f3f3 	udiv	r3, r2, r3
 8003138:	607b      	str	r3, [r7, #4]
	  __n += 4;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	3304      	adds	r3, #4
 800313e:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8003140:	e7db      	b.n	80030fa <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 8003142:	4618      	mov	r0, r3
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8003150:	b480      	push	{r7}
 8003152:	b089      	sub	sp, #36	; 0x24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	3b01      	subs	r3, #1
 8003160:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8003162:	e024      	b.n	80031ae <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x5e>
	{
	  auto const __num = (__val % 100) * 2;
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	4b23      	ldr	r3, [pc, #140]	; (80031f4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8003168:	fba3 1302 	umull	r1, r3, r3, r2
 800316c:	095b      	lsrs	r3, r3, #5
 800316e:	2164      	movs	r1, #100	; 0x64
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	617b      	str	r3, [r7, #20]
	  __val /= 100;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	68f9      	ldr	r1, [r7, #12]
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	440b      	add	r3, r1
 8003190:	4919      	ldr	r1, [pc, #100]	; (80031f8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8003192:	5c8a      	ldrb	r2, [r1, r2]
 8003194:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	3b01      	subs	r3, #1
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4413      	add	r3, r2
 800319e:	4916      	ldr	r1, [pc, #88]	; (80031f8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	440a      	add	r2, r1
 80031a4:	7812      	ldrb	r2, [r2, #0]
 80031a6:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	3b02      	subs	r3, #2
 80031ac:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b63      	cmp	r3, #99	; 0x63
 80031b2:	d8d7      	bhi.n	8003164 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x14>
	}
      if (__val >= 10)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b09      	cmp	r3, #9
 80031b8:	d910      	bls.n	80031dc <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	61bb      	str	r3, [r7, #24]
	  __first[1] = __digits[__num + 1];
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3301      	adds	r3, #1
 80031c8:	490b      	ldr	r1, [pc, #44]	; (80031f8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80031ca:	5c8a      	ldrb	r2, [r1, r2]
 80031cc:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 80031ce:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	4413      	add	r3, r2
 80031d4:	781a      	ldrb	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 80031da:	e005      	b.n	80031e8 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	3330      	adds	r3, #48	; 0x30
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	701a      	strb	r2, [r3, #0]
    }
 80031e8:	bf00      	nop
 80031ea:	3724      	adds	r7, #36	; 0x24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	51eb851f 	.word	0x51eb851f
 80031f8:	0800c558 	.word	0x0800c558

080031fc <_ZN14CircularBufferILj4096EE4sizeEv>:
  std::size_t size() {
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
    if (tail >= head) return tail - head;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d309      	bcc.n	800322c <_ZN14CircularBufferILj4096EE4sizeEv+0x30>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	e00a      	b.n	8003242 <_ZN14CircularBufferILj4096EE4sizeEv+0x46>
    return maxSize - head - tail;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	4413      	add	r3, r2
 800323e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
  }
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <_ZN14CircularBufferILj4096EE8capacityEv>:
  uint32_t capacity(void) {
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
      return maxSize;
 8003256:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    }
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003266:	b590      	push	{r4, r7, lr}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fa51 	bl	8003718 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8003276:	4603      	mov	r3, r0
 8003278:	681c      	ldr	r4, [r3, #0]
 800327a:	6838      	ldr	r0, [r7, #0]
 800327c:	f000 fa4c 	bl	8003718 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 8003280:	4603      	mov	r3, r0
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	429c      	cmp	r4, r3
 8003286:	bf14      	ite	ne
 8003288:	2301      	movne	r3, #1
 800328a:	2300      	moveq	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	bd90      	pop	{r4, r7, pc}

08003296 <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	601a      	str	r2, [r3, #0]
	return *this;
 80032a8:	687b      	ldr	r3, [r7, #4]
      }
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <_ZN14CircularBufferILj4096EE4pushEh>:
  void push(uint8_t item) {
 80032ce:	b480      	push	{r7}
 80032d0:	b085      	sub	sp, #20
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	460b      	mov	r3, r1
 80032d8:	70fb      	strb	r3, [r7, #3]
    if (tail == (head - 1) % maxSize) return;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d019      	beq.n	8003328 <_ZN14CircularBufferILj4096EE4pushEh+0x5a>
    buffer[tail] = item;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	78f9      	ldrb	r1, [r7, #3]
 8003300:	54d1      	strb	r1, [r2, r3]
    volatile std::size_t temp = (tail + 1) % maxSize;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	3301      	adds	r3, #1
 800330c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003310:	60fb      	str	r3, [r7, #12]
    tail = temp;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800331a:	6053      	str	r3, [r2, #4]
    writeFlag = Char;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003322:	2201      	movs	r2, #1
 8003324:	721a      	strb	r2, [r3, #8]
 8003326:	e000      	b.n	800332a <_ZN14CircularBufferILj4096EE4pushEh+0x5c>
    if (tail == (head - 1) % maxSize) return;
 8003328:	bf00      	nop
  }
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <_ZN14CircularBufferILj4096EE3popEv>:
  uint8_t pop() {
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
	if (empty()) return 0;
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f000 f825 	bl	800338c <_ZN14CircularBufferILj4096EE5emptyEv>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <_ZN14CircularBufferILj4096EE3popEv+0x18>
 8003348:	2300      	movs	r3, #0
 800334a:	e01b      	b.n	8003384 <_ZN14CircularBufferILj4096EE3popEv+0x50>
    uint8_t item = buffer[head];
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	5cd3      	ldrb	r3, [r2, r3]
 8003358:	73fb      	strb	r3, [r7, #15]
    buffer[head] = 0;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	2100      	movs	r1, #0
 8003366:	54d1      	strb	r1, [r2, r3]
    volatile std::size_t temp = (head + 1) % maxSize;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3301      	adds	r3, #1
 8003372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003376:	60bb      	str	r3, [r7, #8]
    head = temp;
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003380:	6013      	str	r3, [r2, #0]
    return item;
 8003382:	7bfb      	ldrb	r3, [r7, #15]
  }
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <_ZN14CircularBufferILj4096EE5emptyEv>:
  bool empty() {
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
    return head == tail;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	bf0c      	ite	eq
 80033a8:	2301      	moveq	r3, #1
 80033aa:	2300      	movne	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
  }
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <_ZN9__gnu_cxxneIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80033ba:	b590      	push	{r4, r7, lr}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f9b2 	bl	800372e <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80033ca:	4603      	mov	r3, r0
 80033cc:	681c      	ldr	r4, [r3, #0]
 80033ce:	6838      	ldr	r0, [r7, #0]
 80033d0:	f000 f9ad 	bl	800372e <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80033d4:	4603      	mov	r3, r0
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	429c      	cmp	r4, r3
 80033da:	bf14      	ite	ne
 80033dc:	2301      	movne	r3, #1
 80033de:	2300      	moveq	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd90      	pop	{r4, r7, pc}

080033ea <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
	++_M_current;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	601a      	str	r2, [r3, #0]
	return *this;
 80033fc:	687b      	ldr	r3, [r7, #4]
      }
 80033fe:	4618      	mov	r0, r3
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
    }
#endif  // !_GLIBCXX_USE_CXX11_ABI
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 8003422:	b580      	push	{r7, lr}
 8003424:	b088      	sub	sp, #32
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
	rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
      const __size_type __len = _Traits::length(__lhs);
 800342e:	68b8      	ldr	r0, [r7, #8]
 8003430:	f7fd fdfe 	bl	8001030 <_ZNSt11char_traitsIcE6lengthEPKc>
 8003434:	61f8      	str	r0, [r7, #28]
      __string_type __str(_Alloc_traits::_S_select_on_copy(
 8003436:	f107 0318 	add.w	r3, r7, #24
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4618      	mov	r0, r3
 800343e:	f004 facd 	bl	80079dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 8003442:	f107 0314 	add.w	r3, r7, #20
 8003446:	f107 0218 	add.w	r2, r7, #24
 800344a:	4611      	mov	r1, r2
 800344c:	4618      	mov	r0, r3
 800344e:	f000 f979 	bl	8003744 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 8003452:	f107 0314 	add.w	r3, r7, #20
 8003456:	4619      	mov	r1, r3
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f004 f87e 	bl	800755a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>
 800345e:	f107 0314 	add.w	r3, r7, #20
 8003462:	4618      	mov	r0, r3
 8003464:	f003 feb4 	bl	80071d0 <_ZNSaIcED1Ev>
 8003468:	f107 0318 	add.w	r3, r7, #24
 800346c:	4618      	mov	r0, r3
 800346e:	f003 feaf 	bl	80071d0 <_ZNSaIcED1Ev>
          __rhs.get_allocator()));
      __str.reserve(__len + __rhs.size());
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f004 f8d8 	bl	8007628 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8003478:	4602      	mov	r2, r0
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	4413      	add	r3, r2
 800347e:	4619      	mov	r1, r3
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f004 f8dd 	bl	8007640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__lhs, __len);
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f004 fa7e 	bl	800798c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
      __str.append(__rhs);
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f004 fa74 	bl	8007980 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 8003498:	bf00      	nop
    }
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	2100      	movs	r1, #0
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f004 fa2a 	bl	800790c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 80034b8:	4603      	mov	r3, r0
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 f950 	bl	8003760 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80034c0:	4603      	mov	r3, r0
 80034c2:	4619      	mov	r1, r3
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f004 f858 	bl	800757a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	68b8      	ldr	r0, [r7, #8]
 80034e2:	f004 fa63 	bl	80079ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 80034e6:	4603      	mov	r3, r0
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 f939 	bl	8003760 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80034ee:	4603      	mov	r3, r0
 80034f0:	4619      	mov	r1, r3
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f004 f841 	bl	800757a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	68b8      	ldr	r0, [r7, #8]
 8003510:	f004 fa36 	bl	8007980 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8003514:	4603      	mov	r3, r0
 8003516:	4618      	mov	r0, r3
 8003518:	f000 f922 	bl	8003760 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800351c:	4603      	mov	r3, r0
 800351e:	4619      	mov	r1, r3
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f004 f82a 	bl	800757a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 800352e:	b590      	push	{r4, r7, lr}
 8003530:	b08b      	sub	sp, #44	; 0x2c
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
      bool __use_rhs = false;
 800353a:	2300      	movs	r3, #0
 800353c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if _GLIBCXX17_CONSTEXPR (typename _Alloc_traits::is_always_equal{})
 8003540:	f107 0314 	add.w	r3, r7, #20
 8003544:	4618      	mov	r0, r3
 8003546:	f7fd ff73 	bl	8001430 <_ZNKSt17integral_constantIbLb1EEcvbEv>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x2a>
	__use_rhs = true;
 8003550:	2301      	movs	r3, #1
 8003552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003556:	e024      	b.n	80035a2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x74>
      else if (__lhs.get_allocator() == __rhs.get_allocator())
 8003558:	f107 0318 	add.w	r3, r7, #24
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	4618      	mov	r0, r3
 8003560:	f004 fa3c 	bl	80079dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 8003564:	f107 031c 	add.w	r3, r7, #28
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4618      	mov	r0, r3
 800356c:	f004 fa36 	bl	80079dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 8003570:	f107 021c 	add.w	r2, r7, #28
 8003574:	f107 0318 	add.w	r3, r7, #24
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f000 f8fb 	bl	8003776 <_ZSteqRKSaIcES1_>
 8003580:	4603      	mov	r3, r0
 8003582:	461c      	mov	r4, r3
 8003584:	f107 031c 	add.w	r3, r7, #28
 8003588:	4618      	mov	r0, r3
 800358a:	f003 fe21 	bl	80071d0 <_ZNSaIcED1Ev>
 800358e:	f107 0318 	add.w	r3, r7, #24
 8003592:	4618      	mov	r0, r3
 8003594:	f003 fe1c 	bl	80071d0 <_ZNSaIcED1Ev>
 8003598:	2c00      	cmp	r4, #0
 800359a:	d002      	beq.n	80035a2 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x74>
	__use_rhs = true;
 800359c:	2301      	movs	r3, #1
 800359e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if (__use_rhs)
 80035a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d02b      	beq.n	8003602 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xd4>
	  const auto __size = __lhs.size() + __rhs.size();
 80035aa:	68b8      	ldr	r0, [r7, #8]
 80035ac:	f004 f83c 	bl	8007628 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80035b0:	4604      	mov	r4, r0
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f004 f838 	bl	8007628 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80035b8:	4603      	mov	r3, r0
 80035ba:	4423      	add	r3, r4
 80035bc:	623b      	str	r3, [r7, #32]
	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
 80035be:	68b8      	ldr	r0, [r7, #8]
 80035c0:	f004 f836 	bl	8007630 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80035c4:	4602      	mov	r2, r0
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d908      	bls.n	80035de <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb0>
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f004 f82f 	bl	8007630 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80035d2:	4602      	mov	r2, r0
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d801      	bhi.n	80035de <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb0>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb2>
 80035de:	2300      	movs	r3, #0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00e      	beq.n	8003602 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xd4>
	    return std::move(__rhs.insert(0, __lhs));
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	2100      	movs	r1, #0
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f004 f985 	bl	80078f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>
 80035ee:	4603      	mov	r3, r0
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 f8b5 	bl	8003760 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80035f6:	4603      	mov	r3, r0
 80035f8:	4619      	mov	r1, r3
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f003 ffbd 	bl	800757a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8003600:	e00c      	b.n	800361c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xee>
      return std::move(__lhs.append(__rhs));
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	68b8      	ldr	r0, [r7, #8]
 8003606:	f004 f9bb 	bl	8007980 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 800360a:	4603      	mov	r3, r0
 800360c:	4618      	mov	r0, r3
 800360e:	f000 f8a7 	bl	8003760 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003612:	4603      	mov	r3, r0
 8003614:	4619      	mov	r1, r3
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f003 ffaf 	bl	800757a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	372c      	adds	r7, #44	; 0x2c
 8003620:	46bd      	mov	sp, r7
 8003622:	bd90      	pop	{r4, r7, pc}

08003624 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EES5_RKS8_>:

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	460b      	mov	r3, r1
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	72fb      	strb	r3, [r7, #11]
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
	rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
      __string_type __str(_Alloc_traits::_S_select_on_copy(
 8003632:	f107 0318 	add.w	r3, r7, #24
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4618      	mov	r0, r3
 800363a:	f004 f9cf 	bl	80079dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 800363e:	f107 0314 	add.w	r3, r7, #20
 8003642:	f107 0218 	add.w	r2, r7, #24
 8003646:	4611      	mov	r1, r2
 8003648:	4618      	mov	r0, r3
 800364a:	f000 f87b 	bl	8003744 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 800364e:	f107 0314 	add.w	r3, r7, #20
 8003652:	4619      	mov	r1, r3
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f003 ff80 	bl	800755a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>
 800365a:	f107 0314 	add.w	r3, r7, #20
 800365e:	4618      	mov	r0, r3
 8003660:	f003 fdb6 	bl	80071d0 <_ZNSaIcED1Ev>
 8003664:	f107 0318 	add.w	r3, r7, #24
 8003668:	4618      	mov	r0, r3
 800366a:	f003 fdb1 	bl	80071d0 <_ZNSaIcED1Ev>
          __rhs.get_allocator()));
      const __size_type __len = __rhs.size();
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f003 ffda 	bl	8007628 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8003674:	61f8      	str	r0, [r7, #28]
      __str.reserve(__len + 1);
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3301      	adds	r3, #1
 800367a:	4619      	mov	r1, r3
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f003 ffdf 	bl	8007640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__size_type(1), __lhs);
 8003682:	7afb      	ldrb	r3, [r7, #11]
 8003684:	461a      	mov	r2, r3
 8003686:	2101      	movs	r1, #1
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f004 f881 	bl	8007790 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      __str.append(__rhs);
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f004 f975 	bl	8007980 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 8003696:	bf00      	nop
    }
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	3720      	adds	r7, #32
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <_ZN14CircularBufferILj4096EE7writtenEv>:
  bool written() {
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
    return writeFlag;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ae:	7a1b      	ldrb	r3, [r3, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	bf14      	ite	ne
 80036b4:	2301      	movne	r3, #1
 80036b6:	2300      	moveq	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
  }
 80036ba:	4618      	mov	r0, r3
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <_ZN14CircularBufferILj4096EE4readB5cxx11Ev>:
  std::string read() {
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	6039      	str	r1, [r7, #0]
	std::string a;
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f003 ff3b 	bl	800754c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
    switch (writeFlag) {
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036dc:	7a1b      	ldrb	r3, [r3, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00f      	beq.n	8003702 <_ZN14CircularBufferILj4096EE4readB5cxx11Ev+0x3c>
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d10e      	bne.n	8003704 <_ZN14CircularBufferILj4096EE4readB5cxx11Ev+0x3e>
        a.push_back(buffer[(tail - 1) % maxSize]);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	5cd3      	ldrb	r3, [r2, r3]
 80036f8:	4619      	mov	r1, r3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f003 ffca 	bl	8007694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
        break;
 8003700:	e000      	b.n	8003704 <_ZN14CircularBufferILj4096EE4readB5cxx11Ev+0x3e>
        break;
 8003702:	bf00      	nop
    writeFlag = None;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800370a:	2200      	movs	r2, #0
 800370c:	721a      	strb	r2, [r3, #8]
    return a;
 800370e:	bf00      	nop
  }
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4618      	mov	r0, r3
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6839      	ldr	r1, [r7, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f81b 	bl	800378e <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4618      	mov	r0, r3
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <_ZSteqRKSaIcES1_>:
	__allocator_base<_Tp>::deallocate(__p, __n);
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	6039      	str	r1, [r7, #0]
      { return true; }
 8003780:	2301      	movs	r3, #1
 8003782:	4618      	mov	r0, r3
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static _GLIBCXX20_CONSTEXPR allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 800378e:	b580      	push	{r7, lr}
 8003790:	b082      	sub	sp, #8
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8003798:	6839      	ldr	r1, [r7, #0]
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f003 fd17 	bl	80071ce <_ZNSaIcEC1ERKS_>
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d125      	bne.n	8003804 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037be:	4293      	cmp	r3, r2
 80037c0:	d120      	bne.n	8003804 <_Z41__static_initialization_and_destruction_0ii+0x5c>
CircularBuffer<4096> rx;
 80037c2:	4818      	ldr	r0, [pc, #96]	; (8003824 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80037c4:	f7fd fcad 	bl	8001122 <_ZN14CircularBufferILj4096EEC1Ev>
CircularBuffer<4096> tx;
 80037c8:	4817      	ldr	r0, [pc, #92]	; (8003828 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80037ca:	f7fd fcaa 	bl	8001122 <_ZN14CircularBufferILj4096EEC1Ev>
float timemul=MULTIPL,realshotdelay=DELTIME*timemul;
 80037ce:	4b17      	ldr	r3, [pc, #92]	; (800382c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80037d0:	edd3 7a00 	vldr	s15, [r3]
 80037d4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003830 <_Z41__static_initialization_and_destruction_0ii+0x88>
 80037d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037dc:	4b15      	ldr	r3, [pc, #84]	; (8003834 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80037de:	edc3 7a00 	vstr	s15, [r3]
	std::string frameMainBuffer="";
 80037e2:	f107 030c 	add.w	r3, r7, #12
 80037e6:	4618      	mov	r0, r3
 80037e8:	f003 fcf0 	bl	80071cc <_ZNSaIcEC1Ev>
 80037ec:	f107 030c 	add.w	r3, r7, #12
 80037f0:	461a      	mov	r2, r3
 80037f2:	4911      	ldr	r1, [pc, #68]	; (8003838 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80037f4:	4811      	ldr	r0, [pc, #68]	; (800383c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80037f6:	f004 f9b5 	bl	8007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80037fa:	f107 030c 	add.w	r3, r7, #12
 80037fe:	4618      	mov	r0, r3
 8003800:	f003 fce6 	bl	80071d0 <_ZNSaIcED1Ev>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d107      	bne.n	800381a <_Z41__static_initialization_and_destruction_0ii+0x72>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003810:	4293      	cmp	r3, r2
 8003812:	d102      	bne.n	800381a <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003814:	4809      	ldr	r0, [pc, #36]	; (800383c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003816:	f003 feca 	bl	80075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800381a:	bf00      	nop
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	200002fc 	.word	0x200002fc
 8003828:	2000130c 	.word	0x2000130c
 800382c:	20000010 	.word	0x20000010
 8003830:	42c80000 	.word	0x42c80000
 8003834:	20002318 	.word	0x20002318
 8003838:	0800c554 	.word	0x0800c554
 800383c:	20002b40 	.word	0x20002b40

08003840 <_GLOBAL__sub_I_hadc1>:
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
 8003844:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003848:	2001      	movs	r0, #1
 800384a:	f7ff ffad 	bl	80037a8 <_Z41__static_initialization_and_destruction_0ii>
 800384e:	bd80      	pop	{r7, pc}

08003850 <_GLOBAL__sub_D_hadc1>:
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
 8003854:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003858:	2000      	movs	r0, #0
 800385a:	f7ff ffa5 	bl	80037a8 <_Z41__static_initialization_and_destruction_0ii>
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	607b      	str	r3, [r7, #4]
 800386a:	4b10      	ldr	r3, [pc, #64]	; (80038ac <HAL_MspInit+0x4c>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	4a0f      	ldr	r2, [pc, #60]	; (80038ac <HAL_MspInit+0x4c>)
 8003870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003874:	6453      	str	r3, [r2, #68]	; 0x44
 8003876:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <HAL_MspInit+0x4c>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	603b      	str	r3, [r7, #0]
 8003886:	4b09      	ldr	r3, [pc, #36]	; (80038ac <HAL_MspInit+0x4c>)
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	4a08      	ldr	r2, [pc, #32]	; (80038ac <HAL_MspInit+0x4c>)
 800388c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003890:	6413      	str	r3, [r2, #64]	; 0x40
 8003892:	4b06      	ldr	r3, [pc, #24]	; (80038ac <HAL_MspInit+0x4c>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800389e:	2007      	movs	r0, #7
 80038a0:	f001 f8ca 	bl	8004a38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038a4:	bf00      	nop
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40023800 	.word	0x40023800

080038b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08a      	sub	sp, #40	; 0x28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b8:	f107 0314 	add.w	r3, r7, #20
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	60da      	str	r2, [r3, #12]
 80038c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a33      	ldr	r2, [pc, #204]	; (800399c <HAL_ADC_MspInit+0xec>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d15f      	bne.n	8003992 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80038d2:	2300      	movs	r3, #0
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	4b32      	ldr	r3, [pc, #200]	; (80039a0 <HAL_ADC_MspInit+0xf0>)
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	4a31      	ldr	r2, [pc, #196]	; (80039a0 <HAL_ADC_MspInit+0xf0>)
 80038dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e0:	6453      	str	r3, [r2, #68]	; 0x44
 80038e2:	4b2f      	ldr	r3, [pc, #188]	; (80039a0 <HAL_ADC_MspInit+0xf0>)
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	613b      	str	r3, [r7, #16]
 80038ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	4b2b      	ldr	r3, [pc, #172]	; (80039a0 <HAL_ADC_MspInit+0xf0>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	4a2a      	ldr	r2, [pc, #168]	; (80039a0 <HAL_ADC_MspInit+0xf0>)
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	6313      	str	r3, [r2, #48]	; 0x30
 80038fe:	4b28      	ldr	r3, [pc, #160]	; (80039a0 <HAL_ADC_MspInit+0xf0>)
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800390a:	2303      	movs	r3, #3
 800390c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800390e:	2303      	movs	r3, #3
 8003910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003916:	f107 0314 	add.w	r3, r7, #20
 800391a:	4619      	mov	r1, r3
 800391c:	4821      	ldr	r0, [pc, #132]	; (80039a4 <HAL_ADC_MspInit+0xf4>)
 800391e:	f001 fcdd 	bl	80052dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003922:	4b21      	ldr	r3, [pc, #132]	; (80039a8 <HAL_ADC_MspInit+0xf8>)
 8003924:	4a21      	ldr	r2, [pc, #132]	; (80039ac <HAL_ADC_MspInit+0xfc>)
 8003926:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003928:	4b1f      	ldr	r3, [pc, #124]	; (80039a8 <HAL_ADC_MspInit+0xf8>)
 800392a:	2200      	movs	r2, #0
 800392c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800392e:	4b1e      	ldr	r3, [pc, #120]	; (80039a8 <HAL_ADC_MspInit+0xf8>)
 8003930:	2200      	movs	r2, #0
 8003932:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003934:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <HAL_ADC_MspInit+0xf8>)
 8003936:	2200      	movs	r2, #0
 8003938:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800393a:	4b1b      	ldr	r3, [pc, #108]	; (80039a8 <HAL_ADC_MspInit+0xf8>)
 800393c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003940:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003942:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <HAL_ADC_MspInit+0xf8>)
 8003944:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003948:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800394a:	4b17      	ldr	r3, [pc, #92]	; (80039a8 <HAL_ADC_MspInit+0xf8>)
 800394c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003950:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003952:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <HAL_ADC_MspInit+0xf8>)
 8003954:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003958:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800395a:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <HAL_ADC_MspInit+0xf8>)
 800395c:	2200      	movs	r2, #0
 800395e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003960:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <HAL_ADC_MspInit+0xf8>)
 8003962:	2200      	movs	r2, #0
 8003964:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003966:	4810      	ldr	r0, [pc, #64]	; (80039a8 <HAL_ADC_MspInit+0xf8>)
 8003968:	f001 f8b6 	bl	8004ad8 <HAL_DMA_Init>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003972:	f7ff faa5 	bl	8002ec0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a0b      	ldr	r2, [pc, #44]	; (80039a8 <HAL_ADC_MspInit+0xf8>)
 800397a:	639a      	str	r2, [r3, #56]	; 0x38
 800397c:	4a0a      	ldr	r2, [pc, #40]	; (80039a8 <HAL_ADC_MspInit+0xf8>)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 1);
 8003982:	2201      	movs	r2, #1
 8003984:	2100      	movs	r1, #0
 8003986:	2012      	movs	r0, #18
 8003988:	f001 f861 	bl	8004a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800398c:	2012      	movs	r0, #18
 800398e:	f001 f87a 	bl	8004a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003992:	bf00      	nop
 8003994:	3728      	adds	r7, #40	; 0x28
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40012000 	.word	0x40012000
 80039a0:	40023800 	.word	0x40023800
 80039a4:	40020000 	.word	0x40020000
 80039a8:	20000254 	.word	0x20000254
 80039ac:	40026410 	.word	0x40026410

080039b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08a      	sub	sp, #40	; 0x28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b8:	f107 0314 	add.w	r3, r7, #20
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	60da      	str	r2, [r3, #12]
 80039c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a1d      	ldr	r2, [pc, #116]	; (8003a44 <HAL_UART_MspInit+0x94>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d133      	bne.n	8003a3a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	4b1c      	ldr	r3, [pc, #112]	; (8003a48 <HAL_UART_MspInit+0x98>)
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	4a1b      	ldr	r2, [pc, #108]	; (8003a48 <HAL_UART_MspInit+0x98>)
 80039dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e0:	6413      	str	r3, [r2, #64]	; 0x40
 80039e2:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <HAL_UART_MspInit+0x98>)
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <HAL_UART_MspInit+0x98>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	4a14      	ldr	r2, [pc, #80]	; (8003a48 <HAL_UART_MspInit+0x98>)
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	6313      	str	r3, [r2, #48]	; 0x30
 80039fe:	4b12      	ldr	r3, [pc, #72]	; (8003a48 <HAL_UART_MspInit+0x98>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003a0a:	230c      	movs	r3, #12
 8003a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a16:	2303      	movs	r3, #3
 8003a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a1a:	2307      	movs	r3, #7
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a1e:	f107 0314 	add.w	r3, r7, #20
 8003a22:	4619      	mov	r1, r3
 8003a24:	4809      	ldr	r0, [pc, #36]	; (8003a4c <HAL_UART_MspInit+0x9c>)
 8003a26:	f001 fc59 	bl	80052dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	2026      	movs	r0, #38	; 0x26
 8003a30:	f001 f80d 	bl	8004a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a34:	2026      	movs	r0, #38	; 0x26
 8003a36:	f001 f826 	bl	8004a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a3a:	bf00      	nop
 8003a3c:	3728      	adds	r7, #40	; 0x28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40004400 	.word	0x40004400
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	40020000 	.word	0x40020000

08003a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a54:	e7fe      	b.n	8003a54 <NMI_Handler+0x4>

08003a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a56:	b480      	push	{r7}
 8003a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a5a:	e7fe      	b.n	8003a5a <HardFault_Handler+0x4>

08003a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a60:	e7fe      	b.n	8003a60 <MemManage_Handler+0x4>

08003a62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a66:	e7fe      	b.n	8003a66 <BusFault_Handler+0x4>

08003a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a6c:	e7fe      	b.n	8003a6c <UsageFault_Handler+0x4>

08003a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a72:	bf00      	nop
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a80:	bf00      	nop
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a8e:	bf00      	nop
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	//przerwania co 1ms
	firingswitch();
 8003a9c:	f7fe ff10 	bl	80028c0 <firingswitch>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aa0:	f000 f984 	bl	8003dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003aa4:	bf00      	nop
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003aac:	4802      	ldr	r0, [pc, #8]	; (8003ab8 <ADC_IRQHandler+0x10>)
 8003aae:	f000 f9e0 	bl	8003e72 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	2000020c 	.word	0x2000020c

08003abc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FB_Pin);
 8003ac0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003ac4:	f001 fdd0 	bl	8005668 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003ac8:	bf00      	nop
 8003aca:	bd80      	pop	{r7, pc}

08003acc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ad0:	4802      	ldr	r0, [pc, #8]	; (8003adc <USART2_IRQHandler+0x10>)
 8003ad2:	f002 fc8b 	bl	80063ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003ad6:	bf00      	nop
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	200002b4 	.word	0x200002b4

08003ae0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003ae4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003ae8:	f001 fdbe 	bl	8005668 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003aec:	bf00      	nop
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003af4:	4802      	ldr	r0, [pc, #8]	; (8003b00 <DMA2_Stream0_IRQHandler+0x10>)
 8003af6:	f001 f987 	bl	8004e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003afa:	bf00      	nop
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20000254 	.word	0x20000254

08003b04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  return 1;
 8003b08:	2301      	movs	r3, #1
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <_kill>:

int _kill(int pid, int sig)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b1e:	f006 f857 	bl	8009bd0 <__errno>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2216      	movs	r2, #22
 8003b26:	601a      	str	r2, [r3, #0]
  return -1;
 8003b28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <_exit>:

void _exit (int status)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff ffe7 	bl	8003b14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b46:	e7fe      	b.n	8003b46 <_exit+0x12>

08003b48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	e00a      	b.n	8003b70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b5a:	f3af 8000 	nop.w
 8003b5e:	4601      	mov	r1, r0
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	60ba      	str	r2, [r7, #8]
 8003b66:	b2ca      	uxtb	r2, r1
 8003b68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	dbf0      	blt.n	8003b5a <_read+0x12>
  }

  return len;
 8003b78:	687b      	ldr	r3, [r7, #4]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b086      	sub	sp, #24
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	e009      	b.n	8003ba8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	60ba      	str	r2, [r7, #8]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	dbf1      	blt.n	8003b94 <_write+0x12>
  }
  return len;
 8003bb0:	687b      	ldr	r3, [r7, #4]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <_close>:

int _close(int file)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003bc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003be2:	605a      	str	r2, [r3, #4]
  return 0;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <_isatty>:

int _isatty(int file)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003bfa:	2301      	movs	r3, #1
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c2c:	4a14      	ldr	r2, [pc, #80]	; (8003c80 <_sbrk+0x5c>)
 8003c2e:	4b15      	ldr	r3, [pc, #84]	; (8003c84 <_sbrk+0x60>)
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c38:	4b13      	ldr	r3, [pc, #76]	; (8003c88 <_sbrk+0x64>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d102      	bne.n	8003c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c40:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <_sbrk+0x64>)
 8003c42:	4a12      	ldr	r2, [pc, #72]	; (8003c8c <_sbrk+0x68>)
 8003c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c46:	4b10      	ldr	r3, [pc, #64]	; (8003c88 <_sbrk+0x64>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d207      	bcs.n	8003c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c54:	f005 ffbc 	bl	8009bd0 <__errno>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	220c      	movs	r2, #12
 8003c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c62:	e009      	b.n	8003c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c64:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <_sbrk+0x64>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c6a:	4b07      	ldr	r3, [pc, #28]	; (8003c88 <_sbrk+0x64>)
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4413      	add	r3, r2
 8003c72:	4a05      	ldr	r2, [pc, #20]	; (8003c88 <_sbrk+0x64>)
 8003c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c76:	68fb      	ldr	r3, [r7, #12]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	20020000 	.word	0x20020000
 8003c84:	00000400 	.word	0x00000400
 8003c88:	20002b5c 	.word	0x20002b5c
 8003c8c:	20002cb8 	.word	0x20002cb8

08003c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <SystemInit+0x20>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9a:	4a05      	ldr	r2, [pc, #20]	; (8003cb0 <SystemInit+0x20>)
 8003c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ca4:	bf00      	nop
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	e000ed00 	.word	0xe000ed00

08003cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003cb8:	480d      	ldr	r0, [pc, #52]	; (8003cf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003cba:	490e      	ldr	r1, [pc, #56]	; (8003cf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003cbc:	4a0e      	ldr	r2, [pc, #56]	; (8003cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cc0:	e002      	b.n	8003cc8 <LoopCopyDataInit>

08003cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cc6:	3304      	adds	r3, #4

08003cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ccc:	d3f9      	bcc.n	8003cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cce:	4a0b      	ldr	r2, [pc, #44]	; (8003cfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003cd0:	4c0b      	ldr	r4, [pc, #44]	; (8003d00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cd4:	e001      	b.n	8003cda <LoopFillZerobss>

08003cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cd8:	3204      	adds	r2, #4

08003cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cdc:	d3fb      	bcc.n	8003cd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003cde:	f7ff ffd7 	bl	8003c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ce2:	f005 ff7b 	bl	8009bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ce6:	f7fe fe13 	bl	8002910 <main>
  bx  lr    
 8003cea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003cec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cf4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003cf8:	0800cc14 	.word	0x0800cc14
  ldr r2, =_sbss
 8003cfc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003d00:	20002cb4 	.word	0x20002cb4

08003d04 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d04:	e7fe      	b.n	8003d04 <CAN1_RX0_IRQHandler>
	...

08003d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <HAL_Init+0x40>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a0d      	ldr	r2, [pc, #52]	; (8003d48 <HAL_Init+0x40>)
 8003d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d18:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <HAL_Init+0x40>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <HAL_Init+0x40>)
 8003d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d24:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <HAL_Init+0x40>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a07      	ldr	r2, [pc, #28]	; (8003d48 <HAL_Init+0x40>)
 8003d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d30:	2003      	movs	r0, #3
 8003d32:	f000 fe81 	bl	8004a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d36:	2000      	movs	r0, #0
 8003d38:	f000 f808 	bl	8003d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d3c:	f7ff fd90 	bl	8003860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40023c00 	.word	0x40023c00

08003d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d54:	4b12      	ldr	r3, [pc, #72]	; (8003da0 <HAL_InitTick+0x54>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <HAL_InitTick+0x58>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fea7 	bl	8004abe <HAL_SYSTICK_Config>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e00e      	b.n	8003d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b0f      	cmp	r3, #15
 8003d7e:	d80a      	bhi.n	8003d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d80:	2200      	movs	r2, #0
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	f04f 30ff 	mov.w	r0, #4294967295
 8003d88:	f000 fe61 	bl	8004a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d8c:	4a06      	ldr	r2, [pc, #24]	; (8003da8 <HAL_InitTick+0x5c>)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	e000      	b.n	8003d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	2000001c 	.word	0x2000001c
 8003da4:	20000024 	.word	0x20000024
 8003da8:	20000020 	.word	0x20000020

08003dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_IncTick+0x20>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	461a      	mov	r2, r3
 8003db6:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_IncTick+0x24>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4413      	add	r3, r2
 8003dbc:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <HAL_IncTick+0x24>)
 8003dbe:	6013      	str	r3, [r2, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	20000024 	.word	0x20000024
 8003dd0:	20002b60 	.word	0x20002b60

08003dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <HAL_GetTick+0x14>)
 8003dda:	681b      	ldr	r3, [r3, #0]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	20002b60 	.word	0x20002b60

08003dec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e033      	b.n	8003e6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff fd50 	bl	80038b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d118      	bne.n	8003e5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e32:	f023 0302 	bic.w	r3, r3, #2
 8003e36:	f043 0202 	orr.w	r2, r3, #2
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fb7e 	bl	8004540 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f023 0303 	bic.w	r3, r3, #3
 8003e52:	f043 0201 	orr.w	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40
 8003e5a:	e001      	b.n	8003e60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b086      	sub	sp, #24
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f003 0320 	and.w	r3, r3, #32
 8003ea0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d049      	beq.n	8003f3c <HAL_ADC_IRQHandler+0xca>
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d046      	beq.n	8003f3c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f003 0310 	and.w	r3, r3, #16
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d105      	bne.n	8003ec6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d12b      	bne.n	8003f2c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d127      	bne.n	8003f2c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d006      	beq.n	8003ef8 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d119      	bne.n	8003f2c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0220 	bic.w	r2, r2, #32
 8003f06:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d105      	bne.n	8003f2c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	f043 0201 	orr.w	r2, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7fe fb43 	bl	80025b8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f06f 0212 	mvn.w	r2, #18
 8003f3a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d057      	beq.n	8004002 <HAL_ADC_IRQHandler+0x190>
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d054      	beq.n	8004002 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d105      	bne.n	8003f70 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d139      	bne.n	8003ff2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d006      	beq.n	8003f9a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d12b      	bne.n	8003ff2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d124      	bne.n	8003ff2 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d11d      	bne.n	8003ff2 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d119      	bne.n	8003ff2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fcc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d105      	bne.n	8003ff2 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f043 0201 	orr.w	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 fc22 	bl	800483c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 020c 	mvn.w	r2, #12
 8004000:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004010:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d017      	beq.n	8004048 <HAL_ADC_IRQHandler+0x1d6>
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d014      	beq.n	8004048 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b01      	cmp	r3, #1
 800402a:	d10d      	bne.n	8004048 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f93b 	bl	80042b4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f06f 0201 	mvn.w	r2, #1
 8004046:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004056:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d015      	beq.n	800408a <HAL_ADC_IRQHandler+0x218>
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d012      	beq.n	800408a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	f043 0202 	orr.w	r2, r3, #2
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0220 	mvn.w	r2, #32
 8004078:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f924 	bl	80042c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f06f 0220 	mvn.w	r2, #32
 8004088:	601a      	str	r2, [r3, #0]
  }
}
 800408a:	bf00      	nop
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_ADC_Start_DMA+0x1e>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e0e9      	b.n	8004286 <HAL_ADC_Start_DMA+0x1f2>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d018      	beq.n	80040fa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80040d8:	4b6d      	ldr	r3, [pc, #436]	; (8004290 <HAL_ADC_Start_DMA+0x1fc>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a6d      	ldr	r2, [pc, #436]	; (8004294 <HAL_ADC_Start_DMA+0x200>)
 80040de:	fba2 2303 	umull	r2, r3, r2, r3
 80040e2:	0c9a      	lsrs	r2, r3, #18
 80040e4:	4613      	mov	r3, r2
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	4413      	add	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80040ec:	e002      	b.n	80040f4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	3b01      	subs	r3, #1
 80040f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f9      	bne.n	80040ee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004108:	d107      	bne.n	800411a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004118:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	2b01      	cmp	r3, #1
 8004126:	f040 80a1 	bne.w	800426c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004148:	2b00      	cmp	r3, #0
 800414a:	d007      	beq.n	800415c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004154:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004168:	d106      	bne.n	8004178 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416e:	f023 0206 	bic.w	r2, r3, #6
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	645a      	str	r2, [r3, #68]	; 0x44
 8004176:	e002      	b.n	800417e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004186:	4b44      	ldr	r3, [pc, #272]	; (8004298 <HAL_ADC_Start_DMA+0x204>)
 8004188:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	4a43      	ldr	r2, [pc, #268]	; (800429c <HAL_ADC_Start_DMA+0x208>)
 8004190:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	4a42      	ldr	r2, [pc, #264]	; (80042a0 <HAL_ADC_Start_DMA+0x20c>)
 8004198:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	4a41      	ldr	r2, [pc, #260]	; (80042a4 <HAL_ADC_Start_DMA+0x210>)
 80041a0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80041aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80041ba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	334c      	adds	r3, #76	; 0x4c
 80041d6:	4619      	mov	r1, r3
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f000 fd2a 	bl	8004c34 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f003 031f 	and.w	r3, r3, #31
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d12a      	bne.n	8004242 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a2d      	ldr	r2, [pc, #180]	; (80042a8 <HAL_ADC_Start_DMA+0x214>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d015      	beq.n	8004222 <HAL_ADC_Start_DMA+0x18e>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a2c      	ldr	r2, [pc, #176]	; (80042ac <HAL_ADC_Start_DMA+0x218>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d105      	bne.n	800420c <HAL_ADC_Start_DMA+0x178>
 8004200:	4b25      	ldr	r3, [pc, #148]	; (8004298 <HAL_ADC_Start_DMA+0x204>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 031f 	and.w	r3, r3, #31
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a27      	ldr	r2, [pc, #156]	; (80042b0 <HAL_ADC_Start_DMA+0x21c>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d136      	bne.n	8004284 <HAL_ADC_Start_DMA+0x1f0>
 8004216:	4b20      	ldr	r3, [pc, #128]	; (8004298 <HAL_ADC_Start_DMA+0x204>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b00      	cmp	r3, #0
 8004220:	d130      	bne.n	8004284 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d129      	bne.n	8004284 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	e020      	b.n	8004284 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a18      	ldr	r2, [pc, #96]	; (80042a8 <HAL_ADC_Start_DMA+0x214>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d11b      	bne.n	8004284 <HAL_ADC_Start_DMA+0x1f0>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d114      	bne.n	8004284 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004268:	609a      	str	r2, [r3, #8]
 800426a:	e00b      	b.n	8004284 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	f043 0210 	orr.w	r2, r3, #16
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427c:	f043 0201 	orr.w	r2, r3, #1
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3718      	adds	r7, #24
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	2000001c 	.word	0x2000001c
 8004294:	431bde83 	.word	0x431bde83
 8004298:	40012300 	.word	0x40012300
 800429c:	08004739 	.word	0x08004739
 80042a0:	080047f3 	.word	0x080047f3
 80042a4:	0800480f 	.word	0x0800480f
 80042a8:	40012000 	.word	0x40012000
 80042ac:	40012100 	.word	0x40012100
 80042b0:	40012200 	.word	0x40012200

080042b4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x1c>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e113      	b.n	8004520 <HAL_ADC_ConfigChannel+0x244>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b09      	cmp	r3, #9
 8004306:	d925      	bls.n	8004354 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68d9      	ldr	r1, [r3, #12]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	4613      	mov	r3, r2
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	4413      	add	r3, r2
 800431c:	3b1e      	subs	r3, #30
 800431e:	2207      	movs	r2, #7
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	43da      	mvns	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	400a      	ands	r2, r1
 800432c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68d9      	ldr	r1, [r3, #12]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	4618      	mov	r0, r3
 8004340:	4603      	mov	r3, r0
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	4403      	add	r3, r0
 8004346:	3b1e      	subs	r3, #30
 8004348:	409a      	lsls	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	60da      	str	r2, [r3, #12]
 8004352:	e022      	b.n	800439a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6919      	ldr	r1, [r3, #16]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	461a      	mov	r2, r3
 8004362:	4613      	mov	r3, r2
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	4413      	add	r3, r2
 8004368:	2207      	movs	r2, #7
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	43da      	mvns	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	400a      	ands	r2, r1
 8004376:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6919      	ldr	r1, [r3, #16]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	b29b      	uxth	r3, r3
 8004388:	4618      	mov	r0, r3
 800438a:	4603      	mov	r3, r0
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	4403      	add	r3, r0
 8004390:	409a      	lsls	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b06      	cmp	r3, #6
 80043a0:	d824      	bhi.n	80043ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	3b05      	subs	r3, #5
 80043b4:	221f      	movs	r2, #31
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	43da      	mvns	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	400a      	ands	r2, r1
 80043c2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	4618      	mov	r0, r3
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	3b05      	subs	r3, #5
 80043de:	fa00 f203 	lsl.w	r2, r0, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	635a      	str	r2, [r3, #52]	; 0x34
 80043ea:	e04c      	b.n	8004486 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b0c      	cmp	r3, #12
 80043f2:	d824      	bhi.n	800443e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	3b23      	subs	r3, #35	; 0x23
 8004406:	221f      	movs	r2, #31
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43da      	mvns	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	400a      	ands	r2, r1
 8004414:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	b29b      	uxth	r3, r3
 8004422:	4618      	mov	r0, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	3b23      	subs	r3, #35	; 0x23
 8004430:	fa00 f203 	lsl.w	r2, r0, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	631a      	str	r2, [r3, #48]	; 0x30
 800443c:	e023      	b.n	8004486 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	3b41      	subs	r3, #65	; 0x41
 8004450:	221f      	movs	r2, #31
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	43da      	mvns	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	400a      	ands	r2, r1
 800445e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	b29b      	uxth	r3, r3
 800446c:	4618      	mov	r0, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	3b41      	subs	r3, #65	; 0x41
 800447a:	fa00 f203 	lsl.w	r2, r0, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004486:	4b29      	ldr	r3, [pc, #164]	; (800452c <HAL_ADC_ConfigChannel+0x250>)
 8004488:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a28      	ldr	r2, [pc, #160]	; (8004530 <HAL_ADC_ConfigChannel+0x254>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d10f      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x1d8>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b12      	cmp	r3, #18
 800449a:	d10b      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a1d      	ldr	r2, [pc, #116]	; (8004530 <HAL_ADC_ConfigChannel+0x254>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d12b      	bne.n	8004516 <HAL_ADC_ConfigChannel+0x23a>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a1c      	ldr	r2, [pc, #112]	; (8004534 <HAL_ADC_ConfigChannel+0x258>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d003      	beq.n	80044d0 <HAL_ADC_ConfigChannel+0x1f4>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b11      	cmp	r3, #17
 80044ce:	d122      	bne.n	8004516 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a11      	ldr	r2, [pc, #68]	; (8004534 <HAL_ADC_ConfigChannel+0x258>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d111      	bne.n	8004516 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044f2:	4b11      	ldr	r3, [pc, #68]	; (8004538 <HAL_ADC_ConfigChannel+0x25c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a11      	ldr	r2, [pc, #68]	; (800453c <HAL_ADC_ConfigChannel+0x260>)
 80044f8:	fba2 2303 	umull	r2, r3, r2, r3
 80044fc:	0c9a      	lsrs	r2, r3, #18
 80044fe:	4613      	mov	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004508:	e002      	b.n	8004510 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	3b01      	subs	r3, #1
 800450e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1f9      	bne.n	800450a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	40012300 	.word	0x40012300
 8004530:	40012000 	.word	0x40012000
 8004534:	10000012 	.word	0x10000012
 8004538:	2000001c 	.word	0x2000001c
 800453c:	431bde83 	.word	0x431bde83

08004540 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004548:	4b79      	ldr	r3, [pc, #484]	; (8004730 <ADC_Init+0x1f0>)
 800454a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	431a      	orrs	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004574:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6859      	ldr	r1, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	021a      	lsls	r2, r3, #8
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004598:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6859      	ldr	r1, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6899      	ldr	r1, [r3, #8]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d2:	4a58      	ldr	r2, [pc, #352]	; (8004734 <ADC_Init+0x1f4>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d022      	beq.n	800461e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6899      	ldr	r1, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004608:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6899      	ldr	r1, [r3, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	609a      	str	r2, [r3, #8]
 800461c:	e00f      	b.n	800463e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800462c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800463c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0202 	bic.w	r2, r2, #2
 800464c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6899      	ldr	r1, [r3, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	7e1b      	ldrb	r3, [r3, #24]
 8004658:	005a      	lsls	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d01b      	beq.n	80046a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800467a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800468a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6859      	ldr	r1, [r3, #4]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	3b01      	subs	r3, #1
 8004698:	035a      	lsls	r2, r3, #13
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	e007      	b.n	80046b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80046c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	051a      	lsls	r2, r3, #20
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6899      	ldr	r1, [r3, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046f6:	025a      	lsls	r2, r3, #9
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6899      	ldr	r1, [r3, #8]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	029a      	lsls	r2, r3, #10
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	609a      	str	r2, [r3, #8]
}
 8004724:	bf00      	nop
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	40012300 	.word	0x40012300
 8004734:	0f000001 	.word	0x0f000001

08004738 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800474e:	2b00      	cmp	r3, #0
 8004750:	d13c      	bne.n	80047cc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d12b      	bne.n	80047c4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004770:	2b00      	cmp	r3, #0
 8004772:	d127      	bne.n	80047c4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800477e:	2b00      	cmp	r3, #0
 8004780:	d006      	beq.n	8004790 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800478c:	2b00      	cmp	r3, #0
 800478e:	d119      	bne.n	80047c4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0220 	bic.w	r2, r2, #32
 800479e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d105      	bne.n	80047c4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	f043 0201 	orr.w	r2, r3, #1
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f7fd fef7 	bl	80025b8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80047ca:	e00e      	b.n	80047ea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f7ff fd75 	bl	80042c8 <HAL_ADC_ErrorCallback>
}
 80047de:	e004      	b.n	80047ea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	4798      	blx	r3
}
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f7fd feed 	bl	80025e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004806:	bf00      	nop
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2240      	movs	r2, #64	; 0x40
 8004820:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004826:	f043 0204 	orr.w	r2, r3, #4
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f7ff fd4a 	bl	80042c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004834:	bf00      	nop
 8004836:	3710      	adds	r7, #16
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004860:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <__NVIC_SetPriorityGrouping+0x44>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800486c:	4013      	ands	r3, r2
 800486e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800487c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004882:	4a04      	ldr	r2, [pc, #16]	; (8004894 <__NVIC_SetPriorityGrouping+0x44>)
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	60d3      	str	r3, [r2, #12]
}
 8004888:	bf00      	nop
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	e000ed00 	.word	0xe000ed00

08004898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800489c:	4b04      	ldr	r3, [pc, #16]	; (80048b0 <__NVIC_GetPriorityGrouping+0x18>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	0a1b      	lsrs	r3, r3, #8
 80048a2:	f003 0307 	and.w	r3, r3, #7
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	e000ed00 	.word	0xe000ed00

080048b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	4603      	mov	r3, r0
 80048bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	db0b      	blt.n	80048de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048c6:	79fb      	ldrb	r3, [r7, #7]
 80048c8:	f003 021f 	and.w	r2, r3, #31
 80048cc:	4907      	ldr	r1, [pc, #28]	; (80048ec <__NVIC_EnableIRQ+0x38>)
 80048ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d2:	095b      	lsrs	r3, r3, #5
 80048d4:	2001      	movs	r0, #1
 80048d6:	fa00 f202 	lsl.w	r2, r0, r2
 80048da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	e000e100 	.word	0xe000e100

080048f0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	4603      	mov	r3, r0
 80048f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	db12      	blt.n	8004928 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004902:	79fb      	ldrb	r3, [r7, #7]
 8004904:	f003 021f 	and.w	r2, r3, #31
 8004908:	490a      	ldr	r1, [pc, #40]	; (8004934 <__NVIC_DisableIRQ+0x44>)
 800490a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	2001      	movs	r0, #1
 8004912:	fa00 f202 	lsl.w	r2, r0, r2
 8004916:	3320      	adds	r3, #32
 8004918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800491c:	f3bf 8f4f 	dsb	sy
}
 8004920:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004922:	f3bf 8f6f 	isb	sy
}
 8004926:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	e000e100 	.word	0xe000e100

08004938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	6039      	str	r1, [r7, #0]
 8004942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004948:	2b00      	cmp	r3, #0
 800494a:	db0a      	blt.n	8004962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	b2da      	uxtb	r2, r3
 8004950:	490c      	ldr	r1, [pc, #48]	; (8004984 <__NVIC_SetPriority+0x4c>)
 8004952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004956:	0112      	lsls	r2, r2, #4
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	440b      	add	r3, r1
 800495c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004960:	e00a      	b.n	8004978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	b2da      	uxtb	r2, r3
 8004966:	4908      	ldr	r1, [pc, #32]	; (8004988 <__NVIC_SetPriority+0x50>)
 8004968:	79fb      	ldrb	r3, [r7, #7]
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	3b04      	subs	r3, #4
 8004970:	0112      	lsls	r2, r2, #4
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	440b      	add	r3, r1
 8004976:	761a      	strb	r2, [r3, #24]
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	e000e100 	.word	0xe000e100
 8004988:	e000ed00 	.word	0xe000ed00

0800498c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800498c:	b480      	push	{r7}
 800498e:	b089      	sub	sp, #36	; 0x24
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	f1c3 0307 	rsb	r3, r3, #7
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	bf28      	it	cs
 80049aa:	2304      	movcs	r3, #4
 80049ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	3304      	adds	r3, #4
 80049b2:	2b06      	cmp	r3, #6
 80049b4:	d902      	bls.n	80049bc <NVIC_EncodePriority+0x30>
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	3b03      	subs	r3, #3
 80049ba:	e000      	b.n	80049be <NVIC_EncodePriority+0x32>
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049c0:	f04f 32ff 	mov.w	r2, #4294967295
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43da      	mvns	r2, r3
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	401a      	ands	r2, r3
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049d4:	f04f 31ff 	mov.w	r1, #4294967295
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	fa01 f303 	lsl.w	r3, r1, r3
 80049de:	43d9      	mvns	r1, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049e4:	4313      	orrs	r3, r2
         );
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3724      	adds	r7, #36	; 0x24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
	...

080049f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a04:	d301      	bcc.n	8004a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a06:	2301      	movs	r3, #1
 8004a08:	e00f      	b.n	8004a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a0a:	4a0a      	ldr	r2, [pc, #40]	; (8004a34 <SysTick_Config+0x40>)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a12:	210f      	movs	r1, #15
 8004a14:	f04f 30ff 	mov.w	r0, #4294967295
 8004a18:	f7ff ff8e 	bl	8004938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a1c:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <SysTick_Config+0x40>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a22:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <SysTick_Config+0x40>)
 8004a24:	2207      	movs	r2, #7
 8004a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	e000e010 	.word	0xe000e010

08004a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7ff ff05 	bl	8004850 <__NVIC_SetPriorityGrouping>
}
 8004a46:	bf00      	nop
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b086      	sub	sp, #24
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	4603      	mov	r3, r0
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
 8004a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a60:	f7ff ff1a 	bl	8004898 <__NVIC_GetPriorityGrouping>
 8004a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	6978      	ldr	r0, [r7, #20]
 8004a6c:	f7ff ff8e 	bl	800498c <NVIC_EncodePriority>
 8004a70:	4602      	mov	r2, r0
 8004a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a76:	4611      	mov	r1, r2
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff ff5d 	bl	8004938 <__NVIC_SetPriority>
}
 8004a7e:	bf00      	nop
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff ff0d 	bl	80048b4 <__NVIC_EnableIRQ>
}
 8004a9a:	bf00      	nop
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b082      	sub	sp, #8
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff ff1d 	bl	80048f0 <__NVIC_DisableIRQ>
}
 8004ab6:	bf00      	nop
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7ff ff94 	bl	80049f4 <SysTick_Config>
 8004acc:	4603      	mov	r3, r0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ae4:	f7ff f976 	bl	8003dd4 <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e099      	b.n	8004c28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0201 	bic.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b14:	e00f      	b.n	8004b36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b16:	f7ff f95d 	bl	8003dd4 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b05      	cmp	r3, #5
 8004b22:	d908      	bls.n	8004b36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2220      	movs	r2, #32
 8004b28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2203      	movs	r2, #3
 8004b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e078      	b.n	8004c28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e8      	bne.n	8004b16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	4b38      	ldr	r3, [pc, #224]	; (8004c30 <HAL_DMA_Init+0x158>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d107      	bne.n	8004ba0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f023 0307 	bic.w	r3, r3, #7
 8004bb6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d117      	bne.n	8004bfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00e      	beq.n	8004bfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fb01 	bl	80051e4 <DMA_CheckFifoParam>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d008      	beq.n	8004bfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2240      	movs	r2, #64	; 0x40
 8004bec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e016      	b.n	8004c28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fab8 	bl	8005178 <DMA_CalcBaseAndBitshift>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c10:	223f      	movs	r2, #63	; 0x3f
 8004c12:	409a      	lsls	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2201      	movs	r2, #1
 8004c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	f010803f 	.word	0xf010803f

08004c34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
 8004c40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <HAL_DMA_Start_IT+0x26>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e040      	b.n	8004cdc <HAL_DMA_Start_IT+0xa8>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d12f      	bne.n	8004cce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2202      	movs	r2, #2
 8004c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	68b9      	ldr	r1, [r7, #8]
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 fa4a 	bl	800511c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8c:	223f      	movs	r2, #63	; 0x3f
 8004c8e:	409a      	lsls	r2, r3
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0216 	orr.w	r2, r2, #22
 8004ca2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0208 	orr.w	r2, r2, #8
 8004cba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0201 	orr.w	r2, r2, #1
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	e005      	b.n	8004cda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004cf2:	f7ff f86f 	bl	8003dd4 <HAL_GetTick>
 8004cf6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d008      	beq.n	8004d16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2280      	movs	r2, #128	; 0x80
 8004d08:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e052      	b.n	8004dbc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0216 	bic.w	r2, r2, #22
 8004d24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695a      	ldr	r2, [r3, #20]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d103      	bne.n	8004d46 <HAL_DMA_Abort+0x62>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d007      	beq.n	8004d56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0208 	bic.w	r2, r2, #8
 8004d54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0201 	bic.w	r2, r2, #1
 8004d64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d66:	e013      	b.n	8004d90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d68:	f7ff f834 	bl	8003dd4 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b05      	cmp	r3, #5
 8004d74:	d90c      	bls.n	8004d90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2203      	movs	r2, #3
 8004d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e015      	b.n	8004dbc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e4      	bne.n	8004d68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da2:	223f      	movs	r2, #63	; 0x3f
 8004da4:	409a      	lsls	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d004      	beq.n	8004de2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2280      	movs	r2, #128	; 0x80
 8004ddc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e00c      	b.n	8004dfc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2205      	movs	r2, #5
 8004de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0201 	bic.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e14:	4b8e      	ldr	r3, [pc, #568]	; (8005050 <HAL_DMA_IRQHandler+0x248>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a8e      	ldr	r2, [pc, #568]	; (8005054 <HAL_DMA_IRQHandler+0x24c>)
 8004e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1e:	0a9b      	lsrs	r3, r3, #10
 8004e20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e32:	2208      	movs	r2, #8
 8004e34:	409a      	lsls	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d01a      	beq.n	8004e74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d013      	beq.n	8004e74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0204 	bic.w	r2, r2, #4
 8004e5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e60:	2208      	movs	r2, #8
 8004e62:	409a      	lsls	r2, r3
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6c:	f043 0201 	orr.w	r2, r3, #1
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e78:	2201      	movs	r2, #1
 8004e7a:	409a      	lsls	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d012      	beq.n	8004eaa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00b      	beq.n	8004eaa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e96:	2201      	movs	r2, #1
 8004e98:	409a      	lsls	r2, r3
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea2:	f043 0202 	orr.w	r2, r3, #2
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eae:	2204      	movs	r2, #4
 8004eb0:	409a      	lsls	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d012      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00b      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ecc:	2204      	movs	r2, #4
 8004ece:	409a      	lsls	r2, r3
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed8:	f043 0204 	orr.w	r2, r3, #4
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee4:	2210      	movs	r2, #16
 8004ee6:	409a      	lsls	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4013      	ands	r3, r2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d043      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d03c      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f02:	2210      	movs	r2, #16
 8004f04:	409a      	lsls	r2, r3
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d018      	beq.n	8004f4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d108      	bne.n	8004f38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d024      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	4798      	blx	r3
 8004f36:	e01f      	b.n	8004f78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01b      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	4798      	blx	r3
 8004f48:	e016      	b.n	8004f78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d107      	bne.n	8004f68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0208 	bic.w	r2, r2, #8
 8004f66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	409a      	lsls	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4013      	ands	r3, r2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 808f 	beq.w	80050a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0310 	and.w	r3, r3, #16
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 8087 	beq.w	80050a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	409a      	lsls	r2, r3
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b05      	cmp	r3, #5
 8004fb0:	d136      	bne.n	8005020 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0216 	bic.w	r2, r2, #22
 8004fc0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695a      	ldr	r2, [r3, #20]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fd0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <HAL_DMA_IRQHandler+0x1da>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d007      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0208 	bic.w	r2, r2, #8
 8004ff0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff6:	223f      	movs	r2, #63	; 0x3f
 8004ff8:	409a      	lsls	r2, r3
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005012:	2b00      	cmp	r3, #0
 8005014:	d07e      	beq.n	8005114 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	4798      	blx	r3
        }
        return;
 800501e:	e079      	b.n	8005114 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d01d      	beq.n	800506a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10d      	bne.n	8005058 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005040:	2b00      	cmp	r3, #0
 8005042:	d031      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	4798      	blx	r3
 800504c:	e02c      	b.n	80050a8 <HAL_DMA_IRQHandler+0x2a0>
 800504e:	bf00      	nop
 8005050:	2000001c 	.word	0x2000001c
 8005054:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505c:	2b00      	cmp	r3, #0
 800505e:	d023      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	4798      	blx	r3
 8005068:	e01e      	b.n	80050a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10f      	bne.n	8005098 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0210 	bic.w	r2, r2, #16
 8005086:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d032      	beq.n	8005116 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d022      	beq.n	8005102 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2205      	movs	r2, #5
 80050c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0201 	bic.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	3301      	adds	r3, #1
 80050d8:	60bb      	str	r3, [r7, #8]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d307      	bcc.n	80050f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f2      	bne.n	80050d4 <HAL_DMA_IRQHandler+0x2cc>
 80050ee:	e000      	b.n	80050f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80050f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	4798      	blx	r3
 8005112:	e000      	b.n	8005116 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005114:	bf00      	nop
    }
  }
}
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005138:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	d108      	bne.n	800515c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800515a:	e007      	b.n	800516c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	60da      	str	r2, [r3, #12]
}
 800516c:	bf00      	nop
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	b2db      	uxtb	r3, r3
 8005186:	3b10      	subs	r3, #16
 8005188:	4a14      	ldr	r2, [pc, #80]	; (80051dc <DMA_CalcBaseAndBitshift+0x64>)
 800518a:	fba2 2303 	umull	r2, r3, r2, r3
 800518e:	091b      	lsrs	r3, r3, #4
 8005190:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005192:	4a13      	ldr	r2, [pc, #76]	; (80051e0 <DMA_CalcBaseAndBitshift+0x68>)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4413      	add	r3, r2
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	d909      	bls.n	80051ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80051ae:	f023 0303 	bic.w	r3, r3, #3
 80051b2:	1d1a      	adds	r2, r3, #4
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	659a      	str	r2, [r3, #88]	; 0x58
 80051b8:	e007      	b.n	80051ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80051c2:	f023 0303 	bic.w	r3, r3, #3
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	aaaaaaab 	.word	0xaaaaaaab
 80051e0:	0800c63c 	.word	0x0800c63c

080051e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d11f      	bne.n	800523e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b03      	cmp	r3, #3
 8005202:	d856      	bhi.n	80052b2 <DMA_CheckFifoParam+0xce>
 8005204:	a201      	add	r2, pc, #4	; (adr r2, 800520c <DMA_CheckFifoParam+0x28>)
 8005206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520a:	bf00      	nop
 800520c:	0800521d 	.word	0x0800521d
 8005210:	0800522f 	.word	0x0800522f
 8005214:	0800521d 	.word	0x0800521d
 8005218:	080052b3 	.word	0x080052b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d046      	beq.n	80052b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800522c:	e043      	b.n	80052b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005236:	d140      	bne.n	80052ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800523c:	e03d      	b.n	80052ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005246:	d121      	bne.n	800528c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b03      	cmp	r3, #3
 800524c:	d837      	bhi.n	80052be <DMA_CheckFifoParam+0xda>
 800524e:	a201      	add	r2, pc, #4	; (adr r2, 8005254 <DMA_CheckFifoParam+0x70>)
 8005250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005254:	08005265 	.word	0x08005265
 8005258:	0800526b 	.word	0x0800526b
 800525c:	08005265 	.word	0x08005265
 8005260:	0800527d 	.word	0x0800527d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	73fb      	strb	r3, [r7, #15]
      break;
 8005268:	e030      	b.n	80052cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d025      	beq.n	80052c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800527a:	e022      	b.n	80052c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005280:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005284:	d11f      	bne.n	80052c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800528a:	e01c      	b.n	80052c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b02      	cmp	r3, #2
 8005290:	d903      	bls.n	800529a <DMA_CheckFifoParam+0xb6>
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2b03      	cmp	r3, #3
 8005296:	d003      	beq.n	80052a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005298:	e018      	b.n	80052cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	73fb      	strb	r3, [r7, #15]
      break;
 800529e:	e015      	b.n	80052cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00e      	beq.n	80052ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	73fb      	strb	r3, [r7, #15]
      break;
 80052b0:	e00b      	b.n	80052ca <DMA_CheckFifoParam+0xe6>
      break;
 80052b2:	bf00      	nop
 80052b4:	e00a      	b.n	80052cc <DMA_CheckFifoParam+0xe8>
      break;
 80052b6:	bf00      	nop
 80052b8:	e008      	b.n	80052cc <DMA_CheckFifoParam+0xe8>
      break;
 80052ba:	bf00      	nop
 80052bc:	e006      	b.n	80052cc <DMA_CheckFifoParam+0xe8>
      break;
 80052be:	bf00      	nop
 80052c0:	e004      	b.n	80052cc <DMA_CheckFifoParam+0xe8>
      break;
 80052c2:	bf00      	nop
 80052c4:	e002      	b.n	80052cc <DMA_CheckFifoParam+0xe8>
      break;   
 80052c6:	bf00      	nop
 80052c8:	e000      	b.n	80052cc <DMA_CheckFifoParam+0xe8>
      break;
 80052ca:	bf00      	nop
    }
  } 
  
  return status; 
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop

080052dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052dc:	b480      	push	{r7}
 80052de:	b089      	sub	sp, #36	; 0x24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
 80052f6:	e165      	b.n	80055c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052f8:	2201      	movs	r2, #1
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005300:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4013      	ands	r3, r2
 800530a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	429a      	cmp	r2, r3
 8005312:	f040 8154 	bne.w	80055be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	2b01      	cmp	r3, #1
 8005320:	d005      	beq.n	800532e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800532a:	2b02      	cmp	r3, #2
 800532c:	d130      	bne.n	8005390 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	2203      	movs	r2, #3
 800533a:	fa02 f303 	lsl.w	r3, r2, r3
 800533e:	43db      	mvns	r3, r3
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	4013      	ands	r3, r2
 8005344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	fa02 f303 	lsl.w	r3, r2, r3
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	4313      	orrs	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005364:	2201      	movs	r2, #1
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	43db      	mvns	r3, r3
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	4013      	ands	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	091b      	lsrs	r3, r3, #4
 800537a:	f003 0201 	and.w	r2, r3, #1
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	4313      	orrs	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	2b03      	cmp	r3, #3
 800539a:	d017      	beq.n	80053cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	2203      	movs	r2, #3
 80053a8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ac:	43db      	mvns	r3, r3
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	4013      	ands	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f003 0303 	and.w	r3, r3, #3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d123      	bne.n	8005420 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	08da      	lsrs	r2, r3, #3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3208      	adds	r2, #8
 80053e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	220f      	movs	r2, #15
 80053f0:	fa02 f303 	lsl.w	r3, r2, r3
 80053f4:	43db      	mvns	r3, r3
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	4013      	ands	r3, r2
 80053fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	691a      	ldr	r2, [r3, #16]
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	f003 0307 	and.w	r3, r3, #7
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	fa02 f303 	lsl.w	r3, r2, r3
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	4313      	orrs	r3, r2
 8005410:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	08da      	lsrs	r2, r3, #3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	3208      	adds	r2, #8
 800541a:	69b9      	ldr	r1, [r7, #24]
 800541c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	2203      	movs	r2, #3
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	43db      	mvns	r3, r3
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	4013      	ands	r3, r2
 8005436:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f003 0203 	and.w	r2, r3, #3
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	4313      	orrs	r3, r2
 800544c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 80ae 	beq.w	80055be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005462:	2300      	movs	r3, #0
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	4b5d      	ldr	r3, [pc, #372]	; (80055dc <HAL_GPIO_Init+0x300>)
 8005468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546a:	4a5c      	ldr	r2, [pc, #368]	; (80055dc <HAL_GPIO_Init+0x300>)
 800546c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005470:	6453      	str	r3, [r2, #68]	; 0x44
 8005472:	4b5a      	ldr	r3, [pc, #360]	; (80055dc <HAL_GPIO_Init+0x300>)
 8005474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800547e:	4a58      	ldr	r2, [pc, #352]	; (80055e0 <HAL_GPIO_Init+0x304>)
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	089b      	lsrs	r3, r3, #2
 8005484:	3302      	adds	r3, #2
 8005486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800548a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	220f      	movs	r2, #15
 8005496:	fa02 f303 	lsl.w	r3, r2, r3
 800549a:	43db      	mvns	r3, r3
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	4013      	ands	r3, r2
 80054a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a4f      	ldr	r2, [pc, #316]	; (80055e4 <HAL_GPIO_Init+0x308>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d025      	beq.n	80054f6 <HAL_GPIO_Init+0x21a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a4e      	ldr	r2, [pc, #312]	; (80055e8 <HAL_GPIO_Init+0x30c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d01f      	beq.n	80054f2 <HAL_GPIO_Init+0x216>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a4d      	ldr	r2, [pc, #308]	; (80055ec <HAL_GPIO_Init+0x310>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d019      	beq.n	80054ee <HAL_GPIO_Init+0x212>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a4c      	ldr	r2, [pc, #304]	; (80055f0 <HAL_GPIO_Init+0x314>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d013      	beq.n	80054ea <HAL_GPIO_Init+0x20e>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a4b      	ldr	r2, [pc, #300]	; (80055f4 <HAL_GPIO_Init+0x318>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00d      	beq.n	80054e6 <HAL_GPIO_Init+0x20a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a4a      	ldr	r2, [pc, #296]	; (80055f8 <HAL_GPIO_Init+0x31c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d007      	beq.n	80054e2 <HAL_GPIO_Init+0x206>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a49      	ldr	r2, [pc, #292]	; (80055fc <HAL_GPIO_Init+0x320>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d101      	bne.n	80054de <HAL_GPIO_Init+0x202>
 80054da:	2306      	movs	r3, #6
 80054dc:	e00c      	b.n	80054f8 <HAL_GPIO_Init+0x21c>
 80054de:	2307      	movs	r3, #7
 80054e0:	e00a      	b.n	80054f8 <HAL_GPIO_Init+0x21c>
 80054e2:	2305      	movs	r3, #5
 80054e4:	e008      	b.n	80054f8 <HAL_GPIO_Init+0x21c>
 80054e6:	2304      	movs	r3, #4
 80054e8:	e006      	b.n	80054f8 <HAL_GPIO_Init+0x21c>
 80054ea:	2303      	movs	r3, #3
 80054ec:	e004      	b.n	80054f8 <HAL_GPIO_Init+0x21c>
 80054ee:	2302      	movs	r3, #2
 80054f0:	e002      	b.n	80054f8 <HAL_GPIO_Init+0x21c>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e000      	b.n	80054f8 <HAL_GPIO_Init+0x21c>
 80054f6:	2300      	movs	r3, #0
 80054f8:	69fa      	ldr	r2, [r7, #28]
 80054fa:	f002 0203 	and.w	r2, r2, #3
 80054fe:	0092      	lsls	r2, r2, #2
 8005500:	4093      	lsls	r3, r2
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	4313      	orrs	r3, r2
 8005506:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005508:	4935      	ldr	r1, [pc, #212]	; (80055e0 <HAL_GPIO_Init+0x304>)
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	089b      	lsrs	r3, r3, #2
 800550e:	3302      	adds	r3, #2
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005516:	4b3a      	ldr	r3, [pc, #232]	; (8005600 <HAL_GPIO_Init+0x324>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	43db      	mvns	r3, r3
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	4013      	ands	r3, r2
 8005524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	4313      	orrs	r3, r2
 8005538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800553a:	4a31      	ldr	r2, [pc, #196]	; (8005600 <HAL_GPIO_Init+0x324>)
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005540:	4b2f      	ldr	r3, [pc, #188]	; (8005600 <HAL_GPIO_Init+0x324>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	43db      	mvns	r3, r3
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	4013      	ands	r3, r2
 800554e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	4313      	orrs	r3, r2
 8005562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005564:	4a26      	ldr	r2, [pc, #152]	; (8005600 <HAL_GPIO_Init+0x324>)
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800556a:	4b25      	ldr	r3, [pc, #148]	; (8005600 <HAL_GPIO_Init+0x324>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	43db      	mvns	r3, r3
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	4013      	ands	r3, r2
 8005578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800558e:	4a1c      	ldr	r2, [pc, #112]	; (8005600 <HAL_GPIO_Init+0x324>)
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005594:	4b1a      	ldr	r3, [pc, #104]	; (8005600 <HAL_GPIO_Init+0x324>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	43db      	mvns	r3, r3
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	4013      	ands	r3, r2
 80055a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80055b8:	4a11      	ldr	r2, [pc, #68]	; (8005600 <HAL_GPIO_Init+0x324>)
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	3301      	adds	r3, #1
 80055c2:	61fb      	str	r3, [r7, #28]
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	2b0f      	cmp	r3, #15
 80055c8:	f67f ae96 	bls.w	80052f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055cc:	bf00      	nop
 80055ce:	bf00      	nop
 80055d0:	3724      	adds	r7, #36	; 0x24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	40023800 	.word	0x40023800
 80055e0:	40013800 	.word	0x40013800
 80055e4:	40020000 	.word	0x40020000
 80055e8:	40020400 	.word	0x40020400
 80055ec:	40020800 	.word	0x40020800
 80055f0:	40020c00 	.word	0x40020c00
 80055f4:	40021000 	.word	0x40021000
 80055f8:	40021400 	.word	0x40021400
 80055fc:	40021800 	.word	0x40021800
 8005600:	40013c00 	.word	0x40013c00

08005604 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	460b      	mov	r3, r1
 800560e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	887b      	ldrh	r3, [r7, #2]
 8005616:	4013      	ands	r3, r2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800561c:	2301      	movs	r3, #1
 800561e:	73fb      	strb	r3, [r7, #15]
 8005620:	e001      	b.n	8005626 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005622:	2300      	movs	r3, #0
 8005624:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005626:	7bfb      	ldrb	r3, [r7, #15]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	807b      	strh	r3, [r7, #2]
 8005640:	4613      	mov	r3, r2
 8005642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005644:	787b      	ldrb	r3, [r7, #1]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800564a:	887a      	ldrh	r2, [r7, #2]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005650:	e003      	b.n	800565a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005652:	887b      	ldrh	r3, [r7, #2]
 8005654:	041a      	lsls	r2, r3, #16
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	619a      	str	r2, [r3, #24]
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
	...

08005668 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	4603      	mov	r3, r0
 8005670:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005672:	4b08      	ldr	r3, [pc, #32]	; (8005694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005674:	695a      	ldr	r2, [r3, #20]
 8005676:	88fb      	ldrh	r3, [r7, #6]
 8005678:	4013      	ands	r3, r2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d006      	beq.n	800568c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800567e:	4a05      	ldr	r2, [pc, #20]	; (8005694 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005680:	88fb      	ldrh	r3, [r7, #6]
 8005682:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005684:	88fb      	ldrh	r3, [r7, #6]
 8005686:	4618      	mov	r0, r3
 8005688:	f7fc fffc 	bl	8002684 <HAL_GPIO_EXTI_Callback>
  }
}
 800568c:	bf00      	nop
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40013c00 	.word	0x40013c00

08005698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0cc      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056ac:	4b68      	ldr	r3, [pc, #416]	; (8005850 <HAL_RCC_ClockConfig+0x1b8>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d90c      	bls.n	80056d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ba:	4b65      	ldr	r3, [pc, #404]	; (8005850 <HAL_RCC_ClockConfig+0x1b8>)
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056c2:	4b63      	ldr	r3, [pc, #396]	; (8005850 <HAL_RCC_ClockConfig+0x1b8>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 030f 	and.w	r3, r3, #15
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d001      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e0b8      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d020      	beq.n	8005722 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d005      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056ec:	4b59      	ldr	r3, [pc, #356]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	4a58      	ldr	r2, [pc, #352]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 80056f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0308 	and.w	r3, r3, #8
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005704:	4b53      	ldr	r3, [pc, #332]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	4a52      	ldr	r2, [pc, #328]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 800570a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800570e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005710:	4b50      	ldr	r3, [pc, #320]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	494d      	ldr	r1, [pc, #308]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 800571e:	4313      	orrs	r3, r2
 8005720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d044      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d107      	bne.n	8005746 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005736:	4b47      	ldr	r3, [pc, #284]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d119      	bne.n	8005776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e07f      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d003      	beq.n	8005756 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005752:	2b03      	cmp	r3, #3
 8005754:	d107      	bne.n	8005766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005756:	4b3f      	ldr	r3, [pc, #252]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d109      	bne.n	8005776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e06f      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005766:	4b3b      	ldr	r3, [pc, #236]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e067      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005776:	4b37      	ldr	r3, [pc, #220]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f023 0203 	bic.w	r2, r3, #3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	4934      	ldr	r1, [pc, #208]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005784:	4313      	orrs	r3, r2
 8005786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005788:	f7fe fb24 	bl	8003dd4 <HAL_GetTick>
 800578c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800578e:	e00a      	b.n	80057a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005790:	f7fe fb20 	bl	8003dd4 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	f241 3288 	movw	r2, #5000	; 0x1388
 800579e:	4293      	cmp	r3, r2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e04f      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a6:	4b2b      	ldr	r3, [pc, #172]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 020c 	and.w	r2, r3, #12
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d1eb      	bne.n	8005790 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057b8:	4b25      	ldr	r3, [pc, #148]	; (8005850 <HAL_RCC_ClockConfig+0x1b8>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 030f 	and.w	r3, r3, #15
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d20c      	bcs.n	80057e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057c6:	4b22      	ldr	r3, [pc, #136]	; (8005850 <HAL_RCC_ClockConfig+0x1b8>)
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ce:	4b20      	ldr	r3, [pc, #128]	; (8005850 <HAL_RCC_ClockConfig+0x1b8>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d001      	beq.n	80057e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e032      	b.n	8005846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d008      	beq.n	80057fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057ec:	4b19      	ldr	r3, [pc, #100]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	4916      	ldr	r1, [pc, #88]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d009      	beq.n	800581e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800580a:	4b12      	ldr	r3, [pc, #72]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	490e      	ldr	r1, [pc, #56]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 800581a:	4313      	orrs	r3, r2
 800581c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800581e:	f000 f855 	bl	80058cc <HAL_RCC_GetSysClockFreq>
 8005822:	4602      	mov	r2, r0
 8005824:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <HAL_RCC_ClockConfig+0x1bc>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	091b      	lsrs	r3, r3, #4
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	490a      	ldr	r1, [pc, #40]	; (8005858 <HAL_RCC_ClockConfig+0x1c0>)
 8005830:	5ccb      	ldrb	r3, [r1, r3]
 8005832:	fa22 f303 	lsr.w	r3, r2, r3
 8005836:	4a09      	ldr	r2, [pc, #36]	; (800585c <HAL_RCC_ClockConfig+0x1c4>)
 8005838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800583a:	4b09      	ldr	r3, [pc, #36]	; (8005860 <HAL_RCC_ClockConfig+0x1c8>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f7fe fa84 	bl	8003d4c <HAL_InitTick>

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	40023c00 	.word	0x40023c00
 8005854:	40023800 	.word	0x40023800
 8005858:	0800c624 	.word	0x0800c624
 800585c:	2000001c 	.word	0x2000001c
 8005860:	20000020 	.word	0x20000020

08005864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005868:	4b03      	ldr	r3, [pc, #12]	; (8005878 <HAL_RCC_GetHCLKFreq+0x14>)
 800586a:	681b      	ldr	r3, [r3, #0]
}
 800586c:	4618      	mov	r0, r3
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	2000001c 	.word	0x2000001c

0800587c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005880:	f7ff fff0 	bl	8005864 <HAL_RCC_GetHCLKFreq>
 8005884:	4602      	mov	r2, r0
 8005886:	4b05      	ldr	r3, [pc, #20]	; (800589c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	0a9b      	lsrs	r3, r3, #10
 800588c:	f003 0307 	and.w	r3, r3, #7
 8005890:	4903      	ldr	r1, [pc, #12]	; (80058a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005892:	5ccb      	ldrb	r3, [r1, r3]
 8005894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005898:	4618      	mov	r0, r3
 800589a:	bd80      	pop	{r7, pc}
 800589c:	40023800 	.word	0x40023800
 80058a0:	0800c634 	.word	0x0800c634

080058a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058a8:	f7ff ffdc 	bl	8005864 <HAL_RCC_GetHCLKFreq>
 80058ac:	4602      	mov	r2, r0
 80058ae:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	0b5b      	lsrs	r3, r3, #13
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	4903      	ldr	r1, [pc, #12]	; (80058c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058ba:	5ccb      	ldrb	r3, [r1, r3]
 80058bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	40023800 	.word	0x40023800
 80058c8:	0800c634 	.word	0x0800c634

080058cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058d0:	b0ae      	sub	sp, #184	; 0xb8
 80058d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058f2:	4bcb      	ldr	r3, [pc, #812]	; (8005c20 <HAL_RCC_GetSysClockFreq+0x354>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f003 030c 	and.w	r3, r3, #12
 80058fa:	2b0c      	cmp	r3, #12
 80058fc:	f200 8206 	bhi.w	8005d0c <HAL_RCC_GetSysClockFreq+0x440>
 8005900:	a201      	add	r2, pc, #4	; (adr r2, 8005908 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005906:	bf00      	nop
 8005908:	0800593d 	.word	0x0800593d
 800590c:	08005d0d 	.word	0x08005d0d
 8005910:	08005d0d 	.word	0x08005d0d
 8005914:	08005d0d 	.word	0x08005d0d
 8005918:	08005945 	.word	0x08005945
 800591c:	08005d0d 	.word	0x08005d0d
 8005920:	08005d0d 	.word	0x08005d0d
 8005924:	08005d0d 	.word	0x08005d0d
 8005928:	0800594d 	.word	0x0800594d
 800592c:	08005d0d 	.word	0x08005d0d
 8005930:	08005d0d 	.word	0x08005d0d
 8005934:	08005d0d 	.word	0x08005d0d
 8005938:	08005b3d 	.word	0x08005b3d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800593c:	4bb9      	ldr	r3, [pc, #740]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x358>)
 800593e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005942:	e1e7      	b.n	8005d14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005944:	4bb8      	ldr	r3, [pc, #736]	; (8005c28 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005946:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800594a:	e1e3      	b.n	8005d14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800594c:	4bb4      	ldr	r3, [pc, #720]	; (8005c20 <HAL_RCC_GetSysClockFreq+0x354>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005954:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005958:	4bb1      	ldr	r3, [pc, #708]	; (8005c20 <HAL_RCC_GetSysClockFreq+0x354>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d071      	beq.n	8005a48 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005964:	4bae      	ldr	r3, [pc, #696]	; (8005c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	099b      	lsrs	r3, r3, #6
 800596a:	2200      	movs	r2, #0
 800596c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005970:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005974:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800597c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005980:	2300      	movs	r3, #0
 8005982:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005986:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800598a:	4622      	mov	r2, r4
 800598c:	462b      	mov	r3, r5
 800598e:	f04f 0000 	mov.w	r0, #0
 8005992:	f04f 0100 	mov.w	r1, #0
 8005996:	0159      	lsls	r1, r3, #5
 8005998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800599c:	0150      	lsls	r0, r2, #5
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	4621      	mov	r1, r4
 80059a4:	1a51      	subs	r1, r2, r1
 80059a6:	6439      	str	r1, [r7, #64]	; 0x40
 80059a8:	4629      	mov	r1, r5
 80059aa:	eb63 0301 	sbc.w	r3, r3, r1
 80059ae:	647b      	str	r3, [r7, #68]	; 0x44
 80059b0:	f04f 0200 	mov.w	r2, #0
 80059b4:	f04f 0300 	mov.w	r3, #0
 80059b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80059bc:	4649      	mov	r1, r9
 80059be:	018b      	lsls	r3, r1, #6
 80059c0:	4641      	mov	r1, r8
 80059c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059c6:	4641      	mov	r1, r8
 80059c8:	018a      	lsls	r2, r1, #6
 80059ca:	4641      	mov	r1, r8
 80059cc:	1a51      	subs	r1, r2, r1
 80059ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80059d0:	4649      	mov	r1, r9
 80059d2:	eb63 0301 	sbc.w	r3, r3, r1
 80059d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80059e4:	4649      	mov	r1, r9
 80059e6:	00cb      	lsls	r3, r1, #3
 80059e8:	4641      	mov	r1, r8
 80059ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ee:	4641      	mov	r1, r8
 80059f0:	00ca      	lsls	r2, r1, #3
 80059f2:	4610      	mov	r0, r2
 80059f4:	4619      	mov	r1, r3
 80059f6:	4603      	mov	r3, r0
 80059f8:	4622      	mov	r2, r4
 80059fa:	189b      	adds	r3, r3, r2
 80059fc:	633b      	str	r3, [r7, #48]	; 0x30
 80059fe:	462b      	mov	r3, r5
 8005a00:	460a      	mov	r2, r1
 8005a02:	eb42 0303 	adc.w	r3, r2, r3
 8005a06:	637b      	str	r3, [r7, #52]	; 0x34
 8005a08:	f04f 0200 	mov.w	r2, #0
 8005a0c:	f04f 0300 	mov.w	r3, #0
 8005a10:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a14:	4629      	mov	r1, r5
 8005a16:	024b      	lsls	r3, r1, #9
 8005a18:	4621      	mov	r1, r4
 8005a1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a1e:	4621      	mov	r1, r4
 8005a20:	024a      	lsls	r2, r1, #9
 8005a22:	4610      	mov	r0, r2
 8005a24:	4619      	mov	r1, r3
 8005a26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a34:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005a38:	f7fb f946 	bl	8000cc8 <__aeabi_uldivmod>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4613      	mov	r3, r2
 8005a42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a46:	e067      	b.n	8005b18 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a48:	4b75      	ldr	r3, [pc, #468]	; (8005c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	099b      	lsrs	r3, r3, #6
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a54:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005a58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a60:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a62:	2300      	movs	r3, #0
 8005a64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a66:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005a6a:	4622      	mov	r2, r4
 8005a6c:	462b      	mov	r3, r5
 8005a6e:	f04f 0000 	mov.w	r0, #0
 8005a72:	f04f 0100 	mov.w	r1, #0
 8005a76:	0159      	lsls	r1, r3, #5
 8005a78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a7c:	0150      	lsls	r0, r2, #5
 8005a7e:	4602      	mov	r2, r0
 8005a80:	460b      	mov	r3, r1
 8005a82:	4621      	mov	r1, r4
 8005a84:	1a51      	subs	r1, r2, r1
 8005a86:	62b9      	str	r1, [r7, #40]	; 0x28
 8005a88:	4629      	mov	r1, r5
 8005a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8005a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005a9c:	4649      	mov	r1, r9
 8005a9e:	018b      	lsls	r3, r1, #6
 8005aa0:	4641      	mov	r1, r8
 8005aa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005aa6:	4641      	mov	r1, r8
 8005aa8:	018a      	lsls	r2, r1, #6
 8005aaa:	4641      	mov	r1, r8
 8005aac:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ab0:	4649      	mov	r1, r9
 8005ab2:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ab6:	f04f 0200 	mov.w	r2, #0
 8005aba:	f04f 0300 	mov.w	r3, #0
 8005abe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ac2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ac6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005aca:	4692      	mov	sl, r2
 8005acc:	469b      	mov	fp, r3
 8005ace:	4623      	mov	r3, r4
 8005ad0:	eb1a 0303 	adds.w	r3, sl, r3
 8005ad4:	623b      	str	r3, [r7, #32]
 8005ad6:	462b      	mov	r3, r5
 8005ad8:	eb4b 0303 	adc.w	r3, fp, r3
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ade:	f04f 0200 	mov.w	r2, #0
 8005ae2:	f04f 0300 	mov.w	r3, #0
 8005ae6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005aea:	4629      	mov	r1, r5
 8005aec:	028b      	lsls	r3, r1, #10
 8005aee:	4621      	mov	r1, r4
 8005af0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005af4:	4621      	mov	r1, r4
 8005af6:	028a      	lsls	r2, r1, #10
 8005af8:	4610      	mov	r0, r2
 8005afa:	4619      	mov	r1, r3
 8005afc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b00:	2200      	movs	r2, #0
 8005b02:	673b      	str	r3, [r7, #112]	; 0x70
 8005b04:	677a      	str	r2, [r7, #116]	; 0x74
 8005b06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005b0a:	f7fb f8dd 	bl	8000cc8 <__aeabi_uldivmod>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	4613      	mov	r3, r2
 8005b14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b18:	4b41      	ldr	r3, [pc, #260]	; (8005c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	0c1b      	lsrs	r3, r3, #16
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	3301      	adds	r3, #1
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005b2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005b3a:	e0eb      	b.n	8005d14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b3c:	4b38      	ldr	r3, [pc, #224]	; (8005c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b48:	4b35      	ldr	r3, [pc, #212]	; (8005c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d06b      	beq.n	8005c2c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b54:	4b32      	ldr	r3, [pc, #200]	; (8005c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	099b      	lsrs	r3, r3, #6
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b66:	663b      	str	r3, [r7, #96]	; 0x60
 8005b68:	2300      	movs	r3, #0
 8005b6a:	667b      	str	r3, [r7, #100]	; 0x64
 8005b6c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005b70:	4622      	mov	r2, r4
 8005b72:	462b      	mov	r3, r5
 8005b74:	f04f 0000 	mov.w	r0, #0
 8005b78:	f04f 0100 	mov.w	r1, #0
 8005b7c:	0159      	lsls	r1, r3, #5
 8005b7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b82:	0150      	lsls	r0, r2, #5
 8005b84:	4602      	mov	r2, r0
 8005b86:	460b      	mov	r3, r1
 8005b88:	4621      	mov	r1, r4
 8005b8a:	1a51      	subs	r1, r2, r1
 8005b8c:	61b9      	str	r1, [r7, #24]
 8005b8e:	4629      	mov	r1, r5
 8005b90:	eb63 0301 	sbc.w	r3, r3, r1
 8005b94:	61fb      	str	r3, [r7, #28]
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005ba2:	4659      	mov	r1, fp
 8005ba4:	018b      	lsls	r3, r1, #6
 8005ba6:	4651      	mov	r1, sl
 8005ba8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bac:	4651      	mov	r1, sl
 8005bae:	018a      	lsls	r2, r1, #6
 8005bb0:	4651      	mov	r1, sl
 8005bb2:	ebb2 0801 	subs.w	r8, r2, r1
 8005bb6:	4659      	mov	r1, fp
 8005bb8:	eb63 0901 	sbc.w	r9, r3, r1
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bc8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bcc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bd0:	4690      	mov	r8, r2
 8005bd2:	4699      	mov	r9, r3
 8005bd4:	4623      	mov	r3, r4
 8005bd6:	eb18 0303 	adds.w	r3, r8, r3
 8005bda:	613b      	str	r3, [r7, #16]
 8005bdc:	462b      	mov	r3, r5
 8005bde:	eb49 0303 	adc.w	r3, r9, r3
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	f04f 0200 	mov.w	r2, #0
 8005be8:	f04f 0300 	mov.w	r3, #0
 8005bec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	024b      	lsls	r3, r1, #9
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	024a      	lsls	r2, r1, #9
 8005bfe:	4610      	mov	r0, r2
 8005c00:	4619      	mov	r1, r3
 8005c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c06:	2200      	movs	r2, #0
 8005c08:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c0a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005c0c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c10:	f7fb f85a 	bl	8000cc8 <__aeabi_uldivmod>
 8005c14:	4602      	mov	r2, r0
 8005c16:	460b      	mov	r3, r1
 8005c18:	4613      	mov	r3, r2
 8005c1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c1e:	e065      	b.n	8005cec <HAL_RCC_GetSysClockFreq+0x420>
 8005c20:	40023800 	.word	0x40023800
 8005c24:	00f42400 	.word	0x00f42400
 8005c28:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c2c:	4b3d      	ldr	r3, [pc, #244]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x458>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	099b      	lsrs	r3, r3, #6
 8005c32:	2200      	movs	r2, #0
 8005c34:	4618      	mov	r0, r3
 8005c36:	4611      	mov	r1, r2
 8005c38:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c3c:	653b      	str	r3, [r7, #80]	; 0x50
 8005c3e:	2300      	movs	r3, #0
 8005c40:	657b      	str	r3, [r7, #84]	; 0x54
 8005c42:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005c46:	4642      	mov	r2, r8
 8005c48:	464b      	mov	r3, r9
 8005c4a:	f04f 0000 	mov.w	r0, #0
 8005c4e:	f04f 0100 	mov.w	r1, #0
 8005c52:	0159      	lsls	r1, r3, #5
 8005c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c58:	0150      	lsls	r0, r2, #5
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	4641      	mov	r1, r8
 8005c60:	1a51      	subs	r1, r2, r1
 8005c62:	60b9      	str	r1, [r7, #8]
 8005c64:	4649      	mov	r1, r9
 8005c66:	eb63 0301 	sbc.w	r3, r3, r1
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	f04f 0200 	mov.w	r2, #0
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005c78:	4659      	mov	r1, fp
 8005c7a:	018b      	lsls	r3, r1, #6
 8005c7c:	4651      	mov	r1, sl
 8005c7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c82:	4651      	mov	r1, sl
 8005c84:	018a      	lsls	r2, r1, #6
 8005c86:	4651      	mov	r1, sl
 8005c88:	1a54      	subs	r4, r2, r1
 8005c8a:	4659      	mov	r1, fp
 8005c8c:	eb63 0501 	sbc.w	r5, r3, r1
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	f04f 0300 	mov.w	r3, #0
 8005c98:	00eb      	lsls	r3, r5, #3
 8005c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c9e:	00e2      	lsls	r2, r4, #3
 8005ca0:	4614      	mov	r4, r2
 8005ca2:	461d      	mov	r5, r3
 8005ca4:	4643      	mov	r3, r8
 8005ca6:	18e3      	adds	r3, r4, r3
 8005ca8:	603b      	str	r3, [r7, #0]
 8005caa:	464b      	mov	r3, r9
 8005cac:	eb45 0303 	adc.w	r3, r5, r3
 8005cb0:	607b      	str	r3, [r7, #4]
 8005cb2:	f04f 0200 	mov.w	r2, #0
 8005cb6:	f04f 0300 	mov.w	r3, #0
 8005cba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cbe:	4629      	mov	r1, r5
 8005cc0:	028b      	lsls	r3, r1, #10
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cc8:	4621      	mov	r1, r4
 8005cca:	028a      	lsls	r2, r1, #10
 8005ccc:	4610      	mov	r0, r2
 8005cce:	4619      	mov	r1, r3
 8005cd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cd8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005cda:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005cde:	f7fa fff3 	bl	8000cc8 <__aeabi_uldivmod>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005cec:	4b0d      	ldr	r3, [pc, #52]	; (8005d24 <HAL_RCC_GetSysClockFreq+0x458>)
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	0f1b      	lsrs	r3, r3, #28
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005cfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005cfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005d0a:	e003      	b.n	8005d14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d0c:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005d12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	37b8      	adds	r7, #184	; 0xb8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d22:	bf00      	nop
 8005d24:	40023800 	.word	0x40023800
 8005d28:	00f42400 	.word	0x00f42400

08005d2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e28d      	b.n	800625a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 8083 	beq.w	8005e52 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d4c:	4b94      	ldr	r3, [pc, #592]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f003 030c 	and.w	r3, r3, #12
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	d019      	beq.n	8005d8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005d58:	4b91      	ldr	r3, [pc, #580]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d106      	bne.n	8005d72 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005d64:	4b8e      	ldr	r3, [pc, #568]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d70:	d00c      	beq.n	8005d8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d72:	4b8b      	ldr	r3, [pc, #556]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005d7a:	2b0c      	cmp	r3, #12
 8005d7c:	d112      	bne.n	8005da4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d7e:	4b88      	ldr	r3, [pc, #544]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d8a:	d10b      	bne.n	8005da4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d8c:	4b84      	ldr	r3, [pc, #528]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d05b      	beq.n	8005e50 <HAL_RCC_OscConfig+0x124>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d157      	bne.n	8005e50 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e25a      	b.n	800625a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dac:	d106      	bne.n	8005dbc <HAL_RCC_OscConfig+0x90>
 8005dae:	4b7c      	ldr	r3, [pc, #496]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a7b      	ldr	r2, [pc, #492]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005db8:	6013      	str	r3, [r2, #0]
 8005dba:	e01d      	b.n	8005df8 <HAL_RCC_OscConfig+0xcc>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dc4:	d10c      	bne.n	8005de0 <HAL_RCC_OscConfig+0xb4>
 8005dc6:	4b76      	ldr	r3, [pc, #472]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a75      	ldr	r2, [pc, #468]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dd0:	6013      	str	r3, [r2, #0]
 8005dd2:	4b73      	ldr	r3, [pc, #460]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a72      	ldr	r2, [pc, #456]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	e00b      	b.n	8005df8 <HAL_RCC_OscConfig+0xcc>
 8005de0:	4b6f      	ldr	r3, [pc, #444]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a6e      	ldr	r2, [pc, #440]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	4b6c      	ldr	r3, [pc, #432]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a6b      	ldr	r2, [pc, #428]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d013      	beq.n	8005e28 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e00:	f7fd ffe8 	bl	8003dd4 <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e08:	f7fd ffe4 	bl	8003dd4 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b64      	cmp	r3, #100	; 0x64
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e21f      	b.n	800625a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e1a:	4b61      	ldr	r3, [pc, #388]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d0f0      	beq.n	8005e08 <HAL_RCC_OscConfig+0xdc>
 8005e26:	e014      	b.n	8005e52 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e28:	f7fd ffd4 	bl	8003dd4 <HAL_GetTick>
 8005e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e2e:	e008      	b.n	8005e42 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e30:	f7fd ffd0 	bl	8003dd4 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b64      	cmp	r3, #100	; 0x64
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e20b      	b.n	800625a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e42:	4b57      	ldr	r3, [pc, #348]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1f0      	bne.n	8005e30 <HAL_RCC_OscConfig+0x104>
 8005e4e:	e000      	b.n	8005e52 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d06f      	beq.n	8005f3e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e5e:	4b50      	ldr	r3, [pc, #320]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 030c 	and.w	r3, r3, #12
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d017      	beq.n	8005e9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005e6a:	4b4d      	ldr	r3, [pc, #308]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005e72:	2b08      	cmp	r3, #8
 8005e74:	d105      	bne.n	8005e82 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005e76:	4b4a      	ldr	r3, [pc, #296]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00b      	beq.n	8005e9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e82:	4b47      	ldr	r3, [pc, #284]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005e8a:	2b0c      	cmp	r3, #12
 8005e8c:	d11c      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e8e:	4b44      	ldr	r3, [pc, #272]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d116      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e9a:	4b41      	ldr	r3, [pc, #260]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d005      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x186>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d001      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e1d3      	b.n	800625a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eb2:	4b3b      	ldr	r3, [pc, #236]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	4937      	ldr	r1, [pc, #220]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ec6:	e03a      	b.n	8005f3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d020      	beq.n	8005f12 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ed0:	4b34      	ldr	r3, [pc, #208]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed6:	f7fd ff7d 	bl	8003dd4 <HAL_GetTick>
 8005eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005edc:	e008      	b.n	8005ef0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ede:	f7fd ff79 	bl	8003dd4 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d901      	bls.n	8005ef0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e1b4      	b.n	800625a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ef0:	4b2b      	ldr	r3, [pc, #172]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d0f0      	beq.n	8005ede <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005efc:	4b28      	ldr	r3, [pc, #160]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	4925      	ldr	r1, [pc, #148]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	600b      	str	r3, [r1, #0]
 8005f10:	e015      	b.n	8005f3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f12:	4b24      	ldr	r3, [pc, #144]	; (8005fa4 <HAL_RCC_OscConfig+0x278>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f18:	f7fd ff5c 	bl	8003dd4 <HAL_GetTick>
 8005f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f1e:	e008      	b.n	8005f32 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f20:	f7fd ff58 	bl	8003dd4 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e193      	b.n	800625a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f32:	4b1b      	ldr	r3, [pc, #108]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1f0      	bne.n	8005f20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0308 	and.w	r3, r3, #8
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d036      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d016      	beq.n	8005f80 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f52:	4b15      	ldr	r3, [pc, #84]	; (8005fa8 <HAL_RCC_OscConfig+0x27c>)
 8005f54:	2201      	movs	r2, #1
 8005f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f58:	f7fd ff3c 	bl	8003dd4 <HAL_GetTick>
 8005f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f5e:	e008      	b.n	8005f72 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f60:	f7fd ff38 	bl	8003dd4 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d901      	bls.n	8005f72 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	e173      	b.n	800625a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f72:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <HAL_RCC_OscConfig+0x274>)
 8005f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0f0      	beq.n	8005f60 <HAL_RCC_OscConfig+0x234>
 8005f7e:	e01b      	b.n	8005fb8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f80:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <HAL_RCC_OscConfig+0x27c>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f86:	f7fd ff25 	bl	8003dd4 <HAL_GetTick>
 8005f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f8c:	e00e      	b.n	8005fac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f8e:	f7fd ff21 	bl	8003dd4 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d907      	bls.n	8005fac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e15c      	b.n	800625a <HAL_RCC_OscConfig+0x52e>
 8005fa0:	40023800 	.word	0x40023800
 8005fa4:	42470000 	.word	0x42470000
 8005fa8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fac:	4b8a      	ldr	r3, [pc, #552]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 8005fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1ea      	bne.n	8005f8e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 8097 	beq.w	80060f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fca:	4b83      	ldr	r3, [pc, #524]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10f      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60bb      	str	r3, [r7, #8]
 8005fda:	4b7f      	ldr	r3, [pc, #508]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	4a7e      	ldr	r2, [pc, #504]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 8005fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fe6:	4b7c      	ldr	r3, [pc, #496]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fee:	60bb      	str	r3, [r7, #8]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff6:	4b79      	ldr	r3, [pc, #484]	; (80061dc <HAL_RCC_OscConfig+0x4b0>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d118      	bne.n	8006034 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006002:	4b76      	ldr	r3, [pc, #472]	; (80061dc <HAL_RCC_OscConfig+0x4b0>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a75      	ldr	r2, [pc, #468]	; (80061dc <HAL_RCC_OscConfig+0x4b0>)
 8006008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800600c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800600e:	f7fd fee1 	bl	8003dd4 <HAL_GetTick>
 8006012:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006014:	e008      	b.n	8006028 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006016:	f7fd fedd 	bl	8003dd4 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d901      	bls.n	8006028 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e118      	b.n	800625a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006028:	4b6c      	ldr	r3, [pc, #432]	; (80061dc <HAL_RCC_OscConfig+0x4b0>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006030:	2b00      	cmp	r3, #0
 8006032:	d0f0      	beq.n	8006016 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d106      	bne.n	800604a <HAL_RCC_OscConfig+0x31e>
 800603c:	4b66      	ldr	r3, [pc, #408]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 800603e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006040:	4a65      	ldr	r2, [pc, #404]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 8006042:	f043 0301 	orr.w	r3, r3, #1
 8006046:	6713      	str	r3, [r2, #112]	; 0x70
 8006048:	e01c      	b.n	8006084 <HAL_RCC_OscConfig+0x358>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	2b05      	cmp	r3, #5
 8006050:	d10c      	bne.n	800606c <HAL_RCC_OscConfig+0x340>
 8006052:	4b61      	ldr	r3, [pc, #388]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 8006054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006056:	4a60      	ldr	r2, [pc, #384]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 8006058:	f043 0304 	orr.w	r3, r3, #4
 800605c:	6713      	str	r3, [r2, #112]	; 0x70
 800605e:	4b5e      	ldr	r3, [pc, #376]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 8006060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006062:	4a5d      	ldr	r2, [pc, #372]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 8006064:	f043 0301 	orr.w	r3, r3, #1
 8006068:	6713      	str	r3, [r2, #112]	; 0x70
 800606a:	e00b      	b.n	8006084 <HAL_RCC_OscConfig+0x358>
 800606c:	4b5a      	ldr	r3, [pc, #360]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 800606e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006070:	4a59      	ldr	r2, [pc, #356]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 8006072:	f023 0301 	bic.w	r3, r3, #1
 8006076:	6713      	str	r3, [r2, #112]	; 0x70
 8006078:	4b57      	ldr	r3, [pc, #348]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 800607a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607c:	4a56      	ldr	r2, [pc, #344]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 800607e:	f023 0304 	bic.w	r3, r3, #4
 8006082:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d015      	beq.n	80060b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800608c:	f7fd fea2 	bl	8003dd4 <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006092:	e00a      	b.n	80060aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006094:	f7fd fe9e 	bl	8003dd4 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	f241 3288 	movw	r2, #5000	; 0x1388
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e0d7      	b.n	800625a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060aa:	4b4b      	ldr	r3, [pc, #300]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 80060ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0ee      	beq.n	8006094 <HAL_RCC_OscConfig+0x368>
 80060b6:	e014      	b.n	80060e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060b8:	f7fd fe8c 	bl	8003dd4 <HAL_GetTick>
 80060bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060be:	e00a      	b.n	80060d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060c0:	f7fd fe88 	bl	8003dd4 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e0c1      	b.n	800625a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060d6:	4b40      	ldr	r3, [pc, #256]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 80060d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1ee      	bne.n	80060c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060e2:	7dfb      	ldrb	r3, [r7, #23]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d105      	bne.n	80060f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060e8:	4b3b      	ldr	r3, [pc, #236]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	4a3a      	ldr	r2, [pc, #232]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 80060ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 80ad 	beq.w	8006258 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060fe:	4b36      	ldr	r3, [pc, #216]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f003 030c 	and.w	r3, r3, #12
 8006106:	2b08      	cmp	r3, #8
 8006108:	d060      	beq.n	80061cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	2b02      	cmp	r3, #2
 8006110:	d145      	bne.n	800619e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006112:	4b33      	ldr	r3, [pc, #204]	; (80061e0 <HAL_RCC_OscConfig+0x4b4>)
 8006114:	2200      	movs	r2, #0
 8006116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006118:	f7fd fe5c 	bl	8003dd4 <HAL_GetTick>
 800611c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800611e:	e008      	b.n	8006132 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006120:	f7fd fe58 	bl	8003dd4 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e093      	b.n	800625a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006132:	4b29      	ldr	r3, [pc, #164]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1f0      	bne.n	8006120 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69da      	ldr	r2, [r3, #28]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	431a      	orrs	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	019b      	lsls	r3, r3, #6
 800614e:	431a      	orrs	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006154:	085b      	lsrs	r3, r3, #1
 8006156:	3b01      	subs	r3, #1
 8006158:	041b      	lsls	r3, r3, #16
 800615a:	431a      	orrs	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	061b      	lsls	r3, r3, #24
 8006162:	431a      	orrs	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006168:	071b      	lsls	r3, r3, #28
 800616a:	491b      	ldr	r1, [pc, #108]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 800616c:	4313      	orrs	r3, r2
 800616e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006170:	4b1b      	ldr	r3, [pc, #108]	; (80061e0 <HAL_RCC_OscConfig+0x4b4>)
 8006172:	2201      	movs	r2, #1
 8006174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006176:	f7fd fe2d 	bl	8003dd4 <HAL_GetTick>
 800617a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800617c:	e008      	b.n	8006190 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800617e:	f7fd fe29 	bl	8003dd4 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	2b02      	cmp	r3, #2
 800618a:	d901      	bls.n	8006190 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e064      	b.n	800625a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006190:	4b11      	ldr	r3, [pc, #68]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0f0      	beq.n	800617e <HAL_RCC_OscConfig+0x452>
 800619c:	e05c      	b.n	8006258 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800619e:	4b10      	ldr	r3, [pc, #64]	; (80061e0 <HAL_RCC_OscConfig+0x4b4>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a4:	f7fd fe16 	bl	8003dd4 <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ac:	f7fd fe12 	bl	8003dd4 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e04d      	b.n	800625a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061be:	4b06      	ldr	r3, [pc, #24]	; (80061d8 <HAL_RCC_OscConfig+0x4ac>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1f0      	bne.n	80061ac <HAL_RCC_OscConfig+0x480>
 80061ca:	e045      	b.n	8006258 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d107      	bne.n	80061e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e040      	b.n	800625a <HAL_RCC_OscConfig+0x52e>
 80061d8:	40023800 	.word	0x40023800
 80061dc:	40007000 	.word	0x40007000
 80061e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061e4:	4b1f      	ldr	r3, [pc, #124]	; (8006264 <HAL_RCC_OscConfig+0x538>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d030      	beq.n	8006254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d129      	bne.n	8006254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800620a:	429a      	cmp	r2, r3
 800620c:	d122      	bne.n	8006254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006214:	4013      	ands	r3, r2
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800621a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800621c:	4293      	cmp	r3, r2
 800621e:	d119      	bne.n	8006254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622a:	085b      	lsrs	r3, r3, #1
 800622c:	3b01      	subs	r3, #1
 800622e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006230:	429a      	cmp	r2, r3
 8006232:	d10f      	bne.n	8006254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006240:	429a      	cmp	r2, r3
 8006242:	d107      	bne.n	8006254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006250:	429a      	cmp	r2, r3
 8006252:	d001      	beq.n	8006258 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e000      	b.n	800625a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	40023800 	.word	0x40023800

08006268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e03f      	b.n	80062fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d106      	bne.n	8006294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7fd fb8e 	bl	80039b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2224      	movs	r2, #36	; 0x24
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fd19 	bl	8006ce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	691a      	ldr	r2, [r3, #16]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	695a      	ldr	r2, [r3, #20]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68da      	ldr	r2, [r3, #12]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006302:	b480      	push	{r7}
 8006304:	b085      	sub	sp, #20
 8006306:	af00      	add	r7, sp, #0
 8006308:	60f8      	str	r0, [r7, #12]
 800630a:	60b9      	str	r1, [r7, #8]
 800630c:	4613      	mov	r3, r2
 800630e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b20      	cmp	r3, #32
 800631a:	d130      	bne.n	800637e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <HAL_UART_Transmit_IT+0x26>
 8006322:	88fb      	ldrh	r3, [r7, #6]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e029      	b.n	8006380 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006332:	2b01      	cmp	r3, #1
 8006334:	d101      	bne.n	800633a <HAL_UART_Transmit_IT+0x38>
 8006336:	2302      	movs	r3, #2
 8006338:	e022      	b.n	8006380 <HAL_UART_Transmit_IT+0x7e>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	88fa      	ldrh	r2, [r7, #6]
 800634c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	88fa      	ldrh	r2, [r7, #6]
 8006352:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2221      	movs	r2, #33	; 0x21
 800635e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68da      	ldr	r2, [r3, #12]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006378:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	e000      	b.n	8006380 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800637e:	2302      	movs	r3, #2
  }
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	4613      	mov	r3, r2
 8006398:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b20      	cmp	r3, #32
 80063a4:	d11d      	bne.n	80063e2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <HAL_UART_Receive_IT+0x26>
 80063ac:	88fb      	ldrh	r3, [r7, #6]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e016      	b.n	80063e4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <HAL_UART_Receive_IT+0x38>
 80063c0:	2302      	movs	r3, #2
 80063c2:	e00f      	b.n	80063e4 <HAL_UART_Receive_IT+0x58>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80063d2:	88fb      	ldrh	r3, [r7, #6]
 80063d4:	461a      	mov	r2, r3
 80063d6:	68b9      	ldr	r1, [r7, #8]
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 faab 	bl	8006934 <UART_Start_Receive_IT>
 80063de:	4603      	mov	r3, r0
 80063e0:	e000      	b.n	80063e4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80063e2:	2302      	movs	r3, #2
  }
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b0ba      	sub	sp, #232	; 0xe8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006412:	2300      	movs	r3, #0
 8006414:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006418:	2300      	movs	r3, #0
 800641a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800641e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006422:	f003 030f 	and.w	r3, r3, #15
 8006426:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800642a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10f      	bne.n	8006452 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b00      	cmp	r3, #0
 800643c:	d009      	beq.n	8006452 <HAL_UART_IRQHandler+0x66>
 800643e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006442:	f003 0320 	and.w	r3, r3, #32
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fb8f 	bl	8006b6e <UART_Receive_IT>
      return;
 8006450:	e256      	b.n	8006900 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006452:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 80de 	beq.w	8006618 <HAL_UART_IRQHandler+0x22c>
 800645c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	d106      	bne.n	8006476 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800646c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006470:	2b00      	cmp	r3, #0
 8006472:	f000 80d1 	beq.w	8006618 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00b      	beq.n	800649a <HAL_UART_IRQHandler+0xae>
 8006482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800648a:	2b00      	cmp	r3, #0
 800648c:	d005      	beq.n	800649a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	f043 0201 	orr.w	r2, r3, #1
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800649a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800649e:	f003 0304 	and.w	r3, r3, #4
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00b      	beq.n	80064be <HAL_UART_IRQHandler+0xd2>
 80064a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d005      	beq.n	80064be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	f043 0202 	orr.w	r2, r3, #2
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00b      	beq.n	80064e2 <HAL_UART_IRQHandler+0xf6>
 80064ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d005      	beq.n	80064e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	f043 0204 	orr.w	r2, r3, #4
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80064e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e6:	f003 0308 	and.w	r3, r3, #8
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d011      	beq.n	8006512 <HAL_UART_IRQHandler+0x126>
 80064ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f2:	f003 0320 	and.w	r3, r3, #32
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d105      	bne.n	8006506 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80064fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d005      	beq.n	8006512 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	f043 0208 	orr.w	r2, r3, #8
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 81ed 	beq.w	80068f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800651c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006520:	f003 0320 	and.w	r3, r3, #32
 8006524:	2b00      	cmp	r3, #0
 8006526:	d008      	beq.n	800653a <HAL_UART_IRQHandler+0x14e>
 8006528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800652c:	f003 0320 	and.w	r3, r3, #32
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fb1a 	bl	8006b6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006544:	2b40      	cmp	r3, #64	; 0x40
 8006546:	bf0c      	ite	eq
 8006548:	2301      	moveq	r3, #1
 800654a:	2300      	movne	r3, #0
 800654c:	b2db      	uxtb	r3, r3
 800654e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d103      	bne.n	8006566 <HAL_UART_IRQHandler+0x17a>
 800655e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006562:	2b00      	cmp	r3, #0
 8006564:	d04f      	beq.n	8006606 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fa22 	bl	80069b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006576:	2b40      	cmp	r3, #64	; 0x40
 8006578:	d141      	bne.n	80065fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3314      	adds	r3, #20
 8006580:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006584:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006588:	e853 3f00 	ldrex	r3, [r3]
 800658c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006590:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006598:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3314      	adds	r3, #20
 80065a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80065aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065b6:	e841 2300 	strex	r3, r2, [r1]
 80065ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80065be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1d9      	bne.n	800657a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d013      	beq.n	80065f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d2:	4a7d      	ldr	r2, [pc, #500]	; (80067c8 <HAL_UART_IRQHandler+0x3dc>)
 80065d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fe fbf2 	bl	8004dc4 <HAL_DMA_Abort_IT>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d016      	beq.n	8006614 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80065f0:	4610      	mov	r0, r2
 80065f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f4:	e00e      	b.n	8006614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f986 	bl	8006908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065fc:	e00a      	b.n	8006614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f982 	bl	8006908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006604:	e006      	b.n	8006614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f97e 	bl	8006908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006612:	e170      	b.n	80068f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006614:	bf00      	nop
    return;
 8006616:	e16e      	b.n	80068f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661c:	2b01      	cmp	r3, #1
 800661e:	f040 814a 	bne.w	80068b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006626:	f003 0310 	and.w	r3, r3, #16
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 8143 	beq.w	80068b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006634:	f003 0310 	and.w	r3, r3, #16
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 813c 	beq.w	80068b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800663e:	2300      	movs	r3, #0
 8006640:	60bb      	str	r3, [r7, #8]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	60bb      	str	r3, [r7, #8]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	60bb      	str	r3, [r7, #8]
 8006652:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665e:	2b40      	cmp	r3, #64	; 0x40
 8006660:	f040 80b4 	bne.w	80067cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006670:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 8140 	beq.w	80068fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800667e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006682:	429a      	cmp	r2, r3
 8006684:	f080 8139 	bcs.w	80068fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800668e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800669a:	f000 8088 	beq.w	80067ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	330c      	adds	r3, #12
 80066a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066ac:	e853 3f00 	ldrex	r3, [r3]
 80066b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80066b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	330c      	adds	r3, #12
 80066c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80066ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80066d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066da:	e841 2300 	strex	r3, r2, [r1]
 80066de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80066e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1d9      	bne.n	800669e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3314      	adds	r3, #20
 80066f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066f4:	e853 3f00 	ldrex	r3, [r3]
 80066f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80066fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066fc:	f023 0301 	bic.w	r3, r3, #1
 8006700:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	3314      	adds	r3, #20
 800670a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800670e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006712:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006714:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006716:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800671a:	e841 2300 	strex	r3, r2, [r1]
 800671e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1e1      	bne.n	80066ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3314      	adds	r3, #20
 800672c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006730:	e853 3f00 	ldrex	r3, [r3]
 8006734:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800673c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3314      	adds	r3, #20
 8006746:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800674a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800674c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006750:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1e3      	bne.n	8006726 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2220      	movs	r2, #32
 8006762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	330c      	adds	r3, #12
 8006772:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006776:	e853 3f00 	ldrex	r3, [r3]
 800677a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800677c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800677e:	f023 0310 	bic.w	r3, r3, #16
 8006782:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	330c      	adds	r3, #12
 800678c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006790:	65ba      	str	r2, [r7, #88]	; 0x58
 8006792:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006794:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006796:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006798:	e841 2300 	strex	r3, r2, [r1]
 800679c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800679e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1e3      	bne.n	800676c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fe fa9b 	bl	8004ce4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f8ac 	bl	800691c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067c4:	e099      	b.n	80068fa <HAL_UART_IRQHandler+0x50e>
 80067c6:	bf00      	nop
 80067c8:	08006a77 	.word	0x08006a77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 808b 	beq.w	80068fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80067e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 8086 	beq.w	80068fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	330c      	adds	r3, #12
 80067f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fc:	e853 3f00 	ldrex	r3, [r3]
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006804:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006808:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	330c      	adds	r3, #12
 8006812:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006816:	647a      	str	r2, [r7, #68]	; 0x44
 8006818:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800681c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800681e:	e841 2300 	strex	r3, r2, [r1]
 8006822:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1e3      	bne.n	80067f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3314      	adds	r3, #20
 8006830:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	e853 3f00 	ldrex	r3, [r3]
 8006838:	623b      	str	r3, [r7, #32]
   return(result);
 800683a:	6a3b      	ldr	r3, [r7, #32]
 800683c:	f023 0301 	bic.w	r3, r3, #1
 8006840:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3314      	adds	r3, #20
 800684a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800684e:	633a      	str	r2, [r7, #48]	; 0x30
 8006850:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006856:	e841 2300 	strex	r3, r2, [r1]
 800685a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1e3      	bne.n	800682a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2220      	movs	r2, #32
 8006866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	330c      	adds	r3, #12
 8006876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	e853 3f00 	ldrex	r3, [r3]
 800687e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f023 0310 	bic.w	r3, r3, #16
 8006886:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	330c      	adds	r3, #12
 8006890:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006894:	61fa      	str	r2, [r7, #28]
 8006896:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006898:	69b9      	ldr	r1, [r7, #24]
 800689a:	69fa      	ldr	r2, [r7, #28]
 800689c:	e841 2300 	strex	r3, r2, [r1]
 80068a0:	617b      	str	r3, [r7, #20]
   return(result);
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1e3      	bne.n	8006870 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f834 	bl	800691c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068b4:	e023      	b.n	80068fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d009      	beq.n	80068d6 <HAL_UART_IRQHandler+0x4ea>
 80068c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f8e5 	bl	8006a9e <UART_Transmit_IT>
    return;
 80068d4:	e014      	b.n	8006900 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00e      	beq.n	8006900 <HAL_UART_IRQHandler+0x514>
 80068e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d008      	beq.n	8006900 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f925 	bl	8006b3e <UART_EndTransmit_IT>
    return;
 80068f4:	e004      	b.n	8006900 <HAL_UART_IRQHandler+0x514>
    return;
 80068f6:	bf00      	nop
 80068f8:	e002      	b.n	8006900 <HAL_UART_IRQHandler+0x514>
      return;
 80068fa:	bf00      	nop
 80068fc:	e000      	b.n	8006900 <HAL_UART_IRQHandler+0x514>
      return;
 80068fe:	bf00      	nop
  }
}
 8006900:	37e8      	adds	r7, #232	; 0xe8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop

08006908 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	4613      	mov	r3, r2
 8006940:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	88fa      	ldrh	r2, [r7, #6]
 800694c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	88fa      	ldrh	r2, [r7, #6]
 8006952:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2222      	movs	r2, #34	; 0x22
 800695e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d007      	beq.n	8006982 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68da      	ldr	r2, [r3, #12]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006980:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	695a      	ldr	r2, [r3, #20]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f042 0201 	orr.w	r2, r2, #1
 8006990:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68da      	ldr	r2, [r3, #12]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f042 0220 	orr.w	r2, r2, #32
 80069a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b095      	sub	sp, #84	; 0x54
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	330c      	adds	r3, #12
 80069be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c2:	e853 3f00 	ldrex	r3, [r3]
 80069c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	330c      	adds	r3, #12
 80069d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069d8:	643a      	str	r2, [r7, #64]	; 0x40
 80069da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069e0:	e841 2300 	strex	r3, r2, [r1]
 80069e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1e5      	bne.n	80069b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3314      	adds	r3, #20
 80069f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f4:	6a3b      	ldr	r3, [r7, #32]
 80069f6:	e853 3f00 	ldrex	r3, [r3]
 80069fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	f023 0301 	bic.w	r3, r3, #1
 8006a02:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3314      	adds	r3, #20
 8006a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a14:	e841 2300 	strex	r3, r2, [r1]
 8006a18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1e5      	bne.n	80069ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d119      	bne.n	8006a5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	330c      	adds	r3, #12
 8006a2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	e853 3f00 	ldrex	r3, [r3]
 8006a36:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f023 0310 	bic.w	r3, r3, #16
 8006a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	330c      	adds	r3, #12
 8006a46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a48:	61ba      	str	r2, [r7, #24]
 8006a4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4c:	6979      	ldr	r1, [r7, #20]
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	e841 2300 	strex	r3, r2, [r1]
 8006a54:	613b      	str	r3, [r7, #16]
   return(result);
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1e5      	bne.n	8006a28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006a6a:	bf00      	nop
 8006a6c:	3754      	adds	r7, #84	; 0x54
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f7ff ff39 	bl	8006908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a96:	bf00      	nop
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b085      	sub	sp, #20
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b21      	cmp	r3, #33	; 0x21
 8006ab0:	d13e      	bne.n	8006b30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aba:	d114      	bne.n	8006ae6 <UART_Transmit_IT+0x48>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d110      	bne.n	8006ae6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ad8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	1c9a      	adds	r2, r3, #2
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	621a      	str	r2, [r3, #32]
 8006ae4:	e008      	b.n	8006af8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	1c59      	adds	r1, r3, #1
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	6211      	str	r1, [r2, #32]
 8006af0:	781a      	ldrb	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	3b01      	subs	r3, #1
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	4619      	mov	r1, r3
 8006b06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10f      	bne.n	8006b2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68da      	ldr	r2, [r3, #12]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	e000      	b.n	8006b32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b30:	2302      	movs	r3, #2
  }
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b082      	sub	sp, #8
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68da      	ldr	r2, [r3, #12]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fa fb6a 	bl	8001238 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b08c      	sub	sp, #48	; 0x30
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b22      	cmp	r3, #34	; 0x22
 8006b80:	f040 80ab 	bne.w	8006cda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b8c:	d117      	bne.n	8006bbe <UART_Receive_IT+0x50>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d113      	bne.n	8006bbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b96:	2300      	movs	r3, #0
 8006b98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb6:	1c9a      	adds	r2, r3, #2
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	629a      	str	r2, [r3, #40]	; 0x28
 8006bbc:	e026      	b.n	8006c0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd0:	d007      	beq.n	8006be2 <UART_Receive_IT+0x74>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d10a      	bne.n	8006bf0 <UART_Receive_IT+0x82>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d106      	bne.n	8006bf0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bec:	701a      	strb	r2, [r3, #0]
 8006bee:	e008      	b.n	8006c02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	3b01      	subs	r3, #1
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	4619      	mov	r1, r3
 8006c1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d15a      	bne.n	8006cd6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0220 	bic.w	r2, r2, #32
 8006c2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68da      	ldr	r2, [r3, #12]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	695a      	ldr	r2, [r3, #20]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f022 0201 	bic.w	r2, r2, #1
 8006c4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2220      	movs	r2, #32
 8006c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d135      	bne.n	8006ccc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	330c      	adds	r3, #12
 8006c6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	613b      	str	r3, [r7, #16]
   return(result);
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f023 0310 	bic.w	r3, r3, #16
 8006c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	330c      	adds	r3, #12
 8006c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c86:	623a      	str	r2, [r7, #32]
 8006c88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8a:	69f9      	ldr	r1, [r7, #28]
 8006c8c:	6a3a      	ldr	r2, [r7, #32]
 8006c8e:	e841 2300 	strex	r3, r2, [r1]
 8006c92:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1e5      	bne.n	8006c66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0310 	and.w	r3, r3, #16
 8006ca4:	2b10      	cmp	r3, #16
 8006ca6:	d10a      	bne.n	8006cbe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f7ff fe29 	bl	800691c <HAL_UARTEx_RxEventCallback>
 8006cca:	e002      	b.n	8006cd2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7fa fadb 	bl	8001288 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e002      	b.n	8006cdc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	e000      	b.n	8006cdc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006cda:	2302      	movs	r3, #2
  }
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3730      	adds	r7, #48	; 0x30
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ce8:	b0c0      	sub	sp, #256	; 0x100
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d00:	68d9      	ldr	r1, [r3, #12]
 8006d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	ea40 0301 	orr.w	r3, r0, r1
 8006d0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d12:	689a      	ldr	r2, [r3, #8]
 8006d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	431a      	orrs	r2, r3
 8006d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d3c:	f021 010c 	bic.w	r1, r1, #12
 8006d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d4a:	430b      	orrs	r3, r1
 8006d4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d5e:	6999      	ldr	r1, [r3, #24]
 8006d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	ea40 0301 	orr.w	r3, r0, r1
 8006d6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	4b8f      	ldr	r3, [pc, #572]	; (8006fb0 <UART_SetConfig+0x2cc>)
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d005      	beq.n	8006d84 <UART_SetConfig+0xa0>
 8006d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	4b8d      	ldr	r3, [pc, #564]	; (8006fb4 <UART_SetConfig+0x2d0>)
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d104      	bne.n	8006d8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d84:	f7fe fd8e 	bl	80058a4 <HAL_RCC_GetPCLK2Freq>
 8006d88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006d8c:	e003      	b.n	8006d96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d8e:	f7fe fd75 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 8006d92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006da0:	f040 810c 	bne.w	8006fbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006da8:	2200      	movs	r2, #0
 8006daa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006dae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006db2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006db6:	4622      	mov	r2, r4
 8006db8:	462b      	mov	r3, r5
 8006dba:	1891      	adds	r1, r2, r2
 8006dbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8006dbe:	415b      	adcs	r3, r3
 8006dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	eb12 0801 	adds.w	r8, r2, r1
 8006dcc:	4629      	mov	r1, r5
 8006dce:	eb43 0901 	adc.w	r9, r3, r1
 8006dd2:	f04f 0200 	mov.w	r2, #0
 8006dd6:	f04f 0300 	mov.w	r3, #0
 8006dda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006dde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006de2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006de6:	4690      	mov	r8, r2
 8006de8:	4699      	mov	r9, r3
 8006dea:	4623      	mov	r3, r4
 8006dec:	eb18 0303 	adds.w	r3, r8, r3
 8006df0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006df4:	462b      	mov	r3, r5
 8006df6:	eb49 0303 	adc.w	r3, r9, r3
 8006dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006e0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e12:	460b      	mov	r3, r1
 8006e14:	18db      	adds	r3, r3, r3
 8006e16:	653b      	str	r3, [r7, #80]	; 0x50
 8006e18:	4613      	mov	r3, r2
 8006e1a:	eb42 0303 	adc.w	r3, r2, r3
 8006e1e:	657b      	str	r3, [r7, #84]	; 0x54
 8006e20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006e24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006e28:	f7f9 ff4e 	bl	8000cc8 <__aeabi_uldivmod>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	460b      	mov	r3, r1
 8006e30:	4b61      	ldr	r3, [pc, #388]	; (8006fb8 <UART_SetConfig+0x2d4>)
 8006e32:	fba3 2302 	umull	r2, r3, r3, r2
 8006e36:	095b      	lsrs	r3, r3, #5
 8006e38:	011c      	lsls	r4, r3, #4
 8006e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006e48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006e4c:	4642      	mov	r2, r8
 8006e4e:	464b      	mov	r3, r9
 8006e50:	1891      	adds	r1, r2, r2
 8006e52:	64b9      	str	r1, [r7, #72]	; 0x48
 8006e54:	415b      	adcs	r3, r3
 8006e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e5c:	4641      	mov	r1, r8
 8006e5e:	eb12 0a01 	adds.w	sl, r2, r1
 8006e62:	4649      	mov	r1, r9
 8006e64:	eb43 0b01 	adc.w	fp, r3, r1
 8006e68:	f04f 0200 	mov.w	r2, #0
 8006e6c:	f04f 0300 	mov.w	r3, #0
 8006e70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e7c:	4692      	mov	sl, r2
 8006e7e:	469b      	mov	fp, r3
 8006e80:	4643      	mov	r3, r8
 8006e82:	eb1a 0303 	adds.w	r3, sl, r3
 8006e86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e8a:	464b      	mov	r3, r9
 8006e8c:	eb4b 0303 	adc.w	r3, fp, r3
 8006e90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ea0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006ea4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	18db      	adds	r3, r3, r3
 8006eac:	643b      	str	r3, [r7, #64]	; 0x40
 8006eae:	4613      	mov	r3, r2
 8006eb0:	eb42 0303 	adc.w	r3, r2, r3
 8006eb4:	647b      	str	r3, [r7, #68]	; 0x44
 8006eb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006eba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006ebe:	f7f9 ff03 	bl	8000cc8 <__aeabi_uldivmod>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	4b3b      	ldr	r3, [pc, #236]	; (8006fb8 <UART_SetConfig+0x2d4>)
 8006eca:	fba3 2301 	umull	r2, r3, r3, r1
 8006ece:	095b      	lsrs	r3, r3, #5
 8006ed0:	2264      	movs	r2, #100	; 0x64
 8006ed2:	fb02 f303 	mul.w	r3, r2, r3
 8006ed6:	1acb      	subs	r3, r1, r3
 8006ed8:	00db      	lsls	r3, r3, #3
 8006eda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006ede:	4b36      	ldr	r3, [pc, #216]	; (8006fb8 <UART_SetConfig+0x2d4>)
 8006ee0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ee4:	095b      	lsrs	r3, r3, #5
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006eec:	441c      	add	r4, r3
 8006eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ef8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006efc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f00:	4642      	mov	r2, r8
 8006f02:	464b      	mov	r3, r9
 8006f04:	1891      	adds	r1, r2, r2
 8006f06:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f08:	415b      	adcs	r3, r3
 8006f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f10:	4641      	mov	r1, r8
 8006f12:	1851      	adds	r1, r2, r1
 8006f14:	6339      	str	r1, [r7, #48]	; 0x30
 8006f16:	4649      	mov	r1, r9
 8006f18:	414b      	adcs	r3, r1
 8006f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f1c:	f04f 0200 	mov.w	r2, #0
 8006f20:	f04f 0300 	mov.w	r3, #0
 8006f24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006f28:	4659      	mov	r1, fp
 8006f2a:	00cb      	lsls	r3, r1, #3
 8006f2c:	4651      	mov	r1, sl
 8006f2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f32:	4651      	mov	r1, sl
 8006f34:	00ca      	lsls	r2, r1, #3
 8006f36:	4610      	mov	r0, r2
 8006f38:	4619      	mov	r1, r3
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	4642      	mov	r2, r8
 8006f3e:	189b      	adds	r3, r3, r2
 8006f40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f44:	464b      	mov	r3, r9
 8006f46:	460a      	mov	r2, r1
 8006f48:	eb42 0303 	adc.w	r3, r2, r3
 8006f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006f60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f64:	460b      	mov	r3, r1
 8006f66:	18db      	adds	r3, r3, r3
 8006f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	eb42 0303 	adc.w	r3, r2, r3
 8006f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006f7a:	f7f9 fea5 	bl	8000cc8 <__aeabi_uldivmod>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	4b0d      	ldr	r3, [pc, #52]	; (8006fb8 <UART_SetConfig+0x2d4>)
 8006f84:	fba3 1302 	umull	r1, r3, r3, r2
 8006f88:	095b      	lsrs	r3, r3, #5
 8006f8a:	2164      	movs	r1, #100	; 0x64
 8006f8c:	fb01 f303 	mul.w	r3, r1, r3
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	00db      	lsls	r3, r3, #3
 8006f94:	3332      	adds	r3, #50	; 0x32
 8006f96:	4a08      	ldr	r2, [pc, #32]	; (8006fb8 <UART_SetConfig+0x2d4>)
 8006f98:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9c:	095b      	lsrs	r3, r3, #5
 8006f9e:	f003 0207 	and.w	r2, r3, #7
 8006fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4422      	add	r2, r4
 8006faa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006fac:	e106      	b.n	80071bc <UART_SetConfig+0x4d8>
 8006fae:	bf00      	nop
 8006fb0:	40011000 	.word	0x40011000
 8006fb4:	40011400 	.word	0x40011400
 8006fb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006fc6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006fca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006fce:	4642      	mov	r2, r8
 8006fd0:	464b      	mov	r3, r9
 8006fd2:	1891      	adds	r1, r2, r2
 8006fd4:	6239      	str	r1, [r7, #32]
 8006fd6:	415b      	adcs	r3, r3
 8006fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8006fda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006fde:	4641      	mov	r1, r8
 8006fe0:	1854      	adds	r4, r2, r1
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	eb43 0501 	adc.w	r5, r3, r1
 8006fe8:	f04f 0200 	mov.w	r2, #0
 8006fec:	f04f 0300 	mov.w	r3, #0
 8006ff0:	00eb      	lsls	r3, r5, #3
 8006ff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ff6:	00e2      	lsls	r2, r4, #3
 8006ff8:	4614      	mov	r4, r2
 8006ffa:	461d      	mov	r5, r3
 8006ffc:	4643      	mov	r3, r8
 8006ffe:	18e3      	adds	r3, r4, r3
 8007000:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007004:	464b      	mov	r3, r9
 8007006:	eb45 0303 	adc.w	r3, r5, r3
 800700a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800700e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800701a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800701e:	f04f 0200 	mov.w	r2, #0
 8007022:	f04f 0300 	mov.w	r3, #0
 8007026:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800702a:	4629      	mov	r1, r5
 800702c:	008b      	lsls	r3, r1, #2
 800702e:	4621      	mov	r1, r4
 8007030:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007034:	4621      	mov	r1, r4
 8007036:	008a      	lsls	r2, r1, #2
 8007038:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800703c:	f7f9 fe44 	bl	8000cc8 <__aeabi_uldivmod>
 8007040:	4602      	mov	r2, r0
 8007042:	460b      	mov	r3, r1
 8007044:	4b60      	ldr	r3, [pc, #384]	; (80071c8 <UART_SetConfig+0x4e4>)
 8007046:	fba3 2302 	umull	r2, r3, r3, r2
 800704a:	095b      	lsrs	r3, r3, #5
 800704c:	011c      	lsls	r4, r3, #4
 800704e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007052:	2200      	movs	r2, #0
 8007054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007058:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800705c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007060:	4642      	mov	r2, r8
 8007062:	464b      	mov	r3, r9
 8007064:	1891      	adds	r1, r2, r2
 8007066:	61b9      	str	r1, [r7, #24]
 8007068:	415b      	adcs	r3, r3
 800706a:	61fb      	str	r3, [r7, #28]
 800706c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007070:	4641      	mov	r1, r8
 8007072:	1851      	adds	r1, r2, r1
 8007074:	6139      	str	r1, [r7, #16]
 8007076:	4649      	mov	r1, r9
 8007078:	414b      	adcs	r3, r1
 800707a:	617b      	str	r3, [r7, #20]
 800707c:	f04f 0200 	mov.w	r2, #0
 8007080:	f04f 0300 	mov.w	r3, #0
 8007084:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007088:	4659      	mov	r1, fp
 800708a:	00cb      	lsls	r3, r1, #3
 800708c:	4651      	mov	r1, sl
 800708e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007092:	4651      	mov	r1, sl
 8007094:	00ca      	lsls	r2, r1, #3
 8007096:	4610      	mov	r0, r2
 8007098:	4619      	mov	r1, r3
 800709a:	4603      	mov	r3, r0
 800709c:	4642      	mov	r2, r8
 800709e:	189b      	adds	r3, r3, r2
 80070a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070a4:	464b      	mov	r3, r9
 80070a6:	460a      	mov	r2, r1
 80070a8:	eb42 0303 	adc.w	r3, r2, r3
 80070ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80070ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80070bc:	f04f 0200 	mov.w	r2, #0
 80070c0:	f04f 0300 	mov.w	r3, #0
 80070c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80070c8:	4649      	mov	r1, r9
 80070ca:	008b      	lsls	r3, r1, #2
 80070cc:	4641      	mov	r1, r8
 80070ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070d2:	4641      	mov	r1, r8
 80070d4:	008a      	lsls	r2, r1, #2
 80070d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80070da:	f7f9 fdf5 	bl	8000cc8 <__aeabi_uldivmod>
 80070de:	4602      	mov	r2, r0
 80070e0:	460b      	mov	r3, r1
 80070e2:	4611      	mov	r1, r2
 80070e4:	4b38      	ldr	r3, [pc, #224]	; (80071c8 <UART_SetConfig+0x4e4>)
 80070e6:	fba3 2301 	umull	r2, r3, r3, r1
 80070ea:	095b      	lsrs	r3, r3, #5
 80070ec:	2264      	movs	r2, #100	; 0x64
 80070ee:	fb02 f303 	mul.w	r3, r2, r3
 80070f2:	1acb      	subs	r3, r1, r3
 80070f4:	011b      	lsls	r3, r3, #4
 80070f6:	3332      	adds	r3, #50	; 0x32
 80070f8:	4a33      	ldr	r2, [pc, #204]	; (80071c8 <UART_SetConfig+0x4e4>)
 80070fa:	fba2 2303 	umull	r2, r3, r2, r3
 80070fe:	095b      	lsrs	r3, r3, #5
 8007100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007104:	441c      	add	r4, r3
 8007106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800710a:	2200      	movs	r2, #0
 800710c:	673b      	str	r3, [r7, #112]	; 0x70
 800710e:	677a      	str	r2, [r7, #116]	; 0x74
 8007110:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007114:	4642      	mov	r2, r8
 8007116:	464b      	mov	r3, r9
 8007118:	1891      	adds	r1, r2, r2
 800711a:	60b9      	str	r1, [r7, #8]
 800711c:	415b      	adcs	r3, r3
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007124:	4641      	mov	r1, r8
 8007126:	1851      	adds	r1, r2, r1
 8007128:	6039      	str	r1, [r7, #0]
 800712a:	4649      	mov	r1, r9
 800712c:	414b      	adcs	r3, r1
 800712e:	607b      	str	r3, [r7, #4]
 8007130:	f04f 0200 	mov.w	r2, #0
 8007134:	f04f 0300 	mov.w	r3, #0
 8007138:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800713c:	4659      	mov	r1, fp
 800713e:	00cb      	lsls	r3, r1, #3
 8007140:	4651      	mov	r1, sl
 8007142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007146:	4651      	mov	r1, sl
 8007148:	00ca      	lsls	r2, r1, #3
 800714a:	4610      	mov	r0, r2
 800714c:	4619      	mov	r1, r3
 800714e:	4603      	mov	r3, r0
 8007150:	4642      	mov	r2, r8
 8007152:	189b      	adds	r3, r3, r2
 8007154:	66bb      	str	r3, [r7, #104]	; 0x68
 8007156:	464b      	mov	r3, r9
 8007158:	460a      	mov	r2, r1
 800715a:	eb42 0303 	adc.w	r3, r2, r3
 800715e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	663b      	str	r3, [r7, #96]	; 0x60
 800716a:	667a      	str	r2, [r7, #100]	; 0x64
 800716c:	f04f 0200 	mov.w	r2, #0
 8007170:	f04f 0300 	mov.w	r3, #0
 8007174:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007178:	4649      	mov	r1, r9
 800717a:	008b      	lsls	r3, r1, #2
 800717c:	4641      	mov	r1, r8
 800717e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007182:	4641      	mov	r1, r8
 8007184:	008a      	lsls	r2, r1, #2
 8007186:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800718a:	f7f9 fd9d 	bl	8000cc8 <__aeabi_uldivmod>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	4b0d      	ldr	r3, [pc, #52]	; (80071c8 <UART_SetConfig+0x4e4>)
 8007194:	fba3 1302 	umull	r1, r3, r3, r2
 8007198:	095b      	lsrs	r3, r3, #5
 800719a:	2164      	movs	r1, #100	; 0x64
 800719c:	fb01 f303 	mul.w	r3, r1, r3
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	011b      	lsls	r3, r3, #4
 80071a4:	3332      	adds	r3, #50	; 0x32
 80071a6:	4a08      	ldr	r2, [pc, #32]	; (80071c8 <UART_SetConfig+0x4e4>)
 80071a8:	fba2 2303 	umull	r2, r3, r2, r3
 80071ac:	095b      	lsrs	r3, r3, #5
 80071ae:	f003 020f 	and.w	r2, r3, #15
 80071b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4422      	add	r2, r4
 80071ba:	609a      	str	r2, [r3, #8]
}
 80071bc:	bf00      	nop
 80071be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80071c2:	46bd      	mov	sp, r7
 80071c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071c8:	51eb851f 	.word	0x51eb851f

080071cc <_ZNSaIcEC1Ev>:
 80071cc:	4770      	bx	lr

080071ce <_ZNSaIcEC1ERKS_>:
 80071ce:	4770      	bx	lr

080071d0 <_ZNSaIcED1Ev>:
 80071d0:	4770      	bx	lr

080071d2 <_ZSt17__throw_bad_allocv>:
 80071d2:	b508      	push	{r3, lr}
 80071d4:	f000 fd2e 	bl	8007c34 <abort>

080071d8 <_ZSt19__throw_logic_errorPKc>:
 80071d8:	b508      	push	{r3, lr}
 80071da:	f000 fd2b 	bl	8007c34 <abort>

080071de <_ZSt24__throw_invalid_argumentPKc>:
 80071de:	b508      	push	{r3, lr}
 80071e0:	f000 fd28 	bl	8007c34 <abort>

080071e4 <_ZSt20__throw_length_errorPKc>:
 80071e4:	b508      	push	{r3, lr}
 80071e6:	f000 fd25 	bl	8007c34 <abort>

080071ea <_ZSt20__throw_out_of_rangePKc>:
 80071ea:	b508      	push	{r3, lr}
 80071ec:	f000 fd22 	bl	8007c34 <abort>

080071f0 <_ZSt24__throw_out_of_range_fmtPKcz>:
 80071f0:	b40f      	push	{r0, r1, r2, r3}
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b084      	sub	sp, #16
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	f107 0418 	add.w	r4, r7, #24
 80071fc:	f854 2b04 	ldr.w	r2, [r4], #4
 8007200:	607a      	str	r2, [r7, #4]
 8007202:	4610      	mov	r0, r2
 8007204:	f7f9 f854 	bl	80002b0 <strlen>
 8007208:	f200 2307 	addw	r3, r0, #519	; 0x207
 800720c:	f023 0307 	bic.w	r3, r3, #7
 8007210:	ebad 0d03 	sub.w	sp, sp, r3
 8007214:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	60fc      	str	r4, [r7, #12]
 800721c:	4623      	mov	r3, r4
 800721e:	4668      	mov	r0, sp
 8007220:	f000 f854 	bl	80072cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8007224:	f000 fd06 	bl	8007c34 <abort>

08007228 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8007228:	b580      	push	{r7, lr}
 800722a:	b09c      	sub	sp, #112	; 0x70
 800722c:	4606      	mov	r6, r0
 800722e:	af00      	add	r7, sp, #0
 8007230:	460c      	mov	r4, r1
 8007232:	1ba4      	subs	r4, r4, r6
 8007234:	490e      	ldr	r1, [pc, #56]	; (8007270 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8007236:	2269      	movs	r2, #105	; 0x69
 8007238:	1d38      	adds	r0, r7, #4
 800723a:	f002 fcf6 	bl	8009c2a <memcpy>
 800723e:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8007242:	f023 0307 	bic.w	r3, r3, #7
 8007246:	ebad 0d03 	sub.w	sp, sp, r3
 800724a:	466d      	mov	r5, sp
 800724c:	2268      	movs	r2, #104	; 0x68
 800724e:	1d39      	adds	r1, r7, #4
 8007250:	4628      	mov	r0, r5
 8007252:	f002 fcea 	bl	8009c2a <memcpy>
 8007256:	4622      	mov	r2, r4
 8007258:	4631      	mov	r1, r6
 800725a:	f105 0068 	add.w	r0, r5, #104	; 0x68
 800725e:	442c      	add	r4, r5
 8007260:	f002 fce3 	bl	8009c2a <memcpy>
 8007264:	2300      	movs	r3, #0
 8007266:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800726a:	4628      	mov	r0, r5
 800726c:	f7ff ffb4 	bl	80071d8 <_ZSt19__throw_logic_errorPKc>
 8007270:	0800c644 	.word	0x0800c644

08007274 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8007274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007278:	af00      	add	r7, sp, #0
 800727a:	b084      	sub	sp, #16
 800727c:	466d      	mov	r5, sp
 800727e:	f105 040c 	add.w	r4, r5, #12
 8007282:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80072c8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8007286:	4623      	mov	r3, r4
 8007288:	f04f 0c0a 	mov.w	ip, #10
 800728c:	fbb2 f6fc 	udiv	r6, r2, ip
 8007290:	fb0c 2e16 	mls	lr, ip, r6, r2
 8007294:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8007298:	f803 ed01 	strb.w	lr, [r3, #-1]!
 800729c:	4696      	mov	lr, r2
 800729e:	f1be 0f09 	cmp.w	lr, #9
 80072a2:	4632      	mov	r2, r6
 80072a4:	d8f2      	bhi.n	800728c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 80072a6:	1ae4      	subs	r4, r4, r3
 80072a8:	428c      	cmp	r4, r1
 80072aa:	d809      	bhi.n	80072c0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 80072ac:	f1c4 010c 	rsb	r1, r4, #12
 80072b0:	4622      	mov	r2, r4
 80072b2:	4429      	add	r1, r5
 80072b4:	f002 fcb9 	bl	8009c2a <memcpy>
 80072b8:	4620      	mov	r0, r4
 80072ba:	46bd      	mov	sp, r7
 80072bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072c0:	f04f 34ff 	mov.w	r4, #4294967295
 80072c4:	e7f8      	b.n	80072b8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 80072c6:	bf00      	nop
 80072c8:	0800c6ad 	.word	0x0800c6ad

080072cc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80072cc:	3901      	subs	r1, #1
 80072ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d2:	4607      	mov	r7, r0
 80072d4:	4615      	mov	r5, r2
 80072d6:	eb00 0801 	add.w	r8, r0, r1
 80072da:	4604      	mov	r4, r0
 80072dc:	782a      	ldrb	r2, [r5, #0]
 80072de:	b392      	cbz	r2, 8007346 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 80072e0:	4544      	cmp	r4, r8
 80072e2:	d216      	bcs.n	8007312 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x46>
 80072e4:	2a25      	cmp	r2, #37	; 0x25
 80072e6:	d107      	bne.n	80072f8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80072e8:	786a      	ldrb	r2, [r5, #1]
 80072ea:	2a73      	cmp	r2, #115	; 0x73
 80072ec:	d009      	beq.n	8007302 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 80072ee:	2a7a      	cmp	r2, #122	; 0x7a
 80072f0:	d016      	beq.n	8007320 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x54>
 80072f2:	2a25      	cmp	r2, #37	; 0x25
 80072f4:	d100      	bne.n	80072f8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80072f6:	3501      	adds	r5, #1
 80072f8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80072fc:	f804 2b01 	strb.w	r2, [r4], #1
 8007300:	e7ec      	b.n	80072dc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8007302:	f853 2b04 	ldr.w	r2, [r3], #4
 8007306:	3a01      	subs	r2, #1
 8007308:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800730c:	b1c9      	cbz	r1, 8007342 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 800730e:	4544      	cmp	r4, r8
 8007310:	d103      	bne.n	800731a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4e>
 8007312:	4621      	mov	r1, r4
 8007314:	4638      	mov	r0, r7
 8007316:	f7ff ff87 	bl	8007228 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800731a:	f804 1b01 	strb.w	r1, [r4], #1
 800731e:	e7f3      	b.n	8007308 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8007320:	78aa      	ldrb	r2, [r5, #2]
 8007322:	2a75      	cmp	r2, #117	; 0x75
 8007324:	d1e8      	bne.n	80072f8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8007326:	461e      	mov	r6, r3
 8007328:	eba8 0104 	sub.w	r1, r8, r4
 800732c:	f856 2b04 	ldr.w	r2, [r6], #4
 8007330:	4620      	mov	r0, r4
 8007332:	f7ff ff9f 	bl	8007274 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8007336:	2800      	cmp	r0, #0
 8007338:	ddeb      	ble.n	8007312 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x46>
 800733a:	4404      	add	r4, r0
 800733c:	3503      	adds	r5, #3
 800733e:	4633      	mov	r3, r6
 8007340:	e7cc      	b.n	80072dc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8007342:	3502      	adds	r5, #2
 8007344:	e7ca      	b.n	80072dc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8007346:	7022      	strb	r2, [r4, #0]
 8007348:	1be0      	subs	r0, r4, r7
 800734a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800734e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800734e:	b10a      	cbz	r2, 8007354 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8007350:	f002 bc6b 	b.w	8009c2a <memcpy>
 8007354:	4770      	bx	lr

08007356 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 8007356:	b10a      	cbz	r2, 800735c <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 8007358:	f002 bb57 	b.w	8009a0a <memcmp>
 800735c:	4610      	mov	r0, r2
 800735e:	4770      	bx	lr

08007360 <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
 8007360:	4613      	mov	r3, r2
 8007362:	460a      	mov	r2, r1
 8007364:	b111      	cbz	r1, 800736c <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
 8007366:	7819      	ldrb	r1, [r3, #0]
 8007368:	f7f8 bf52 	b.w	8000210 <memchr>
 800736c:	4608      	mov	r0, r1
 800736e:	4770      	bx	lr

08007370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8007370:	b508      	push	{r3, lr}
 8007372:	680b      	ldr	r3, [r1, #0]
 8007374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007378:	d302      	bcc.n	8007380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800737a:	480d      	ldr	r0, [pc, #52]	; (80073b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800737c:	f7ff ff32 	bl	80071e4 <_ZSt20__throw_length_errorPKc>
 8007380:	4293      	cmp	r3, r2
 8007382:	d90b      	bls.n	800739c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8007384:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8007388:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800738c:	d206      	bcs.n	800739c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800738e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007392:	bf2a      	itet	cs
 8007394:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8007398:	6008      	strcc	r0, [r1, #0]
 800739a:	600b      	strcs	r3, [r1, #0]
 800739c:	6808      	ldr	r0, [r1, #0]
 800739e:	3001      	adds	r0, #1
 80073a0:	d501      	bpl.n	80073a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80073a2:	f7ff ff16 	bl	80071d2 <_ZSt17__throw_bad_allocv>
 80073a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80073aa:	f000 bc29 	b.w	8007c00 <_Znwj>
 80073ae:	bf00      	nop
 80073b0:	0800c6b8 	.word	0x0800c6b8

080073b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80073b4:	f850 3b08 	ldr.w	r3, [r0], #8
 80073b8:	4283      	cmp	r3, r0
 80073ba:	d002      	beq.n	80073c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80073bc:	4618      	mov	r0, r3
 80073be:	f000 bc1d 	b.w	8007bfc <_ZdlPv>
 80073c2:	4770      	bx	lr

080073c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 80073c4:	b508      	push	{r3, lr}
 80073c6:	4603      	mov	r3, r0
 80073c8:	4608      	mov	r0, r1
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	4298      	cmp	r0, r3
 80073ce:	4611      	mov	r1, r2
 80073d0:	d903      	bls.n	80073da <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 80073d2:	4602      	mov	r2, r0
 80073d4:	4801      	ldr	r0, [pc, #4]	; (80073dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 80073d6:	f7ff ff0b 	bl	80071f0 <_ZSt24__throw_out_of_range_fmtPKcz>
 80073da:	bd08      	pop	{r3, pc}
 80073dc:	0800c6d0 	.word	0x0800c6d0

080073e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80073e0:	6840      	ldr	r0, [r0, #4]
 80073e2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80073e6:	3901      	subs	r1, #1
 80073e8:	1a09      	subs	r1, r1, r0
 80073ea:	4291      	cmp	r1, r2
 80073ec:	b508      	push	{r3, lr}
 80073ee:	d202      	bcs.n	80073f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7ff fef7 	bl	80071e4 <_ZSt20__throw_length_errorPKc>
 80073f6:	bd08      	pop	{r3, pc}

080073f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80073f8:	6803      	ldr	r3, [r0, #0]
 80073fa:	428b      	cmp	r3, r1
 80073fc:	d806      	bhi.n	800740c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80073fe:	6842      	ldr	r2, [r0, #4]
 8007400:	4413      	add	r3, r2
 8007402:	4299      	cmp	r1, r3
 8007404:	bf94      	ite	ls
 8007406:	2000      	movls	r0, #0
 8007408:	2001      	movhi	r0, #1
 800740a:	4770      	bx	lr
 800740c:	2001      	movs	r0, #1
 800740e:	4770      	bx	lr

08007410 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8007410:	2a01      	cmp	r2, #1
 8007412:	b410      	push	{r4}
 8007414:	d104      	bne.n	8007420 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8007416:	780a      	ldrb	r2, [r1, #0]
 8007418:	f85d 4b04 	ldr.w	r4, [sp], #4
 800741c:	7002      	strb	r2, [r0, #0]
 800741e:	4770      	bx	lr
 8007420:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007424:	f7ff bf93 	b.w	800734e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08007428 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8007428:	2a01      	cmp	r2, #1
 800742a:	b430      	push	{r4, r5}
 800742c:	d103      	bne.n	8007436 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800742e:	780b      	ldrb	r3, [r1, #0]
 8007430:	7003      	strb	r3, [r0, #0]
 8007432:	bc30      	pop	{r4, r5}
 8007434:	4770      	bx	lr
 8007436:	2a00      	cmp	r2, #0
 8007438:	d0fb      	beq.n	8007432 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800743a:	bc30      	pop	{r4, r5}
 800743c:	f002 baf5 	b.w	8009a2a <memmove>

08007440 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8007440:	460b      	mov	r3, r1
 8007442:	2b01      	cmp	r3, #1
 8007444:	b410      	push	{r4}
 8007446:	4611      	mov	r1, r2
 8007448:	4604      	mov	r4, r0
 800744a:	d103      	bne.n	8007454 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 800744c:	7022      	strb	r2, [r4, #0]
 800744e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	2b00      	cmp	r3, #0
 8007456:	d0fa      	beq.n	800744e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8007458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800745c:	461a      	mov	r2, r3
 800745e:	f002 bafe 	b.w	8009a5e <memset>

08007462 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 8007462:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007464:	290f      	cmp	r1, #15
 8007466:	4604      	mov	r4, r0
 8007468:	9101      	str	r1, [sp, #4]
 800746a:	4615      	mov	r5, r2
 800746c:	d906      	bls.n	800747c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 800746e:	2200      	movs	r2, #0
 8007470:	a901      	add	r1, sp, #4
 8007472:	f7ff ff7d 	bl	8007370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007476:	9b01      	ldr	r3, [sp, #4]
 8007478:	6020      	str	r0, [r4, #0]
 800747a:	60a3      	str	r3, [r4, #8]
 800747c:	9901      	ldr	r1, [sp, #4]
 800747e:	b119      	cbz	r1, 8007488 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 8007480:	6820      	ldr	r0, [r4, #0]
 8007482:	462a      	mov	r2, r5
 8007484:	f7ff ffdc 	bl	8007440 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8007488:	9b01      	ldr	r3, [sp, #4]
 800748a:	6822      	ldr	r2, [r4, #0]
 800748c:	6063      	str	r3, [r4, #4]
 800748e:	2100      	movs	r1, #0
 8007490:	54d1      	strb	r1, [r2, r3]
 8007492:	b003      	add	sp, #12
 8007494:	bd30      	pop	{r4, r5, pc}

08007496 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8007496:	b508      	push	{r3, lr}
 8007498:	1a52      	subs	r2, r2, r1
 800749a:	f7ff ffb9 	bl	8007410 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800749e:	bd08      	pop	{r3, pc}

080074a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80074a0:	b508      	push	{r3, lr}
 80074a2:	1a52      	subs	r2, r2, r1
 80074a4:	f7ff ffb4 	bl	8007410 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80074a8:	bd08      	pop	{r3, pc}

080074aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80074aa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80074ae:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80074b0:	461f      	mov	r7, r3
 80074b2:	6843      	ldr	r3, [r0, #4]
 80074b4:	eb01 0802 	add.w	r8, r1, r2
 80074b8:	1ab2      	subs	r2, r6, r2
 80074ba:	441a      	add	r2, r3
 80074bc:	eba3 0908 	sub.w	r9, r3, r8
 80074c0:	4603      	mov	r3, r0
 80074c2:	9201      	str	r2, [sp, #4]
 80074c4:	f853 2b08 	ldr.w	r2, [r3], #8
 80074c8:	429a      	cmp	r2, r3
 80074ca:	bf18      	it	ne
 80074cc:	6882      	ldrne	r2, [r0, #8]
 80074ce:	460d      	mov	r5, r1
 80074d0:	bf08      	it	eq
 80074d2:	220f      	moveq	r2, #15
 80074d4:	a901      	add	r1, sp, #4
 80074d6:	4604      	mov	r4, r0
 80074d8:	f7ff ff4a 	bl	8007370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80074dc:	4682      	mov	sl, r0
 80074de:	b11d      	cbz	r5, 80074e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80074e0:	6821      	ldr	r1, [r4, #0]
 80074e2:	462a      	mov	r2, r5
 80074e4:	f7ff ff94 	bl	8007410 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80074e8:	b137      	cbz	r7, 80074f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80074ea:	b12e      	cbz	r6, 80074f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80074ec:	4632      	mov	r2, r6
 80074ee:	4639      	mov	r1, r7
 80074f0:	eb0a 0005 	add.w	r0, sl, r5
 80074f4:	f7ff ff8c 	bl	8007410 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80074f8:	f1b9 0f00 	cmp.w	r9, #0
 80074fc:	d007      	beq.n	800750e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 80074fe:	6821      	ldr	r1, [r4, #0]
 8007500:	4435      	add	r5, r6
 8007502:	464a      	mov	r2, r9
 8007504:	4441      	add	r1, r8
 8007506:	eb0a 0005 	add.w	r0, sl, r5
 800750a:	f7ff ff81 	bl	8007410 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800750e:	4620      	mov	r0, r4
 8007510:	f7ff ff50 	bl	80073b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8007514:	9b01      	ldr	r3, [sp, #4]
 8007516:	f8c4 a000 	str.w	sl, [r4]
 800751a:	60a3      	str	r3, [r4, #8]
 800751c:	b002      	add	sp, #8
 800751e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007522 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
 8007522:	b538      	push	{r3, r4, r5, lr}
 8007524:	4604      	mov	r4, r0
 8007526:	4615      	mov	r5, r2
 8007528:	4608      	mov	r0, r1
 800752a:	4411      	add	r1, r2
 800752c:	6862      	ldr	r2, [r4, #4]
 800752e:	1a52      	subs	r2, r2, r1
 8007530:	d005      	beq.n	800753e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 8007532:	b125      	cbz	r5, 800753e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 8007534:	6823      	ldr	r3, [r4, #0]
 8007536:	4419      	add	r1, r3
 8007538:	4418      	add	r0, r3
 800753a:	f7ff ff75 	bl	8007428 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800753e:	6863      	ldr	r3, [r4, #4]
 8007540:	6822      	ldr	r2, [r4, #0]
 8007542:	1b5b      	subs	r3, r3, r5
 8007544:	2100      	movs	r1, #0
 8007546:	6063      	str	r3, [r4, #4]
 8007548:	54d1      	strb	r1, [r2, r3]
 800754a:	bd38      	pop	{r3, r4, r5, pc}

0800754c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800754c:	f100 0208 	add.w	r2, r0, #8
 8007550:	6002      	str	r2, [r0, #0]
 8007552:	2200      	movs	r2, #0
 8007554:	6042      	str	r2, [r0, #4]
 8007556:	7202      	strb	r2, [r0, #8]
 8007558:	4770      	bx	lr

0800755a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>:
 800755a:	f100 0208 	add.w	r2, r0, #8
 800755e:	6002      	str	r2, [r0, #0]
 8007560:	2200      	movs	r2, #0
 8007562:	6042      	str	r2, [r0, #4]
 8007564:	7202      	strb	r2, [r0, #8]
 8007566:	4770      	bx	lr

08007568 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 8007568:	b510      	push	{r4, lr}
 800756a:	f100 0308 	add.w	r3, r0, #8
 800756e:	4604      	mov	r4, r0
 8007570:	6003      	str	r3, [r0, #0]
 8007572:	f7ff ff76 	bl	8007462 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 8007576:	4620      	mov	r0, r4
 8007578:	bd10      	pop	{r4, pc}

0800757a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800757a:	b570      	push	{r4, r5, r6, lr}
 800757c:	4604      	mov	r4, r0
 800757e:	460e      	mov	r6, r1
 8007580:	3008      	adds	r0, #8
 8007582:	6020      	str	r0, [r4, #0]
 8007584:	f856 3b08 	ldr.w	r3, [r6], #8
 8007588:	429e      	cmp	r6, r3
 800758a:	460d      	mov	r5, r1
 800758c:	d10b      	bne.n	80075a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 800758e:	2210      	movs	r2, #16
 8007590:	4631      	mov	r1, r6
 8007592:	f7ff fedc 	bl	800734e <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8007596:	686b      	ldr	r3, [r5, #4]
 8007598:	6063      	str	r3, [r4, #4]
 800759a:	2300      	movs	r3, #0
 800759c:	602e      	str	r6, [r5, #0]
 800759e:	606b      	str	r3, [r5, #4]
 80075a0:	722b      	strb	r3, [r5, #8]
 80075a2:	4620      	mov	r0, r4
 80075a4:	bd70      	pop	{r4, r5, r6, pc}
 80075a6:	6023      	str	r3, [r4, #0]
 80075a8:	688b      	ldr	r3, [r1, #8]
 80075aa:	60a3      	str	r3, [r4, #8]
 80075ac:	e7f3      	b.n	8007596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

080075ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80075ae:	b510      	push	{r4, lr}
 80075b0:	4604      	mov	r4, r0
 80075b2:	f7ff feff 	bl	80073b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80075b6:	4620      	mov	r0, r4
 80075b8:	bd10      	pop	{r4, pc}

080075ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 80075ba:	b570      	push	{r4, r5, r6, lr}
 80075bc:	460c      	mov	r4, r1
 80075be:	f851 3b08 	ldr.w	r3, [r1], #8
 80075c2:	4299      	cmp	r1, r3
 80075c4:	4605      	mov	r5, r0
 80075c6:	6800      	ldr	r0, [r0, #0]
 80075c8:	d110      	bne.n	80075ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x32>
 80075ca:	42a5      	cmp	r5, r4
 80075cc:	d008      	beq.n	80075e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 80075ce:	6862      	ldr	r2, [r4, #4]
 80075d0:	b10a      	cbz	r2, 80075d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x1c>
 80075d2:	f7ff ff1d 	bl	8007410 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80075d6:	6863      	ldr	r3, [r4, #4]
 80075d8:	682a      	ldr	r2, [r5, #0]
 80075da:	606b      	str	r3, [r5, #4]
 80075dc:	2100      	movs	r1, #0
 80075de:	54d1      	strb	r1, [r2, r3]
 80075e0:	6822      	ldr	r2, [r4, #0]
 80075e2:	2300      	movs	r3, #0
 80075e4:	6063      	str	r3, [r4, #4]
 80075e6:	7013      	strb	r3, [r2, #0]
 80075e8:	4628      	mov	r0, r5
 80075ea:	bd70      	pop	{r4, r5, r6, pc}
 80075ec:	602b      	str	r3, [r5, #0]
 80075ee:	f105 0608 	add.w	r6, r5, #8
 80075f2:	6863      	ldr	r3, [r4, #4]
 80075f4:	606b      	str	r3, [r5, #4]
 80075f6:	42b0      	cmp	r0, r6
 80075f8:	68a3      	ldr	r3, [r4, #8]
 80075fa:	bf18      	it	ne
 80075fc:	68aa      	ldrne	r2, [r5, #8]
 80075fe:	60ab      	str	r3, [r5, #8]
 8007600:	bf08      	it	eq
 8007602:	2000      	moveq	r0, #0
 8007604:	b110      	cbz	r0, 800760c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x52>
 8007606:	6020      	str	r0, [r4, #0]
 8007608:	60a2      	str	r2, [r4, #8]
 800760a:	e7e9      	b.n	80075e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 800760c:	6021      	str	r1, [r4, #0]
 800760e:	e7e7      	b.n	80075e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>

08007610 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
 8007610:	6800      	ldr	r0, [r0, #0]
 8007612:	4770      	bx	lr

08007614 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
 8007614:	6800      	ldr	r0, [r0, #0]
 8007616:	4770      	bx	lr

08007618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>:
 8007618:	e9d0 2000 	ldrd	r2, r0, [r0]
 800761c:	4410      	add	r0, r2
 800761e:	4770      	bx	lr

08007620 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>:
 8007620:	e9d0 2000 	ldrd	r2, r0, [r0]
 8007624:	4410      	add	r0, r2
 8007626:	4770      	bx	lr

08007628 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8007628:	6840      	ldr	r0, [r0, #4]
 800762a:	4770      	bx	lr

0800762c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800762c:	6840      	ldr	r0, [r0, #4]
 800762e:	4770      	bx	lr

08007630 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8007630:	4603      	mov	r3, r0
 8007632:	f853 2b08 	ldr.w	r2, [r3], #8
 8007636:	429a      	cmp	r2, r3
 8007638:	bf14      	ite	ne
 800763a:	6880      	ldrne	r0, [r0, #8]
 800763c:	200f      	moveq	r0, #15
 800763e:	4770      	bx	lr

08007640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 8007640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007642:	4603      	mov	r3, r0
 8007644:	9101      	str	r1, [sp, #4]
 8007646:	f853 2b08 	ldr.w	r2, [r3], #8
 800764a:	429a      	cmp	r2, r3
 800764c:	bf18      	it	ne
 800764e:	6882      	ldrne	r2, [r0, #8]
 8007650:	9b01      	ldr	r3, [sp, #4]
 8007652:	bf08      	it	eq
 8007654:	220f      	moveq	r2, #15
 8007656:	4293      	cmp	r3, r2
 8007658:	4604      	mov	r4, r0
 800765a:	d90e      	bls.n	800767a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x3a>
 800765c:	a901      	add	r1, sp, #4
 800765e:	f7ff fe87 	bl	8007370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007662:	6862      	ldr	r2, [r4, #4]
 8007664:	6821      	ldr	r1, [r4, #0]
 8007666:	3201      	adds	r2, #1
 8007668:	4605      	mov	r5, r0
 800766a:	f7ff fed1 	bl	8007410 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800766e:	4620      	mov	r0, r4
 8007670:	f7ff fea0 	bl	80073b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8007674:	9b01      	ldr	r3, [sp, #4]
 8007676:	6025      	str	r5, [r4, #0]
 8007678:	60a3      	str	r3, [r4, #8]
 800767a:	b003      	add	sp, #12
 800767c:	bd30      	pop	{r4, r5, pc}

0800767e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 800767e:	6802      	ldr	r2, [r0, #0]
 8007680:	2300      	movs	r3, #0
 8007682:	6043      	str	r3, [r0, #4]
 8007684:	7013      	strb	r3, [r2, #0]
 8007686:	4770      	bx	lr

08007688 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8007688:	6800      	ldr	r0, [r0, #0]
 800768a:	4408      	add	r0, r1
 800768c:	4770      	bx	lr

0800768e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 800768e:	6800      	ldr	r0, [r0, #0]
 8007690:	4408      	add	r0, r1
 8007692:	4770      	bx	lr

08007694 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 8007694:	4603      	mov	r3, r0
 8007696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007698:	f853 2b08 	ldr.w	r2, [r3], #8
 800769c:	6846      	ldr	r6, [r0, #4]
 800769e:	429a      	cmp	r2, r3
 80076a0:	bf18      	it	ne
 80076a2:	6883      	ldrne	r3, [r0, #8]
 80076a4:	f106 0501 	add.w	r5, r6, #1
 80076a8:	bf08      	it	eq
 80076aa:	230f      	moveq	r3, #15
 80076ac:	429d      	cmp	r5, r3
 80076ae:	4604      	mov	r4, r0
 80076b0:	460f      	mov	r7, r1
 80076b2:	d906      	bls.n	80076c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 80076b4:	2301      	movs	r3, #1
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	2300      	movs	r3, #0
 80076ba:	461a      	mov	r2, r3
 80076bc:	4631      	mov	r1, r6
 80076be:	f7ff fef4 	bl	80074aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	559f      	strb	r7, [r3, r6]
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	6065      	str	r5, [r4, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	555a      	strb	r2, [r3, r5]
 80076ce:	b003      	add	sp, #12
 80076d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080076d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj>:
 80076d4:	b570      	push	{r4, r5, r6, lr}
 80076d6:	4616      	mov	r6, r2
 80076d8:	4a0c      	ldr	r2, [pc, #48]	; (800770c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x38>)
 80076da:	4604      	mov	r4, r0
 80076dc:	460d      	mov	r5, r1
 80076de:	f7ff fe71 	bl	80073c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80076e2:	1c73      	adds	r3, r6, #1
 80076e4:	d105      	bne.n	80076f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1e>
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	6065      	str	r5, [r4, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	555a      	strb	r2, [r3, r5]
 80076ee:	4620      	mov	r0, r4
 80076f0:	bd70      	pop	{r4, r5, r6, pc}
 80076f2:	2e00      	cmp	r6, #0
 80076f4:	d0fb      	beq.n	80076ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1a>
 80076f6:	6862      	ldr	r2, [r4, #4]
 80076f8:	1b52      	subs	r2, r2, r5
 80076fa:	42b2      	cmp	r2, r6
 80076fc:	bf28      	it	cs
 80076fe:	4632      	movcs	r2, r6
 8007700:	4629      	mov	r1, r5
 8007702:	4620      	mov	r0, r4
 8007704:	f7ff ff0d 	bl	8007522 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
 8007708:	e7f1      	b.n	80076ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1a>
 800770a:	bf00      	nop
 800770c:	0800c707 	.word	0x0800c707

08007710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 8007710:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007714:	4616      	mov	r6, r2
 8007716:	461d      	mov	r5, r3
 8007718:	4604      	mov	r4, r0
 800771a:	4b1c      	ldr	r3, [pc, #112]	; (800778c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x7c>)
 800771c:	462a      	mov	r2, r5
 800771e:	460f      	mov	r7, r1
 8007720:	4631      	mov	r1, r6
 8007722:	f7ff fe5d 	bl	80073e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8007726:	4623      	mov	r3, r4
 8007728:	6862      	ldr	r2, [r4, #4]
 800772a:	f853 0b08 	ldr.w	r0, [r3], #8
 800772e:	4298      	cmp	r0, r3
 8007730:	bf18      	it	ne
 8007732:	68a3      	ldrne	r3, [r4, #8]
 8007734:	eba5 0806 	sub.w	r8, r5, r6
 8007738:	4490      	add	r8, r2
 800773a:	bf08      	it	eq
 800773c:	230f      	moveq	r3, #15
 800773e:	4543      	cmp	r3, r8
 8007740:	d31b      	bcc.n	800777a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x6a>
 8007742:	19f3      	adds	r3, r6, r7
 8007744:	1ad2      	subs	r2, r2, r3
 8007746:	d006      	beq.n	8007756 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 8007748:	42ae      	cmp	r6, r5
 800774a:	d004      	beq.n	8007756 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 800774c:	4438      	add	r0, r7
 800774e:	1981      	adds	r1, r0, r6
 8007750:	4428      	add	r0, r5
 8007752:	f7ff fe69 	bl	8007428 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8007756:	b135      	cbz	r5, 8007766 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x56>
 8007758:	6820      	ldr	r0, [r4, #0]
 800775a:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800775e:	4629      	mov	r1, r5
 8007760:	4438      	add	r0, r7
 8007762:	f7ff fe6d 	bl	8007440 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	f8c4 8004 	str.w	r8, [r4, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	4620      	mov	r0, r4
 8007770:	f803 2008 	strb.w	r2, [r3, r8]
 8007774:	b002      	add	sp, #8
 8007776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800777a:	9500      	str	r5, [sp, #0]
 800777c:	2300      	movs	r3, #0
 800777e:	4632      	mov	r2, r6
 8007780:	4639      	mov	r1, r7
 8007782:	4620      	mov	r0, r4
 8007784:	f7ff fe91 	bl	80074aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8007788:	e7e5      	b.n	8007756 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 800778a:	bf00      	nop
 800778c:	0800c71b 	.word	0x0800c71b

08007790 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 8007790:	b507      	push	{r0, r1, r2, lr}
 8007792:	9200      	str	r2, [sp, #0]
 8007794:	460b      	mov	r3, r1
 8007796:	2200      	movs	r2, #0
 8007798:	6841      	ldr	r1, [r0, #4]
 800779a:	f7ff ffb9 	bl	8007710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 800779e:	b003      	add	sp, #12
 80077a0:	f85d fb04 	ldr.w	pc, [sp], #4

080077a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80077a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077aa:	4614      	mov	r4, r2
 80077ac:	4680      	mov	r8, r0
 80077ae:	462a      	mov	r2, r5
 80077b0:	4689      	mov	r9, r1
 80077b2:	461f      	mov	r7, r3
 80077b4:	4621      	mov	r1, r4
 80077b6:	4b39      	ldr	r3, [pc, #228]	; (800789c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 80077b8:	f7ff fe12 	bl	80073e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80077bc:	4642      	mov	r2, r8
 80077be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80077c2:	f852 6b08 	ldr.w	r6, [r2], #8
 80077c6:	4296      	cmp	r6, r2
 80077c8:	bf18      	it	ne
 80077ca:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 80077ce:	eba5 0b04 	sub.w	fp, r5, r4
 80077d2:	eb03 0a0b 	add.w	sl, r3, fp
 80077d6:	bf08      	it	eq
 80077d8:	220f      	moveq	r2, #15
 80077da:	4552      	cmp	r2, sl
 80077dc:	d351      	bcc.n	8007882 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 80077de:	444e      	add	r6, r9
 80077e0:	4639      	mov	r1, r7
 80077e2:	44a1      	add	r9, r4
 80077e4:	4640      	mov	r0, r8
 80077e6:	eba3 0909 	sub.w	r9, r3, r9
 80077ea:	f7ff fe05 	bl	80073f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 80077ee:	b180      	cbz	r0, 8007812 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 80077f0:	f1b9 0f00 	cmp.w	r9, #0
 80077f4:	d006      	beq.n	8007804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80077f6:	42ac      	cmp	r4, r5
 80077f8:	d004      	beq.n	8007804 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80077fa:	464a      	mov	r2, r9
 80077fc:	1931      	adds	r1, r6, r4
 80077fe:	1970      	adds	r0, r6, r5
 8007800:	f7ff fe12 	bl	8007428 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8007804:	b315      	cbz	r5, 800784c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8007806:	462a      	mov	r2, r5
 8007808:	4639      	mov	r1, r7
 800780a:	4630      	mov	r0, r6
 800780c:	f7ff fe00 	bl	8007410 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007810:	e01c      	b.n	800784c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8007812:	b135      	cbz	r5, 8007822 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8007814:	42ac      	cmp	r4, r5
 8007816:	d33c      	bcc.n	8007892 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 8007818:	462a      	mov	r2, r5
 800781a:	4639      	mov	r1, r7
 800781c:	4630      	mov	r0, r6
 800781e:	f7ff fe03 	bl	8007428 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8007822:	f1b9 0f00 	cmp.w	r9, #0
 8007826:	d011      	beq.n	800784c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8007828:	42ac      	cmp	r4, r5
 800782a:	d00f      	beq.n	800784c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800782c:	464a      	mov	r2, r9
 800782e:	1931      	adds	r1, r6, r4
 8007830:	1970      	adds	r0, r6, r5
 8007832:	f7ff fdf9 	bl	8007428 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8007836:	42ac      	cmp	r4, r5
 8007838:	d208      	bcs.n	800784c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800783a:	4434      	add	r4, r6
 800783c:	197b      	adds	r3, r7, r5
 800783e:	429c      	cmp	r4, r3
 8007840:	d30f      	bcc.n	8007862 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 8007842:	462a      	mov	r2, r5
 8007844:	4639      	mov	r1, r7
 8007846:	4630      	mov	r0, r6
 8007848:	f7ff fdee 	bl	8007428 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800784c:	f8d8 3000 	ldr.w	r3, [r8]
 8007850:	f8c8 a004 	str.w	sl, [r8, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	4640      	mov	r0, r8
 8007858:	f803 200a 	strb.w	r2, [r3, sl]
 800785c:	b003      	add	sp, #12
 800785e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007862:	42bc      	cmp	r4, r7
 8007864:	d803      	bhi.n	800786e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 8007866:	462a      	mov	r2, r5
 8007868:	eb07 010b 	add.w	r1, r7, fp
 800786c:	e7cd      	b.n	800780a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 800786e:	1be4      	subs	r4, r4, r7
 8007870:	4622      	mov	r2, r4
 8007872:	4639      	mov	r1, r7
 8007874:	4630      	mov	r0, r6
 8007876:	f7ff fdd7 	bl	8007428 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800787a:	1b2a      	subs	r2, r5, r4
 800787c:	1971      	adds	r1, r6, r5
 800787e:	1930      	adds	r0, r6, r4
 8007880:	e7c4      	b.n	800780c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 8007882:	9500      	str	r5, [sp, #0]
 8007884:	463b      	mov	r3, r7
 8007886:	4622      	mov	r2, r4
 8007888:	4649      	mov	r1, r9
 800788a:	4640      	mov	r0, r8
 800788c:	f7ff fe0d 	bl	80074aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8007890:	e7dc      	b.n	800784c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8007892:	f1b9 0f00 	cmp.w	r9, #0
 8007896:	d0d0      	beq.n	800783a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 8007898:	e7c8      	b.n	800782c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 800789a:	bf00      	nop
 800789c:	0800c74e 	.word	0x0800c74e

080078a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 80078a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078a2:	4604      	mov	r4, r0
 80078a4:	4608      	mov	r0, r1
 80078a6:	9103      	str	r1, [sp, #12]
 80078a8:	f7f8 fd02 	bl	80002b0 <strlen>
 80078ac:	9b03      	ldr	r3, [sp, #12]
 80078ae:	9000      	str	r0, [sp, #0]
 80078b0:	6862      	ldr	r2, [r4, #4]
 80078b2:	2100      	movs	r1, #0
 80078b4:	4620      	mov	r0, r4
 80078b6:	f7ff ff75 	bl	80077a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80078ba:	b004      	add	sp, #16
 80078bc:	bd10      	pop	{r4, pc}

080078be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 80078be:	b508      	push	{r3, lr}
 80078c0:	f7ff ffee 	bl	80078a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 80078c4:	bd08      	pop	{r3, pc}
	...

080078c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 80078c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80078ca:	4604      	mov	r4, r0
 80078cc:	4615      	mov	r5, r2
 80078ce:	4a09      	ldr	r2, [pc, #36]	; (80078f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 80078d0:	9303      	str	r3, [sp, #12]
 80078d2:	460e      	mov	r6, r1
 80078d4:	f7ff fd76 	bl	80073c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80078d8:	6862      	ldr	r2, [r4, #4]
 80078da:	9b03      	ldr	r3, [sp, #12]
 80078dc:	1b92      	subs	r2, r2, r6
 80078de:	4601      	mov	r1, r0
 80078e0:	42aa      	cmp	r2, r5
 80078e2:	9808      	ldr	r0, [sp, #32]
 80078e4:	9000      	str	r0, [sp, #0]
 80078e6:	bf28      	it	cs
 80078e8:	462a      	movcs	r2, r5
 80078ea:	4620      	mov	r0, r4
 80078ec:	f7ff ff5a 	bl	80077a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80078f0:	b004      	add	sp, #16
 80078f2:	bd70      	pop	{r4, r5, r6, pc}
 80078f4:	0800c738 	.word	0x0800c738

080078f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>:
 80078f8:	b507      	push	{r0, r1, r2, lr}
 80078fa:	6853      	ldr	r3, [r2, #4]
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	6813      	ldr	r3, [r2, #0]
 8007900:	2200      	movs	r2, #0
 8007902:	f7ff ffe1 	bl	80078c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8007906:	b003      	add	sp, #12
 8007908:	f85d fb04 	ldr.w	pc, [sp], #4

0800790c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 800790c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800790e:	4604      	mov	r4, r0
 8007910:	4610      	mov	r0, r2
 8007912:	9103      	str	r1, [sp, #12]
 8007914:	9202      	str	r2, [sp, #8]
 8007916:	f7f8 fccb 	bl	80002b0 <strlen>
 800791a:	9b02      	ldr	r3, [sp, #8]
 800791c:	9000      	str	r0, [sp, #0]
 800791e:	9903      	ldr	r1, [sp, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	4620      	mov	r0, r4
 8007924:	f7ff ffd0 	bl	80078c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8007928:	b004      	add	sp, #16
 800792a:	bd10      	pop	{r4, pc}

0800792c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjRKS4_>:
 800792c:	b513      	push	{r0, r1, r4, lr}
 800792e:	685c      	ldr	r4, [r3, #4]
 8007930:	9400      	str	r4, [sp, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f7ff ffc8 	bl	80078c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 8007938:	b002      	add	sp, #8
 800793a:	bd10      	pop	{r4, pc}

0800793c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800793c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800793e:	4604      	mov	r4, r0
 8007940:	4623      	mov	r3, r4
 8007942:	6840      	ldr	r0, [r0, #4]
 8007944:	f853 6b08 	ldr.w	r6, [r3], #8
 8007948:	429e      	cmp	r6, r3
 800794a:	bf18      	it	ne
 800794c:	68a3      	ldrne	r3, [r4, #8]
 800794e:	eb00 0502 	add.w	r5, r0, r2
 8007952:	bf08      	it	eq
 8007954:	230f      	moveq	r3, #15
 8007956:	429d      	cmp	r5, r3
 8007958:	d80a      	bhi.n	8007970 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 800795a:	b112      	cbz	r2, 8007962 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 800795c:	4430      	add	r0, r6
 800795e:	f7ff fd57 	bl	8007410 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007962:	6823      	ldr	r3, [r4, #0]
 8007964:	6065      	str	r5, [r4, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	4620      	mov	r0, r4
 800796a:	555a      	strb	r2, [r3, r5]
 800796c:	b002      	add	sp, #8
 800796e:	bd70      	pop	{r4, r5, r6, pc}
 8007970:	9200      	str	r2, [sp, #0]
 8007972:	460b      	mov	r3, r1
 8007974:	2200      	movs	r2, #0
 8007976:	4601      	mov	r1, r0
 8007978:	4620      	mov	r0, r4
 800797a:	f7ff fd96 	bl	80074aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800797e:	e7f0      	b.n	8007962 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08007980 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8007980:	b508      	push	{r3, lr}
 8007982:	e9d1 1200 	ldrd	r1, r2, [r1]
 8007986:	f7ff ffd9 	bl	800793c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800798a:	bd08      	pop	{r3, pc}

0800798c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 800798c:	b570      	push	{r4, r5, r6, lr}
 800798e:	4b06      	ldr	r3, [pc, #24]	; (80079a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 8007990:	4604      	mov	r4, r0
 8007992:	460d      	mov	r5, r1
 8007994:	4616      	mov	r6, r2
 8007996:	2100      	movs	r1, #0
 8007998:	f7ff fd22 	bl	80073e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800799c:	4632      	mov	r2, r6
 800799e:	4629      	mov	r1, r5
 80079a0:	4620      	mov	r0, r4
 80079a2:	f7ff ffcb 	bl	800793c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80079a6:	bd70      	pop	{r4, r5, r6, pc}
 80079a8:	0800c767 	.word	0x0800c767

080079ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 80079ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079ae:	4604      	mov	r4, r0
 80079b0:	4608      	mov	r0, r1
 80079b2:	460d      	mov	r5, r1
 80079b4:	f7f8 fc7c 	bl	80002b0 <strlen>
 80079b8:	4b06      	ldr	r3, [pc, #24]	; (80079d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 80079ba:	9001      	str	r0, [sp, #4]
 80079bc:	4602      	mov	r2, r0
 80079be:	2100      	movs	r1, #0
 80079c0:	4620      	mov	r0, r4
 80079c2:	f7ff fd0d 	bl	80073e0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80079c6:	9a01      	ldr	r2, [sp, #4]
 80079c8:	4629      	mov	r1, r5
 80079ca:	4620      	mov	r0, r4
 80079cc:	f7ff ffb6 	bl	800793c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80079d0:	b003      	add	sp, #12
 80079d2:	bd30      	pop	{r4, r5, pc}
 80079d4:	0800c767 	.word	0x0800c767

080079d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80079d8:	6800      	ldr	r0, [r0, #0]
 80079da:	4770      	bx	lr

080079dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>:
 80079dc:	4770      	bx	lr

080079de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
 80079de:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079e2:	460e      	mov	r6, r1
 80079e4:	461d      	mov	r5, r3
 80079e6:	6841      	ldr	r1, [r0, #4]
 80079e8:	b93b      	cbnz	r3, 80079fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x1c>
 80079ea:	4291      	cmp	r1, r2
 80079ec:	d201      	bcs.n	80079f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x14>
 80079ee:	f04f 32ff 	mov.w	r2, #4294967295
 80079f2:	4610      	mov	r0, r2
 80079f4:	b003      	add	sp, #12
 80079f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079fa:	4291      	cmp	r1, r2
 80079fc:	d9f7      	bls.n	80079ee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 80079fe:	f8d0 8000 	ldr.w	r8, [r0]
 8007a02:	7833      	ldrb	r3, [r6, #0]
 8007a04:	f88d 3007 	strb.w	r3, [sp, #7]
 8007a08:	eb08 0701 	add.w	r7, r8, r1
 8007a0c:	eb08 0002 	add.w	r0, r8, r2
 8007a10:	1a89      	subs	r1, r1, r2
 8007a12:	f1c5 0901 	rsb	r9, r5, #1
 8007a16:	42a9      	cmp	r1, r5
 8007a18:	d3e9      	bcc.n	80079ee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 8007a1a:	f10d 0207 	add.w	r2, sp, #7
 8007a1e:	4449      	add	r1, r9
 8007a20:	f7ff fc9e 	bl	8007360 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 8007a24:	4604      	mov	r4, r0
 8007a26:	2800      	cmp	r0, #0
 8007a28:	d0e1      	beq.n	80079ee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 8007a2a:	462a      	mov	r2, r5
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	f7ff fc92 	bl	8007356 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8007a32:	b910      	cbnz	r0, 8007a3a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x5c>
 8007a34:	eba4 0208 	sub.w	r2, r4, r8
 8007a38:	e7db      	b.n	80079f2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x14>
 8007a3a:	1c60      	adds	r0, r4, #1
 8007a3c:	1a39      	subs	r1, r7, r0
 8007a3e:	e7ea      	b.n	8007a16 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x38>

08007a40 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>:
 8007a40:	b508      	push	{r3, lr}
 8007a42:	e9d1 1300 	ldrd	r1, r3, [r1]
 8007a46:	f7ff ffca 	bl	80079de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
 8007a4a:	bd08      	pop	{r3, pc}

08007a4c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>:
 8007a4c:	b513      	push	{r0, r1, r4, lr}
 8007a4e:	f88d 1007 	strb.w	r1, [sp, #7]
 8007a52:	6841      	ldr	r1, [r0, #4]
 8007a54:	428a      	cmp	r2, r1
 8007a56:	4613      	mov	r3, r2
 8007a58:	d20a      	bcs.n	8007a70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 8007a5a:	6804      	ldr	r4, [r0, #0]
 8007a5c:	f10d 0207 	add.w	r2, sp, #7
 8007a60:	1ac9      	subs	r1, r1, r3
 8007a62:	18e0      	adds	r0, r4, r3
 8007a64:	f7ff fc7c 	bl	8007360 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 8007a68:	b110      	cbz	r0, 8007a70 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 8007a6a:	1b00      	subs	r0, r0, r4
 8007a6c:	b002      	add	sp, #8
 8007a6e:	bd10      	pop	{r4, pc}
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295
 8007a74:	e7fa      	b.n	8007a6c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x20>

08007a76 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17find_first_not_ofEcj>:
 8007a76:	b510      	push	{r4, lr}
 8007a78:	6843      	ldr	r3, [r0, #4]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d303      	bcc.n	8007a86 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17find_first_not_ofEcj+0x10>
 8007a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a82:	4610      	mov	r0, r2
 8007a84:	bd10      	pop	{r4, pc}
 8007a86:	6804      	ldr	r4, [r0, #0]
 8007a88:	5ca4      	ldrb	r4, [r4, r2]
 8007a8a:	428c      	cmp	r4, r1
 8007a8c:	d1f9      	bne.n	8007a82 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17find_first_not_ofEcj+0xc>
 8007a8e:	3201      	adds	r2, #1
 8007a90:	e7f3      	b.n	8007a7a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17find_first_not_ofEcj+0x4>

08007a92 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16find_last_not_ofEcj>:
 8007a92:	6843      	ldr	r3, [r0, #4]
 8007a94:	b15b      	cbz	r3, 8007aae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16find_last_not_ofEcj+0x1c>
 8007a96:	3b01      	subs	r3, #1
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	bf28      	it	cs
 8007a9c:	461a      	movcs	r2, r3
 8007a9e:	6803      	ldr	r3, [r0, #0]
 8007aa0:	5c98      	ldrb	r0, [r3, r2]
 8007aa2:	4288      	cmp	r0, r1
 8007aa4:	d101      	bne.n	8007aaa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16find_last_not_ofEcj+0x18>
 8007aa6:	3a01      	subs	r2, #1
 8007aa8:	d2fa      	bcs.n	8007aa0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16find_last_not_ofEcj+0xe>
 8007aaa:	4610      	mov	r0, r2
 8007aac:	4770      	bx	lr
 8007aae:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab2:	e7fa      	b.n	8007aaa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16find_last_not_ofEcj+0x18>

08007ab4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8007ab4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	4616      	mov	r6, r2
 8007aba:	460d      	mov	r5, r1
 8007abc:	b919      	cbnz	r1, 8007ac6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8007abe:	b112      	cbz	r2, 8007ac6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8007ac0:	480d      	ldr	r0, [pc, #52]	; (8007af8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8007ac2:	f7ff fb89 	bl	80071d8 <_ZSt19__throw_logic_errorPKc>
 8007ac6:	1b73      	subs	r3, r6, r5
 8007ac8:	2b0f      	cmp	r3, #15
 8007aca:	9301      	str	r3, [sp, #4]
 8007acc:	d907      	bls.n	8007ade <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 8007ace:	2200      	movs	r2, #0
 8007ad0:	a901      	add	r1, sp, #4
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f7ff fc4c 	bl	8007370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007ad8:	9b01      	ldr	r3, [sp, #4]
 8007ada:	6020      	str	r0, [r4, #0]
 8007adc:	60a3      	str	r3, [r4, #8]
 8007ade:	4632      	mov	r2, r6
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	6820      	ldr	r0, [r4, #0]
 8007ae4:	f7ff fcd7 	bl	8007496 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8007ae8:	9b01      	ldr	r3, [sp, #4]
 8007aea:	6822      	ldr	r2, [r4, #0]
 8007aec:	6063      	str	r3, [r4, #4]
 8007aee:	2100      	movs	r1, #0
 8007af0:	54d1      	strb	r1, [r2, r3]
 8007af2:	b002      	add	sp, #8
 8007af4:	bd70      	pop	{r4, r5, r6, pc}
 8007af6:	bf00      	nop
 8007af8:	0800c77c 	.word	0x0800c77c

08007afc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8007afc:	b538      	push	{r3, r4, r5, lr}
 8007afe:	f100 0308 	add.w	r3, r0, #8
 8007b02:	6003      	str	r3, [r0, #0]
 8007b04:	e9d1 5200 	ldrd	r5, r2, [r1]
 8007b08:	4604      	mov	r4, r0
 8007b0a:	f04f 0300 	mov.w	r3, #0
 8007b0e:	442a      	add	r2, r5
 8007b10:	4629      	mov	r1, r5
 8007b12:	f7ff ffcf 	bl	8007ab4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8007b16:	4620      	mov	r0, r4
 8007b18:	bd38      	pop	{r3, r4, r5, pc}
	...

08007b1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8007b1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b1e:	4604      	mov	r4, r0
 8007b20:	4616      	mov	r6, r2
 8007b22:	460d      	mov	r5, r1
 8007b24:	b919      	cbnz	r1, 8007b2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8007b26:	b112      	cbz	r2, 8007b2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8007b28:	480d      	ldr	r0, [pc, #52]	; (8007b60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8007b2a:	f7ff fb55 	bl	80071d8 <_ZSt19__throw_logic_errorPKc>
 8007b2e:	1b73      	subs	r3, r6, r5
 8007b30:	2b0f      	cmp	r3, #15
 8007b32:	9301      	str	r3, [sp, #4]
 8007b34:	d907      	bls.n	8007b46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8007b36:	2200      	movs	r2, #0
 8007b38:	a901      	add	r1, sp, #4
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f7ff fc18 	bl	8007370 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007b40:	9b01      	ldr	r3, [sp, #4]
 8007b42:	6020      	str	r0, [r4, #0]
 8007b44:	60a3      	str	r3, [r4, #8]
 8007b46:	4632      	mov	r2, r6
 8007b48:	4629      	mov	r1, r5
 8007b4a:	6820      	ldr	r0, [r4, #0]
 8007b4c:	f7ff fca8 	bl	80074a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8007b50:	9b01      	ldr	r3, [sp, #4]
 8007b52:	6822      	ldr	r2, [r4, #0]
 8007b54:	6063      	str	r3, [r4, #4]
 8007b56:	2100      	movs	r1, #0
 8007b58:	54d1      	strb	r1, [r2, r3]
 8007b5a:	b002      	add	sp, #8
 8007b5c:	bd70      	pop	{r4, r5, r6, pc}
 8007b5e:	bf00      	nop
 8007b60:	0800c77c 	.word	0x0800c77c

08007b64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8007b64:	b538      	push	{r3, r4, r5, lr}
 8007b66:	f100 0308 	add.w	r3, r0, #8
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	6003      	str	r3, [r0, #0]
 8007b6e:	460d      	mov	r5, r1
 8007b70:	b159      	cbz	r1, 8007b8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8007b72:	4608      	mov	r0, r1
 8007b74:	f7f8 fb9c 	bl	80002b0 <strlen>
 8007b78:	182a      	adds	r2, r5, r0
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f04f 0300 	mov.w	r3, #0
 8007b80:	4629      	mov	r1, r5
 8007b82:	f7ff ffcb 	bl	8007b1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8007b86:	4620      	mov	r0, r4
 8007b88:	bd38      	pop	{r3, r4, r5, pc}
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	e7f5      	b.n	8007b7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>
	...

08007b90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 8007b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b94:	460d      	mov	r5, r1
 8007b96:	4617      	mov	r7, r2
 8007b98:	4698      	mov	r8, r3
 8007b9a:	f100 0308 	add.w	r3, r0, #8
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	6003      	str	r3, [r0, #0]
 8007ba2:	4639      	mov	r1, r7
 8007ba4:	4a0a      	ldr	r2, [pc, #40]	; (8007bd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f7ff fc0c 	bl	80073c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8007bac:	682e      	ldr	r6, [r5, #0]
 8007bae:	686a      	ldr	r2, [r5, #4]
 8007bb0:	1831      	adds	r1, r6, r0
 8007bb2:	1bd2      	subs	r2, r2, r7
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f04f 0300 	mov.w	r3, #0
 8007bba:	4542      	cmp	r2, r8
 8007bbc:	bf94      	ite	ls
 8007bbe:	188a      	addls	r2, r1, r2
 8007bc0:	eb01 0208 	addhi.w	r2, r1, r8
 8007bc4:	f7ff ffaa 	bl	8007b1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8007bc8:	4620      	mov	r0, r4
 8007bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bce:	bf00      	nop
 8007bd0:	0800c7a6 	.word	0x0800c7a6

08007bd4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 8007bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bd6:	460d      	mov	r5, r1
 8007bd8:	4604      	mov	r4, r0
 8007bda:	4611      	mov	r1, r2
 8007bdc:	4628      	mov	r0, r5
 8007bde:	4a06      	ldr	r2, [pc, #24]	; (8007bf8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8007be0:	9301      	str	r3, [sp, #4]
 8007be2:	f7ff fbef 	bl	80073c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8007be6:	9b01      	ldr	r3, [sp, #4]
 8007be8:	4602      	mov	r2, r0
 8007bea:	4629      	mov	r1, r5
 8007bec:	4620      	mov	r0, r4
 8007bee:	f7ff ffcf 	bl	8007b90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	b003      	add	sp, #12
 8007bf6:	bd30      	pop	{r4, r5, pc}
 8007bf8:	0800c7c1 	.word	0x0800c7c1

08007bfc <_ZdlPv>:
 8007bfc:	f000 b82a 	b.w	8007c54 <free>

08007c00 <_Znwj>:
 8007c00:	2801      	cmp	r0, #1
 8007c02:	bf38      	it	cc
 8007c04:	2001      	movcc	r0, #1
 8007c06:	b510      	push	{r4, lr}
 8007c08:	4604      	mov	r4, r0
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f000 f81a 	bl	8007c44 <malloc>
 8007c10:	b100      	cbz	r0, 8007c14 <_Znwj+0x14>
 8007c12:	bd10      	pop	{r4, pc}
 8007c14:	f000 f806 	bl	8007c24 <_ZSt15get_new_handlerv>
 8007c18:	b908      	cbnz	r0, 8007c1e <_Znwj+0x1e>
 8007c1a:	f000 f80b 	bl	8007c34 <abort>
 8007c1e:	4780      	blx	r0
 8007c20:	e7f3      	b.n	8007c0a <_Znwj+0xa>
	...

08007c24 <_ZSt15get_new_handlerv>:
 8007c24:	4b02      	ldr	r3, [pc, #8]	; (8007c30 <_ZSt15get_new_handlerv+0xc>)
 8007c26:	6818      	ldr	r0, [r3, #0]
 8007c28:	f3bf 8f5b 	dmb	ish
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	20002b64 	.word	0x20002b64

08007c34 <abort>:
 8007c34:	b508      	push	{r3, lr}
 8007c36:	2006      	movs	r0, #6
 8007c38:	f001 ff54 	bl	8009ae4 <raise>
 8007c3c:	2001      	movs	r0, #1
 8007c3e:	f7fb ff79 	bl	8003b34 <_exit>
	...

08007c44 <malloc>:
 8007c44:	4b02      	ldr	r3, [pc, #8]	; (8007c50 <malloc+0xc>)
 8007c46:	4601      	mov	r1, r0
 8007c48:	6818      	ldr	r0, [r3, #0]
 8007c4a:	f000 b82b 	b.w	8007ca4 <_malloc_r>
 8007c4e:	bf00      	nop
 8007c50:	200001ec 	.word	0x200001ec

08007c54 <free>:
 8007c54:	4b02      	ldr	r3, [pc, #8]	; (8007c60 <free+0xc>)
 8007c56:	4601      	mov	r1, r0
 8007c58:	6818      	ldr	r0, [r3, #0]
 8007c5a:	f002 be7f 	b.w	800a95c <_free_r>
 8007c5e:	bf00      	nop
 8007c60:	200001ec 	.word	0x200001ec

08007c64 <sbrk_aligned>:
 8007c64:	b570      	push	{r4, r5, r6, lr}
 8007c66:	4e0e      	ldr	r6, [pc, #56]	; (8007ca0 <sbrk_aligned+0x3c>)
 8007c68:	460c      	mov	r4, r1
 8007c6a:	6831      	ldr	r1, [r6, #0]
 8007c6c:	4605      	mov	r5, r0
 8007c6e:	b911      	cbnz	r1, 8007c76 <sbrk_aligned+0x12>
 8007c70:	f001 ff8c 	bl	8009b8c <_sbrk_r>
 8007c74:	6030      	str	r0, [r6, #0]
 8007c76:	4621      	mov	r1, r4
 8007c78:	4628      	mov	r0, r5
 8007c7a:	f001 ff87 	bl	8009b8c <_sbrk_r>
 8007c7e:	1c43      	adds	r3, r0, #1
 8007c80:	d00a      	beq.n	8007c98 <sbrk_aligned+0x34>
 8007c82:	1cc4      	adds	r4, r0, #3
 8007c84:	f024 0403 	bic.w	r4, r4, #3
 8007c88:	42a0      	cmp	r0, r4
 8007c8a:	d007      	beq.n	8007c9c <sbrk_aligned+0x38>
 8007c8c:	1a21      	subs	r1, r4, r0
 8007c8e:	4628      	mov	r0, r5
 8007c90:	f001 ff7c 	bl	8009b8c <_sbrk_r>
 8007c94:	3001      	adds	r0, #1
 8007c96:	d101      	bne.n	8007c9c <sbrk_aligned+0x38>
 8007c98:	f04f 34ff 	mov.w	r4, #4294967295
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ca0:	20002b6c 	.word	0x20002b6c

08007ca4 <_malloc_r>:
 8007ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ca8:	1ccd      	adds	r5, r1, #3
 8007caa:	f025 0503 	bic.w	r5, r5, #3
 8007cae:	3508      	adds	r5, #8
 8007cb0:	2d0c      	cmp	r5, #12
 8007cb2:	bf38      	it	cc
 8007cb4:	250c      	movcc	r5, #12
 8007cb6:	2d00      	cmp	r5, #0
 8007cb8:	4607      	mov	r7, r0
 8007cba:	db01      	blt.n	8007cc0 <_malloc_r+0x1c>
 8007cbc:	42a9      	cmp	r1, r5
 8007cbe:	d905      	bls.n	8007ccc <_malloc_r+0x28>
 8007cc0:	230c      	movs	r3, #12
 8007cc2:	603b      	str	r3, [r7, #0]
 8007cc4:	2600      	movs	r6, #0
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ccc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007da0 <_malloc_r+0xfc>
 8007cd0:	f000 f868 	bl	8007da4 <__malloc_lock>
 8007cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8007cd8:	461c      	mov	r4, r3
 8007cda:	bb5c      	cbnz	r4, 8007d34 <_malloc_r+0x90>
 8007cdc:	4629      	mov	r1, r5
 8007cde:	4638      	mov	r0, r7
 8007ce0:	f7ff ffc0 	bl	8007c64 <sbrk_aligned>
 8007ce4:	1c43      	adds	r3, r0, #1
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	d155      	bne.n	8007d96 <_malloc_r+0xf2>
 8007cea:	f8d8 4000 	ldr.w	r4, [r8]
 8007cee:	4626      	mov	r6, r4
 8007cf0:	2e00      	cmp	r6, #0
 8007cf2:	d145      	bne.n	8007d80 <_malloc_r+0xdc>
 8007cf4:	2c00      	cmp	r4, #0
 8007cf6:	d048      	beq.n	8007d8a <_malloc_r+0xe6>
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	4638      	mov	r0, r7
 8007cfe:	eb04 0903 	add.w	r9, r4, r3
 8007d02:	f001 ff43 	bl	8009b8c <_sbrk_r>
 8007d06:	4581      	cmp	r9, r0
 8007d08:	d13f      	bne.n	8007d8a <_malloc_r+0xe6>
 8007d0a:	6821      	ldr	r1, [r4, #0]
 8007d0c:	1a6d      	subs	r5, r5, r1
 8007d0e:	4629      	mov	r1, r5
 8007d10:	4638      	mov	r0, r7
 8007d12:	f7ff ffa7 	bl	8007c64 <sbrk_aligned>
 8007d16:	3001      	adds	r0, #1
 8007d18:	d037      	beq.n	8007d8a <_malloc_r+0xe6>
 8007d1a:	6823      	ldr	r3, [r4, #0]
 8007d1c:	442b      	add	r3, r5
 8007d1e:	6023      	str	r3, [r4, #0]
 8007d20:	f8d8 3000 	ldr.w	r3, [r8]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d038      	beq.n	8007d9a <_malloc_r+0xf6>
 8007d28:	685a      	ldr	r2, [r3, #4]
 8007d2a:	42a2      	cmp	r2, r4
 8007d2c:	d12b      	bne.n	8007d86 <_malloc_r+0xe2>
 8007d2e:	2200      	movs	r2, #0
 8007d30:	605a      	str	r2, [r3, #4]
 8007d32:	e00f      	b.n	8007d54 <_malloc_r+0xb0>
 8007d34:	6822      	ldr	r2, [r4, #0]
 8007d36:	1b52      	subs	r2, r2, r5
 8007d38:	d41f      	bmi.n	8007d7a <_malloc_r+0xd6>
 8007d3a:	2a0b      	cmp	r2, #11
 8007d3c:	d917      	bls.n	8007d6e <_malloc_r+0xca>
 8007d3e:	1961      	adds	r1, r4, r5
 8007d40:	42a3      	cmp	r3, r4
 8007d42:	6025      	str	r5, [r4, #0]
 8007d44:	bf18      	it	ne
 8007d46:	6059      	strne	r1, [r3, #4]
 8007d48:	6863      	ldr	r3, [r4, #4]
 8007d4a:	bf08      	it	eq
 8007d4c:	f8c8 1000 	streq.w	r1, [r8]
 8007d50:	5162      	str	r2, [r4, r5]
 8007d52:	604b      	str	r3, [r1, #4]
 8007d54:	4638      	mov	r0, r7
 8007d56:	f104 060b 	add.w	r6, r4, #11
 8007d5a:	f000 f829 	bl	8007db0 <__malloc_unlock>
 8007d5e:	f026 0607 	bic.w	r6, r6, #7
 8007d62:	1d23      	adds	r3, r4, #4
 8007d64:	1af2      	subs	r2, r6, r3
 8007d66:	d0ae      	beq.n	8007cc6 <_malloc_r+0x22>
 8007d68:	1b9b      	subs	r3, r3, r6
 8007d6a:	50a3      	str	r3, [r4, r2]
 8007d6c:	e7ab      	b.n	8007cc6 <_malloc_r+0x22>
 8007d6e:	42a3      	cmp	r3, r4
 8007d70:	6862      	ldr	r2, [r4, #4]
 8007d72:	d1dd      	bne.n	8007d30 <_malloc_r+0x8c>
 8007d74:	f8c8 2000 	str.w	r2, [r8]
 8007d78:	e7ec      	b.n	8007d54 <_malloc_r+0xb0>
 8007d7a:	4623      	mov	r3, r4
 8007d7c:	6864      	ldr	r4, [r4, #4]
 8007d7e:	e7ac      	b.n	8007cda <_malloc_r+0x36>
 8007d80:	4634      	mov	r4, r6
 8007d82:	6876      	ldr	r6, [r6, #4]
 8007d84:	e7b4      	b.n	8007cf0 <_malloc_r+0x4c>
 8007d86:	4613      	mov	r3, r2
 8007d88:	e7cc      	b.n	8007d24 <_malloc_r+0x80>
 8007d8a:	230c      	movs	r3, #12
 8007d8c:	603b      	str	r3, [r7, #0]
 8007d8e:	4638      	mov	r0, r7
 8007d90:	f000 f80e 	bl	8007db0 <__malloc_unlock>
 8007d94:	e797      	b.n	8007cc6 <_malloc_r+0x22>
 8007d96:	6025      	str	r5, [r4, #0]
 8007d98:	e7dc      	b.n	8007d54 <_malloc_r+0xb0>
 8007d9a:	605b      	str	r3, [r3, #4]
 8007d9c:	deff      	udf	#255	; 0xff
 8007d9e:	bf00      	nop
 8007da0:	20002b68 	.word	0x20002b68

08007da4 <__malloc_lock>:
 8007da4:	4801      	ldr	r0, [pc, #4]	; (8007dac <__malloc_lock+0x8>)
 8007da6:	f001 bf3e 	b.w	8009c26 <__retarget_lock_acquire_recursive>
 8007daa:	bf00      	nop
 8007dac:	20002cb0 	.word	0x20002cb0

08007db0 <__malloc_unlock>:
 8007db0:	4801      	ldr	r0, [pc, #4]	; (8007db8 <__malloc_unlock+0x8>)
 8007db2:	f001 bf39 	b.w	8009c28 <__retarget_lock_release_recursive>
 8007db6:	bf00      	nop
 8007db8:	20002cb0 	.word	0x20002cb0

08007dbc <sulp>:
 8007dbc:	b570      	push	{r4, r5, r6, lr}
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	460d      	mov	r5, r1
 8007dc2:	ec45 4b10 	vmov	d0, r4, r5
 8007dc6:	4616      	mov	r6, r2
 8007dc8:	f003 fcea 	bl	800b7a0 <__ulp>
 8007dcc:	ec51 0b10 	vmov	r0, r1, d0
 8007dd0:	b17e      	cbz	r6, 8007df2 <sulp+0x36>
 8007dd2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007dd6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	dd09      	ble.n	8007df2 <sulp+0x36>
 8007dde:	051b      	lsls	r3, r3, #20
 8007de0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007de4:	2400      	movs	r4, #0
 8007de6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007dea:	4622      	mov	r2, r4
 8007dec:	462b      	mov	r3, r5
 8007dee:	f7f8 fc23 	bl	8000638 <__aeabi_dmul>
 8007df2:	bd70      	pop	{r4, r5, r6, pc}
 8007df4:	0000      	movs	r0, r0
	...

08007df8 <_strtod_l>:
 8007df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfc:	ed2d 8b02 	vpush	{d8}
 8007e00:	b09b      	sub	sp, #108	; 0x6c
 8007e02:	4604      	mov	r4, r0
 8007e04:	9213      	str	r2, [sp, #76]	; 0x4c
 8007e06:	2200      	movs	r2, #0
 8007e08:	9216      	str	r2, [sp, #88]	; 0x58
 8007e0a:	460d      	mov	r5, r1
 8007e0c:	f04f 0800 	mov.w	r8, #0
 8007e10:	f04f 0900 	mov.w	r9, #0
 8007e14:	460a      	mov	r2, r1
 8007e16:	9215      	str	r2, [sp, #84]	; 0x54
 8007e18:	7811      	ldrb	r1, [r2, #0]
 8007e1a:	292b      	cmp	r1, #43	; 0x2b
 8007e1c:	d04c      	beq.n	8007eb8 <_strtod_l+0xc0>
 8007e1e:	d83a      	bhi.n	8007e96 <_strtod_l+0x9e>
 8007e20:	290d      	cmp	r1, #13
 8007e22:	d834      	bhi.n	8007e8e <_strtod_l+0x96>
 8007e24:	2908      	cmp	r1, #8
 8007e26:	d834      	bhi.n	8007e92 <_strtod_l+0x9a>
 8007e28:	2900      	cmp	r1, #0
 8007e2a:	d03d      	beq.n	8007ea8 <_strtod_l+0xb0>
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	920a      	str	r2, [sp, #40]	; 0x28
 8007e30:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007e32:	7832      	ldrb	r2, [r6, #0]
 8007e34:	2a30      	cmp	r2, #48	; 0x30
 8007e36:	f040 80b4 	bne.w	8007fa2 <_strtod_l+0x1aa>
 8007e3a:	7872      	ldrb	r2, [r6, #1]
 8007e3c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007e40:	2a58      	cmp	r2, #88	; 0x58
 8007e42:	d170      	bne.n	8007f26 <_strtod_l+0x12e>
 8007e44:	9302      	str	r3, [sp, #8]
 8007e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e48:	9301      	str	r3, [sp, #4]
 8007e4a:	ab16      	add	r3, sp, #88	; 0x58
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	4a8e      	ldr	r2, [pc, #568]	; (8008088 <_strtod_l+0x290>)
 8007e50:	ab17      	add	r3, sp, #92	; 0x5c
 8007e52:	a915      	add	r1, sp, #84	; 0x54
 8007e54:	4620      	mov	r0, r4
 8007e56:	f002 fe35 	bl	800aac4 <__gethex>
 8007e5a:	f010 070f 	ands.w	r7, r0, #15
 8007e5e:	4605      	mov	r5, r0
 8007e60:	d005      	beq.n	8007e6e <_strtod_l+0x76>
 8007e62:	2f06      	cmp	r7, #6
 8007e64:	d12a      	bne.n	8007ebc <_strtod_l+0xc4>
 8007e66:	3601      	adds	r6, #1
 8007e68:	2300      	movs	r3, #0
 8007e6a:	9615      	str	r6, [sp, #84]	; 0x54
 8007e6c:	930a      	str	r3, [sp, #40]	; 0x28
 8007e6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f040 857f 	bne.w	8008974 <_strtod_l+0xb7c>
 8007e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e78:	b1db      	cbz	r3, 8007eb2 <_strtod_l+0xba>
 8007e7a:	4642      	mov	r2, r8
 8007e7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007e80:	ec43 2b10 	vmov	d0, r2, r3
 8007e84:	b01b      	add	sp, #108	; 0x6c
 8007e86:	ecbd 8b02 	vpop	{d8}
 8007e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8e:	2920      	cmp	r1, #32
 8007e90:	d1cc      	bne.n	8007e2c <_strtod_l+0x34>
 8007e92:	3201      	adds	r2, #1
 8007e94:	e7bf      	b.n	8007e16 <_strtod_l+0x1e>
 8007e96:	292d      	cmp	r1, #45	; 0x2d
 8007e98:	d1c8      	bne.n	8007e2c <_strtod_l+0x34>
 8007e9a:	2101      	movs	r1, #1
 8007e9c:	910a      	str	r1, [sp, #40]	; 0x28
 8007e9e:	1c51      	adds	r1, r2, #1
 8007ea0:	9115      	str	r1, [sp, #84]	; 0x54
 8007ea2:	7852      	ldrb	r2, [r2, #1]
 8007ea4:	2a00      	cmp	r2, #0
 8007ea6:	d1c3      	bne.n	8007e30 <_strtod_l+0x38>
 8007ea8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007eaa:	9515      	str	r5, [sp, #84]	; 0x54
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f040 855f 	bne.w	8008970 <_strtod_l+0xb78>
 8007eb2:	4642      	mov	r2, r8
 8007eb4:	464b      	mov	r3, r9
 8007eb6:	e7e3      	b.n	8007e80 <_strtod_l+0x88>
 8007eb8:	2100      	movs	r1, #0
 8007eba:	e7ef      	b.n	8007e9c <_strtod_l+0xa4>
 8007ebc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007ebe:	b13a      	cbz	r2, 8007ed0 <_strtod_l+0xd8>
 8007ec0:	2135      	movs	r1, #53	; 0x35
 8007ec2:	a818      	add	r0, sp, #96	; 0x60
 8007ec4:	f003 fd69 	bl	800b99a <__copybits>
 8007ec8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f003 f93c 	bl	800b148 <_Bfree>
 8007ed0:	3f01      	subs	r7, #1
 8007ed2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007ed4:	2f04      	cmp	r7, #4
 8007ed6:	d806      	bhi.n	8007ee6 <_strtod_l+0xee>
 8007ed8:	e8df f007 	tbb	[pc, r7]
 8007edc:	201d0314 	.word	0x201d0314
 8007ee0:	14          	.byte	0x14
 8007ee1:	00          	.byte	0x00
 8007ee2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007ee6:	05e9      	lsls	r1, r5, #23
 8007ee8:	bf48      	it	mi
 8007eea:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007eee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ef2:	0d1b      	lsrs	r3, r3, #20
 8007ef4:	051b      	lsls	r3, r3, #20
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1b9      	bne.n	8007e6e <_strtod_l+0x76>
 8007efa:	f001 fe69 	bl	8009bd0 <__errno>
 8007efe:	2322      	movs	r3, #34	; 0x22
 8007f00:	6003      	str	r3, [r0, #0]
 8007f02:	e7b4      	b.n	8007e6e <_strtod_l+0x76>
 8007f04:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007f08:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007f0c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007f10:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007f14:	e7e7      	b.n	8007ee6 <_strtod_l+0xee>
 8007f16:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008090 <_strtod_l+0x298>
 8007f1a:	e7e4      	b.n	8007ee6 <_strtod_l+0xee>
 8007f1c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007f20:	f04f 38ff 	mov.w	r8, #4294967295
 8007f24:	e7df      	b.n	8007ee6 <_strtod_l+0xee>
 8007f26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f28:	1c5a      	adds	r2, r3, #1
 8007f2a:	9215      	str	r2, [sp, #84]	; 0x54
 8007f2c:	785b      	ldrb	r3, [r3, #1]
 8007f2e:	2b30      	cmp	r3, #48	; 0x30
 8007f30:	d0f9      	beq.n	8007f26 <_strtod_l+0x12e>
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d09b      	beq.n	8007e6e <_strtod_l+0x76>
 8007f36:	2301      	movs	r3, #1
 8007f38:	f04f 0a00 	mov.w	sl, #0
 8007f3c:	9304      	str	r3, [sp, #16]
 8007f3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f40:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f42:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007f46:	46d3      	mov	fp, sl
 8007f48:	220a      	movs	r2, #10
 8007f4a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007f4c:	7806      	ldrb	r6, [r0, #0]
 8007f4e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007f52:	b2d9      	uxtb	r1, r3
 8007f54:	2909      	cmp	r1, #9
 8007f56:	d926      	bls.n	8007fa6 <_strtod_l+0x1ae>
 8007f58:	494c      	ldr	r1, [pc, #304]	; (800808c <_strtod_l+0x294>)
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f001 fd87 	bl	8009a6e <strncmp>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	d030      	beq.n	8007fc6 <_strtod_l+0x1ce>
 8007f64:	2000      	movs	r0, #0
 8007f66:	4632      	mov	r2, r6
 8007f68:	9005      	str	r0, [sp, #20]
 8007f6a:	465e      	mov	r6, fp
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2a65      	cmp	r2, #101	; 0x65
 8007f70:	d001      	beq.n	8007f76 <_strtod_l+0x17e>
 8007f72:	2a45      	cmp	r2, #69	; 0x45
 8007f74:	d113      	bne.n	8007f9e <_strtod_l+0x1a6>
 8007f76:	b91e      	cbnz	r6, 8007f80 <_strtod_l+0x188>
 8007f78:	9a04      	ldr	r2, [sp, #16]
 8007f7a:	4302      	orrs	r2, r0
 8007f7c:	d094      	beq.n	8007ea8 <_strtod_l+0xb0>
 8007f7e:	2600      	movs	r6, #0
 8007f80:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007f82:	1c6a      	adds	r2, r5, #1
 8007f84:	9215      	str	r2, [sp, #84]	; 0x54
 8007f86:	786a      	ldrb	r2, [r5, #1]
 8007f88:	2a2b      	cmp	r2, #43	; 0x2b
 8007f8a:	d074      	beq.n	8008076 <_strtod_l+0x27e>
 8007f8c:	2a2d      	cmp	r2, #45	; 0x2d
 8007f8e:	d078      	beq.n	8008082 <_strtod_l+0x28a>
 8007f90:	f04f 0c00 	mov.w	ip, #0
 8007f94:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007f98:	2909      	cmp	r1, #9
 8007f9a:	d97f      	bls.n	800809c <_strtod_l+0x2a4>
 8007f9c:	9515      	str	r5, [sp, #84]	; 0x54
 8007f9e:	2700      	movs	r7, #0
 8007fa0:	e09e      	b.n	80080e0 <_strtod_l+0x2e8>
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	e7c8      	b.n	8007f38 <_strtod_l+0x140>
 8007fa6:	f1bb 0f08 	cmp.w	fp, #8
 8007faa:	bfd8      	it	le
 8007fac:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007fae:	f100 0001 	add.w	r0, r0, #1
 8007fb2:	bfda      	itte	le
 8007fb4:	fb02 3301 	mlale	r3, r2, r1, r3
 8007fb8:	9309      	strle	r3, [sp, #36]	; 0x24
 8007fba:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007fbe:	f10b 0b01 	add.w	fp, fp, #1
 8007fc2:	9015      	str	r0, [sp, #84]	; 0x54
 8007fc4:	e7c1      	b.n	8007f4a <_strtod_l+0x152>
 8007fc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fc8:	1c5a      	adds	r2, r3, #1
 8007fca:	9215      	str	r2, [sp, #84]	; 0x54
 8007fcc:	785a      	ldrb	r2, [r3, #1]
 8007fce:	f1bb 0f00 	cmp.w	fp, #0
 8007fd2:	d037      	beq.n	8008044 <_strtod_l+0x24c>
 8007fd4:	9005      	str	r0, [sp, #20]
 8007fd6:	465e      	mov	r6, fp
 8007fd8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007fdc:	2b09      	cmp	r3, #9
 8007fde:	d912      	bls.n	8008006 <_strtod_l+0x20e>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e7c4      	b.n	8007f6e <_strtod_l+0x176>
 8007fe4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007fe6:	1c5a      	adds	r2, r3, #1
 8007fe8:	9215      	str	r2, [sp, #84]	; 0x54
 8007fea:	785a      	ldrb	r2, [r3, #1]
 8007fec:	3001      	adds	r0, #1
 8007fee:	2a30      	cmp	r2, #48	; 0x30
 8007ff0:	d0f8      	beq.n	8007fe4 <_strtod_l+0x1ec>
 8007ff2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007ff6:	2b08      	cmp	r3, #8
 8007ff8:	f200 84c1 	bhi.w	800897e <_strtod_l+0xb86>
 8007ffc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ffe:	9005      	str	r0, [sp, #20]
 8008000:	2000      	movs	r0, #0
 8008002:	930b      	str	r3, [sp, #44]	; 0x2c
 8008004:	4606      	mov	r6, r0
 8008006:	3a30      	subs	r2, #48	; 0x30
 8008008:	f100 0301 	add.w	r3, r0, #1
 800800c:	d014      	beq.n	8008038 <_strtod_l+0x240>
 800800e:	9905      	ldr	r1, [sp, #20]
 8008010:	4419      	add	r1, r3
 8008012:	9105      	str	r1, [sp, #20]
 8008014:	4633      	mov	r3, r6
 8008016:	eb00 0c06 	add.w	ip, r0, r6
 800801a:	210a      	movs	r1, #10
 800801c:	4563      	cmp	r3, ip
 800801e:	d113      	bne.n	8008048 <_strtod_l+0x250>
 8008020:	1833      	adds	r3, r6, r0
 8008022:	2b08      	cmp	r3, #8
 8008024:	f106 0601 	add.w	r6, r6, #1
 8008028:	4406      	add	r6, r0
 800802a:	dc1a      	bgt.n	8008062 <_strtod_l+0x26a>
 800802c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800802e:	230a      	movs	r3, #10
 8008030:	fb03 2301 	mla	r3, r3, r1, r2
 8008034:	9309      	str	r3, [sp, #36]	; 0x24
 8008036:	2300      	movs	r3, #0
 8008038:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800803a:	1c51      	adds	r1, r2, #1
 800803c:	9115      	str	r1, [sp, #84]	; 0x54
 800803e:	7852      	ldrb	r2, [r2, #1]
 8008040:	4618      	mov	r0, r3
 8008042:	e7c9      	b.n	8007fd8 <_strtod_l+0x1e0>
 8008044:	4658      	mov	r0, fp
 8008046:	e7d2      	b.n	8007fee <_strtod_l+0x1f6>
 8008048:	2b08      	cmp	r3, #8
 800804a:	f103 0301 	add.w	r3, r3, #1
 800804e:	dc03      	bgt.n	8008058 <_strtod_l+0x260>
 8008050:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008052:	434f      	muls	r7, r1
 8008054:	9709      	str	r7, [sp, #36]	; 0x24
 8008056:	e7e1      	b.n	800801c <_strtod_l+0x224>
 8008058:	2b10      	cmp	r3, #16
 800805a:	bfd8      	it	le
 800805c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008060:	e7dc      	b.n	800801c <_strtod_l+0x224>
 8008062:	2e10      	cmp	r6, #16
 8008064:	bfdc      	itt	le
 8008066:	230a      	movle	r3, #10
 8008068:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800806c:	e7e3      	b.n	8008036 <_strtod_l+0x23e>
 800806e:	2300      	movs	r3, #0
 8008070:	9305      	str	r3, [sp, #20]
 8008072:	2301      	movs	r3, #1
 8008074:	e780      	b.n	8007f78 <_strtod_l+0x180>
 8008076:	f04f 0c00 	mov.w	ip, #0
 800807a:	1caa      	adds	r2, r5, #2
 800807c:	9215      	str	r2, [sp, #84]	; 0x54
 800807e:	78aa      	ldrb	r2, [r5, #2]
 8008080:	e788      	b.n	8007f94 <_strtod_l+0x19c>
 8008082:	f04f 0c01 	mov.w	ip, #1
 8008086:	e7f8      	b.n	800807a <_strtod_l+0x282>
 8008088:	0800c7d8 	.word	0x0800c7d8
 800808c:	0800c7d6 	.word	0x0800c7d6
 8008090:	7ff00000 	.word	0x7ff00000
 8008094:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008096:	1c51      	adds	r1, r2, #1
 8008098:	9115      	str	r1, [sp, #84]	; 0x54
 800809a:	7852      	ldrb	r2, [r2, #1]
 800809c:	2a30      	cmp	r2, #48	; 0x30
 800809e:	d0f9      	beq.n	8008094 <_strtod_l+0x29c>
 80080a0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80080a4:	2908      	cmp	r1, #8
 80080a6:	f63f af7a 	bhi.w	8007f9e <_strtod_l+0x1a6>
 80080aa:	3a30      	subs	r2, #48	; 0x30
 80080ac:	9208      	str	r2, [sp, #32]
 80080ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80080b0:	920c      	str	r2, [sp, #48]	; 0x30
 80080b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80080b4:	1c57      	adds	r7, r2, #1
 80080b6:	9715      	str	r7, [sp, #84]	; 0x54
 80080b8:	7852      	ldrb	r2, [r2, #1]
 80080ba:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80080be:	f1be 0f09 	cmp.w	lr, #9
 80080c2:	d938      	bls.n	8008136 <_strtod_l+0x33e>
 80080c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80080c6:	1a7f      	subs	r7, r7, r1
 80080c8:	2f08      	cmp	r7, #8
 80080ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80080ce:	dc03      	bgt.n	80080d8 <_strtod_l+0x2e0>
 80080d0:	9908      	ldr	r1, [sp, #32]
 80080d2:	428f      	cmp	r7, r1
 80080d4:	bfa8      	it	ge
 80080d6:	460f      	movge	r7, r1
 80080d8:	f1bc 0f00 	cmp.w	ip, #0
 80080dc:	d000      	beq.n	80080e0 <_strtod_l+0x2e8>
 80080de:	427f      	negs	r7, r7
 80080e0:	2e00      	cmp	r6, #0
 80080e2:	d14f      	bne.n	8008184 <_strtod_l+0x38c>
 80080e4:	9904      	ldr	r1, [sp, #16]
 80080e6:	4301      	orrs	r1, r0
 80080e8:	f47f aec1 	bne.w	8007e6e <_strtod_l+0x76>
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f47f aedb 	bne.w	8007ea8 <_strtod_l+0xb0>
 80080f2:	2a69      	cmp	r2, #105	; 0x69
 80080f4:	d029      	beq.n	800814a <_strtod_l+0x352>
 80080f6:	dc26      	bgt.n	8008146 <_strtod_l+0x34e>
 80080f8:	2a49      	cmp	r2, #73	; 0x49
 80080fa:	d026      	beq.n	800814a <_strtod_l+0x352>
 80080fc:	2a4e      	cmp	r2, #78	; 0x4e
 80080fe:	f47f aed3 	bne.w	8007ea8 <_strtod_l+0xb0>
 8008102:	499b      	ldr	r1, [pc, #620]	; (8008370 <_strtod_l+0x578>)
 8008104:	a815      	add	r0, sp, #84	; 0x54
 8008106:	f002 ff1d 	bl	800af44 <__match>
 800810a:	2800      	cmp	r0, #0
 800810c:	f43f aecc 	beq.w	8007ea8 <_strtod_l+0xb0>
 8008110:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	2b28      	cmp	r3, #40	; 0x28
 8008116:	d12f      	bne.n	8008178 <_strtod_l+0x380>
 8008118:	4996      	ldr	r1, [pc, #600]	; (8008374 <_strtod_l+0x57c>)
 800811a:	aa18      	add	r2, sp, #96	; 0x60
 800811c:	a815      	add	r0, sp, #84	; 0x54
 800811e:	f002 ff25 	bl	800af6c <__hexnan>
 8008122:	2805      	cmp	r0, #5
 8008124:	d128      	bne.n	8008178 <_strtod_l+0x380>
 8008126:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008128:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800812c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008130:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008134:	e69b      	b.n	8007e6e <_strtod_l+0x76>
 8008136:	9f08      	ldr	r7, [sp, #32]
 8008138:	210a      	movs	r1, #10
 800813a:	fb01 2107 	mla	r1, r1, r7, r2
 800813e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008142:	9208      	str	r2, [sp, #32]
 8008144:	e7b5      	b.n	80080b2 <_strtod_l+0x2ba>
 8008146:	2a6e      	cmp	r2, #110	; 0x6e
 8008148:	e7d9      	b.n	80080fe <_strtod_l+0x306>
 800814a:	498b      	ldr	r1, [pc, #556]	; (8008378 <_strtod_l+0x580>)
 800814c:	a815      	add	r0, sp, #84	; 0x54
 800814e:	f002 fef9 	bl	800af44 <__match>
 8008152:	2800      	cmp	r0, #0
 8008154:	f43f aea8 	beq.w	8007ea8 <_strtod_l+0xb0>
 8008158:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800815a:	4988      	ldr	r1, [pc, #544]	; (800837c <_strtod_l+0x584>)
 800815c:	3b01      	subs	r3, #1
 800815e:	a815      	add	r0, sp, #84	; 0x54
 8008160:	9315      	str	r3, [sp, #84]	; 0x54
 8008162:	f002 feef 	bl	800af44 <__match>
 8008166:	b910      	cbnz	r0, 800816e <_strtod_l+0x376>
 8008168:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800816a:	3301      	adds	r3, #1
 800816c:	9315      	str	r3, [sp, #84]	; 0x54
 800816e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800838c <_strtod_l+0x594>
 8008172:	f04f 0800 	mov.w	r8, #0
 8008176:	e67a      	b.n	8007e6e <_strtod_l+0x76>
 8008178:	4881      	ldr	r0, [pc, #516]	; (8008380 <_strtod_l+0x588>)
 800817a:	f001 fd65 	bl	8009c48 <nan>
 800817e:	ec59 8b10 	vmov	r8, r9, d0
 8008182:	e674      	b.n	8007e6e <_strtod_l+0x76>
 8008184:	9b05      	ldr	r3, [sp, #20]
 8008186:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008188:	1afb      	subs	r3, r7, r3
 800818a:	f1bb 0f00 	cmp.w	fp, #0
 800818e:	bf08      	it	eq
 8008190:	46b3      	moveq	fp, r6
 8008192:	2e10      	cmp	r6, #16
 8008194:	9308      	str	r3, [sp, #32]
 8008196:	4635      	mov	r5, r6
 8008198:	bfa8      	it	ge
 800819a:	2510      	movge	r5, #16
 800819c:	f7f8 f9d2 	bl	8000544 <__aeabi_ui2d>
 80081a0:	2e09      	cmp	r6, #9
 80081a2:	4680      	mov	r8, r0
 80081a4:	4689      	mov	r9, r1
 80081a6:	dd13      	ble.n	80081d0 <_strtod_l+0x3d8>
 80081a8:	4b76      	ldr	r3, [pc, #472]	; (8008384 <_strtod_l+0x58c>)
 80081aa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80081ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80081b2:	f7f8 fa41 	bl	8000638 <__aeabi_dmul>
 80081b6:	4680      	mov	r8, r0
 80081b8:	4650      	mov	r0, sl
 80081ba:	4689      	mov	r9, r1
 80081bc:	f7f8 f9c2 	bl	8000544 <__aeabi_ui2d>
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	4640      	mov	r0, r8
 80081c6:	4649      	mov	r1, r9
 80081c8:	f7f8 f880 	bl	80002cc <__adddf3>
 80081cc:	4680      	mov	r8, r0
 80081ce:	4689      	mov	r9, r1
 80081d0:	2e0f      	cmp	r6, #15
 80081d2:	dc38      	bgt.n	8008246 <_strtod_l+0x44e>
 80081d4:	9b08      	ldr	r3, [sp, #32]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f43f ae49 	beq.w	8007e6e <_strtod_l+0x76>
 80081dc:	dd24      	ble.n	8008228 <_strtod_l+0x430>
 80081de:	2b16      	cmp	r3, #22
 80081e0:	dc0b      	bgt.n	80081fa <_strtod_l+0x402>
 80081e2:	4968      	ldr	r1, [pc, #416]	; (8008384 <_strtod_l+0x58c>)
 80081e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80081e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081ec:	4642      	mov	r2, r8
 80081ee:	464b      	mov	r3, r9
 80081f0:	f7f8 fa22 	bl	8000638 <__aeabi_dmul>
 80081f4:	4680      	mov	r8, r0
 80081f6:	4689      	mov	r9, r1
 80081f8:	e639      	b.n	8007e6e <_strtod_l+0x76>
 80081fa:	9a08      	ldr	r2, [sp, #32]
 80081fc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008200:	4293      	cmp	r3, r2
 8008202:	db20      	blt.n	8008246 <_strtod_l+0x44e>
 8008204:	4c5f      	ldr	r4, [pc, #380]	; (8008384 <_strtod_l+0x58c>)
 8008206:	f1c6 060f 	rsb	r6, r6, #15
 800820a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800820e:	4642      	mov	r2, r8
 8008210:	464b      	mov	r3, r9
 8008212:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008216:	f7f8 fa0f 	bl	8000638 <__aeabi_dmul>
 800821a:	9b08      	ldr	r3, [sp, #32]
 800821c:	1b9e      	subs	r6, r3, r6
 800821e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008222:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008226:	e7e3      	b.n	80081f0 <_strtod_l+0x3f8>
 8008228:	9b08      	ldr	r3, [sp, #32]
 800822a:	3316      	adds	r3, #22
 800822c:	db0b      	blt.n	8008246 <_strtod_l+0x44e>
 800822e:	9b05      	ldr	r3, [sp, #20]
 8008230:	1bdf      	subs	r7, r3, r7
 8008232:	4b54      	ldr	r3, [pc, #336]	; (8008384 <_strtod_l+0x58c>)
 8008234:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800823c:	4640      	mov	r0, r8
 800823e:	4649      	mov	r1, r9
 8008240:	f7f8 fb24 	bl	800088c <__aeabi_ddiv>
 8008244:	e7d6      	b.n	80081f4 <_strtod_l+0x3fc>
 8008246:	9b08      	ldr	r3, [sp, #32]
 8008248:	1b75      	subs	r5, r6, r5
 800824a:	441d      	add	r5, r3
 800824c:	2d00      	cmp	r5, #0
 800824e:	dd70      	ble.n	8008332 <_strtod_l+0x53a>
 8008250:	f015 030f 	ands.w	r3, r5, #15
 8008254:	d00a      	beq.n	800826c <_strtod_l+0x474>
 8008256:	494b      	ldr	r1, [pc, #300]	; (8008384 <_strtod_l+0x58c>)
 8008258:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800825c:	4642      	mov	r2, r8
 800825e:	464b      	mov	r3, r9
 8008260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008264:	f7f8 f9e8 	bl	8000638 <__aeabi_dmul>
 8008268:	4680      	mov	r8, r0
 800826a:	4689      	mov	r9, r1
 800826c:	f035 050f 	bics.w	r5, r5, #15
 8008270:	d04d      	beq.n	800830e <_strtod_l+0x516>
 8008272:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008276:	dd22      	ble.n	80082be <_strtod_l+0x4c6>
 8008278:	2500      	movs	r5, #0
 800827a:	46ab      	mov	fp, r5
 800827c:	9509      	str	r5, [sp, #36]	; 0x24
 800827e:	9505      	str	r5, [sp, #20]
 8008280:	2322      	movs	r3, #34	; 0x22
 8008282:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800838c <_strtod_l+0x594>
 8008286:	6023      	str	r3, [r4, #0]
 8008288:	f04f 0800 	mov.w	r8, #0
 800828c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800828e:	2b00      	cmp	r3, #0
 8008290:	f43f aded 	beq.w	8007e6e <_strtod_l+0x76>
 8008294:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008296:	4620      	mov	r0, r4
 8008298:	f002 ff56 	bl	800b148 <_Bfree>
 800829c:	9905      	ldr	r1, [sp, #20]
 800829e:	4620      	mov	r0, r4
 80082a0:	f002 ff52 	bl	800b148 <_Bfree>
 80082a4:	4659      	mov	r1, fp
 80082a6:	4620      	mov	r0, r4
 80082a8:	f002 ff4e 	bl	800b148 <_Bfree>
 80082ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082ae:	4620      	mov	r0, r4
 80082b0:	f002 ff4a 	bl	800b148 <_Bfree>
 80082b4:	4629      	mov	r1, r5
 80082b6:	4620      	mov	r0, r4
 80082b8:	f002 ff46 	bl	800b148 <_Bfree>
 80082bc:	e5d7      	b.n	8007e6e <_strtod_l+0x76>
 80082be:	4b32      	ldr	r3, [pc, #200]	; (8008388 <_strtod_l+0x590>)
 80082c0:	9304      	str	r3, [sp, #16]
 80082c2:	2300      	movs	r3, #0
 80082c4:	112d      	asrs	r5, r5, #4
 80082c6:	4640      	mov	r0, r8
 80082c8:	4649      	mov	r1, r9
 80082ca:	469a      	mov	sl, r3
 80082cc:	2d01      	cmp	r5, #1
 80082ce:	dc21      	bgt.n	8008314 <_strtod_l+0x51c>
 80082d0:	b10b      	cbz	r3, 80082d6 <_strtod_l+0x4de>
 80082d2:	4680      	mov	r8, r0
 80082d4:	4689      	mov	r9, r1
 80082d6:	492c      	ldr	r1, [pc, #176]	; (8008388 <_strtod_l+0x590>)
 80082d8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80082dc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80082e0:	4642      	mov	r2, r8
 80082e2:	464b      	mov	r3, r9
 80082e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082e8:	f7f8 f9a6 	bl	8000638 <__aeabi_dmul>
 80082ec:	4b27      	ldr	r3, [pc, #156]	; (800838c <_strtod_l+0x594>)
 80082ee:	460a      	mov	r2, r1
 80082f0:	400b      	ands	r3, r1
 80082f2:	4927      	ldr	r1, [pc, #156]	; (8008390 <_strtod_l+0x598>)
 80082f4:	428b      	cmp	r3, r1
 80082f6:	4680      	mov	r8, r0
 80082f8:	d8be      	bhi.n	8008278 <_strtod_l+0x480>
 80082fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80082fe:	428b      	cmp	r3, r1
 8008300:	bf86      	itte	hi
 8008302:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008394 <_strtod_l+0x59c>
 8008306:	f04f 38ff 	movhi.w	r8, #4294967295
 800830a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800830e:	2300      	movs	r3, #0
 8008310:	9304      	str	r3, [sp, #16]
 8008312:	e07b      	b.n	800840c <_strtod_l+0x614>
 8008314:	07ea      	lsls	r2, r5, #31
 8008316:	d505      	bpl.n	8008324 <_strtod_l+0x52c>
 8008318:	9b04      	ldr	r3, [sp, #16]
 800831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831e:	f7f8 f98b 	bl	8000638 <__aeabi_dmul>
 8008322:	2301      	movs	r3, #1
 8008324:	9a04      	ldr	r2, [sp, #16]
 8008326:	3208      	adds	r2, #8
 8008328:	f10a 0a01 	add.w	sl, sl, #1
 800832c:	106d      	asrs	r5, r5, #1
 800832e:	9204      	str	r2, [sp, #16]
 8008330:	e7cc      	b.n	80082cc <_strtod_l+0x4d4>
 8008332:	d0ec      	beq.n	800830e <_strtod_l+0x516>
 8008334:	426d      	negs	r5, r5
 8008336:	f015 020f 	ands.w	r2, r5, #15
 800833a:	d00a      	beq.n	8008352 <_strtod_l+0x55a>
 800833c:	4b11      	ldr	r3, [pc, #68]	; (8008384 <_strtod_l+0x58c>)
 800833e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008342:	4640      	mov	r0, r8
 8008344:	4649      	mov	r1, r9
 8008346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834a:	f7f8 fa9f 	bl	800088c <__aeabi_ddiv>
 800834e:	4680      	mov	r8, r0
 8008350:	4689      	mov	r9, r1
 8008352:	112d      	asrs	r5, r5, #4
 8008354:	d0db      	beq.n	800830e <_strtod_l+0x516>
 8008356:	2d1f      	cmp	r5, #31
 8008358:	dd1e      	ble.n	8008398 <_strtod_l+0x5a0>
 800835a:	2500      	movs	r5, #0
 800835c:	46ab      	mov	fp, r5
 800835e:	9509      	str	r5, [sp, #36]	; 0x24
 8008360:	9505      	str	r5, [sp, #20]
 8008362:	2322      	movs	r3, #34	; 0x22
 8008364:	f04f 0800 	mov.w	r8, #0
 8008368:	f04f 0900 	mov.w	r9, #0
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	e78d      	b.n	800828c <_strtod_l+0x494>
 8008370:	0800c936 	.word	0x0800c936
 8008374:	0800c7ec 	.word	0x0800c7ec
 8008378:	0800c92e 	.word	0x0800c92e
 800837c:	0800c968 	.word	0x0800c968
 8008380:	0800cbf8 	.word	0x0800cbf8
 8008384:	0800cad8 	.word	0x0800cad8
 8008388:	0800cab0 	.word	0x0800cab0
 800838c:	7ff00000 	.word	0x7ff00000
 8008390:	7ca00000 	.word	0x7ca00000
 8008394:	7fefffff 	.word	0x7fefffff
 8008398:	f015 0310 	ands.w	r3, r5, #16
 800839c:	bf18      	it	ne
 800839e:	236a      	movne	r3, #106	; 0x6a
 80083a0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008744 <_strtod_l+0x94c>
 80083a4:	9304      	str	r3, [sp, #16]
 80083a6:	4640      	mov	r0, r8
 80083a8:	4649      	mov	r1, r9
 80083aa:	2300      	movs	r3, #0
 80083ac:	07ea      	lsls	r2, r5, #31
 80083ae:	d504      	bpl.n	80083ba <_strtod_l+0x5c2>
 80083b0:	e9da 2300 	ldrd	r2, r3, [sl]
 80083b4:	f7f8 f940 	bl	8000638 <__aeabi_dmul>
 80083b8:	2301      	movs	r3, #1
 80083ba:	106d      	asrs	r5, r5, #1
 80083bc:	f10a 0a08 	add.w	sl, sl, #8
 80083c0:	d1f4      	bne.n	80083ac <_strtod_l+0x5b4>
 80083c2:	b10b      	cbz	r3, 80083c8 <_strtod_l+0x5d0>
 80083c4:	4680      	mov	r8, r0
 80083c6:	4689      	mov	r9, r1
 80083c8:	9b04      	ldr	r3, [sp, #16]
 80083ca:	b1bb      	cbz	r3, 80083fc <_strtod_l+0x604>
 80083cc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80083d0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	4649      	mov	r1, r9
 80083d8:	dd10      	ble.n	80083fc <_strtod_l+0x604>
 80083da:	2b1f      	cmp	r3, #31
 80083dc:	f340 811e 	ble.w	800861c <_strtod_l+0x824>
 80083e0:	2b34      	cmp	r3, #52	; 0x34
 80083e2:	bfde      	ittt	le
 80083e4:	f04f 33ff 	movle.w	r3, #4294967295
 80083e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80083ec:	4093      	lslle	r3, r2
 80083ee:	f04f 0800 	mov.w	r8, #0
 80083f2:	bfcc      	ite	gt
 80083f4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80083f8:	ea03 0901 	andle.w	r9, r3, r1
 80083fc:	2200      	movs	r2, #0
 80083fe:	2300      	movs	r3, #0
 8008400:	4640      	mov	r0, r8
 8008402:	4649      	mov	r1, r9
 8008404:	f7f8 fb80 	bl	8000b08 <__aeabi_dcmpeq>
 8008408:	2800      	cmp	r0, #0
 800840a:	d1a6      	bne.n	800835a <_strtod_l+0x562>
 800840c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800840e:	9300      	str	r3, [sp, #0]
 8008410:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008412:	4633      	mov	r3, r6
 8008414:	465a      	mov	r2, fp
 8008416:	4620      	mov	r0, r4
 8008418:	f002 fefe 	bl	800b218 <__s2b>
 800841c:	9009      	str	r0, [sp, #36]	; 0x24
 800841e:	2800      	cmp	r0, #0
 8008420:	f43f af2a 	beq.w	8008278 <_strtod_l+0x480>
 8008424:	9a08      	ldr	r2, [sp, #32]
 8008426:	9b05      	ldr	r3, [sp, #20]
 8008428:	2a00      	cmp	r2, #0
 800842a:	eba3 0307 	sub.w	r3, r3, r7
 800842e:	bfa8      	it	ge
 8008430:	2300      	movge	r3, #0
 8008432:	930c      	str	r3, [sp, #48]	; 0x30
 8008434:	2500      	movs	r5, #0
 8008436:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800843a:	9312      	str	r3, [sp, #72]	; 0x48
 800843c:	46ab      	mov	fp, r5
 800843e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008440:	4620      	mov	r0, r4
 8008442:	6859      	ldr	r1, [r3, #4]
 8008444:	f002 fe40 	bl	800b0c8 <_Balloc>
 8008448:	9005      	str	r0, [sp, #20]
 800844a:	2800      	cmp	r0, #0
 800844c:	f43f af18 	beq.w	8008280 <_strtod_l+0x488>
 8008450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008452:	691a      	ldr	r2, [r3, #16]
 8008454:	3202      	adds	r2, #2
 8008456:	f103 010c 	add.w	r1, r3, #12
 800845a:	0092      	lsls	r2, r2, #2
 800845c:	300c      	adds	r0, #12
 800845e:	f001 fbe4 	bl	8009c2a <memcpy>
 8008462:	ec49 8b10 	vmov	d0, r8, r9
 8008466:	aa18      	add	r2, sp, #96	; 0x60
 8008468:	a917      	add	r1, sp, #92	; 0x5c
 800846a:	4620      	mov	r0, r4
 800846c:	f003 fa08 	bl	800b880 <__d2b>
 8008470:	ec49 8b18 	vmov	d8, r8, r9
 8008474:	9016      	str	r0, [sp, #88]	; 0x58
 8008476:	2800      	cmp	r0, #0
 8008478:	f43f af02 	beq.w	8008280 <_strtod_l+0x488>
 800847c:	2101      	movs	r1, #1
 800847e:	4620      	mov	r0, r4
 8008480:	f002 ff62 	bl	800b348 <__i2b>
 8008484:	4683      	mov	fp, r0
 8008486:	2800      	cmp	r0, #0
 8008488:	f43f aefa 	beq.w	8008280 <_strtod_l+0x488>
 800848c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800848e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008490:	2e00      	cmp	r6, #0
 8008492:	bfab      	itete	ge
 8008494:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008496:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008498:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800849a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800849e:	bfac      	ite	ge
 80084a0:	eb06 0a03 	addge.w	sl, r6, r3
 80084a4:	1b9f      	sublt	r7, r3, r6
 80084a6:	9b04      	ldr	r3, [sp, #16]
 80084a8:	1af6      	subs	r6, r6, r3
 80084aa:	4416      	add	r6, r2
 80084ac:	4ba0      	ldr	r3, [pc, #640]	; (8008730 <_strtod_l+0x938>)
 80084ae:	3e01      	subs	r6, #1
 80084b0:	429e      	cmp	r6, r3
 80084b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80084b6:	f280 80c4 	bge.w	8008642 <_strtod_l+0x84a>
 80084ba:	1b9b      	subs	r3, r3, r6
 80084bc:	2b1f      	cmp	r3, #31
 80084be:	eba2 0203 	sub.w	r2, r2, r3
 80084c2:	f04f 0101 	mov.w	r1, #1
 80084c6:	f300 80b0 	bgt.w	800862a <_strtod_l+0x832>
 80084ca:	fa01 f303 	lsl.w	r3, r1, r3
 80084ce:	930e      	str	r3, [sp, #56]	; 0x38
 80084d0:	2300      	movs	r3, #0
 80084d2:	930d      	str	r3, [sp, #52]	; 0x34
 80084d4:	eb0a 0602 	add.w	r6, sl, r2
 80084d8:	9b04      	ldr	r3, [sp, #16]
 80084da:	45b2      	cmp	sl, r6
 80084dc:	4417      	add	r7, r2
 80084de:	441f      	add	r7, r3
 80084e0:	4653      	mov	r3, sl
 80084e2:	bfa8      	it	ge
 80084e4:	4633      	movge	r3, r6
 80084e6:	42bb      	cmp	r3, r7
 80084e8:	bfa8      	it	ge
 80084ea:	463b      	movge	r3, r7
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	bfc2      	ittt	gt
 80084f0:	1af6      	subgt	r6, r6, r3
 80084f2:	1aff      	subgt	r7, r7, r3
 80084f4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80084f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	dd17      	ble.n	800852e <_strtod_l+0x736>
 80084fe:	4659      	mov	r1, fp
 8008500:	461a      	mov	r2, r3
 8008502:	4620      	mov	r0, r4
 8008504:	f002 ffe0 	bl	800b4c8 <__pow5mult>
 8008508:	4683      	mov	fp, r0
 800850a:	2800      	cmp	r0, #0
 800850c:	f43f aeb8 	beq.w	8008280 <_strtod_l+0x488>
 8008510:	4601      	mov	r1, r0
 8008512:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008514:	4620      	mov	r0, r4
 8008516:	f002 ff2d 	bl	800b374 <__multiply>
 800851a:	900b      	str	r0, [sp, #44]	; 0x2c
 800851c:	2800      	cmp	r0, #0
 800851e:	f43f aeaf 	beq.w	8008280 <_strtod_l+0x488>
 8008522:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008524:	4620      	mov	r0, r4
 8008526:	f002 fe0f 	bl	800b148 <_Bfree>
 800852a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800852c:	9316      	str	r3, [sp, #88]	; 0x58
 800852e:	2e00      	cmp	r6, #0
 8008530:	f300 808c 	bgt.w	800864c <_strtod_l+0x854>
 8008534:	9b08      	ldr	r3, [sp, #32]
 8008536:	2b00      	cmp	r3, #0
 8008538:	dd08      	ble.n	800854c <_strtod_l+0x754>
 800853a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800853c:	9905      	ldr	r1, [sp, #20]
 800853e:	4620      	mov	r0, r4
 8008540:	f002 ffc2 	bl	800b4c8 <__pow5mult>
 8008544:	9005      	str	r0, [sp, #20]
 8008546:	2800      	cmp	r0, #0
 8008548:	f43f ae9a 	beq.w	8008280 <_strtod_l+0x488>
 800854c:	2f00      	cmp	r7, #0
 800854e:	dd08      	ble.n	8008562 <_strtod_l+0x76a>
 8008550:	9905      	ldr	r1, [sp, #20]
 8008552:	463a      	mov	r2, r7
 8008554:	4620      	mov	r0, r4
 8008556:	f003 f811 	bl	800b57c <__lshift>
 800855a:	9005      	str	r0, [sp, #20]
 800855c:	2800      	cmp	r0, #0
 800855e:	f43f ae8f 	beq.w	8008280 <_strtod_l+0x488>
 8008562:	f1ba 0f00 	cmp.w	sl, #0
 8008566:	dd08      	ble.n	800857a <_strtod_l+0x782>
 8008568:	4659      	mov	r1, fp
 800856a:	4652      	mov	r2, sl
 800856c:	4620      	mov	r0, r4
 800856e:	f003 f805 	bl	800b57c <__lshift>
 8008572:	4683      	mov	fp, r0
 8008574:	2800      	cmp	r0, #0
 8008576:	f43f ae83 	beq.w	8008280 <_strtod_l+0x488>
 800857a:	9a05      	ldr	r2, [sp, #20]
 800857c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800857e:	4620      	mov	r0, r4
 8008580:	f003 f884 	bl	800b68c <__mdiff>
 8008584:	4605      	mov	r5, r0
 8008586:	2800      	cmp	r0, #0
 8008588:	f43f ae7a 	beq.w	8008280 <_strtod_l+0x488>
 800858c:	68c3      	ldr	r3, [r0, #12]
 800858e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008590:	2300      	movs	r3, #0
 8008592:	60c3      	str	r3, [r0, #12]
 8008594:	4659      	mov	r1, fp
 8008596:	f003 f85d 	bl	800b654 <__mcmp>
 800859a:	2800      	cmp	r0, #0
 800859c:	da60      	bge.n	8008660 <_strtod_l+0x868>
 800859e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085a0:	ea53 0308 	orrs.w	r3, r3, r8
 80085a4:	f040 8084 	bne.w	80086b0 <_strtod_l+0x8b8>
 80085a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d17f      	bne.n	80086b0 <_strtod_l+0x8b8>
 80085b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80085b4:	0d1b      	lsrs	r3, r3, #20
 80085b6:	051b      	lsls	r3, r3, #20
 80085b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80085bc:	d978      	bls.n	80086b0 <_strtod_l+0x8b8>
 80085be:	696b      	ldr	r3, [r5, #20]
 80085c0:	b913      	cbnz	r3, 80085c8 <_strtod_l+0x7d0>
 80085c2:	692b      	ldr	r3, [r5, #16]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	dd73      	ble.n	80086b0 <_strtod_l+0x8b8>
 80085c8:	4629      	mov	r1, r5
 80085ca:	2201      	movs	r2, #1
 80085cc:	4620      	mov	r0, r4
 80085ce:	f002 ffd5 	bl	800b57c <__lshift>
 80085d2:	4659      	mov	r1, fp
 80085d4:	4605      	mov	r5, r0
 80085d6:	f003 f83d 	bl	800b654 <__mcmp>
 80085da:	2800      	cmp	r0, #0
 80085dc:	dd68      	ble.n	80086b0 <_strtod_l+0x8b8>
 80085de:	9904      	ldr	r1, [sp, #16]
 80085e0:	4a54      	ldr	r2, [pc, #336]	; (8008734 <_strtod_l+0x93c>)
 80085e2:	464b      	mov	r3, r9
 80085e4:	2900      	cmp	r1, #0
 80085e6:	f000 8084 	beq.w	80086f2 <_strtod_l+0x8fa>
 80085ea:	ea02 0109 	and.w	r1, r2, r9
 80085ee:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80085f2:	dc7e      	bgt.n	80086f2 <_strtod_l+0x8fa>
 80085f4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80085f8:	f77f aeb3 	ble.w	8008362 <_strtod_l+0x56a>
 80085fc:	4b4e      	ldr	r3, [pc, #312]	; (8008738 <_strtod_l+0x940>)
 80085fe:	4640      	mov	r0, r8
 8008600:	4649      	mov	r1, r9
 8008602:	2200      	movs	r2, #0
 8008604:	f7f8 f818 	bl	8000638 <__aeabi_dmul>
 8008608:	4b4a      	ldr	r3, [pc, #296]	; (8008734 <_strtod_l+0x93c>)
 800860a:	400b      	ands	r3, r1
 800860c:	4680      	mov	r8, r0
 800860e:	4689      	mov	r9, r1
 8008610:	2b00      	cmp	r3, #0
 8008612:	f47f ae3f 	bne.w	8008294 <_strtod_l+0x49c>
 8008616:	2322      	movs	r3, #34	; 0x22
 8008618:	6023      	str	r3, [r4, #0]
 800861a:	e63b      	b.n	8008294 <_strtod_l+0x49c>
 800861c:	f04f 32ff 	mov.w	r2, #4294967295
 8008620:	fa02 f303 	lsl.w	r3, r2, r3
 8008624:	ea03 0808 	and.w	r8, r3, r8
 8008628:	e6e8      	b.n	80083fc <_strtod_l+0x604>
 800862a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800862e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008632:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008636:	36e2      	adds	r6, #226	; 0xe2
 8008638:	fa01 f306 	lsl.w	r3, r1, r6
 800863c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008640:	e748      	b.n	80084d4 <_strtod_l+0x6dc>
 8008642:	2100      	movs	r1, #0
 8008644:	2301      	movs	r3, #1
 8008646:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800864a:	e743      	b.n	80084d4 <_strtod_l+0x6dc>
 800864c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800864e:	4632      	mov	r2, r6
 8008650:	4620      	mov	r0, r4
 8008652:	f002 ff93 	bl	800b57c <__lshift>
 8008656:	9016      	str	r0, [sp, #88]	; 0x58
 8008658:	2800      	cmp	r0, #0
 800865a:	f47f af6b 	bne.w	8008534 <_strtod_l+0x73c>
 800865e:	e60f      	b.n	8008280 <_strtod_l+0x488>
 8008660:	46ca      	mov	sl, r9
 8008662:	d171      	bne.n	8008748 <_strtod_l+0x950>
 8008664:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008666:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800866a:	b352      	cbz	r2, 80086c2 <_strtod_l+0x8ca>
 800866c:	4a33      	ldr	r2, [pc, #204]	; (800873c <_strtod_l+0x944>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d12a      	bne.n	80086c8 <_strtod_l+0x8d0>
 8008672:	9b04      	ldr	r3, [sp, #16]
 8008674:	4641      	mov	r1, r8
 8008676:	b1fb      	cbz	r3, 80086b8 <_strtod_l+0x8c0>
 8008678:	4b2e      	ldr	r3, [pc, #184]	; (8008734 <_strtod_l+0x93c>)
 800867a:	ea09 0303 	and.w	r3, r9, r3
 800867e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008682:	f04f 32ff 	mov.w	r2, #4294967295
 8008686:	d81a      	bhi.n	80086be <_strtod_l+0x8c6>
 8008688:	0d1b      	lsrs	r3, r3, #20
 800868a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800868e:	fa02 f303 	lsl.w	r3, r2, r3
 8008692:	4299      	cmp	r1, r3
 8008694:	d118      	bne.n	80086c8 <_strtod_l+0x8d0>
 8008696:	4b2a      	ldr	r3, [pc, #168]	; (8008740 <_strtod_l+0x948>)
 8008698:	459a      	cmp	sl, r3
 800869a:	d102      	bne.n	80086a2 <_strtod_l+0x8aa>
 800869c:	3101      	adds	r1, #1
 800869e:	f43f adef 	beq.w	8008280 <_strtod_l+0x488>
 80086a2:	4b24      	ldr	r3, [pc, #144]	; (8008734 <_strtod_l+0x93c>)
 80086a4:	ea0a 0303 	and.w	r3, sl, r3
 80086a8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80086ac:	f04f 0800 	mov.w	r8, #0
 80086b0:	9b04      	ldr	r3, [sp, #16]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1a2      	bne.n	80085fc <_strtod_l+0x804>
 80086b6:	e5ed      	b.n	8008294 <_strtod_l+0x49c>
 80086b8:	f04f 33ff 	mov.w	r3, #4294967295
 80086bc:	e7e9      	b.n	8008692 <_strtod_l+0x89a>
 80086be:	4613      	mov	r3, r2
 80086c0:	e7e7      	b.n	8008692 <_strtod_l+0x89a>
 80086c2:	ea53 0308 	orrs.w	r3, r3, r8
 80086c6:	d08a      	beq.n	80085de <_strtod_l+0x7e6>
 80086c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ca:	b1e3      	cbz	r3, 8008706 <_strtod_l+0x90e>
 80086cc:	ea13 0f0a 	tst.w	r3, sl
 80086d0:	d0ee      	beq.n	80086b0 <_strtod_l+0x8b8>
 80086d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086d4:	9a04      	ldr	r2, [sp, #16]
 80086d6:	4640      	mov	r0, r8
 80086d8:	4649      	mov	r1, r9
 80086da:	b1c3      	cbz	r3, 800870e <_strtod_l+0x916>
 80086dc:	f7ff fb6e 	bl	8007dbc <sulp>
 80086e0:	4602      	mov	r2, r0
 80086e2:	460b      	mov	r3, r1
 80086e4:	ec51 0b18 	vmov	r0, r1, d8
 80086e8:	f7f7 fdf0 	bl	80002cc <__adddf3>
 80086ec:	4680      	mov	r8, r0
 80086ee:	4689      	mov	r9, r1
 80086f0:	e7de      	b.n	80086b0 <_strtod_l+0x8b8>
 80086f2:	4013      	ands	r3, r2
 80086f4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80086f8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80086fc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008700:	f04f 38ff 	mov.w	r8, #4294967295
 8008704:	e7d4      	b.n	80086b0 <_strtod_l+0x8b8>
 8008706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008708:	ea13 0f08 	tst.w	r3, r8
 800870c:	e7e0      	b.n	80086d0 <_strtod_l+0x8d8>
 800870e:	f7ff fb55 	bl	8007dbc <sulp>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	ec51 0b18 	vmov	r0, r1, d8
 800871a:	f7f7 fdd5 	bl	80002c8 <__aeabi_dsub>
 800871e:	2200      	movs	r2, #0
 8008720:	2300      	movs	r3, #0
 8008722:	4680      	mov	r8, r0
 8008724:	4689      	mov	r9, r1
 8008726:	f7f8 f9ef 	bl	8000b08 <__aeabi_dcmpeq>
 800872a:	2800      	cmp	r0, #0
 800872c:	d0c0      	beq.n	80086b0 <_strtod_l+0x8b8>
 800872e:	e618      	b.n	8008362 <_strtod_l+0x56a>
 8008730:	fffffc02 	.word	0xfffffc02
 8008734:	7ff00000 	.word	0x7ff00000
 8008738:	39500000 	.word	0x39500000
 800873c:	000fffff 	.word	0x000fffff
 8008740:	7fefffff 	.word	0x7fefffff
 8008744:	0800c800 	.word	0x0800c800
 8008748:	4659      	mov	r1, fp
 800874a:	4628      	mov	r0, r5
 800874c:	f003 f8f2 	bl	800b934 <__ratio>
 8008750:	ec57 6b10 	vmov	r6, r7, d0
 8008754:	ee10 0a10 	vmov	r0, s0
 8008758:	2200      	movs	r2, #0
 800875a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800875e:	4639      	mov	r1, r7
 8008760:	f7f8 f9e6 	bl	8000b30 <__aeabi_dcmple>
 8008764:	2800      	cmp	r0, #0
 8008766:	d071      	beq.n	800884c <_strtod_l+0xa54>
 8008768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800876a:	2b00      	cmp	r3, #0
 800876c:	d17c      	bne.n	8008868 <_strtod_l+0xa70>
 800876e:	f1b8 0f00 	cmp.w	r8, #0
 8008772:	d15a      	bne.n	800882a <_strtod_l+0xa32>
 8008774:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008778:	2b00      	cmp	r3, #0
 800877a:	d15d      	bne.n	8008838 <_strtod_l+0xa40>
 800877c:	4b90      	ldr	r3, [pc, #576]	; (80089c0 <_strtod_l+0xbc8>)
 800877e:	2200      	movs	r2, #0
 8008780:	4630      	mov	r0, r6
 8008782:	4639      	mov	r1, r7
 8008784:	f7f8 f9ca 	bl	8000b1c <__aeabi_dcmplt>
 8008788:	2800      	cmp	r0, #0
 800878a:	d15c      	bne.n	8008846 <_strtod_l+0xa4e>
 800878c:	4630      	mov	r0, r6
 800878e:	4639      	mov	r1, r7
 8008790:	4b8c      	ldr	r3, [pc, #560]	; (80089c4 <_strtod_l+0xbcc>)
 8008792:	2200      	movs	r2, #0
 8008794:	f7f7 ff50 	bl	8000638 <__aeabi_dmul>
 8008798:	4606      	mov	r6, r0
 800879a:	460f      	mov	r7, r1
 800879c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80087a0:	9606      	str	r6, [sp, #24]
 80087a2:	9307      	str	r3, [sp, #28]
 80087a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80087ac:	4b86      	ldr	r3, [pc, #536]	; (80089c8 <_strtod_l+0xbd0>)
 80087ae:	ea0a 0303 	and.w	r3, sl, r3
 80087b2:	930d      	str	r3, [sp, #52]	; 0x34
 80087b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087b6:	4b85      	ldr	r3, [pc, #532]	; (80089cc <_strtod_l+0xbd4>)
 80087b8:	429a      	cmp	r2, r3
 80087ba:	f040 8090 	bne.w	80088de <_strtod_l+0xae6>
 80087be:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80087c2:	ec49 8b10 	vmov	d0, r8, r9
 80087c6:	f002 ffeb 	bl	800b7a0 <__ulp>
 80087ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087ce:	ec51 0b10 	vmov	r0, r1, d0
 80087d2:	f7f7 ff31 	bl	8000638 <__aeabi_dmul>
 80087d6:	4642      	mov	r2, r8
 80087d8:	464b      	mov	r3, r9
 80087da:	f7f7 fd77 	bl	80002cc <__adddf3>
 80087de:	460b      	mov	r3, r1
 80087e0:	4979      	ldr	r1, [pc, #484]	; (80089c8 <_strtod_l+0xbd0>)
 80087e2:	4a7b      	ldr	r2, [pc, #492]	; (80089d0 <_strtod_l+0xbd8>)
 80087e4:	4019      	ands	r1, r3
 80087e6:	4291      	cmp	r1, r2
 80087e8:	4680      	mov	r8, r0
 80087ea:	d944      	bls.n	8008876 <_strtod_l+0xa7e>
 80087ec:	ee18 2a90 	vmov	r2, s17
 80087f0:	4b78      	ldr	r3, [pc, #480]	; (80089d4 <_strtod_l+0xbdc>)
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d104      	bne.n	8008800 <_strtod_l+0xa08>
 80087f6:	ee18 3a10 	vmov	r3, s16
 80087fa:	3301      	adds	r3, #1
 80087fc:	f43f ad40 	beq.w	8008280 <_strtod_l+0x488>
 8008800:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80089d4 <_strtod_l+0xbdc>
 8008804:	f04f 38ff 	mov.w	r8, #4294967295
 8008808:	9916      	ldr	r1, [sp, #88]	; 0x58
 800880a:	4620      	mov	r0, r4
 800880c:	f002 fc9c 	bl	800b148 <_Bfree>
 8008810:	9905      	ldr	r1, [sp, #20]
 8008812:	4620      	mov	r0, r4
 8008814:	f002 fc98 	bl	800b148 <_Bfree>
 8008818:	4659      	mov	r1, fp
 800881a:	4620      	mov	r0, r4
 800881c:	f002 fc94 	bl	800b148 <_Bfree>
 8008820:	4629      	mov	r1, r5
 8008822:	4620      	mov	r0, r4
 8008824:	f002 fc90 	bl	800b148 <_Bfree>
 8008828:	e609      	b.n	800843e <_strtod_l+0x646>
 800882a:	f1b8 0f01 	cmp.w	r8, #1
 800882e:	d103      	bne.n	8008838 <_strtod_l+0xa40>
 8008830:	f1b9 0f00 	cmp.w	r9, #0
 8008834:	f43f ad95 	beq.w	8008362 <_strtod_l+0x56a>
 8008838:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008990 <_strtod_l+0xb98>
 800883c:	4f60      	ldr	r7, [pc, #384]	; (80089c0 <_strtod_l+0xbc8>)
 800883e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008842:	2600      	movs	r6, #0
 8008844:	e7ae      	b.n	80087a4 <_strtod_l+0x9ac>
 8008846:	4f5f      	ldr	r7, [pc, #380]	; (80089c4 <_strtod_l+0xbcc>)
 8008848:	2600      	movs	r6, #0
 800884a:	e7a7      	b.n	800879c <_strtod_l+0x9a4>
 800884c:	4b5d      	ldr	r3, [pc, #372]	; (80089c4 <_strtod_l+0xbcc>)
 800884e:	4630      	mov	r0, r6
 8008850:	4639      	mov	r1, r7
 8008852:	2200      	movs	r2, #0
 8008854:	f7f7 fef0 	bl	8000638 <__aeabi_dmul>
 8008858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800885a:	4606      	mov	r6, r0
 800885c:	460f      	mov	r7, r1
 800885e:	2b00      	cmp	r3, #0
 8008860:	d09c      	beq.n	800879c <_strtod_l+0x9a4>
 8008862:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008866:	e79d      	b.n	80087a4 <_strtod_l+0x9ac>
 8008868:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008998 <_strtod_l+0xba0>
 800886c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008870:	ec57 6b17 	vmov	r6, r7, d7
 8008874:	e796      	b.n	80087a4 <_strtod_l+0x9ac>
 8008876:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800887a:	9b04      	ldr	r3, [sp, #16]
 800887c:	46ca      	mov	sl, r9
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1c2      	bne.n	8008808 <_strtod_l+0xa10>
 8008882:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008886:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008888:	0d1b      	lsrs	r3, r3, #20
 800888a:	051b      	lsls	r3, r3, #20
 800888c:	429a      	cmp	r2, r3
 800888e:	d1bb      	bne.n	8008808 <_strtod_l+0xa10>
 8008890:	4630      	mov	r0, r6
 8008892:	4639      	mov	r1, r7
 8008894:	f7f8 fa30 	bl	8000cf8 <__aeabi_d2lz>
 8008898:	f7f7 fea0 	bl	80005dc <__aeabi_l2d>
 800889c:	4602      	mov	r2, r0
 800889e:	460b      	mov	r3, r1
 80088a0:	4630      	mov	r0, r6
 80088a2:	4639      	mov	r1, r7
 80088a4:	f7f7 fd10 	bl	80002c8 <__aeabi_dsub>
 80088a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088ae:	ea43 0308 	orr.w	r3, r3, r8
 80088b2:	4313      	orrs	r3, r2
 80088b4:	4606      	mov	r6, r0
 80088b6:	460f      	mov	r7, r1
 80088b8:	d054      	beq.n	8008964 <_strtod_l+0xb6c>
 80088ba:	a339      	add	r3, pc, #228	; (adr r3, 80089a0 <_strtod_l+0xba8>)
 80088bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c0:	f7f8 f92c 	bl	8000b1c <__aeabi_dcmplt>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	f47f ace5 	bne.w	8008294 <_strtod_l+0x49c>
 80088ca:	a337      	add	r3, pc, #220	; (adr r3, 80089a8 <_strtod_l+0xbb0>)
 80088cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d0:	4630      	mov	r0, r6
 80088d2:	4639      	mov	r1, r7
 80088d4:	f7f8 f940 	bl	8000b58 <__aeabi_dcmpgt>
 80088d8:	2800      	cmp	r0, #0
 80088da:	d095      	beq.n	8008808 <_strtod_l+0xa10>
 80088dc:	e4da      	b.n	8008294 <_strtod_l+0x49c>
 80088de:	9b04      	ldr	r3, [sp, #16]
 80088e0:	b333      	cbz	r3, 8008930 <_strtod_l+0xb38>
 80088e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80088e8:	d822      	bhi.n	8008930 <_strtod_l+0xb38>
 80088ea:	a331      	add	r3, pc, #196	; (adr r3, 80089b0 <_strtod_l+0xbb8>)
 80088ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f0:	4630      	mov	r0, r6
 80088f2:	4639      	mov	r1, r7
 80088f4:	f7f8 f91c 	bl	8000b30 <__aeabi_dcmple>
 80088f8:	b1a0      	cbz	r0, 8008924 <_strtod_l+0xb2c>
 80088fa:	4639      	mov	r1, r7
 80088fc:	4630      	mov	r0, r6
 80088fe:	f7f8 f973 	bl	8000be8 <__aeabi_d2uiz>
 8008902:	2801      	cmp	r0, #1
 8008904:	bf38      	it	cc
 8008906:	2001      	movcc	r0, #1
 8008908:	f7f7 fe1c 	bl	8000544 <__aeabi_ui2d>
 800890c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800890e:	4606      	mov	r6, r0
 8008910:	460f      	mov	r7, r1
 8008912:	bb23      	cbnz	r3, 800895e <_strtod_l+0xb66>
 8008914:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008918:	9010      	str	r0, [sp, #64]	; 0x40
 800891a:	9311      	str	r3, [sp, #68]	; 0x44
 800891c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008920:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008924:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008926:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008928:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800892c:	1a9b      	subs	r3, r3, r2
 800892e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008930:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008934:	eeb0 0a48 	vmov.f32	s0, s16
 8008938:	eef0 0a68 	vmov.f32	s1, s17
 800893c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008940:	f002 ff2e 	bl	800b7a0 <__ulp>
 8008944:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008948:	ec53 2b10 	vmov	r2, r3, d0
 800894c:	f7f7 fe74 	bl	8000638 <__aeabi_dmul>
 8008950:	ec53 2b18 	vmov	r2, r3, d8
 8008954:	f7f7 fcba 	bl	80002cc <__adddf3>
 8008958:	4680      	mov	r8, r0
 800895a:	4689      	mov	r9, r1
 800895c:	e78d      	b.n	800887a <_strtod_l+0xa82>
 800895e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008962:	e7db      	b.n	800891c <_strtod_l+0xb24>
 8008964:	a314      	add	r3, pc, #80	; (adr r3, 80089b8 <_strtod_l+0xbc0>)
 8008966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896a:	f7f8 f8d7 	bl	8000b1c <__aeabi_dcmplt>
 800896e:	e7b3      	b.n	80088d8 <_strtod_l+0xae0>
 8008970:	2300      	movs	r3, #0
 8008972:	930a      	str	r3, [sp, #40]	; 0x28
 8008974:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008976:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008978:	6013      	str	r3, [r2, #0]
 800897a:	f7ff ba7c 	b.w	8007e76 <_strtod_l+0x7e>
 800897e:	2a65      	cmp	r2, #101	; 0x65
 8008980:	f43f ab75 	beq.w	800806e <_strtod_l+0x276>
 8008984:	2a45      	cmp	r2, #69	; 0x45
 8008986:	f43f ab72 	beq.w	800806e <_strtod_l+0x276>
 800898a:	2301      	movs	r3, #1
 800898c:	f7ff bbaa 	b.w	80080e4 <_strtod_l+0x2ec>
 8008990:	00000000 	.word	0x00000000
 8008994:	bff00000 	.word	0xbff00000
 8008998:	00000000 	.word	0x00000000
 800899c:	3ff00000 	.word	0x3ff00000
 80089a0:	94a03595 	.word	0x94a03595
 80089a4:	3fdfffff 	.word	0x3fdfffff
 80089a8:	35afe535 	.word	0x35afe535
 80089ac:	3fe00000 	.word	0x3fe00000
 80089b0:	ffc00000 	.word	0xffc00000
 80089b4:	41dfffff 	.word	0x41dfffff
 80089b8:	94a03595 	.word	0x94a03595
 80089bc:	3fcfffff 	.word	0x3fcfffff
 80089c0:	3ff00000 	.word	0x3ff00000
 80089c4:	3fe00000 	.word	0x3fe00000
 80089c8:	7ff00000 	.word	0x7ff00000
 80089cc:	7fe00000 	.word	0x7fe00000
 80089d0:	7c9fffff 	.word	0x7c9fffff
 80089d4:	7fefffff 	.word	0x7fefffff

080089d8 <strtof>:
 80089d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089dc:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8008aa0 <strtof+0xc8>
 80089e0:	4b2a      	ldr	r3, [pc, #168]	; (8008a8c <strtof+0xb4>)
 80089e2:	460a      	mov	r2, r1
 80089e4:	ed2d 8b02 	vpush	{d8}
 80089e8:	4601      	mov	r1, r0
 80089ea:	f8d8 0000 	ldr.w	r0, [r8]
 80089ee:	f7ff fa03 	bl	8007df8 <_strtod_l>
 80089f2:	ec55 4b10 	vmov	r4, r5, d0
 80089f6:	ee10 2a10 	vmov	r2, s0
 80089fa:	ee10 0a10 	vmov	r0, s0
 80089fe:	462b      	mov	r3, r5
 8008a00:	4629      	mov	r1, r5
 8008a02:	f7f8 f8b3 	bl	8000b6c <__aeabi_dcmpun>
 8008a06:	b190      	cbz	r0, 8008a2e <strtof+0x56>
 8008a08:	2d00      	cmp	r5, #0
 8008a0a:	4821      	ldr	r0, [pc, #132]	; (8008a90 <strtof+0xb8>)
 8008a0c:	da09      	bge.n	8008a22 <strtof+0x4a>
 8008a0e:	f001 f923 	bl	8009c58 <nanf>
 8008a12:	eeb1 8a40 	vneg.f32	s16, s0
 8008a16:	eeb0 0a48 	vmov.f32	s0, s16
 8008a1a:	ecbd 8b02 	vpop	{d8}
 8008a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a22:	ecbd 8b02 	vpop	{d8}
 8008a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a2a:	f001 b915 	b.w	8009c58 <nanf>
 8008a2e:	4620      	mov	r0, r4
 8008a30:	4629      	mov	r1, r5
 8008a32:	f7f8 f8f9 	bl	8000c28 <__aeabi_d2f>
 8008a36:	ee08 0a10 	vmov	s16, r0
 8008a3a:	eddf 7a16 	vldr	s15, [pc, #88]	; 8008a94 <strtof+0xbc>
 8008a3e:	eeb0 7ac8 	vabs.f32	s14, s16
 8008a42:	eeb4 7a67 	vcmp.f32	s14, s15
 8008a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a4a:	dd11      	ble.n	8008a70 <strtof+0x98>
 8008a4c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8008a50:	4b11      	ldr	r3, [pc, #68]	; (8008a98 <strtof+0xc0>)
 8008a52:	f04f 32ff 	mov.w	r2, #4294967295
 8008a56:	4620      	mov	r0, r4
 8008a58:	4639      	mov	r1, r7
 8008a5a:	f7f8 f887 	bl	8000b6c <__aeabi_dcmpun>
 8008a5e:	b980      	cbnz	r0, 8008a82 <strtof+0xaa>
 8008a60:	4b0d      	ldr	r3, [pc, #52]	; (8008a98 <strtof+0xc0>)
 8008a62:	f04f 32ff 	mov.w	r2, #4294967295
 8008a66:	4620      	mov	r0, r4
 8008a68:	4639      	mov	r1, r7
 8008a6a:	f7f8 f861 	bl	8000b30 <__aeabi_dcmple>
 8008a6e:	b940      	cbnz	r0, 8008a82 <strtof+0xaa>
 8008a70:	ee18 3a10 	vmov	r3, s16
 8008a74:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008a78:	d1cd      	bne.n	8008a16 <strtof+0x3e>
 8008a7a:	4b08      	ldr	r3, [pc, #32]	; (8008a9c <strtof+0xc4>)
 8008a7c:	402b      	ands	r3, r5
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d0c9      	beq.n	8008a16 <strtof+0x3e>
 8008a82:	f8d8 3000 	ldr.w	r3, [r8]
 8008a86:	2222      	movs	r2, #34	; 0x22
 8008a88:	601a      	str	r2, [r3, #0]
 8008a8a:	e7c4      	b.n	8008a16 <strtof+0x3e>
 8008a8c:	20000034 	.word	0x20000034
 8008a90:	0800cbf8 	.word	0x0800cbf8
 8008a94:	7f7fffff 	.word	0x7f7fffff
 8008a98:	7fefffff 	.word	0x7fefffff
 8008a9c:	7ff00000 	.word	0x7ff00000
 8008aa0:	200001ec 	.word	0x200001ec

08008aa4 <_strtol_l.constprop.0>:
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aaa:	d001      	beq.n	8008ab0 <_strtol_l.constprop.0+0xc>
 8008aac:	2b24      	cmp	r3, #36	; 0x24
 8008aae:	d906      	bls.n	8008abe <_strtol_l.constprop.0+0x1a>
 8008ab0:	f001 f88e 	bl	8009bd0 <__errno>
 8008ab4:	2316      	movs	r3, #22
 8008ab6:	6003      	str	r3, [r0, #0]
 8008ab8:	2000      	movs	r0, #0
 8008aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008abe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008ba4 <_strtol_l.constprop.0+0x100>
 8008ac2:	460d      	mov	r5, r1
 8008ac4:	462e      	mov	r6, r5
 8008ac6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008aca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008ace:	f017 0708 	ands.w	r7, r7, #8
 8008ad2:	d1f7      	bne.n	8008ac4 <_strtol_l.constprop.0+0x20>
 8008ad4:	2c2d      	cmp	r4, #45	; 0x2d
 8008ad6:	d132      	bne.n	8008b3e <_strtol_l.constprop.0+0x9a>
 8008ad8:	782c      	ldrb	r4, [r5, #0]
 8008ada:	2701      	movs	r7, #1
 8008adc:	1cb5      	adds	r5, r6, #2
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d05b      	beq.n	8008b9a <_strtol_l.constprop.0+0xf6>
 8008ae2:	2b10      	cmp	r3, #16
 8008ae4:	d109      	bne.n	8008afa <_strtol_l.constprop.0+0x56>
 8008ae6:	2c30      	cmp	r4, #48	; 0x30
 8008ae8:	d107      	bne.n	8008afa <_strtol_l.constprop.0+0x56>
 8008aea:	782c      	ldrb	r4, [r5, #0]
 8008aec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008af0:	2c58      	cmp	r4, #88	; 0x58
 8008af2:	d14d      	bne.n	8008b90 <_strtol_l.constprop.0+0xec>
 8008af4:	786c      	ldrb	r4, [r5, #1]
 8008af6:	2310      	movs	r3, #16
 8008af8:	3502      	adds	r5, #2
 8008afa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008afe:	f108 38ff 	add.w	r8, r8, #4294967295
 8008b02:	f04f 0e00 	mov.w	lr, #0
 8008b06:	fbb8 f9f3 	udiv	r9, r8, r3
 8008b0a:	4676      	mov	r6, lr
 8008b0c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008b10:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008b14:	f1bc 0f09 	cmp.w	ip, #9
 8008b18:	d816      	bhi.n	8008b48 <_strtol_l.constprop.0+0xa4>
 8008b1a:	4664      	mov	r4, ip
 8008b1c:	42a3      	cmp	r3, r4
 8008b1e:	dd24      	ble.n	8008b6a <_strtol_l.constprop.0+0xc6>
 8008b20:	f1be 3fff 	cmp.w	lr, #4294967295
 8008b24:	d008      	beq.n	8008b38 <_strtol_l.constprop.0+0x94>
 8008b26:	45b1      	cmp	r9, r6
 8008b28:	d31c      	bcc.n	8008b64 <_strtol_l.constprop.0+0xc0>
 8008b2a:	d101      	bne.n	8008b30 <_strtol_l.constprop.0+0x8c>
 8008b2c:	45a2      	cmp	sl, r4
 8008b2e:	db19      	blt.n	8008b64 <_strtol_l.constprop.0+0xc0>
 8008b30:	fb06 4603 	mla	r6, r6, r3, r4
 8008b34:	f04f 0e01 	mov.w	lr, #1
 8008b38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b3c:	e7e8      	b.n	8008b10 <_strtol_l.constprop.0+0x6c>
 8008b3e:	2c2b      	cmp	r4, #43	; 0x2b
 8008b40:	bf04      	itt	eq
 8008b42:	782c      	ldrbeq	r4, [r5, #0]
 8008b44:	1cb5      	addeq	r5, r6, #2
 8008b46:	e7ca      	b.n	8008ade <_strtol_l.constprop.0+0x3a>
 8008b48:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008b4c:	f1bc 0f19 	cmp.w	ip, #25
 8008b50:	d801      	bhi.n	8008b56 <_strtol_l.constprop.0+0xb2>
 8008b52:	3c37      	subs	r4, #55	; 0x37
 8008b54:	e7e2      	b.n	8008b1c <_strtol_l.constprop.0+0x78>
 8008b56:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008b5a:	f1bc 0f19 	cmp.w	ip, #25
 8008b5e:	d804      	bhi.n	8008b6a <_strtol_l.constprop.0+0xc6>
 8008b60:	3c57      	subs	r4, #87	; 0x57
 8008b62:	e7db      	b.n	8008b1c <_strtol_l.constprop.0+0x78>
 8008b64:	f04f 3eff 	mov.w	lr, #4294967295
 8008b68:	e7e6      	b.n	8008b38 <_strtol_l.constprop.0+0x94>
 8008b6a:	f1be 3fff 	cmp.w	lr, #4294967295
 8008b6e:	d105      	bne.n	8008b7c <_strtol_l.constprop.0+0xd8>
 8008b70:	2322      	movs	r3, #34	; 0x22
 8008b72:	6003      	str	r3, [r0, #0]
 8008b74:	4646      	mov	r6, r8
 8008b76:	b942      	cbnz	r2, 8008b8a <_strtol_l.constprop.0+0xe6>
 8008b78:	4630      	mov	r0, r6
 8008b7a:	e79e      	b.n	8008aba <_strtol_l.constprop.0+0x16>
 8008b7c:	b107      	cbz	r7, 8008b80 <_strtol_l.constprop.0+0xdc>
 8008b7e:	4276      	negs	r6, r6
 8008b80:	2a00      	cmp	r2, #0
 8008b82:	d0f9      	beq.n	8008b78 <_strtol_l.constprop.0+0xd4>
 8008b84:	f1be 0f00 	cmp.w	lr, #0
 8008b88:	d000      	beq.n	8008b8c <_strtol_l.constprop.0+0xe8>
 8008b8a:	1e69      	subs	r1, r5, #1
 8008b8c:	6011      	str	r1, [r2, #0]
 8008b8e:	e7f3      	b.n	8008b78 <_strtol_l.constprop.0+0xd4>
 8008b90:	2430      	movs	r4, #48	; 0x30
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1b1      	bne.n	8008afa <_strtol_l.constprop.0+0x56>
 8008b96:	2308      	movs	r3, #8
 8008b98:	e7af      	b.n	8008afa <_strtol_l.constprop.0+0x56>
 8008b9a:	2c30      	cmp	r4, #48	; 0x30
 8008b9c:	d0a5      	beq.n	8008aea <_strtol_l.constprop.0+0x46>
 8008b9e:	230a      	movs	r3, #10
 8008ba0:	e7ab      	b.n	8008afa <_strtol_l.constprop.0+0x56>
 8008ba2:	bf00      	nop
 8008ba4:	0800c829 	.word	0x0800c829

08008ba8 <strtol>:
 8008ba8:	4613      	mov	r3, r2
 8008baa:	460a      	mov	r2, r1
 8008bac:	4601      	mov	r1, r0
 8008bae:	4802      	ldr	r0, [pc, #8]	; (8008bb8 <strtol+0x10>)
 8008bb0:	6800      	ldr	r0, [r0, #0]
 8008bb2:	f7ff bf77 	b.w	8008aa4 <_strtol_l.constprop.0>
 8008bb6:	bf00      	nop
 8008bb8:	200001ec 	.word	0x200001ec

08008bbc <swapfunc>:
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	b510      	push	{r4, lr}
 8008bc0:	d00a      	beq.n	8008bd8 <swapfunc+0x1c>
 8008bc2:	0892      	lsrs	r2, r2, #2
 8008bc4:	3a01      	subs	r2, #1
 8008bc6:	6803      	ldr	r3, [r0, #0]
 8008bc8:	680c      	ldr	r4, [r1, #0]
 8008bca:	f840 4b04 	str.w	r4, [r0], #4
 8008bce:	2a00      	cmp	r2, #0
 8008bd0:	f841 3b04 	str.w	r3, [r1], #4
 8008bd4:	dcf6      	bgt.n	8008bc4 <swapfunc+0x8>
 8008bd6:	bd10      	pop	{r4, pc}
 8008bd8:	4402      	add	r2, r0
 8008bda:	780c      	ldrb	r4, [r1, #0]
 8008bdc:	7803      	ldrb	r3, [r0, #0]
 8008bde:	f800 4b01 	strb.w	r4, [r0], #1
 8008be2:	f801 3b01 	strb.w	r3, [r1], #1
 8008be6:	1a13      	subs	r3, r2, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	dcf6      	bgt.n	8008bda <swapfunc+0x1e>
 8008bec:	e7f3      	b.n	8008bd6 <swapfunc+0x1a>

08008bee <med3.constprop.0>:
 8008bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bf0:	460c      	mov	r4, r1
 8008bf2:	4615      	mov	r5, r2
 8008bf4:	4607      	mov	r7, r0
 8008bf6:	461e      	mov	r6, r3
 8008bf8:	4798      	blx	r3
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	4620      	mov	r0, r4
 8008c00:	da0a      	bge.n	8008c18 <med3.constprop.0+0x2a>
 8008c02:	47b0      	blx	r6
 8008c04:	2800      	cmp	r0, #0
 8008c06:	db05      	blt.n	8008c14 <med3.constprop.0+0x26>
 8008c08:	4629      	mov	r1, r5
 8008c0a:	4638      	mov	r0, r7
 8008c0c:	47b0      	blx	r6
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	db0a      	blt.n	8008c28 <med3.constprop.0+0x3a>
 8008c12:	463c      	mov	r4, r7
 8008c14:	4620      	mov	r0, r4
 8008c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c18:	47b0      	blx	r6
 8008c1a:	2800      	cmp	r0, #0
 8008c1c:	dcfa      	bgt.n	8008c14 <med3.constprop.0+0x26>
 8008c1e:	4629      	mov	r1, r5
 8008c20:	4638      	mov	r0, r7
 8008c22:	47b0      	blx	r6
 8008c24:	2800      	cmp	r0, #0
 8008c26:	dbf4      	blt.n	8008c12 <med3.constprop.0+0x24>
 8008c28:	462c      	mov	r4, r5
 8008c2a:	e7f3      	b.n	8008c14 <med3.constprop.0+0x26>

08008c2c <qsort>:
 8008c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c30:	469a      	mov	sl, r3
 8008c32:	ea40 0302 	orr.w	r3, r0, r2
 8008c36:	079b      	lsls	r3, r3, #30
 8008c38:	b097      	sub	sp, #92	; 0x5c
 8008c3a:	4606      	mov	r6, r0
 8008c3c:	4614      	mov	r4, r2
 8008c3e:	d11a      	bne.n	8008c76 <qsort+0x4a>
 8008c40:	f1b2 0804 	subs.w	r8, r2, #4
 8008c44:	bf18      	it	ne
 8008c46:	f04f 0801 	movne.w	r8, #1
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	9302      	str	r3, [sp, #8]
 8008c4e:	1933      	adds	r3, r6, r4
 8008c50:	fb04 f701 	mul.w	r7, r4, r1
 8008c54:	9301      	str	r3, [sp, #4]
 8008c56:	2906      	cmp	r1, #6
 8008c58:	eb06 0307 	add.w	r3, r6, r7
 8008c5c:	9303      	str	r3, [sp, #12]
 8008c5e:	d82a      	bhi.n	8008cb6 <qsort+0x8a>
 8008c60:	9b01      	ldr	r3, [sp, #4]
 8008c62:	9a03      	ldr	r2, [sp, #12]
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d310      	bcc.n	8008c8a <qsort+0x5e>
 8008c68:	9b02      	ldr	r3, [sp, #8]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f040 811e 	bne.w	8008eac <qsort+0x280>
 8008c70:	b017      	add	sp, #92	; 0x5c
 8008c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c76:	f04f 0802 	mov.w	r8, #2
 8008c7a:	e7e6      	b.n	8008c4a <qsort+0x1e>
 8008c7c:	4643      	mov	r3, r8
 8008c7e:	4622      	mov	r2, r4
 8008c80:	4639      	mov	r1, r7
 8008c82:	4628      	mov	r0, r5
 8008c84:	f7ff ff9a 	bl	8008bbc <swapfunc>
 8008c88:	e00e      	b.n	8008ca8 <qsort+0x7c>
 8008c8a:	9d01      	ldr	r5, [sp, #4]
 8008c8c:	e00d      	b.n	8008caa <qsort+0x7e>
 8008c8e:	1b2f      	subs	r7, r5, r4
 8008c90:	4629      	mov	r1, r5
 8008c92:	4638      	mov	r0, r7
 8008c94:	47d0      	blx	sl
 8008c96:	2800      	cmp	r0, #0
 8008c98:	dd09      	ble.n	8008cae <qsort+0x82>
 8008c9a:	f1b8 0f00 	cmp.w	r8, #0
 8008c9e:	d1ed      	bne.n	8008c7c <qsort+0x50>
 8008ca0:	682b      	ldr	r3, [r5, #0]
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	602a      	str	r2, [r5, #0]
 8008ca6:	603b      	str	r3, [r7, #0]
 8008ca8:	463d      	mov	r5, r7
 8008caa:	42ae      	cmp	r6, r5
 8008cac:	d3ef      	bcc.n	8008c8e <qsort+0x62>
 8008cae:	9b01      	ldr	r3, [sp, #4]
 8008cb0:	4423      	add	r3, r4
 8008cb2:	9301      	str	r3, [sp, #4]
 8008cb4:	e7d4      	b.n	8008c60 <qsort+0x34>
 8008cb6:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8008cba:	1b3f      	subs	r7, r7, r4
 8008cbc:	2907      	cmp	r1, #7
 8008cbe:	fb04 6909 	mla	r9, r4, r9, r6
 8008cc2:	4437      	add	r7, r6
 8008cc4:	d021      	beq.n	8008d0a <qsort+0xde>
 8008cc6:	2928      	cmp	r1, #40	; 0x28
 8008cc8:	d944      	bls.n	8008d54 <qsort+0x128>
 8008cca:	08cd      	lsrs	r5, r1, #3
 8008ccc:	4365      	muls	r5, r4
 8008cce:	4653      	mov	r3, sl
 8008cd0:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8008cd4:	1971      	adds	r1, r6, r5
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	f7ff ff89 	bl	8008bee <med3.constprop.0>
 8008cdc:	4649      	mov	r1, r9
 8008cde:	eb09 0205 	add.w	r2, r9, r5
 8008ce2:	4653      	mov	r3, sl
 8008ce4:	4683      	mov	fp, r0
 8008ce6:	1b48      	subs	r0, r1, r5
 8008ce8:	f7ff ff81 	bl	8008bee <med3.constprop.0>
 8008cec:	463a      	mov	r2, r7
 8008cee:	4681      	mov	r9, r0
 8008cf0:	4653      	mov	r3, sl
 8008cf2:	1b79      	subs	r1, r7, r5
 8008cf4:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8008cf8:	f7ff ff79 	bl	8008bee <med3.constprop.0>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	4649      	mov	r1, r9
 8008d00:	4653      	mov	r3, sl
 8008d02:	4658      	mov	r0, fp
 8008d04:	f7ff ff73 	bl	8008bee <med3.constprop.0>
 8008d08:	4681      	mov	r9, r0
 8008d0a:	f1b8 0f00 	cmp.w	r8, #0
 8008d0e:	d124      	bne.n	8008d5a <qsort+0x12e>
 8008d10:	6833      	ldr	r3, [r6, #0]
 8008d12:	f8d9 2000 	ldr.w	r2, [r9]
 8008d16:	6032      	str	r2, [r6, #0]
 8008d18:	f8c9 3000 	str.w	r3, [r9]
 8008d1c:	eb06 0b04 	add.w	fp, r6, r4
 8008d20:	46b9      	mov	r9, r7
 8008d22:	465d      	mov	r5, fp
 8008d24:	2300      	movs	r3, #0
 8008d26:	45bb      	cmp	fp, r7
 8008d28:	d835      	bhi.n	8008d96 <qsort+0x16a>
 8008d2a:	4631      	mov	r1, r6
 8008d2c:	4658      	mov	r0, fp
 8008d2e:	9304      	str	r3, [sp, #16]
 8008d30:	47d0      	blx	sl
 8008d32:	2800      	cmp	r0, #0
 8008d34:	9b04      	ldr	r3, [sp, #16]
 8008d36:	dc3e      	bgt.n	8008db6 <qsort+0x18a>
 8008d38:	d10a      	bne.n	8008d50 <qsort+0x124>
 8008d3a:	f1b8 0f00 	cmp.w	r8, #0
 8008d3e:	d113      	bne.n	8008d68 <qsort+0x13c>
 8008d40:	682b      	ldr	r3, [r5, #0]
 8008d42:	f8db 2000 	ldr.w	r2, [fp]
 8008d46:	602a      	str	r2, [r5, #0]
 8008d48:	f8cb 3000 	str.w	r3, [fp]
 8008d4c:	4425      	add	r5, r4
 8008d4e:	2301      	movs	r3, #1
 8008d50:	44a3      	add	fp, r4
 8008d52:	e7e8      	b.n	8008d26 <qsort+0xfa>
 8008d54:	463a      	mov	r2, r7
 8008d56:	46b3      	mov	fp, r6
 8008d58:	e7d1      	b.n	8008cfe <qsort+0xd2>
 8008d5a:	4643      	mov	r3, r8
 8008d5c:	4622      	mov	r2, r4
 8008d5e:	4649      	mov	r1, r9
 8008d60:	4630      	mov	r0, r6
 8008d62:	f7ff ff2b 	bl	8008bbc <swapfunc>
 8008d66:	e7d9      	b.n	8008d1c <qsort+0xf0>
 8008d68:	4643      	mov	r3, r8
 8008d6a:	4622      	mov	r2, r4
 8008d6c:	4659      	mov	r1, fp
 8008d6e:	4628      	mov	r0, r5
 8008d70:	f7ff ff24 	bl	8008bbc <swapfunc>
 8008d74:	e7ea      	b.n	8008d4c <qsort+0x120>
 8008d76:	d10b      	bne.n	8008d90 <qsort+0x164>
 8008d78:	f1b8 0f00 	cmp.w	r8, #0
 8008d7c:	d114      	bne.n	8008da8 <qsort+0x17c>
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	f8d9 2000 	ldr.w	r2, [r9]
 8008d84:	603a      	str	r2, [r7, #0]
 8008d86:	f8c9 3000 	str.w	r3, [r9]
 8008d8a:	eba9 0904 	sub.w	r9, r9, r4
 8008d8e:	2301      	movs	r3, #1
 8008d90:	9f04      	ldr	r7, [sp, #16]
 8008d92:	45bb      	cmp	fp, r7
 8008d94:	d90f      	bls.n	8008db6 <qsort+0x18a>
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d143      	bne.n	8008e22 <qsort+0x1f6>
 8008d9a:	9b01      	ldr	r3, [sp, #4]
 8008d9c:	9a03      	ldr	r2, [sp, #12]
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	f4bf af62 	bcs.w	8008c68 <qsort+0x3c>
 8008da4:	9d01      	ldr	r5, [sp, #4]
 8008da6:	e036      	b.n	8008e16 <qsort+0x1ea>
 8008da8:	4643      	mov	r3, r8
 8008daa:	4622      	mov	r2, r4
 8008dac:	4649      	mov	r1, r9
 8008dae:	4638      	mov	r0, r7
 8008db0:	f7ff ff04 	bl	8008bbc <swapfunc>
 8008db4:	e7e9      	b.n	8008d8a <qsort+0x15e>
 8008db6:	4631      	mov	r1, r6
 8008db8:	4638      	mov	r0, r7
 8008dba:	9305      	str	r3, [sp, #20]
 8008dbc:	47d0      	blx	sl
 8008dbe:	1b3b      	subs	r3, r7, r4
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	9304      	str	r3, [sp, #16]
 8008dc4:	9b05      	ldr	r3, [sp, #20]
 8008dc6:	dad6      	bge.n	8008d76 <qsort+0x14a>
 8008dc8:	f1b8 0f00 	cmp.w	r8, #0
 8008dcc:	d006      	beq.n	8008ddc <qsort+0x1b0>
 8008dce:	4643      	mov	r3, r8
 8008dd0:	4622      	mov	r2, r4
 8008dd2:	4639      	mov	r1, r7
 8008dd4:	4658      	mov	r0, fp
 8008dd6:	f7ff fef1 	bl	8008bbc <swapfunc>
 8008dda:	e005      	b.n	8008de8 <qsort+0x1bc>
 8008ddc:	f8db 3000 	ldr.w	r3, [fp]
 8008de0:	683a      	ldr	r2, [r7, #0]
 8008de2:	f8cb 2000 	str.w	r2, [fp]
 8008de6:	603b      	str	r3, [r7, #0]
 8008de8:	9f04      	ldr	r7, [sp, #16]
 8008dea:	e7b0      	b.n	8008d4e <qsort+0x122>
 8008dec:	4643      	mov	r3, r8
 8008dee:	4622      	mov	r2, r4
 8008df0:	4639      	mov	r1, r7
 8008df2:	4628      	mov	r0, r5
 8008df4:	f7ff fee2 	bl	8008bbc <swapfunc>
 8008df8:	e00c      	b.n	8008e14 <qsort+0x1e8>
 8008dfa:	1b2f      	subs	r7, r5, r4
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	4638      	mov	r0, r7
 8008e00:	47d0      	blx	sl
 8008e02:	2800      	cmp	r0, #0
 8008e04:	dd09      	ble.n	8008e1a <qsort+0x1ee>
 8008e06:	f1b8 0f00 	cmp.w	r8, #0
 8008e0a:	d1ef      	bne.n	8008dec <qsort+0x1c0>
 8008e0c:	682b      	ldr	r3, [r5, #0]
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	602a      	str	r2, [r5, #0]
 8008e12:	603b      	str	r3, [r7, #0]
 8008e14:	463d      	mov	r5, r7
 8008e16:	42ae      	cmp	r6, r5
 8008e18:	d3ef      	bcc.n	8008dfa <qsort+0x1ce>
 8008e1a:	9b01      	ldr	r3, [sp, #4]
 8008e1c:	4423      	add	r3, r4
 8008e1e:	9301      	str	r3, [sp, #4]
 8008e20:	e7bb      	b.n	8008d9a <qsort+0x16e>
 8008e22:	ebab 0305 	sub.w	r3, fp, r5
 8008e26:	1baa      	subs	r2, r5, r6
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	bfa8      	it	ge
 8008e2c:	461a      	movge	r2, r3
 8008e2e:	9301      	str	r3, [sp, #4]
 8008e30:	b12a      	cbz	r2, 8008e3e <qsort+0x212>
 8008e32:	4643      	mov	r3, r8
 8008e34:	ebab 0102 	sub.w	r1, fp, r2
 8008e38:	4630      	mov	r0, r6
 8008e3a:	f7ff febf 	bl	8008bbc <swapfunc>
 8008e3e:	9b03      	ldr	r3, [sp, #12]
 8008e40:	eba3 0209 	sub.w	r2, r3, r9
 8008e44:	eba9 0707 	sub.w	r7, r9, r7
 8008e48:	1b12      	subs	r2, r2, r4
 8008e4a:	42ba      	cmp	r2, r7
 8008e4c:	bf28      	it	cs
 8008e4e:	463a      	movcs	r2, r7
 8008e50:	b12a      	cbz	r2, 8008e5e <qsort+0x232>
 8008e52:	9903      	ldr	r1, [sp, #12]
 8008e54:	4643      	mov	r3, r8
 8008e56:	1a89      	subs	r1, r1, r2
 8008e58:	4658      	mov	r0, fp
 8008e5a:	f7ff feaf 	bl	8008bbc <swapfunc>
 8008e5e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008e62:	9b03      	ldr	r3, [sp, #12]
 8008e64:	454f      	cmp	r7, r9
 8008e66:	eba3 0007 	sub.w	r0, r3, r7
 8008e6a:	d904      	bls.n	8008e76 <qsort+0x24a>
 8008e6c:	4633      	mov	r3, r6
 8008e6e:	46b9      	mov	r9, r7
 8008e70:	9f01      	ldr	r7, [sp, #4]
 8008e72:	4606      	mov	r6, r0
 8008e74:	4618      	mov	r0, r3
 8008e76:	42a7      	cmp	r7, r4
 8008e78:	d921      	bls.n	8008ebe <qsort+0x292>
 8008e7a:	fbb7 f1f4 	udiv	r1, r7, r4
 8008e7e:	9b02      	ldr	r3, [sp, #8]
 8008e80:	2b07      	cmp	r3, #7
 8008e82:	d80d      	bhi.n	8008ea0 <qsort+0x274>
 8008e84:	aa16      	add	r2, sp, #88	; 0x58
 8008e86:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e8a:	fbb9 f2f4 	udiv	r2, r9, r4
 8008e8e:	f843 6c40 	str.w	r6, [r3, #-64]
 8008e92:	f843 2c3c 	str.w	r2, [r3, #-60]
 8008e96:	9b02      	ldr	r3, [sp, #8]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	9302      	str	r3, [sp, #8]
 8008e9c:	4606      	mov	r6, r0
 8008e9e:	e6d6      	b.n	8008c4e <qsort+0x22>
 8008ea0:	4653      	mov	r3, sl
 8008ea2:	4622      	mov	r2, r4
 8008ea4:	f7ff fec2 	bl	8008c2c <qsort>
 8008ea8:	45a1      	cmp	r9, r4
 8008eaa:	d80b      	bhi.n	8008ec4 <qsort+0x298>
 8008eac:	9b02      	ldr	r3, [sp, #8]
 8008eae:	aa16      	add	r2, sp, #88	; 0x58
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	9302      	str	r3, [sp, #8]
 8008eb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008eb8:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8008ebc:	e7ee      	b.n	8008e9c <qsort+0x270>
 8008ebe:	45a1      	cmp	r9, r4
 8008ec0:	f67f aed2 	bls.w	8008c68 <qsort+0x3c>
 8008ec4:	fbb9 f1f4 	udiv	r1, r9, r4
 8008ec8:	4630      	mov	r0, r6
 8008eca:	e7e7      	b.n	8008e9c <qsort+0x270>

08008ecc <__cvt>:
 8008ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed0:	ec55 4b10 	vmov	r4, r5, d0
 8008ed4:	2d00      	cmp	r5, #0
 8008ed6:	460e      	mov	r6, r1
 8008ed8:	4619      	mov	r1, r3
 8008eda:	462b      	mov	r3, r5
 8008edc:	bfbb      	ittet	lt
 8008ede:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008ee2:	461d      	movlt	r5, r3
 8008ee4:	2300      	movge	r3, #0
 8008ee6:	232d      	movlt	r3, #45	; 0x2d
 8008ee8:	700b      	strb	r3, [r1, #0]
 8008eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ef0:	4691      	mov	r9, r2
 8008ef2:	f023 0820 	bic.w	r8, r3, #32
 8008ef6:	bfbc      	itt	lt
 8008ef8:	4622      	movlt	r2, r4
 8008efa:	4614      	movlt	r4, r2
 8008efc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f00:	d005      	beq.n	8008f0e <__cvt+0x42>
 8008f02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f06:	d100      	bne.n	8008f0a <__cvt+0x3e>
 8008f08:	3601      	adds	r6, #1
 8008f0a:	2102      	movs	r1, #2
 8008f0c:	e000      	b.n	8008f10 <__cvt+0x44>
 8008f0e:	2103      	movs	r1, #3
 8008f10:	ab03      	add	r3, sp, #12
 8008f12:	9301      	str	r3, [sp, #4]
 8008f14:	ab02      	add	r3, sp, #8
 8008f16:	9300      	str	r3, [sp, #0]
 8008f18:	ec45 4b10 	vmov	d0, r4, r5
 8008f1c:	4653      	mov	r3, sl
 8008f1e:	4632      	mov	r2, r6
 8008f20:	f000 ff2a 	bl	8009d78 <_dtoa_r>
 8008f24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f28:	4607      	mov	r7, r0
 8008f2a:	d102      	bne.n	8008f32 <__cvt+0x66>
 8008f2c:	f019 0f01 	tst.w	r9, #1
 8008f30:	d022      	beq.n	8008f78 <__cvt+0xac>
 8008f32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f36:	eb07 0906 	add.w	r9, r7, r6
 8008f3a:	d110      	bne.n	8008f5e <__cvt+0x92>
 8008f3c:	783b      	ldrb	r3, [r7, #0]
 8008f3e:	2b30      	cmp	r3, #48	; 0x30
 8008f40:	d10a      	bne.n	8008f58 <__cvt+0x8c>
 8008f42:	2200      	movs	r2, #0
 8008f44:	2300      	movs	r3, #0
 8008f46:	4620      	mov	r0, r4
 8008f48:	4629      	mov	r1, r5
 8008f4a:	f7f7 fddd 	bl	8000b08 <__aeabi_dcmpeq>
 8008f4e:	b918      	cbnz	r0, 8008f58 <__cvt+0x8c>
 8008f50:	f1c6 0601 	rsb	r6, r6, #1
 8008f54:	f8ca 6000 	str.w	r6, [sl]
 8008f58:	f8da 3000 	ldr.w	r3, [sl]
 8008f5c:	4499      	add	r9, r3
 8008f5e:	2200      	movs	r2, #0
 8008f60:	2300      	movs	r3, #0
 8008f62:	4620      	mov	r0, r4
 8008f64:	4629      	mov	r1, r5
 8008f66:	f7f7 fdcf 	bl	8000b08 <__aeabi_dcmpeq>
 8008f6a:	b108      	cbz	r0, 8008f70 <__cvt+0xa4>
 8008f6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f70:	2230      	movs	r2, #48	; 0x30
 8008f72:	9b03      	ldr	r3, [sp, #12]
 8008f74:	454b      	cmp	r3, r9
 8008f76:	d307      	bcc.n	8008f88 <__cvt+0xbc>
 8008f78:	9b03      	ldr	r3, [sp, #12]
 8008f7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f7c:	1bdb      	subs	r3, r3, r7
 8008f7e:	4638      	mov	r0, r7
 8008f80:	6013      	str	r3, [r2, #0]
 8008f82:	b004      	add	sp, #16
 8008f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f88:	1c59      	adds	r1, r3, #1
 8008f8a:	9103      	str	r1, [sp, #12]
 8008f8c:	701a      	strb	r2, [r3, #0]
 8008f8e:	e7f0      	b.n	8008f72 <__cvt+0xa6>

08008f90 <__exponent>:
 8008f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f92:	4603      	mov	r3, r0
 8008f94:	2900      	cmp	r1, #0
 8008f96:	bfb8      	it	lt
 8008f98:	4249      	neglt	r1, r1
 8008f9a:	f803 2b02 	strb.w	r2, [r3], #2
 8008f9e:	bfb4      	ite	lt
 8008fa0:	222d      	movlt	r2, #45	; 0x2d
 8008fa2:	222b      	movge	r2, #43	; 0x2b
 8008fa4:	2909      	cmp	r1, #9
 8008fa6:	7042      	strb	r2, [r0, #1]
 8008fa8:	dd2a      	ble.n	8009000 <__exponent+0x70>
 8008faa:	f10d 0207 	add.w	r2, sp, #7
 8008fae:	4617      	mov	r7, r2
 8008fb0:	260a      	movs	r6, #10
 8008fb2:	4694      	mov	ip, r2
 8008fb4:	fb91 f5f6 	sdiv	r5, r1, r6
 8008fb8:	fb06 1415 	mls	r4, r6, r5, r1
 8008fbc:	3430      	adds	r4, #48	; 0x30
 8008fbe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008fc2:	460c      	mov	r4, r1
 8008fc4:	2c63      	cmp	r4, #99	; 0x63
 8008fc6:	f102 32ff 	add.w	r2, r2, #4294967295
 8008fca:	4629      	mov	r1, r5
 8008fcc:	dcf1      	bgt.n	8008fb2 <__exponent+0x22>
 8008fce:	3130      	adds	r1, #48	; 0x30
 8008fd0:	f1ac 0402 	sub.w	r4, ip, #2
 8008fd4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008fd8:	1c41      	adds	r1, r0, #1
 8008fda:	4622      	mov	r2, r4
 8008fdc:	42ba      	cmp	r2, r7
 8008fde:	d30a      	bcc.n	8008ff6 <__exponent+0x66>
 8008fe0:	f10d 0209 	add.w	r2, sp, #9
 8008fe4:	eba2 020c 	sub.w	r2, r2, ip
 8008fe8:	42bc      	cmp	r4, r7
 8008fea:	bf88      	it	hi
 8008fec:	2200      	movhi	r2, #0
 8008fee:	4413      	add	r3, r2
 8008ff0:	1a18      	subs	r0, r3, r0
 8008ff2:	b003      	add	sp, #12
 8008ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ff6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008ffa:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008ffe:	e7ed      	b.n	8008fdc <__exponent+0x4c>
 8009000:	2330      	movs	r3, #48	; 0x30
 8009002:	3130      	adds	r1, #48	; 0x30
 8009004:	7083      	strb	r3, [r0, #2]
 8009006:	70c1      	strb	r1, [r0, #3]
 8009008:	1d03      	adds	r3, r0, #4
 800900a:	e7f1      	b.n	8008ff0 <__exponent+0x60>

0800900c <_printf_float>:
 800900c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009010:	ed2d 8b02 	vpush	{d8}
 8009014:	b08d      	sub	sp, #52	; 0x34
 8009016:	460c      	mov	r4, r1
 8009018:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800901c:	4616      	mov	r6, r2
 800901e:	461f      	mov	r7, r3
 8009020:	4605      	mov	r5, r0
 8009022:	f000 fd67 	bl	8009af4 <_localeconv_r>
 8009026:	f8d0 a000 	ldr.w	sl, [r0]
 800902a:	4650      	mov	r0, sl
 800902c:	f7f7 f940 	bl	80002b0 <strlen>
 8009030:	2300      	movs	r3, #0
 8009032:	930a      	str	r3, [sp, #40]	; 0x28
 8009034:	6823      	ldr	r3, [r4, #0]
 8009036:	9305      	str	r3, [sp, #20]
 8009038:	f8d8 3000 	ldr.w	r3, [r8]
 800903c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009040:	3307      	adds	r3, #7
 8009042:	f023 0307 	bic.w	r3, r3, #7
 8009046:	f103 0208 	add.w	r2, r3, #8
 800904a:	f8c8 2000 	str.w	r2, [r8]
 800904e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009052:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009056:	9307      	str	r3, [sp, #28]
 8009058:	f8cd 8018 	str.w	r8, [sp, #24]
 800905c:	ee08 0a10 	vmov	s16, r0
 8009060:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009064:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009068:	4b9e      	ldr	r3, [pc, #632]	; (80092e4 <_printf_float+0x2d8>)
 800906a:	f04f 32ff 	mov.w	r2, #4294967295
 800906e:	f7f7 fd7d 	bl	8000b6c <__aeabi_dcmpun>
 8009072:	bb88      	cbnz	r0, 80090d8 <_printf_float+0xcc>
 8009074:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009078:	4b9a      	ldr	r3, [pc, #616]	; (80092e4 <_printf_float+0x2d8>)
 800907a:	f04f 32ff 	mov.w	r2, #4294967295
 800907e:	f7f7 fd57 	bl	8000b30 <__aeabi_dcmple>
 8009082:	bb48      	cbnz	r0, 80090d8 <_printf_float+0xcc>
 8009084:	2200      	movs	r2, #0
 8009086:	2300      	movs	r3, #0
 8009088:	4640      	mov	r0, r8
 800908a:	4649      	mov	r1, r9
 800908c:	f7f7 fd46 	bl	8000b1c <__aeabi_dcmplt>
 8009090:	b110      	cbz	r0, 8009098 <_printf_float+0x8c>
 8009092:	232d      	movs	r3, #45	; 0x2d
 8009094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009098:	4a93      	ldr	r2, [pc, #588]	; (80092e8 <_printf_float+0x2dc>)
 800909a:	4b94      	ldr	r3, [pc, #592]	; (80092ec <_printf_float+0x2e0>)
 800909c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80090a0:	bf94      	ite	ls
 80090a2:	4690      	movls	r8, r2
 80090a4:	4698      	movhi	r8, r3
 80090a6:	2303      	movs	r3, #3
 80090a8:	6123      	str	r3, [r4, #16]
 80090aa:	9b05      	ldr	r3, [sp, #20]
 80090ac:	f023 0304 	bic.w	r3, r3, #4
 80090b0:	6023      	str	r3, [r4, #0]
 80090b2:	f04f 0900 	mov.w	r9, #0
 80090b6:	9700      	str	r7, [sp, #0]
 80090b8:	4633      	mov	r3, r6
 80090ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80090bc:	4621      	mov	r1, r4
 80090be:	4628      	mov	r0, r5
 80090c0:	f000 f9da 	bl	8009478 <_printf_common>
 80090c4:	3001      	adds	r0, #1
 80090c6:	f040 8090 	bne.w	80091ea <_printf_float+0x1de>
 80090ca:	f04f 30ff 	mov.w	r0, #4294967295
 80090ce:	b00d      	add	sp, #52	; 0x34
 80090d0:	ecbd 8b02 	vpop	{d8}
 80090d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d8:	4642      	mov	r2, r8
 80090da:	464b      	mov	r3, r9
 80090dc:	4640      	mov	r0, r8
 80090de:	4649      	mov	r1, r9
 80090e0:	f7f7 fd44 	bl	8000b6c <__aeabi_dcmpun>
 80090e4:	b140      	cbz	r0, 80090f8 <_printf_float+0xec>
 80090e6:	464b      	mov	r3, r9
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	bfbc      	itt	lt
 80090ec:	232d      	movlt	r3, #45	; 0x2d
 80090ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80090f2:	4a7f      	ldr	r2, [pc, #508]	; (80092f0 <_printf_float+0x2e4>)
 80090f4:	4b7f      	ldr	r3, [pc, #508]	; (80092f4 <_printf_float+0x2e8>)
 80090f6:	e7d1      	b.n	800909c <_printf_float+0x90>
 80090f8:	6863      	ldr	r3, [r4, #4]
 80090fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80090fe:	9206      	str	r2, [sp, #24]
 8009100:	1c5a      	adds	r2, r3, #1
 8009102:	d13f      	bne.n	8009184 <_printf_float+0x178>
 8009104:	2306      	movs	r3, #6
 8009106:	6063      	str	r3, [r4, #4]
 8009108:	9b05      	ldr	r3, [sp, #20]
 800910a:	6861      	ldr	r1, [r4, #4]
 800910c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009110:	2300      	movs	r3, #0
 8009112:	9303      	str	r3, [sp, #12]
 8009114:	ab0a      	add	r3, sp, #40	; 0x28
 8009116:	e9cd b301 	strd	fp, r3, [sp, #4]
 800911a:	ab09      	add	r3, sp, #36	; 0x24
 800911c:	ec49 8b10 	vmov	d0, r8, r9
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	6022      	str	r2, [r4, #0]
 8009124:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009128:	4628      	mov	r0, r5
 800912a:	f7ff fecf 	bl	8008ecc <__cvt>
 800912e:	9b06      	ldr	r3, [sp, #24]
 8009130:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009132:	2b47      	cmp	r3, #71	; 0x47
 8009134:	4680      	mov	r8, r0
 8009136:	d108      	bne.n	800914a <_printf_float+0x13e>
 8009138:	1cc8      	adds	r0, r1, #3
 800913a:	db02      	blt.n	8009142 <_printf_float+0x136>
 800913c:	6863      	ldr	r3, [r4, #4]
 800913e:	4299      	cmp	r1, r3
 8009140:	dd41      	ble.n	80091c6 <_printf_float+0x1ba>
 8009142:	f1ab 0302 	sub.w	r3, fp, #2
 8009146:	fa5f fb83 	uxtb.w	fp, r3
 800914a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800914e:	d820      	bhi.n	8009192 <_printf_float+0x186>
 8009150:	3901      	subs	r1, #1
 8009152:	465a      	mov	r2, fp
 8009154:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009158:	9109      	str	r1, [sp, #36]	; 0x24
 800915a:	f7ff ff19 	bl	8008f90 <__exponent>
 800915e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009160:	1813      	adds	r3, r2, r0
 8009162:	2a01      	cmp	r2, #1
 8009164:	4681      	mov	r9, r0
 8009166:	6123      	str	r3, [r4, #16]
 8009168:	dc02      	bgt.n	8009170 <_printf_float+0x164>
 800916a:	6822      	ldr	r2, [r4, #0]
 800916c:	07d2      	lsls	r2, r2, #31
 800916e:	d501      	bpl.n	8009174 <_printf_float+0x168>
 8009170:	3301      	adds	r3, #1
 8009172:	6123      	str	r3, [r4, #16]
 8009174:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009178:	2b00      	cmp	r3, #0
 800917a:	d09c      	beq.n	80090b6 <_printf_float+0xaa>
 800917c:	232d      	movs	r3, #45	; 0x2d
 800917e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009182:	e798      	b.n	80090b6 <_printf_float+0xaa>
 8009184:	9a06      	ldr	r2, [sp, #24]
 8009186:	2a47      	cmp	r2, #71	; 0x47
 8009188:	d1be      	bne.n	8009108 <_printf_float+0xfc>
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1bc      	bne.n	8009108 <_printf_float+0xfc>
 800918e:	2301      	movs	r3, #1
 8009190:	e7b9      	b.n	8009106 <_printf_float+0xfa>
 8009192:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009196:	d118      	bne.n	80091ca <_printf_float+0x1be>
 8009198:	2900      	cmp	r1, #0
 800919a:	6863      	ldr	r3, [r4, #4]
 800919c:	dd0b      	ble.n	80091b6 <_printf_float+0x1aa>
 800919e:	6121      	str	r1, [r4, #16]
 80091a0:	b913      	cbnz	r3, 80091a8 <_printf_float+0x19c>
 80091a2:	6822      	ldr	r2, [r4, #0]
 80091a4:	07d0      	lsls	r0, r2, #31
 80091a6:	d502      	bpl.n	80091ae <_printf_float+0x1a2>
 80091a8:	3301      	adds	r3, #1
 80091aa:	440b      	add	r3, r1
 80091ac:	6123      	str	r3, [r4, #16]
 80091ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80091b0:	f04f 0900 	mov.w	r9, #0
 80091b4:	e7de      	b.n	8009174 <_printf_float+0x168>
 80091b6:	b913      	cbnz	r3, 80091be <_printf_float+0x1b2>
 80091b8:	6822      	ldr	r2, [r4, #0]
 80091ba:	07d2      	lsls	r2, r2, #31
 80091bc:	d501      	bpl.n	80091c2 <_printf_float+0x1b6>
 80091be:	3302      	adds	r3, #2
 80091c0:	e7f4      	b.n	80091ac <_printf_float+0x1a0>
 80091c2:	2301      	movs	r3, #1
 80091c4:	e7f2      	b.n	80091ac <_printf_float+0x1a0>
 80091c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80091ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091cc:	4299      	cmp	r1, r3
 80091ce:	db05      	blt.n	80091dc <_printf_float+0x1d0>
 80091d0:	6823      	ldr	r3, [r4, #0]
 80091d2:	6121      	str	r1, [r4, #16]
 80091d4:	07d8      	lsls	r0, r3, #31
 80091d6:	d5ea      	bpl.n	80091ae <_printf_float+0x1a2>
 80091d8:	1c4b      	adds	r3, r1, #1
 80091da:	e7e7      	b.n	80091ac <_printf_float+0x1a0>
 80091dc:	2900      	cmp	r1, #0
 80091de:	bfd4      	ite	le
 80091e0:	f1c1 0202 	rsble	r2, r1, #2
 80091e4:	2201      	movgt	r2, #1
 80091e6:	4413      	add	r3, r2
 80091e8:	e7e0      	b.n	80091ac <_printf_float+0x1a0>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	055a      	lsls	r2, r3, #21
 80091ee:	d407      	bmi.n	8009200 <_printf_float+0x1f4>
 80091f0:	6923      	ldr	r3, [r4, #16]
 80091f2:	4642      	mov	r2, r8
 80091f4:	4631      	mov	r1, r6
 80091f6:	4628      	mov	r0, r5
 80091f8:	47b8      	blx	r7
 80091fa:	3001      	adds	r0, #1
 80091fc:	d12c      	bne.n	8009258 <_printf_float+0x24c>
 80091fe:	e764      	b.n	80090ca <_printf_float+0xbe>
 8009200:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009204:	f240 80e0 	bls.w	80093c8 <_printf_float+0x3bc>
 8009208:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800920c:	2200      	movs	r2, #0
 800920e:	2300      	movs	r3, #0
 8009210:	f7f7 fc7a 	bl	8000b08 <__aeabi_dcmpeq>
 8009214:	2800      	cmp	r0, #0
 8009216:	d034      	beq.n	8009282 <_printf_float+0x276>
 8009218:	4a37      	ldr	r2, [pc, #220]	; (80092f8 <_printf_float+0x2ec>)
 800921a:	2301      	movs	r3, #1
 800921c:	4631      	mov	r1, r6
 800921e:	4628      	mov	r0, r5
 8009220:	47b8      	blx	r7
 8009222:	3001      	adds	r0, #1
 8009224:	f43f af51 	beq.w	80090ca <_printf_float+0xbe>
 8009228:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800922c:	429a      	cmp	r2, r3
 800922e:	db02      	blt.n	8009236 <_printf_float+0x22a>
 8009230:	6823      	ldr	r3, [r4, #0]
 8009232:	07d8      	lsls	r0, r3, #31
 8009234:	d510      	bpl.n	8009258 <_printf_float+0x24c>
 8009236:	ee18 3a10 	vmov	r3, s16
 800923a:	4652      	mov	r2, sl
 800923c:	4631      	mov	r1, r6
 800923e:	4628      	mov	r0, r5
 8009240:	47b8      	blx	r7
 8009242:	3001      	adds	r0, #1
 8009244:	f43f af41 	beq.w	80090ca <_printf_float+0xbe>
 8009248:	f04f 0800 	mov.w	r8, #0
 800924c:	f104 091a 	add.w	r9, r4, #26
 8009250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009252:	3b01      	subs	r3, #1
 8009254:	4543      	cmp	r3, r8
 8009256:	dc09      	bgt.n	800926c <_printf_float+0x260>
 8009258:	6823      	ldr	r3, [r4, #0]
 800925a:	079b      	lsls	r3, r3, #30
 800925c:	f100 8107 	bmi.w	800946e <_printf_float+0x462>
 8009260:	68e0      	ldr	r0, [r4, #12]
 8009262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009264:	4298      	cmp	r0, r3
 8009266:	bfb8      	it	lt
 8009268:	4618      	movlt	r0, r3
 800926a:	e730      	b.n	80090ce <_printf_float+0xc2>
 800926c:	2301      	movs	r3, #1
 800926e:	464a      	mov	r2, r9
 8009270:	4631      	mov	r1, r6
 8009272:	4628      	mov	r0, r5
 8009274:	47b8      	blx	r7
 8009276:	3001      	adds	r0, #1
 8009278:	f43f af27 	beq.w	80090ca <_printf_float+0xbe>
 800927c:	f108 0801 	add.w	r8, r8, #1
 8009280:	e7e6      	b.n	8009250 <_printf_float+0x244>
 8009282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009284:	2b00      	cmp	r3, #0
 8009286:	dc39      	bgt.n	80092fc <_printf_float+0x2f0>
 8009288:	4a1b      	ldr	r2, [pc, #108]	; (80092f8 <_printf_float+0x2ec>)
 800928a:	2301      	movs	r3, #1
 800928c:	4631      	mov	r1, r6
 800928e:	4628      	mov	r0, r5
 8009290:	47b8      	blx	r7
 8009292:	3001      	adds	r0, #1
 8009294:	f43f af19 	beq.w	80090ca <_printf_float+0xbe>
 8009298:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800929c:	4313      	orrs	r3, r2
 800929e:	d102      	bne.n	80092a6 <_printf_float+0x29a>
 80092a0:	6823      	ldr	r3, [r4, #0]
 80092a2:	07d9      	lsls	r1, r3, #31
 80092a4:	d5d8      	bpl.n	8009258 <_printf_float+0x24c>
 80092a6:	ee18 3a10 	vmov	r3, s16
 80092aa:	4652      	mov	r2, sl
 80092ac:	4631      	mov	r1, r6
 80092ae:	4628      	mov	r0, r5
 80092b0:	47b8      	blx	r7
 80092b2:	3001      	adds	r0, #1
 80092b4:	f43f af09 	beq.w	80090ca <_printf_float+0xbe>
 80092b8:	f04f 0900 	mov.w	r9, #0
 80092bc:	f104 0a1a 	add.w	sl, r4, #26
 80092c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092c2:	425b      	negs	r3, r3
 80092c4:	454b      	cmp	r3, r9
 80092c6:	dc01      	bgt.n	80092cc <_printf_float+0x2c0>
 80092c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092ca:	e792      	b.n	80091f2 <_printf_float+0x1e6>
 80092cc:	2301      	movs	r3, #1
 80092ce:	4652      	mov	r2, sl
 80092d0:	4631      	mov	r1, r6
 80092d2:	4628      	mov	r0, r5
 80092d4:	47b8      	blx	r7
 80092d6:	3001      	adds	r0, #1
 80092d8:	f43f aef7 	beq.w	80090ca <_printf_float+0xbe>
 80092dc:	f109 0901 	add.w	r9, r9, #1
 80092e0:	e7ee      	b.n	80092c0 <_printf_float+0x2b4>
 80092e2:	bf00      	nop
 80092e4:	7fefffff 	.word	0x7fefffff
 80092e8:	0800c929 	.word	0x0800c929
 80092ec:	0800c92d 	.word	0x0800c92d
 80092f0:	0800c931 	.word	0x0800c931
 80092f4:	0800c935 	.word	0x0800c935
 80092f8:	0800c939 	.word	0x0800c939
 80092fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009300:	429a      	cmp	r2, r3
 8009302:	bfa8      	it	ge
 8009304:	461a      	movge	r2, r3
 8009306:	2a00      	cmp	r2, #0
 8009308:	4691      	mov	r9, r2
 800930a:	dc37      	bgt.n	800937c <_printf_float+0x370>
 800930c:	f04f 0b00 	mov.w	fp, #0
 8009310:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009314:	f104 021a 	add.w	r2, r4, #26
 8009318:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800931a:	9305      	str	r3, [sp, #20]
 800931c:	eba3 0309 	sub.w	r3, r3, r9
 8009320:	455b      	cmp	r3, fp
 8009322:	dc33      	bgt.n	800938c <_printf_float+0x380>
 8009324:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009328:	429a      	cmp	r2, r3
 800932a:	db3b      	blt.n	80093a4 <_printf_float+0x398>
 800932c:	6823      	ldr	r3, [r4, #0]
 800932e:	07da      	lsls	r2, r3, #31
 8009330:	d438      	bmi.n	80093a4 <_printf_float+0x398>
 8009332:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009336:	eba2 0903 	sub.w	r9, r2, r3
 800933a:	9b05      	ldr	r3, [sp, #20]
 800933c:	1ad2      	subs	r2, r2, r3
 800933e:	4591      	cmp	r9, r2
 8009340:	bfa8      	it	ge
 8009342:	4691      	movge	r9, r2
 8009344:	f1b9 0f00 	cmp.w	r9, #0
 8009348:	dc35      	bgt.n	80093b6 <_printf_float+0x3aa>
 800934a:	f04f 0800 	mov.w	r8, #0
 800934e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009352:	f104 0a1a 	add.w	sl, r4, #26
 8009356:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800935a:	1a9b      	subs	r3, r3, r2
 800935c:	eba3 0309 	sub.w	r3, r3, r9
 8009360:	4543      	cmp	r3, r8
 8009362:	f77f af79 	ble.w	8009258 <_printf_float+0x24c>
 8009366:	2301      	movs	r3, #1
 8009368:	4652      	mov	r2, sl
 800936a:	4631      	mov	r1, r6
 800936c:	4628      	mov	r0, r5
 800936e:	47b8      	blx	r7
 8009370:	3001      	adds	r0, #1
 8009372:	f43f aeaa 	beq.w	80090ca <_printf_float+0xbe>
 8009376:	f108 0801 	add.w	r8, r8, #1
 800937a:	e7ec      	b.n	8009356 <_printf_float+0x34a>
 800937c:	4613      	mov	r3, r2
 800937e:	4631      	mov	r1, r6
 8009380:	4642      	mov	r2, r8
 8009382:	4628      	mov	r0, r5
 8009384:	47b8      	blx	r7
 8009386:	3001      	adds	r0, #1
 8009388:	d1c0      	bne.n	800930c <_printf_float+0x300>
 800938a:	e69e      	b.n	80090ca <_printf_float+0xbe>
 800938c:	2301      	movs	r3, #1
 800938e:	4631      	mov	r1, r6
 8009390:	4628      	mov	r0, r5
 8009392:	9205      	str	r2, [sp, #20]
 8009394:	47b8      	blx	r7
 8009396:	3001      	adds	r0, #1
 8009398:	f43f ae97 	beq.w	80090ca <_printf_float+0xbe>
 800939c:	9a05      	ldr	r2, [sp, #20]
 800939e:	f10b 0b01 	add.w	fp, fp, #1
 80093a2:	e7b9      	b.n	8009318 <_printf_float+0x30c>
 80093a4:	ee18 3a10 	vmov	r3, s16
 80093a8:	4652      	mov	r2, sl
 80093aa:	4631      	mov	r1, r6
 80093ac:	4628      	mov	r0, r5
 80093ae:	47b8      	blx	r7
 80093b0:	3001      	adds	r0, #1
 80093b2:	d1be      	bne.n	8009332 <_printf_float+0x326>
 80093b4:	e689      	b.n	80090ca <_printf_float+0xbe>
 80093b6:	9a05      	ldr	r2, [sp, #20]
 80093b8:	464b      	mov	r3, r9
 80093ba:	4442      	add	r2, r8
 80093bc:	4631      	mov	r1, r6
 80093be:	4628      	mov	r0, r5
 80093c0:	47b8      	blx	r7
 80093c2:	3001      	adds	r0, #1
 80093c4:	d1c1      	bne.n	800934a <_printf_float+0x33e>
 80093c6:	e680      	b.n	80090ca <_printf_float+0xbe>
 80093c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093ca:	2a01      	cmp	r2, #1
 80093cc:	dc01      	bgt.n	80093d2 <_printf_float+0x3c6>
 80093ce:	07db      	lsls	r3, r3, #31
 80093d0:	d53a      	bpl.n	8009448 <_printf_float+0x43c>
 80093d2:	2301      	movs	r3, #1
 80093d4:	4642      	mov	r2, r8
 80093d6:	4631      	mov	r1, r6
 80093d8:	4628      	mov	r0, r5
 80093da:	47b8      	blx	r7
 80093dc:	3001      	adds	r0, #1
 80093de:	f43f ae74 	beq.w	80090ca <_printf_float+0xbe>
 80093e2:	ee18 3a10 	vmov	r3, s16
 80093e6:	4652      	mov	r2, sl
 80093e8:	4631      	mov	r1, r6
 80093ea:	4628      	mov	r0, r5
 80093ec:	47b8      	blx	r7
 80093ee:	3001      	adds	r0, #1
 80093f0:	f43f ae6b 	beq.w	80090ca <_printf_float+0xbe>
 80093f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093f8:	2200      	movs	r2, #0
 80093fa:	2300      	movs	r3, #0
 80093fc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009400:	f7f7 fb82 	bl	8000b08 <__aeabi_dcmpeq>
 8009404:	b9d8      	cbnz	r0, 800943e <_printf_float+0x432>
 8009406:	f10a 33ff 	add.w	r3, sl, #4294967295
 800940a:	f108 0201 	add.w	r2, r8, #1
 800940e:	4631      	mov	r1, r6
 8009410:	4628      	mov	r0, r5
 8009412:	47b8      	blx	r7
 8009414:	3001      	adds	r0, #1
 8009416:	d10e      	bne.n	8009436 <_printf_float+0x42a>
 8009418:	e657      	b.n	80090ca <_printf_float+0xbe>
 800941a:	2301      	movs	r3, #1
 800941c:	4652      	mov	r2, sl
 800941e:	4631      	mov	r1, r6
 8009420:	4628      	mov	r0, r5
 8009422:	47b8      	blx	r7
 8009424:	3001      	adds	r0, #1
 8009426:	f43f ae50 	beq.w	80090ca <_printf_float+0xbe>
 800942a:	f108 0801 	add.w	r8, r8, #1
 800942e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009430:	3b01      	subs	r3, #1
 8009432:	4543      	cmp	r3, r8
 8009434:	dcf1      	bgt.n	800941a <_printf_float+0x40e>
 8009436:	464b      	mov	r3, r9
 8009438:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800943c:	e6da      	b.n	80091f4 <_printf_float+0x1e8>
 800943e:	f04f 0800 	mov.w	r8, #0
 8009442:	f104 0a1a 	add.w	sl, r4, #26
 8009446:	e7f2      	b.n	800942e <_printf_float+0x422>
 8009448:	2301      	movs	r3, #1
 800944a:	4642      	mov	r2, r8
 800944c:	e7df      	b.n	800940e <_printf_float+0x402>
 800944e:	2301      	movs	r3, #1
 8009450:	464a      	mov	r2, r9
 8009452:	4631      	mov	r1, r6
 8009454:	4628      	mov	r0, r5
 8009456:	47b8      	blx	r7
 8009458:	3001      	adds	r0, #1
 800945a:	f43f ae36 	beq.w	80090ca <_printf_float+0xbe>
 800945e:	f108 0801 	add.w	r8, r8, #1
 8009462:	68e3      	ldr	r3, [r4, #12]
 8009464:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009466:	1a5b      	subs	r3, r3, r1
 8009468:	4543      	cmp	r3, r8
 800946a:	dcf0      	bgt.n	800944e <_printf_float+0x442>
 800946c:	e6f8      	b.n	8009260 <_printf_float+0x254>
 800946e:	f04f 0800 	mov.w	r8, #0
 8009472:	f104 0919 	add.w	r9, r4, #25
 8009476:	e7f4      	b.n	8009462 <_printf_float+0x456>

08009478 <_printf_common>:
 8009478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800947c:	4616      	mov	r6, r2
 800947e:	4699      	mov	r9, r3
 8009480:	688a      	ldr	r2, [r1, #8]
 8009482:	690b      	ldr	r3, [r1, #16]
 8009484:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009488:	4293      	cmp	r3, r2
 800948a:	bfb8      	it	lt
 800948c:	4613      	movlt	r3, r2
 800948e:	6033      	str	r3, [r6, #0]
 8009490:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009494:	4607      	mov	r7, r0
 8009496:	460c      	mov	r4, r1
 8009498:	b10a      	cbz	r2, 800949e <_printf_common+0x26>
 800949a:	3301      	adds	r3, #1
 800949c:	6033      	str	r3, [r6, #0]
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	0699      	lsls	r1, r3, #26
 80094a2:	bf42      	ittt	mi
 80094a4:	6833      	ldrmi	r3, [r6, #0]
 80094a6:	3302      	addmi	r3, #2
 80094a8:	6033      	strmi	r3, [r6, #0]
 80094aa:	6825      	ldr	r5, [r4, #0]
 80094ac:	f015 0506 	ands.w	r5, r5, #6
 80094b0:	d106      	bne.n	80094c0 <_printf_common+0x48>
 80094b2:	f104 0a19 	add.w	sl, r4, #25
 80094b6:	68e3      	ldr	r3, [r4, #12]
 80094b8:	6832      	ldr	r2, [r6, #0]
 80094ba:	1a9b      	subs	r3, r3, r2
 80094bc:	42ab      	cmp	r3, r5
 80094be:	dc26      	bgt.n	800950e <_printf_common+0x96>
 80094c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094c4:	1e13      	subs	r3, r2, #0
 80094c6:	6822      	ldr	r2, [r4, #0]
 80094c8:	bf18      	it	ne
 80094ca:	2301      	movne	r3, #1
 80094cc:	0692      	lsls	r2, r2, #26
 80094ce:	d42b      	bmi.n	8009528 <_printf_common+0xb0>
 80094d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094d4:	4649      	mov	r1, r9
 80094d6:	4638      	mov	r0, r7
 80094d8:	47c0      	blx	r8
 80094da:	3001      	adds	r0, #1
 80094dc:	d01e      	beq.n	800951c <_printf_common+0xa4>
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	6922      	ldr	r2, [r4, #16]
 80094e2:	f003 0306 	and.w	r3, r3, #6
 80094e6:	2b04      	cmp	r3, #4
 80094e8:	bf02      	ittt	eq
 80094ea:	68e5      	ldreq	r5, [r4, #12]
 80094ec:	6833      	ldreq	r3, [r6, #0]
 80094ee:	1aed      	subeq	r5, r5, r3
 80094f0:	68a3      	ldr	r3, [r4, #8]
 80094f2:	bf0c      	ite	eq
 80094f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094f8:	2500      	movne	r5, #0
 80094fa:	4293      	cmp	r3, r2
 80094fc:	bfc4      	itt	gt
 80094fe:	1a9b      	subgt	r3, r3, r2
 8009500:	18ed      	addgt	r5, r5, r3
 8009502:	2600      	movs	r6, #0
 8009504:	341a      	adds	r4, #26
 8009506:	42b5      	cmp	r5, r6
 8009508:	d11a      	bne.n	8009540 <_printf_common+0xc8>
 800950a:	2000      	movs	r0, #0
 800950c:	e008      	b.n	8009520 <_printf_common+0xa8>
 800950e:	2301      	movs	r3, #1
 8009510:	4652      	mov	r2, sl
 8009512:	4649      	mov	r1, r9
 8009514:	4638      	mov	r0, r7
 8009516:	47c0      	blx	r8
 8009518:	3001      	adds	r0, #1
 800951a:	d103      	bne.n	8009524 <_printf_common+0xac>
 800951c:	f04f 30ff 	mov.w	r0, #4294967295
 8009520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009524:	3501      	adds	r5, #1
 8009526:	e7c6      	b.n	80094b6 <_printf_common+0x3e>
 8009528:	18e1      	adds	r1, r4, r3
 800952a:	1c5a      	adds	r2, r3, #1
 800952c:	2030      	movs	r0, #48	; 0x30
 800952e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009532:	4422      	add	r2, r4
 8009534:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009538:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800953c:	3302      	adds	r3, #2
 800953e:	e7c7      	b.n	80094d0 <_printf_common+0x58>
 8009540:	2301      	movs	r3, #1
 8009542:	4622      	mov	r2, r4
 8009544:	4649      	mov	r1, r9
 8009546:	4638      	mov	r0, r7
 8009548:	47c0      	blx	r8
 800954a:	3001      	adds	r0, #1
 800954c:	d0e6      	beq.n	800951c <_printf_common+0xa4>
 800954e:	3601      	adds	r6, #1
 8009550:	e7d9      	b.n	8009506 <_printf_common+0x8e>
	...

08009554 <_printf_i>:
 8009554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009558:	7e0f      	ldrb	r7, [r1, #24]
 800955a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800955c:	2f78      	cmp	r7, #120	; 0x78
 800955e:	4691      	mov	r9, r2
 8009560:	4680      	mov	r8, r0
 8009562:	460c      	mov	r4, r1
 8009564:	469a      	mov	sl, r3
 8009566:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800956a:	d807      	bhi.n	800957c <_printf_i+0x28>
 800956c:	2f62      	cmp	r7, #98	; 0x62
 800956e:	d80a      	bhi.n	8009586 <_printf_i+0x32>
 8009570:	2f00      	cmp	r7, #0
 8009572:	f000 80d4 	beq.w	800971e <_printf_i+0x1ca>
 8009576:	2f58      	cmp	r7, #88	; 0x58
 8009578:	f000 80c0 	beq.w	80096fc <_printf_i+0x1a8>
 800957c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009580:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009584:	e03a      	b.n	80095fc <_printf_i+0xa8>
 8009586:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800958a:	2b15      	cmp	r3, #21
 800958c:	d8f6      	bhi.n	800957c <_printf_i+0x28>
 800958e:	a101      	add	r1, pc, #4	; (adr r1, 8009594 <_printf_i+0x40>)
 8009590:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009594:	080095ed 	.word	0x080095ed
 8009598:	08009601 	.word	0x08009601
 800959c:	0800957d 	.word	0x0800957d
 80095a0:	0800957d 	.word	0x0800957d
 80095a4:	0800957d 	.word	0x0800957d
 80095a8:	0800957d 	.word	0x0800957d
 80095ac:	08009601 	.word	0x08009601
 80095b0:	0800957d 	.word	0x0800957d
 80095b4:	0800957d 	.word	0x0800957d
 80095b8:	0800957d 	.word	0x0800957d
 80095bc:	0800957d 	.word	0x0800957d
 80095c0:	08009705 	.word	0x08009705
 80095c4:	0800962d 	.word	0x0800962d
 80095c8:	080096bf 	.word	0x080096bf
 80095cc:	0800957d 	.word	0x0800957d
 80095d0:	0800957d 	.word	0x0800957d
 80095d4:	08009727 	.word	0x08009727
 80095d8:	0800957d 	.word	0x0800957d
 80095dc:	0800962d 	.word	0x0800962d
 80095e0:	0800957d 	.word	0x0800957d
 80095e4:	0800957d 	.word	0x0800957d
 80095e8:	080096c7 	.word	0x080096c7
 80095ec:	682b      	ldr	r3, [r5, #0]
 80095ee:	1d1a      	adds	r2, r3, #4
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	602a      	str	r2, [r5, #0]
 80095f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095fc:	2301      	movs	r3, #1
 80095fe:	e09f      	b.n	8009740 <_printf_i+0x1ec>
 8009600:	6820      	ldr	r0, [r4, #0]
 8009602:	682b      	ldr	r3, [r5, #0]
 8009604:	0607      	lsls	r7, r0, #24
 8009606:	f103 0104 	add.w	r1, r3, #4
 800960a:	6029      	str	r1, [r5, #0]
 800960c:	d501      	bpl.n	8009612 <_printf_i+0xbe>
 800960e:	681e      	ldr	r6, [r3, #0]
 8009610:	e003      	b.n	800961a <_printf_i+0xc6>
 8009612:	0646      	lsls	r6, r0, #25
 8009614:	d5fb      	bpl.n	800960e <_printf_i+0xba>
 8009616:	f9b3 6000 	ldrsh.w	r6, [r3]
 800961a:	2e00      	cmp	r6, #0
 800961c:	da03      	bge.n	8009626 <_printf_i+0xd2>
 800961e:	232d      	movs	r3, #45	; 0x2d
 8009620:	4276      	negs	r6, r6
 8009622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009626:	485a      	ldr	r0, [pc, #360]	; (8009790 <_printf_i+0x23c>)
 8009628:	230a      	movs	r3, #10
 800962a:	e012      	b.n	8009652 <_printf_i+0xfe>
 800962c:	682b      	ldr	r3, [r5, #0]
 800962e:	6820      	ldr	r0, [r4, #0]
 8009630:	1d19      	adds	r1, r3, #4
 8009632:	6029      	str	r1, [r5, #0]
 8009634:	0605      	lsls	r5, r0, #24
 8009636:	d501      	bpl.n	800963c <_printf_i+0xe8>
 8009638:	681e      	ldr	r6, [r3, #0]
 800963a:	e002      	b.n	8009642 <_printf_i+0xee>
 800963c:	0641      	lsls	r1, r0, #25
 800963e:	d5fb      	bpl.n	8009638 <_printf_i+0xe4>
 8009640:	881e      	ldrh	r6, [r3, #0]
 8009642:	4853      	ldr	r0, [pc, #332]	; (8009790 <_printf_i+0x23c>)
 8009644:	2f6f      	cmp	r7, #111	; 0x6f
 8009646:	bf0c      	ite	eq
 8009648:	2308      	moveq	r3, #8
 800964a:	230a      	movne	r3, #10
 800964c:	2100      	movs	r1, #0
 800964e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009652:	6865      	ldr	r5, [r4, #4]
 8009654:	60a5      	str	r5, [r4, #8]
 8009656:	2d00      	cmp	r5, #0
 8009658:	bfa2      	ittt	ge
 800965a:	6821      	ldrge	r1, [r4, #0]
 800965c:	f021 0104 	bicge.w	r1, r1, #4
 8009660:	6021      	strge	r1, [r4, #0]
 8009662:	b90e      	cbnz	r6, 8009668 <_printf_i+0x114>
 8009664:	2d00      	cmp	r5, #0
 8009666:	d04b      	beq.n	8009700 <_printf_i+0x1ac>
 8009668:	4615      	mov	r5, r2
 800966a:	fbb6 f1f3 	udiv	r1, r6, r3
 800966e:	fb03 6711 	mls	r7, r3, r1, r6
 8009672:	5dc7      	ldrb	r7, [r0, r7]
 8009674:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009678:	4637      	mov	r7, r6
 800967a:	42bb      	cmp	r3, r7
 800967c:	460e      	mov	r6, r1
 800967e:	d9f4      	bls.n	800966a <_printf_i+0x116>
 8009680:	2b08      	cmp	r3, #8
 8009682:	d10b      	bne.n	800969c <_printf_i+0x148>
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	07de      	lsls	r6, r3, #31
 8009688:	d508      	bpl.n	800969c <_printf_i+0x148>
 800968a:	6923      	ldr	r3, [r4, #16]
 800968c:	6861      	ldr	r1, [r4, #4]
 800968e:	4299      	cmp	r1, r3
 8009690:	bfde      	ittt	le
 8009692:	2330      	movle	r3, #48	; 0x30
 8009694:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009698:	f105 35ff 	addle.w	r5, r5, #4294967295
 800969c:	1b52      	subs	r2, r2, r5
 800969e:	6122      	str	r2, [r4, #16]
 80096a0:	f8cd a000 	str.w	sl, [sp]
 80096a4:	464b      	mov	r3, r9
 80096a6:	aa03      	add	r2, sp, #12
 80096a8:	4621      	mov	r1, r4
 80096aa:	4640      	mov	r0, r8
 80096ac:	f7ff fee4 	bl	8009478 <_printf_common>
 80096b0:	3001      	adds	r0, #1
 80096b2:	d14a      	bne.n	800974a <_printf_i+0x1f6>
 80096b4:	f04f 30ff 	mov.w	r0, #4294967295
 80096b8:	b004      	add	sp, #16
 80096ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096be:	6823      	ldr	r3, [r4, #0]
 80096c0:	f043 0320 	orr.w	r3, r3, #32
 80096c4:	6023      	str	r3, [r4, #0]
 80096c6:	4833      	ldr	r0, [pc, #204]	; (8009794 <_printf_i+0x240>)
 80096c8:	2778      	movs	r7, #120	; 0x78
 80096ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	6829      	ldr	r1, [r5, #0]
 80096d2:	061f      	lsls	r7, r3, #24
 80096d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80096d8:	d402      	bmi.n	80096e0 <_printf_i+0x18c>
 80096da:	065f      	lsls	r7, r3, #25
 80096dc:	bf48      	it	mi
 80096de:	b2b6      	uxthmi	r6, r6
 80096e0:	07df      	lsls	r7, r3, #31
 80096e2:	bf48      	it	mi
 80096e4:	f043 0320 	orrmi.w	r3, r3, #32
 80096e8:	6029      	str	r1, [r5, #0]
 80096ea:	bf48      	it	mi
 80096ec:	6023      	strmi	r3, [r4, #0]
 80096ee:	b91e      	cbnz	r6, 80096f8 <_printf_i+0x1a4>
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	f023 0320 	bic.w	r3, r3, #32
 80096f6:	6023      	str	r3, [r4, #0]
 80096f8:	2310      	movs	r3, #16
 80096fa:	e7a7      	b.n	800964c <_printf_i+0xf8>
 80096fc:	4824      	ldr	r0, [pc, #144]	; (8009790 <_printf_i+0x23c>)
 80096fe:	e7e4      	b.n	80096ca <_printf_i+0x176>
 8009700:	4615      	mov	r5, r2
 8009702:	e7bd      	b.n	8009680 <_printf_i+0x12c>
 8009704:	682b      	ldr	r3, [r5, #0]
 8009706:	6826      	ldr	r6, [r4, #0]
 8009708:	6961      	ldr	r1, [r4, #20]
 800970a:	1d18      	adds	r0, r3, #4
 800970c:	6028      	str	r0, [r5, #0]
 800970e:	0635      	lsls	r5, r6, #24
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	d501      	bpl.n	8009718 <_printf_i+0x1c4>
 8009714:	6019      	str	r1, [r3, #0]
 8009716:	e002      	b.n	800971e <_printf_i+0x1ca>
 8009718:	0670      	lsls	r0, r6, #25
 800971a:	d5fb      	bpl.n	8009714 <_printf_i+0x1c0>
 800971c:	8019      	strh	r1, [r3, #0]
 800971e:	2300      	movs	r3, #0
 8009720:	6123      	str	r3, [r4, #16]
 8009722:	4615      	mov	r5, r2
 8009724:	e7bc      	b.n	80096a0 <_printf_i+0x14c>
 8009726:	682b      	ldr	r3, [r5, #0]
 8009728:	1d1a      	adds	r2, r3, #4
 800972a:	602a      	str	r2, [r5, #0]
 800972c:	681d      	ldr	r5, [r3, #0]
 800972e:	6862      	ldr	r2, [r4, #4]
 8009730:	2100      	movs	r1, #0
 8009732:	4628      	mov	r0, r5
 8009734:	f7f6 fd6c 	bl	8000210 <memchr>
 8009738:	b108      	cbz	r0, 800973e <_printf_i+0x1ea>
 800973a:	1b40      	subs	r0, r0, r5
 800973c:	6060      	str	r0, [r4, #4]
 800973e:	6863      	ldr	r3, [r4, #4]
 8009740:	6123      	str	r3, [r4, #16]
 8009742:	2300      	movs	r3, #0
 8009744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009748:	e7aa      	b.n	80096a0 <_printf_i+0x14c>
 800974a:	6923      	ldr	r3, [r4, #16]
 800974c:	462a      	mov	r2, r5
 800974e:	4649      	mov	r1, r9
 8009750:	4640      	mov	r0, r8
 8009752:	47d0      	blx	sl
 8009754:	3001      	adds	r0, #1
 8009756:	d0ad      	beq.n	80096b4 <_printf_i+0x160>
 8009758:	6823      	ldr	r3, [r4, #0]
 800975a:	079b      	lsls	r3, r3, #30
 800975c:	d413      	bmi.n	8009786 <_printf_i+0x232>
 800975e:	68e0      	ldr	r0, [r4, #12]
 8009760:	9b03      	ldr	r3, [sp, #12]
 8009762:	4298      	cmp	r0, r3
 8009764:	bfb8      	it	lt
 8009766:	4618      	movlt	r0, r3
 8009768:	e7a6      	b.n	80096b8 <_printf_i+0x164>
 800976a:	2301      	movs	r3, #1
 800976c:	4632      	mov	r2, r6
 800976e:	4649      	mov	r1, r9
 8009770:	4640      	mov	r0, r8
 8009772:	47d0      	blx	sl
 8009774:	3001      	adds	r0, #1
 8009776:	d09d      	beq.n	80096b4 <_printf_i+0x160>
 8009778:	3501      	adds	r5, #1
 800977a:	68e3      	ldr	r3, [r4, #12]
 800977c:	9903      	ldr	r1, [sp, #12]
 800977e:	1a5b      	subs	r3, r3, r1
 8009780:	42ab      	cmp	r3, r5
 8009782:	dcf2      	bgt.n	800976a <_printf_i+0x216>
 8009784:	e7eb      	b.n	800975e <_printf_i+0x20a>
 8009786:	2500      	movs	r5, #0
 8009788:	f104 0619 	add.w	r6, r4, #25
 800978c:	e7f5      	b.n	800977a <_printf_i+0x226>
 800978e:	bf00      	nop
 8009790:	0800c93b 	.word	0x0800c93b
 8009794:	0800c94c 	.word	0x0800c94c

08009798 <std>:
 8009798:	2300      	movs	r3, #0
 800979a:	b510      	push	{r4, lr}
 800979c:	4604      	mov	r4, r0
 800979e:	e9c0 3300 	strd	r3, r3, [r0]
 80097a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097a6:	6083      	str	r3, [r0, #8]
 80097a8:	8181      	strh	r1, [r0, #12]
 80097aa:	6643      	str	r3, [r0, #100]	; 0x64
 80097ac:	81c2      	strh	r2, [r0, #14]
 80097ae:	6183      	str	r3, [r0, #24]
 80097b0:	4619      	mov	r1, r3
 80097b2:	2208      	movs	r2, #8
 80097b4:	305c      	adds	r0, #92	; 0x5c
 80097b6:	f000 f952 	bl	8009a5e <memset>
 80097ba:	4b0d      	ldr	r3, [pc, #52]	; (80097f0 <std+0x58>)
 80097bc:	6263      	str	r3, [r4, #36]	; 0x24
 80097be:	4b0d      	ldr	r3, [pc, #52]	; (80097f4 <std+0x5c>)
 80097c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80097c2:	4b0d      	ldr	r3, [pc, #52]	; (80097f8 <std+0x60>)
 80097c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097c6:	4b0d      	ldr	r3, [pc, #52]	; (80097fc <std+0x64>)
 80097c8:	6323      	str	r3, [r4, #48]	; 0x30
 80097ca:	4b0d      	ldr	r3, [pc, #52]	; (8009800 <std+0x68>)
 80097cc:	6224      	str	r4, [r4, #32]
 80097ce:	429c      	cmp	r4, r3
 80097d0:	d006      	beq.n	80097e0 <std+0x48>
 80097d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80097d6:	4294      	cmp	r4, r2
 80097d8:	d002      	beq.n	80097e0 <std+0x48>
 80097da:	33d0      	adds	r3, #208	; 0xd0
 80097dc:	429c      	cmp	r4, r3
 80097de:	d105      	bne.n	80097ec <std+0x54>
 80097e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80097e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097e8:	f000 ba1c 	b.w	8009c24 <__retarget_lock_init_recursive>
 80097ec:	bd10      	pop	{r4, pc}
 80097ee:	bf00      	nop
 80097f0:	08009985 	.word	0x08009985
 80097f4:	080099a7 	.word	0x080099a7
 80097f8:	080099df 	.word	0x080099df
 80097fc:	08009a03 	.word	0x08009a03
 8009800:	20002b70 	.word	0x20002b70

08009804 <stdio_exit_handler>:
 8009804:	4a02      	ldr	r2, [pc, #8]	; (8009810 <stdio_exit_handler+0xc>)
 8009806:	4903      	ldr	r1, [pc, #12]	; (8009814 <stdio_exit_handler+0x10>)
 8009808:	4803      	ldr	r0, [pc, #12]	; (8009818 <stdio_exit_handler+0x14>)
 800980a:	f000 b869 	b.w	80098e0 <_fwalk_sglue>
 800980e:	bf00      	nop
 8009810:	20000028 	.word	0x20000028
 8009814:	0800bdf9 	.word	0x0800bdf9
 8009818:	200001a0 	.word	0x200001a0

0800981c <cleanup_stdio>:
 800981c:	6841      	ldr	r1, [r0, #4]
 800981e:	4b0c      	ldr	r3, [pc, #48]	; (8009850 <cleanup_stdio+0x34>)
 8009820:	4299      	cmp	r1, r3
 8009822:	b510      	push	{r4, lr}
 8009824:	4604      	mov	r4, r0
 8009826:	d001      	beq.n	800982c <cleanup_stdio+0x10>
 8009828:	f002 fae6 	bl	800bdf8 <_fflush_r>
 800982c:	68a1      	ldr	r1, [r4, #8]
 800982e:	4b09      	ldr	r3, [pc, #36]	; (8009854 <cleanup_stdio+0x38>)
 8009830:	4299      	cmp	r1, r3
 8009832:	d002      	beq.n	800983a <cleanup_stdio+0x1e>
 8009834:	4620      	mov	r0, r4
 8009836:	f002 fadf 	bl	800bdf8 <_fflush_r>
 800983a:	68e1      	ldr	r1, [r4, #12]
 800983c:	4b06      	ldr	r3, [pc, #24]	; (8009858 <cleanup_stdio+0x3c>)
 800983e:	4299      	cmp	r1, r3
 8009840:	d004      	beq.n	800984c <cleanup_stdio+0x30>
 8009842:	4620      	mov	r0, r4
 8009844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009848:	f002 bad6 	b.w	800bdf8 <_fflush_r>
 800984c:	bd10      	pop	{r4, pc}
 800984e:	bf00      	nop
 8009850:	20002b70 	.word	0x20002b70
 8009854:	20002bd8 	.word	0x20002bd8
 8009858:	20002c40 	.word	0x20002c40

0800985c <global_stdio_init.part.0>:
 800985c:	b510      	push	{r4, lr}
 800985e:	4b0b      	ldr	r3, [pc, #44]	; (800988c <global_stdio_init.part.0+0x30>)
 8009860:	4c0b      	ldr	r4, [pc, #44]	; (8009890 <global_stdio_init.part.0+0x34>)
 8009862:	4a0c      	ldr	r2, [pc, #48]	; (8009894 <global_stdio_init.part.0+0x38>)
 8009864:	601a      	str	r2, [r3, #0]
 8009866:	4620      	mov	r0, r4
 8009868:	2200      	movs	r2, #0
 800986a:	2104      	movs	r1, #4
 800986c:	f7ff ff94 	bl	8009798 <std>
 8009870:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009874:	2201      	movs	r2, #1
 8009876:	2109      	movs	r1, #9
 8009878:	f7ff ff8e 	bl	8009798 <std>
 800987c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009880:	2202      	movs	r2, #2
 8009882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009886:	2112      	movs	r1, #18
 8009888:	f7ff bf86 	b.w	8009798 <std>
 800988c:	20002ca8 	.word	0x20002ca8
 8009890:	20002b70 	.word	0x20002b70
 8009894:	08009805 	.word	0x08009805

08009898 <__sfp_lock_acquire>:
 8009898:	4801      	ldr	r0, [pc, #4]	; (80098a0 <__sfp_lock_acquire+0x8>)
 800989a:	f000 b9c4 	b.w	8009c26 <__retarget_lock_acquire_recursive>
 800989e:	bf00      	nop
 80098a0:	20002cb1 	.word	0x20002cb1

080098a4 <__sfp_lock_release>:
 80098a4:	4801      	ldr	r0, [pc, #4]	; (80098ac <__sfp_lock_release+0x8>)
 80098a6:	f000 b9bf 	b.w	8009c28 <__retarget_lock_release_recursive>
 80098aa:	bf00      	nop
 80098ac:	20002cb1 	.word	0x20002cb1

080098b0 <__sinit>:
 80098b0:	b510      	push	{r4, lr}
 80098b2:	4604      	mov	r4, r0
 80098b4:	f7ff fff0 	bl	8009898 <__sfp_lock_acquire>
 80098b8:	6a23      	ldr	r3, [r4, #32]
 80098ba:	b11b      	cbz	r3, 80098c4 <__sinit+0x14>
 80098bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098c0:	f7ff bff0 	b.w	80098a4 <__sfp_lock_release>
 80098c4:	4b04      	ldr	r3, [pc, #16]	; (80098d8 <__sinit+0x28>)
 80098c6:	6223      	str	r3, [r4, #32]
 80098c8:	4b04      	ldr	r3, [pc, #16]	; (80098dc <__sinit+0x2c>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1f5      	bne.n	80098bc <__sinit+0xc>
 80098d0:	f7ff ffc4 	bl	800985c <global_stdio_init.part.0>
 80098d4:	e7f2      	b.n	80098bc <__sinit+0xc>
 80098d6:	bf00      	nop
 80098d8:	0800981d 	.word	0x0800981d
 80098dc:	20002ca8 	.word	0x20002ca8

080098e0 <_fwalk_sglue>:
 80098e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098e4:	4607      	mov	r7, r0
 80098e6:	4688      	mov	r8, r1
 80098e8:	4614      	mov	r4, r2
 80098ea:	2600      	movs	r6, #0
 80098ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098f0:	f1b9 0901 	subs.w	r9, r9, #1
 80098f4:	d505      	bpl.n	8009902 <_fwalk_sglue+0x22>
 80098f6:	6824      	ldr	r4, [r4, #0]
 80098f8:	2c00      	cmp	r4, #0
 80098fa:	d1f7      	bne.n	80098ec <_fwalk_sglue+0xc>
 80098fc:	4630      	mov	r0, r6
 80098fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009902:	89ab      	ldrh	r3, [r5, #12]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d907      	bls.n	8009918 <_fwalk_sglue+0x38>
 8009908:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800990c:	3301      	adds	r3, #1
 800990e:	d003      	beq.n	8009918 <_fwalk_sglue+0x38>
 8009910:	4629      	mov	r1, r5
 8009912:	4638      	mov	r0, r7
 8009914:	47c0      	blx	r8
 8009916:	4306      	orrs	r6, r0
 8009918:	3568      	adds	r5, #104	; 0x68
 800991a:	e7e9      	b.n	80098f0 <_fwalk_sglue+0x10>

0800991c <sniprintf>:
 800991c:	b40c      	push	{r2, r3}
 800991e:	b530      	push	{r4, r5, lr}
 8009920:	4b17      	ldr	r3, [pc, #92]	; (8009980 <sniprintf+0x64>)
 8009922:	1e0c      	subs	r4, r1, #0
 8009924:	681d      	ldr	r5, [r3, #0]
 8009926:	b09d      	sub	sp, #116	; 0x74
 8009928:	da08      	bge.n	800993c <sniprintf+0x20>
 800992a:	238b      	movs	r3, #139	; 0x8b
 800992c:	602b      	str	r3, [r5, #0]
 800992e:	f04f 30ff 	mov.w	r0, #4294967295
 8009932:	b01d      	add	sp, #116	; 0x74
 8009934:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009938:	b002      	add	sp, #8
 800993a:	4770      	bx	lr
 800993c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009940:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009944:	bf14      	ite	ne
 8009946:	f104 33ff 	addne.w	r3, r4, #4294967295
 800994a:	4623      	moveq	r3, r4
 800994c:	9304      	str	r3, [sp, #16]
 800994e:	9307      	str	r3, [sp, #28]
 8009950:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009954:	9002      	str	r0, [sp, #8]
 8009956:	9006      	str	r0, [sp, #24]
 8009958:	f8ad 3016 	strh.w	r3, [sp, #22]
 800995c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800995e:	ab21      	add	r3, sp, #132	; 0x84
 8009960:	a902      	add	r1, sp, #8
 8009962:	4628      	mov	r0, r5
 8009964:	9301      	str	r3, [sp, #4]
 8009966:	f002 f8c3 	bl	800baf0 <_svfiprintf_r>
 800996a:	1c43      	adds	r3, r0, #1
 800996c:	bfbc      	itt	lt
 800996e:	238b      	movlt	r3, #139	; 0x8b
 8009970:	602b      	strlt	r3, [r5, #0]
 8009972:	2c00      	cmp	r4, #0
 8009974:	d0dd      	beq.n	8009932 <sniprintf+0x16>
 8009976:	9b02      	ldr	r3, [sp, #8]
 8009978:	2200      	movs	r2, #0
 800997a:	701a      	strb	r2, [r3, #0]
 800997c:	e7d9      	b.n	8009932 <sniprintf+0x16>
 800997e:	bf00      	nop
 8009980:	200001ec 	.word	0x200001ec

08009984 <__sread>:
 8009984:	b510      	push	{r4, lr}
 8009986:	460c      	mov	r4, r1
 8009988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800998c:	f000 f8d8 	bl	8009b40 <_read_r>
 8009990:	2800      	cmp	r0, #0
 8009992:	bfab      	itete	ge
 8009994:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009996:	89a3      	ldrhlt	r3, [r4, #12]
 8009998:	181b      	addge	r3, r3, r0
 800999a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800999e:	bfac      	ite	ge
 80099a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80099a2:	81a3      	strhlt	r3, [r4, #12]
 80099a4:	bd10      	pop	{r4, pc}

080099a6 <__swrite>:
 80099a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099aa:	461f      	mov	r7, r3
 80099ac:	898b      	ldrh	r3, [r1, #12]
 80099ae:	05db      	lsls	r3, r3, #23
 80099b0:	4605      	mov	r5, r0
 80099b2:	460c      	mov	r4, r1
 80099b4:	4616      	mov	r6, r2
 80099b6:	d505      	bpl.n	80099c4 <__swrite+0x1e>
 80099b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099bc:	2302      	movs	r3, #2
 80099be:	2200      	movs	r2, #0
 80099c0:	f000 f8ac 	bl	8009b1c <_lseek_r>
 80099c4:	89a3      	ldrh	r3, [r4, #12]
 80099c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099ce:	81a3      	strh	r3, [r4, #12]
 80099d0:	4632      	mov	r2, r6
 80099d2:	463b      	mov	r3, r7
 80099d4:	4628      	mov	r0, r5
 80099d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099da:	f000 b8e7 	b.w	8009bac <_write_r>

080099de <__sseek>:
 80099de:	b510      	push	{r4, lr}
 80099e0:	460c      	mov	r4, r1
 80099e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e6:	f000 f899 	bl	8009b1c <_lseek_r>
 80099ea:	1c43      	adds	r3, r0, #1
 80099ec:	89a3      	ldrh	r3, [r4, #12]
 80099ee:	bf15      	itete	ne
 80099f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80099f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099fa:	81a3      	strheq	r3, [r4, #12]
 80099fc:	bf18      	it	ne
 80099fe:	81a3      	strhne	r3, [r4, #12]
 8009a00:	bd10      	pop	{r4, pc}

08009a02 <__sclose>:
 8009a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a06:	f000 b879 	b.w	8009afc <_close_r>

08009a0a <memcmp>:
 8009a0a:	b510      	push	{r4, lr}
 8009a0c:	3901      	subs	r1, #1
 8009a0e:	4402      	add	r2, r0
 8009a10:	4290      	cmp	r0, r2
 8009a12:	d101      	bne.n	8009a18 <memcmp+0xe>
 8009a14:	2000      	movs	r0, #0
 8009a16:	e005      	b.n	8009a24 <memcmp+0x1a>
 8009a18:	7803      	ldrb	r3, [r0, #0]
 8009a1a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009a1e:	42a3      	cmp	r3, r4
 8009a20:	d001      	beq.n	8009a26 <memcmp+0x1c>
 8009a22:	1b18      	subs	r0, r3, r4
 8009a24:	bd10      	pop	{r4, pc}
 8009a26:	3001      	adds	r0, #1
 8009a28:	e7f2      	b.n	8009a10 <memcmp+0x6>

08009a2a <memmove>:
 8009a2a:	4288      	cmp	r0, r1
 8009a2c:	b510      	push	{r4, lr}
 8009a2e:	eb01 0402 	add.w	r4, r1, r2
 8009a32:	d902      	bls.n	8009a3a <memmove+0x10>
 8009a34:	4284      	cmp	r4, r0
 8009a36:	4623      	mov	r3, r4
 8009a38:	d807      	bhi.n	8009a4a <memmove+0x20>
 8009a3a:	1e43      	subs	r3, r0, #1
 8009a3c:	42a1      	cmp	r1, r4
 8009a3e:	d008      	beq.n	8009a52 <memmove+0x28>
 8009a40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a44:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a48:	e7f8      	b.n	8009a3c <memmove+0x12>
 8009a4a:	4402      	add	r2, r0
 8009a4c:	4601      	mov	r1, r0
 8009a4e:	428a      	cmp	r2, r1
 8009a50:	d100      	bne.n	8009a54 <memmove+0x2a>
 8009a52:	bd10      	pop	{r4, pc}
 8009a54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a58:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a5c:	e7f7      	b.n	8009a4e <memmove+0x24>

08009a5e <memset>:
 8009a5e:	4402      	add	r2, r0
 8009a60:	4603      	mov	r3, r0
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d100      	bne.n	8009a68 <memset+0xa>
 8009a66:	4770      	bx	lr
 8009a68:	f803 1b01 	strb.w	r1, [r3], #1
 8009a6c:	e7f9      	b.n	8009a62 <memset+0x4>

08009a6e <strncmp>:
 8009a6e:	b510      	push	{r4, lr}
 8009a70:	b16a      	cbz	r2, 8009a8e <strncmp+0x20>
 8009a72:	3901      	subs	r1, #1
 8009a74:	1884      	adds	r4, r0, r2
 8009a76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a7a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d103      	bne.n	8009a8a <strncmp+0x1c>
 8009a82:	42a0      	cmp	r0, r4
 8009a84:	d001      	beq.n	8009a8a <strncmp+0x1c>
 8009a86:	2a00      	cmp	r2, #0
 8009a88:	d1f5      	bne.n	8009a76 <strncmp+0x8>
 8009a8a:	1ad0      	subs	r0, r2, r3
 8009a8c:	bd10      	pop	{r4, pc}
 8009a8e:	4610      	mov	r0, r2
 8009a90:	e7fc      	b.n	8009a8c <strncmp+0x1e>

08009a92 <_raise_r>:
 8009a92:	291f      	cmp	r1, #31
 8009a94:	b538      	push	{r3, r4, r5, lr}
 8009a96:	4604      	mov	r4, r0
 8009a98:	460d      	mov	r5, r1
 8009a9a:	d904      	bls.n	8009aa6 <_raise_r+0x14>
 8009a9c:	2316      	movs	r3, #22
 8009a9e:	6003      	str	r3, [r0, #0]
 8009aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa4:	bd38      	pop	{r3, r4, r5, pc}
 8009aa6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009aa8:	b112      	cbz	r2, 8009ab0 <_raise_r+0x1e>
 8009aaa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009aae:	b94b      	cbnz	r3, 8009ac4 <_raise_r+0x32>
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f000 f869 	bl	8009b88 <_getpid_r>
 8009ab6:	462a      	mov	r2, r5
 8009ab8:	4601      	mov	r1, r0
 8009aba:	4620      	mov	r0, r4
 8009abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ac0:	f000 b850 	b.w	8009b64 <_kill_r>
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d00a      	beq.n	8009ade <_raise_r+0x4c>
 8009ac8:	1c59      	adds	r1, r3, #1
 8009aca:	d103      	bne.n	8009ad4 <_raise_r+0x42>
 8009acc:	2316      	movs	r3, #22
 8009ace:	6003      	str	r3, [r0, #0]
 8009ad0:	2001      	movs	r0, #1
 8009ad2:	e7e7      	b.n	8009aa4 <_raise_r+0x12>
 8009ad4:	2400      	movs	r4, #0
 8009ad6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ada:	4628      	mov	r0, r5
 8009adc:	4798      	blx	r3
 8009ade:	2000      	movs	r0, #0
 8009ae0:	e7e0      	b.n	8009aa4 <_raise_r+0x12>
	...

08009ae4 <raise>:
 8009ae4:	4b02      	ldr	r3, [pc, #8]	; (8009af0 <raise+0xc>)
 8009ae6:	4601      	mov	r1, r0
 8009ae8:	6818      	ldr	r0, [r3, #0]
 8009aea:	f7ff bfd2 	b.w	8009a92 <_raise_r>
 8009aee:	bf00      	nop
 8009af0:	200001ec 	.word	0x200001ec

08009af4 <_localeconv_r>:
 8009af4:	4800      	ldr	r0, [pc, #0]	; (8009af8 <_localeconv_r+0x4>)
 8009af6:	4770      	bx	lr
 8009af8:	20000124 	.word	0x20000124

08009afc <_close_r>:
 8009afc:	b538      	push	{r3, r4, r5, lr}
 8009afe:	4d06      	ldr	r5, [pc, #24]	; (8009b18 <_close_r+0x1c>)
 8009b00:	2300      	movs	r3, #0
 8009b02:	4604      	mov	r4, r0
 8009b04:	4608      	mov	r0, r1
 8009b06:	602b      	str	r3, [r5, #0]
 8009b08:	f7fa f857 	bl	8003bba <_close>
 8009b0c:	1c43      	adds	r3, r0, #1
 8009b0e:	d102      	bne.n	8009b16 <_close_r+0x1a>
 8009b10:	682b      	ldr	r3, [r5, #0]
 8009b12:	b103      	cbz	r3, 8009b16 <_close_r+0x1a>
 8009b14:	6023      	str	r3, [r4, #0]
 8009b16:	bd38      	pop	{r3, r4, r5, pc}
 8009b18:	20002cac 	.word	0x20002cac

08009b1c <_lseek_r>:
 8009b1c:	b538      	push	{r3, r4, r5, lr}
 8009b1e:	4d07      	ldr	r5, [pc, #28]	; (8009b3c <_lseek_r+0x20>)
 8009b20:	4604      	mov	r4, r0
 8009b22:	4608      	mov	r0, r1
 8009b24:	4611      	mov	r1, r2
 8009b26:	2200      	movs	r2, #0
 8009b28:	602a      	str	r2, [r5, #0]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	f7fa f86c 	bl	8003c08 <_lseek>
 8009b30:	1c43      	adds	r3, r0, #1
 8009b32:	d102      	bne.n	8009b3a <_lseek_r+0x1e>
 8009b34:	682b      	ldr	r3, [r5, #0]
 8009b36:	b103      	cbz	r3, 8009b3a <_lseek_r+0x1e>
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	bd38      	pop	{r3, r4, r5, pc}
 8009b3c:	20002cac 	.word	0x20002cac

08009b40 <_read_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4d07      	ldr	r5, [pc, #28]	; (8009b60 <_read_r+0x20>)
 8009b44:	4604      	mov	r4, r0
 8009b46:	4608      	mov	r0, r1
 8009b48:	4611      	mov	r1, r2
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	602a      	str	r2, [r5, #0]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	f7f9 fffa 	bl	8003b48 <_read>
 8009b54:	1c43      	adds	r3, r0, #1
 8009b56:	d102      	bne.n	8009b5e <_read_r+0x1e>
 8009b58:	682b      	ldr	r3, [r5, #0]
 8009b5a:	b103      	cbz	r3, 8009b5e <_read_r+0x1e>
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	bd38      	pop	{r3, r4, r5, pc}
 8009b60:	20002cac 	.word	0x20002cac

08009b64 <_kill_r>:
 8009b64:	b538      	push	{r3, r4, r5, lr}
 8009b66:	4d07      	ldr	r5, [pc, #28]	; (8009b84 <_kill_r+0x20>)
 8009b68:	2300      	movs	r3, #0
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	4608      	mov	r0, r1
 8009b6e:	4611      	mov	r1, r2
 8009b70:	602b      	str	r3, [r5, #0]
 8009b72:	f7f9 ffcf 	bl	8003b14 <_kill>
 8009b76:	1c43      	adds	r3, r0, #1
 8009b78:	d102      	bne.n	8009b80 <_kill_r+0x1c>
 8009b7a:	682b      	ldr	r3, [r5, #0]
 8009b7c:	b103      	cbz	r3, 8009b80 <_kill_r+0x1c>
 8009b7e:	6023      	str	r3, [r4, #0]
 8009b80:	bd38      	pop	{r3, r4, r5, pc}
 8009b82:	bf00      	nop
 8009b84:	20002cac 	.word	0x20002cac

08009b88 <_getpid_r>:
 8009b88:	f7f9 bfbc 	b.w	8003b04 <_getpid>

08009b8c <_sbrk_r>:
 8009b8c:	b538      	push	{r3, r4, r5, lr}
 8009b8e:	4d06      	ldr	r5, [pc, #24]	; (8009ba8 <_sbrk_r+0x1c>)
 8009b90:	2300      	movs	r3, #0
 8009b92:	4604      	mov	r4, r0
 8009b94:	4608      	mov	r0, r1
 8009b96:	602b      	str	r3, [r5, #0]
 8009b98:	f7fa f844 	bl	8003c24 <_sbrk>
 8009b9c:	1c43      	adds	r3, r0, #1
 8009b9e:	d102      	bne.n	8009ba6 <_sbrk_r+0x1a>
 8009ba0:	682b      	ldr	r3, [r5, #0]
 8009ba2:	b103      	cbz	r3, 8009ba6 <_sbrk_r+0x1a>
 8009ba4:	6023      	str	r3, [r4, #0]
 8009ba6:	bd38      	pop	{r3, r4, r5, pc}
 8009ba8:	20002cac 	.word	0x20002cac

08009bac <_write_r>:
 8009bac:	b538      	push	{r3, r4, r5, lr}
 8009bae:	4d07      	ldr	r5, [pc, #28]	; (8009bcc <_write_r+0x20>)
 8009bb0:	4604      	mov	r4, r0
 8009bb2:	4608      	mov	r0, r1
 8009bb4:	4611      	mov	r1, r2
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	602a      	str	r2, [r5, #0]
 8009bba:	461a      	mov	r2, r3
 8009bbc:	f7f9 ffe1 	bl	8003b82 <_write>
 8009bc0:	1c43      	adds	r3, r0, #1
 8009bc2:	d102      	bne.n	8009bca <_write_r+0x1e>
 8009bc4:	682b      	ldr	r3, [r5, #0]
 8009bc6:	b103      	cbz	r3, 8009bca <_write_r+0x1e>
 8009bc8:	6023      	str	r3, [r4, #0]
 8009bca:	bd38      	pop	{r3, r4, r5, pc}
 8009bcc:	20002cac 	.word	0x20002cac

08009bd0 <__errno>:
 8009bd0:	4b01      	ldr	r3, [pc, #4]	; (8009bd8 <__errno+0x8>)
 8009bd2:	6818      	ldr	r0, [r3, #0]
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	200001ec 	.word	0x200001ec

08009bdc <__libc_init_array>:
 8009bdc:	b570      	push	{r4, r5, r6, lr}
 8009bde:	4d0d      	ldr	r5, [pc, #52]	; (8009c14 <__libc_init_array+0x38>)
 8009be0:	4c0d      	ldr	r4, [pc, #52]	; (8009c18 <__libc_init_array+0x3c>)
 8009be2:	1b64      	subs	r4, r4, r5
 8009be4:	10a4      	asrs	r4, r4, #2
 8009be6:	2600      	movs	r6, #0
 8009be8:	42a6      	cmp	r6, r4
 8009bea:	d109      	bne.n	8009c00 <__libc_init_array+0x24>
 8009bec:	4d0b      	ldr	r5, [pc, #44]	; (8009c1c <__libc_init_array+0x40>)
 8009bee:	4c0c      	ldr	r4, [pc, #48]	; (8009c20 <__libc_init_array+0x44>)
 8009bf0:	f002 fc06 	bl	800c400 <_init>
 8009bf4:	1b64      	subs	r4, r4, r5
 8009bf6:	10a4      	asrs	r4, r4, #2
 8009bf8:	2600      	movs	r6, #0
 8009bfa:	42a6      	cmp	r6, r4
 8009bfc:	d105      	bne.n	8009c0a <__libc_init_array+0x2e>
 8009bfe:	bd70      	pop	{r4, r5, r6, pc}
 8009c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c04:	4798      	blx	r3
 8009c06:	3601      	adds	r6, #1
 8009c08:	e7ee      	b.n	8009be8 <__libc_init_array+0xc>
 8009c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c0e:	4798      	blx	r3
 8009c10:	3601      	adds	r6, #1
 8009c12:	e7f2      	b.n	8009bfa <__libc_init_array+0x1e>
 8009c14:	0800cc04 	.word	0x0800cc04
 8009c18:	0800cc04 	.word	0x0800cc04
 8009c1c:	0800cc04 	.word	0x0800cc04
 8009c20:	0800cc0c 	.word	0x0800cc0c

08009c24 <__retarget_lock_init_recursive>:
 8009c24:	4770      	bx	lr

08009c26 <__retarget_lock_acquire_recursive>:
 8009c26:	4770      	bx	lr

08009c28 <__retarget_lock_release_recursive>:
 8009c28:	4770      	bx	lr

08009c2a <memcpy>:
 8009c2a:	440a      	add	r2, r1
 8009c2c:	4291      	cmp	r1, r2
 8009c2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c32:	d100      	bne.n	8009c36 <memcpy+0xc>
 8009c34:	4770      	bx	lr
 8009c36:	b510      	push	{r4, lr}
 8009c38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c40:	4291      	cmp	r1, r2
 8009c42:	d1f9      	bne.n	8009c38 <memcpy+0xe>
 8009c44:	bd10      	pop	{r4, pc}
	...

08009c48 <nan>:
 8009c48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009c50 <nan+0x8>
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	00000000 	.word	0x00000000
 8009c54:	7ff80000 	.word	0x7ff80000

08009c58 <nanf>:
 8009c58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009c60 <nanf+0x8>
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	7fc00000 	.word	0x7fc00000

08009c64 <quorem>:
 8009c64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c68:	6903      	ldr	r3, [r0, #16]
 8009c6a:	690c      	ldr	r4, [r1, #16]
 8009c6c:	42a3      	cmp	r3, r4
 8009c6e:	4607      	mov	r7, r0
 8009c70:	db7e      	blt.n	8009d70 <quorem+0x10c>
 8009c72:	3c01      	subs	r4, #1
 8009c74:	f101 0814 	add.w	r8, r1, #20
 8009c78:	f100 0514 	add.w	r5, r0, #20
 8009c7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c80:	9301      	str	r3, [sp, #4]
 8009c82:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009c92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c96:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c9a:	d331      	bcc.n	8009d00 <quorem+0x9c>
 8009c9c:	f04f 0e00 	mov.w	lr, #0
 8009ca0:	4640      	mov	r0, r8
 8009ca2:	46ac      	mov	ip, r5
 8009ca4:	46f2      	mov	sl, lr
 8009ca6:	f850 2b04 	ldr.w	r2, [r0], #4
 8009caa:	b293      	uxth	r3, r2
 8009cac:	fb06 e303 	mla	r3, r6, r3, lr
 8009cb0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009cb4:	0c1a      	lsrs	r2, r3, #16
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	ebaa 0303 	sub.w	r3, sl, r3
 8009cbc:	f8dc a000 	ldr.w	sl, [ip]
 8009cc0:	fa13 f38a 	uxtah	r3, r3, sl
 8009cc4:	fb06 220e 	mla	r2, r6, lr, r2
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	9b00      	ldr	r3, [sp, #0]
 8009ccc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009cd0:	b292      	uxth	r2, r2
 8009cd2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009cd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009cda:	f8bd 3000 	ldrh.w	r3, [sp]
 8009cde:	4581      	cmp	r9, r0
 8009ce0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ce4:	f84c 3b04 	str.w	r3, [ip], #4
 8009ce8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009cec:	d2db      	bcs.n	8009ca6 <quorem+0x42>
 8009cee:	f855 300b 	ldr.w	r3, [r5, fp]
 8009cf2:	b92b      	cbnz	r3, 8009d00 <quorem+0x9c>
 8009cf4:	9b01      	ldr	r3, [sp, #4]
 8009cf6:	3b04      	subs	r3, #4
 8009cf8:	429d      	cmp	r5, r3
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	d32c      	bcc.n	8009d58 <quorem+0xf4>
 8009cfe:	613c      	str	r4, [r7, #16]
 8009d00:	4638      	mov	r0, r7
 8009d02:	f001 fca7 	bl	800b654 <__mcmp>
 8009d06:	2800      	cmp	r0, #0
 8009d08:	db22      	blt.n	8009d50 <quorem+0xec>
 8009d0a:	3601      	adds	r6, #1
 8009d0c:	4629      	mov	r1, r5
 8009d0e:	2000      	movs	r0, #0
 8009d10:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d14:	f8d1 c000 	ldr.w	ip, [r1]
 8009d18:	b293      	uxth	r3, r2
 8009d1a:	1ac3      	subs	r3, r0, r3
 8009d1c:	0c12      	lsrs	r2, r2, #16
 8009d1e:	fa13 f38c 	uxtah	r3, r3, ip
 8009d22:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009d26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d30:	45c1      	cmp	r9, r8
 8009d32:	f841 3b04 	str.w	r3, [r1], #4
 8009d36:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009d3a:	d2e9      	bcs.n	8009d10 <quorem+0xac>
 8009d3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d44:	b922      	cbnz	r2, 8009d50 <quorem+0xec>
 8009d46:	3b04      	subs	r3, #4
 8009d48:	429d      	cmp	r5, r3
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	d30a      	bcc.n	8009d64 <quorem+0x100>
 8009d4e:	613c      	str	r4, [r7, #16]
 8009d50:	4630      	mov	r0, r6
 8009d52:	b003      	add	sp, #12
 8009d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d58:	6812      	ldr	r2, [r2, #0]
 8009d5a:	3b04      	subs	r3, #4
 8009d5c:	2a00      	cmp	r2, #0
 8009d5e:	d1ce      	bne.n	8009cfe <quorem+0x9a>
 8009d60:	3c01      	subs	r4, #1
 8009d62:	e7c9      	b.n	8009cf8 <quorem+0x94>
 8009d64:	6812      	ldr	r2, [r2, #0]
 8009d66:	3b04      	subs	r3, #4
 8009d68:	2a00      	cmp	r2, #0
 8009d6a:	d1f0      	bne.n	8009d4e <quorem+0xea>
 8009d6c:	3c01      	subs	r4, #1
 8009d6e:	e7eb      	b.n	8009d48 <quorem+0xe4>
 8009d70:	2000      	movs	r0, #0
 8009d72:	e7ee      	b.n	8009d52 <quorem+0xee>
 8009d74:	0000      	movs	r0, r0
	...

08009d78 <_dtoa_r>:
 8009d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7c:	ed2d 8b04 	vpush	{d8-d9}
 8009d80:	69c5      	ldr	r5, [r0, #28]
 8009d82:	b093      	sub	sp, #76	; 0x4c
 8009d84:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009d88:	ec57 6b10 	vmov	r6, r7, d0
 8009d8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009d90:	9107      	str	r1, [sp, #28]
 8009d92:	4604      	mov	r4, r0
 8009d94:	920a      	str	r2, [sp, #40]	; 0x28
 8009d96:	930d      	str	r3, [sp, #52]	; 0x34
 8009d98:	b975      	cbnz	r5, 8009db8 <_dtoa_r+0x40>
 8009d9a:	2010      	movs	r0, #16
 8009d9c:	f7fd ff52 	bl	8007c44 <malloc>
 8009da0:	4602      	mov	r2, r0
 8009da2:	61e0      	str	r0, [r4, #28]
 8009da4:	b920      	cbnz	r0, 8009db0 <_dtoa_r+0x38>
 8009da6:	4bae      	ldr	r3, [pc, #696]	; (800a060 <_dtoa_r+0x2e8>)
 8009da8:	21ef      	movs	r1, #239	; 0xef
 8009daa:	48ae      	ldr	r0, [pc, #696]	; (800a064 <_dtoa_r+0x2ec>)
 8009dac:	f002 f84c 	bl	800be48 <__assert_func>
 8009db0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009db4:	6005      	str	r5, [r0, #0]
 8009db6:	60c5      	str	r5, [r0, #12]
 8009db8:	69e3      	ldr	r3, [r4, #28]
 8009dba:	6819      	ldr	r1, [r3, #0]
 8009dbc:	b151      	cbz	r1, 8009dd4 <_dtoa_r+0x5c>
 8009dbe:	685a      	ldr	r2, [r3, #4]
 8009dc0:	604a      	str	r2, [r1, #4]
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	4093      	lsls	r3, r2
 8009dc6:	608b      	str	r3, [r1, #8]
 8009dc8:	4620      	mov	r0, r4
 8009dca:	f001 f9bd 	bl	800b148 <_Bfree>
 8009dce:	69e3      	ldr	r3, [r4, #28]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	601a      	str	r2, [r3, #0]
 8009dd4:	1e3b      	subs	r3, r7, #0
 8009dd6:	bfbb      	ittet	lt
 8009dd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009ddc:	9303      	strlt	r3, [sp, #12]
 8009dde:	2300      	movge	r3, #0
 8009de0:	2201      	movlt	r2, #1
 8009de2:	bfac      	ite	ge
 8009de4:	f8c8 3000 	strge.w	r3, [r8]
 8009de8:	f8c8 2000 	strlt.w	r2, [r8]
 8009dec:	4b9e      	ldr	r3, [pc, #632]	; (800a068 <_dtoa_r+0x2f0>)
 8009dee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009df2:	ea33 0308 	bics.w	r3, r3, r8
 8009df6:	d11b      	bne.n	8009e30 <_dtoa_r+0xb8>
 8009df8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009dfa:	f242 730f 	movw	r3, #9999	; 0x270f
 8009dfe:	6013      	str	r3, [r2, #0]
 8009e00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009e04:	4333      	orrs	r3, r6
 8009e06:	f000 8593 	beq.w	800a930 <_dtoa_r+0xbb8>
 8009e0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e0c:	b963      	cbnz	r3, 8009e28 <_dtoa_r+0xb0>
 8009e0e:	4b97      	ldr	r3, [pc, #604]	; (800a06c <_dtoa_r+0x2f4>)
 8009e10:	e027      	b.n	8009e62 <_dtoa_r+0xea>
 8009e12:	4b97      	ldr	r3, [pc, #604]	; (800a070 <_dtoa_r+0x2f8>)
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	3308      	adds	r3, #8
 8009e18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009e1a:	6013      	str	r3, [r2, #0]
 8009e1c:	9800      	ldr	r0, [sp, #0]
 8009e1e:	b013      	add	sp, #76	; 0x4c
 8009e20:	ecbd 8b04 	vpop	{d8-d9}
 8009e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e28:	4b90      	ldr	r3, [pc, #576]	; (800a06c <_dtoa_r+0x2f4>)
 8009e2a:	9300      	str	r3, [sp, #0]
 8009e2c:	3303      	adds	r3, #3
 8009e2e:	e7f3      	b.n	8009e18 <_dtoa_r+0xa0>
 8009e30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e34:	2200      	movs	r2, #0
 8009e36:	ec51 0b17 	vmov	r0, r1, d7
 8009e3a:	eeb0 8a47 	vmov.f32	s16, s14
 8009e3e:	eef0 8a67 	vmov.f32	s17, s15
 8009e42:	2300      	movs	r3, #0
 8009e44:	f7f6 fe60 	bl	8000b08 <__aeabi_dcmpeq>
 8009e48:	4681      	mov	r9, r0
 8009e4a:	b160      	cbz	r0, 8009e66 <_dtoa_r+0xee>
 8009e4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e4e:	2301      	movs	r3, #1
 8009e50:	6013      	str	r3, [r2, #0]
 8009e52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f000 8568 	beq.w	800a92a <_dtoa_r+0xbb2>
 8009e5a:	4b86      	ldr	r3, [pc, #536]	; (800a074 <_dtoa_r+0x2fc>)
 8009e5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	3b01      	subs	r3, #1
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	e7da      	b.n	8009e1c <_dtoa_r+0xa4>
 8009e66:	aa10      	add	r2, sp, #64	; 0x40
 8009e68:	a911      	add	r1, sp, #68	; 0x44
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	eeb0 0a48 	vmov.f32	s0, s16
 8009e70:	eef0 0a68 	vmov.f32	s1, s17
 8009e74:	f001 fd04 	bl	800b880 <__d2b>
 8009e78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009e7c:	4682      	mov	sl, r0
 8009e7e:	2d00      	cmp	r5, #0
 8009e80:	d07f      	beq.n	8009f82 <_dtoa_r+0x20a>
 8009e82:	ee18 3a90 	vmov	r3, s17
 8009e86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e8a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009e8e:	ec51 0b18 	vmov	r0, r1, d8
 8009e92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009e96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009e9a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	4b75      	ldr	r3, [pc, #468]	; (800a078 <_dtoa_r+0x300>)
 8009ea4:	f7f6 fa10 	bl	80002c8 <__aeabi_dsub>
 8009ea8:	a367      	add	r3, pc, #412	; (adr r3, 800a048 <_dtoa_r+0x2d0>)
 8009eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eae:	f7f6 fbc3 	bl	8000638 <__aeabi_dmul>
 8009eb2:	a367      	add	r3, pc, #412	; (adr r3, 800a050 <_dtoa_r+0x2d8>)
 8009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb8:	f7f6 fa08 	bl	80002cc <__adddf3>
 8009ebc:	4606      	mov	r6, r0
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	460f      	mov	r7, r1
 8009ec2:	f7f6 fb4f 	bl	8000564 <__aeabi_i2d>
 8009ec6:	a364      	add	r3, pc, #400	; (adr r3, 800a058 <_dtoa_r+0x2e0>)
 8009ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ecc:	f7f6 fbb4 	bl	8000638 <__aeabi_dmul>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	4639      	mov	r1, r7
 8009ed8:	f7f6 f9f8 	bl	80002cc <__adddf3>
 8009edc:	4606      	mov	r6, r0
 8009ede:	460f      	mov	r7, r1
 8009ee0:	f7f6 fe5a 	bl	8000b98 <__aeabi_d2iz>
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	4683      	mov	fp, r0
 8009ee8:	2300      	movs	r3, #0
 8009eea:	4630      	mov	r0, r6
 8009eec:	4639      	mov	r1, r7
 8009eee:	f7f6 fe15 	bl	8000b1c <__aeabi_dcmplt>
 8009ef2:	b148      	cbz	r0, 8009f08 <_dtoa_r+0x190>
 8009ef4:	4658      	mov	r0, fp
 8009ef6:	f7f6 fb35 	bl	8000564 <__aeabi_i2d>
 8009efa:	4632      	mov	r2, r6
 8009efc:	463b      	mov	r3, r7
 8009efe:	f7f6 fe03 	bl	8000b08 <__aeabi_dcmpeq>
 8009f02:	b908      	cbnz	r0, 8009f08 <_dtoa_r+0x190>
 8009f04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f08:	f1bb 0f16 	cmp.w	fp, #22
 8009f0c:	d857      	bhi.n	8009fbe <_dtoa_r+0x246>
 8009f0e:	4b5b      	ldr	r3, [pc, #364]	; (800a07c <_dtoa_r+0x304>)
 8009f10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f18:	ec51 0b18 	vmov	r0, r1, d8
 8009f1c:	f7f6 fdfe 	bl	8000b1c <__aeabi_dcmplt>
 8009f20:	2800      	cmp	r0, #0
 8009f22:	d04e      	beq.n	8009fc2 <_dtoa_r+0x24a>
 8009f24:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f28:	2300      	movs	r3, #0
 8009f2a:	930c      	str	r3, [sp, #48]	; 0x30
 8009f2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f2e:	1b5b      	subs	r3, r3, r5
 8009f30:	1e5a      	subs	r2, r3, #1
 8009f32:	bf45      	ittet	mi
 8009f34:	f1c3 0301 	rsbmi	r3, r3, #1
 8009f38:	9305      	strmi	r3, [sp, #20]
 8009f3a:	2300      	movpl	r3, #0
 8009f3c:	2300      	movmi	r3, #0
 8009f3e:	9206      	str	r2, [sp, #24]
 8009f40:	bf54      	ite	pl
 8009f42:	9305      	strpl	r3, [sp, #20]
 8009f44:	9306      	strmi	r3, [sp, #24]
 8009f46:	f1bb 0f00 	cmp.w	fp, #0
 8009f4a:	db3c      	blt.n	8009fc6 <_dtoa_r+0x24e>
 8009f4c:	9b06      	ldr	r3, [sp, #24]
 8009f4e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009f52:	445b      	add	r3, fp
 8009f54:	9306      	str	r3, [sp, #24]
 8009f56:	2300      	movs	r3, #0
 8009f58:	9308      	str	r3, [sp, #32]
 8009f5a:	9b07      	ldr	r3, [sp, #28]
 8009f5c:	2b09      	cmp	r3, #9
 8009f5e:	d868      	bhi.n	800a032 <_dtoa_r+0x2ba>
 8009f60:	2b05      	cmp	r3, #5
 8009f62:	bfc4      	itt	gt
 8009f64:	3b04      	subgt	r3, #4
 8009f66:	9307      	strgt	r3, [sp, #28]
 8009f68:	9b07      	ldr	r3, [sp, #28]
 8009f6a:	f1a3 0302 	sub.w	r3, r3, #2
 8009f6e:	bfcc      	ite	gt
 8009f70:	2500      	movgt	r5, #0
 8009f72:	2501      	movle	r5, #1
 8009f74:	2b03      	cmp	r3, #3
 8009f76:	f200 8085 	bhi.w	800a084 <_dtoa_r+0x30c>
 8009f7a:	e8df f003 	tbb	[pc, r3]
 8009f7e:	3b2e      	.short	0x3b2e
 8009f80:	5839      	.short	0x5839
 8009f82:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009f86:	441d      	add	r5, r3
 8009f88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009f8c:	2b20      	cmp	r3, #32
 8009f8e:	bfc1      	itttt	gt
 8009f90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009f94:	fa08 f803 	lslgt.w	r8, r8, r3
 8009f98:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009f9c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009fa0:	bfd6      	itet	le
 8009fa2:	f1c3 0320 	rsble	r3, r3, #32
 8009fa6:	ea48 0003 	orrgt.w	r0, r8, r3
 8009faa:	fa06 f003 	lslle.w	r0, r6, r3
 8009fae:	f7f6 fac9 	bl	8000544 <__aeabi_ui2d>
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009fb8:	3d01      	subs	r5, #1
 8009fba:	920e      	str	r2, [sp, #56]	; 0x38
 8009fbc:	e76f      	b.n	8009e9e <_dtoa_r+0x126>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e7b3      	b.n	8009f2a <_dtoa_r+0x1b2>
 8009fc2:	900c      	str	r0, [sp, #48]	; 0x30
 8009fc4:	e7b2      	b.n	8009f2c <_dtoa_r+0x1b4>
 8009fc6:	9b05      	ldr	r3, [sp, #20]
 8009fc8:	eba3 030b 	sub.w	r3, r3, fp
 8009fcc:	9305      	str	r3, [sp, #20]
 8009fce:	f1cb 0300 	rsb	r3, fp, #0
 8009fd2:	9308      	str	r3, [sp, #32]
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fd8:	e7bf      	b.n	8009f5a <_dtoa_r+0x1e2>
 8009fda:	2300      	movs	r3, #0
 8009fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8009fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	dc52      	bgt.n	800a08a <_dtoa_r+0x312>
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	9301      	str	r3, [sp, #4]
 8009fe8:	9304      	str	r3, [sp, #16]
 8009fea:	461a      	mov	r2, r3
 8009fec:	920a      	str	r2, [sp, #40]	; 0x28
 8009fee:	e00b      	b.n	800a008 <_dtoa_r+0x290>
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e7f3      	b.n	8009fdc <_dtoa_r+0x264>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ffa:	445b      	add	r3, fp
 8009ffc:	9301      	str	r3, [sp, #4]
 8009ffe:	3301      	adds	r3, #1
 800a000:	2b01      	cmp	r3, #1
 800a002:	9304      	str	r3, [sp, #16]
 800a004:	bfb8      	it	lt
 800a006:	2301      	movlt	r3, #1
 800a008:	69e0      	ldr	r0, [r4, #28]
 800a00a:	2100      	movs	r1, #0
 800a00c:	2204      	movs	r2, #4
 800a00e:	f102 0614 	add.w	r6, r2, #20
 800a012:	429e      	cmp	r6, r3
 800a014:	d93d      	bls.n	800a092 <_dtoa_r+0x31a>
 800a016:	6041      	str	r1, [r0, #4]
 800a018:	4620      	mov	r0, r4
 800a01a:	f001 f855 	bl	800b0c8 <_Balloc>
 800a01e:	9000      	str	r0, [sp, #0]
 800a020:	2800      	cmp	r0, #0
 800a022:	d139      	bne.n	800a098 <_dtoa_r+0x320>
 800a024:	4b16      	ldr	r3, [pc, #88]	; (800a080 <_dtoa_r+0x308>)
 800a026:	4602      	mov	r2, r0
 800a028:	f240 11af 	movw	r1, #431	; 0x1af
 800a02c:	e6bd      	b.n	8009daa <_dtoa_r+0x32>
 800a02e:	2301      	movs	r3, #1
 800a030:	e7e1      	b.n	8009ff6 <_dtoa_r+0x27e>
 800a032:	2501      	movs	r5, #1
 800a034:	2300      	movs	r3, #0
 800a036:	9307      	str	r3, [sp, #28]
 800a038:	9509      	str	r5, [sp, #36]	; 0x24
 800a03a:	f04f 33ff 	mov.w	r3, #4294967295
 800a03e:	9301      	str	r3, [sp, #4]
 800a040:	9304      	str	r3, [sp, #16]
 800a042:	2200      	movs	r2, #0
 800a044:	2312      	movs	r3, #18
 800a046:	e7d1      	b.n	8009fec <_dtoa_r+0x274>
 800a048:	636f4361 	.word	0x636f4361
 800a04c:	3fd287a7 	.word	0x3fd287a7
 800a050:	8b60c8b3 	.word	0x8b60c8b3
 800a054:	3fc68a28 	.word	0x3fc68a28
 800a058:	509f79fb 	.word	0x509f79fb
 800a05c:	3fd34413 	.word	0x3fd34413
 800a060:	0800c972 	.word	0x0800c972
 800a064:	0800c989 	.word	0x0800c989
 800a068:	7ff00000 	.word	0x7ff00000
 800a06c:	0800c96e 	.word	0x0800c96e
 800a070:	0800c965 	.word	0x0800c965
 800a074:	0800c93a 	.word	0x0800c93a
 800a078:	3ff80000 	.word	0x3ff80000
 800a07c:	0800cad8 	.word	0x0800cad8
 800a080:	0800c9e1 	.word	0x0800c9e1
 800a084:	2301      	movs	r3, #1
 800a086:	9309      	str	r3, [sp, #36]	; 0x24
 800a088:	e7d7      	b.n	800a03a <_dtoa_r+0x2c2>
 800a08a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a08c:	9301      	str	r3, [sp, #4]
 800a08e:	9304      	str	r3, [sp, #16]
 800a090:	e7ba      	b.n	800a008 <_dtoa_r+0x290>
 800a092:	3101      	adds	r1, #1
 800a094:	0052      	lsls	r2, r2, #1
 800a096:	e7ba      	b.n	800a00e <_dtoa_r+0x296>
 800a098:	69e3      	ldr	r3, [r4, #28]
 800a09a:	9a00      	ldr	r2, [sp, #0]
 800a09c:	601a      	str	r2, [r3, #0]
 800a09e:	9b04      	ldr	r3, [sp, #16]
 800a0a0:	2b0e      	cmp	r3, #14
 800a0a2:	f200 80a8 	bhi.w	800a1f6 <_dtoa_r+0x47e>
 800a0a6:	2d00      	cmp	r5, #0
 800a0a8:	f000 80a5 	beq.w	800a1f6 <_dtoa_r+0x47e>
 800a0ac:	f1bb 0f00 	cmp.w	fp, #0
 800a0b0:	dd38      	ble.n	800a124 <_dtoa_r+0x3ac>
 800a0b2:	4bc0      	ldr	r3, [pc, #768]	; (800a3b4 <_dtoa_r+0x63c>)
 800a0b4:	f00b 020f 	and.w	r2, fp, #15
 800a0b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a0c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a0c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a0c8:	d019      	beq.n	800a0fe <_dtoa_r+0x386>
 800a0ca:	4bbb      	ldr	r3, [pc, #748]	; (800a3b8 <_dtoa_r+0x640>)
 800a0cc:	ec51 0b18 	vmov	r0, r1, d8
 800a0d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a0d4:	f7f6 fbda 	bl	800088c <__aeabi_ddiv>
 800a0d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0dc:	f008 080f 	and.w	r8, r8, #15
 800a0e0:	2503      	movs	r5, #3
 800a0e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a3b8 <_dtoa_r+0x640>
 800a0e6:	f1b8 0f00 	cmp.w	r8, #0
 800a0ea:	d10a      	bne.n	800a102 <_dtoa_r+0x38a>
 800a0ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0f0:	4632      	mov	r2, r6
 800a0f2:	463b      	mov	r3, r7
 800a0f4:	f7f6 fbca 	bl	800088c <__aeabi_ddiv>
 800a0f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0fc:	e02b      	b.n	800a156 <_dtoa_r+0x3de>
 800a0fe:	2502      	movs	r5, #2
 800a100:	e7ef      	b.n	800a0e2 <_dtoa_r+0x36a>
 800a102:	f018 0f01 	tst.w	r8, #1
 800a106:	d008      	beq.n	800a11a <_dtoa_r+0x3a2>
 800a108:	4630      	mov	r0, r6
 800a10a:	4639      	mov	r1, r7
 800a10c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a110:	f7f6 fa92 	bl	8000638 <__aeabi_dmul>
 800a114:	3501      	adds	r5, #1
 800a116:	4606      	mov	r6, r0
 800a118:	460f      	mov	r7, r1
 800a11a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a11e:	f109 0908 	add.w	r9, r9, #8
 800a122:	e7e0      	b.n	800a0e6 <_dtoa_r+0x36e>
 800a124:	f000 809f 	beq.w	800a266 <_dtoa_r+0x4ee>
 800a128:	f1cb 0600 	rsb	r6, fp, #0
 800a12c:	4ba1      	ldr	r3, [pc, #644]	; (800a3b4 <_dtoa_r+0x63c>)
 800a12e:	4fa2      	ldr	r7, [pc, #648]	; (800a3b8 <_dtoa_r+0x640>)
 800a130:	f006 020f 	and.w	r2, r6, #15
 800a134:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13c:	ec51 0b18 	vmov	r0, r1, d8
 800a140:	f7f6 fa7a 	bl	8000638 <__aeabi_dmul>
 800a144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a148:	1136      	asrs	r6, r6, #4
 800a14a:	2300      	movs	r3, #0
 800a14c:	2502      	movs	r5, #2
 800a14e:	2e00      	cmp	r6, #0
 800a150:	d17e      	bne.n	800a250 <_dtoa_r+0x4d8>
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1d0      	bne.n	800a0f8 <_dtoa_r+0x380>
 800a156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a158:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	f000 8084 	beq.w	800a26a <_dtoa_r+0x4f2>
 800a162:	4b96      	ldr	r3, [pc, #600]	; (800a3bc <_dtoa_r+0x644>)
 800a164:	2200      	movs	r2, #0
 800a166:	4640      	mov	r0, r8
 800a168:	4649      	mov	r1, r9
 800a16a:	f7f6 fcd7 	bl	8000b1c <__aeabi_dcmplt>
 800a16e:	2800      	cmp	r0, #0
 800a170:	d07b      	beq.n	800a26a <_dtoa_r+0x4f2>
 800a172:	9b04      	ldr	r3, [sp, #16]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d078      	beq.n	800a26a <_dtoa_r+0x4f2>
 800a178:	9b01      	ldr	r3, [sp, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	dd39      	ble.n	800a1f2 <_dtoa_r+0x47a>
 800a17e:	4b90      	ldr	r3, [pc, #576]	; (800a3c0 <_dtoa_r+0x648>)
 800a180:	2200      	movs	r2, #0
 800a182:	4640      	mov	r0, r8
 800a184:	4649      	mov	r1, r9
 800a186:	f7f6 fa57 	bl	8000638 <__aeabi_dmul>
 800a18a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a18e:	9e01      	ldr	r6, [sp, #4]
 800a190:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a194:	3501      	adds	r5, #1
 800a196:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a19a:	4628      	mov	r0, r5
 800a19c:	f7f6 f9e2 	bl	8000564 <__aeabi_i2d>
 800a1a0:	4642      	mov	r2, r8
 800a1a2:	464b      	mov	r3, r9
 800a1a4:	f7f6 fa48 	bl	8000638 <__aeabi_dmul>
 800a1a8:	4b86      	ldr	r3, [pc, #536]	; (800a3c4 <_dtoa_r+0x64c>)
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f7f6 f88e 	bl	80002cc <__adddf3>
 800a1b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a1b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1b8:	9303      	str	r3, [sp, #12]
 800a1ba:	2e00      	cmp	r6, #0
 800a1bc:	d158      	bne.n	800a270 <_dtoa_r+0x4f8>
 800a1be:	4b82      	ldr	r3, [pc, #520]	; (800a3c8 <_dtoa_r+0x650>)
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	4640      	mov	r0, r8
 800a1c4:	4649      	mov	r1, r9
 800a1c6:	f7f6 f87f 	bl	80002c8 <__aeabi_dsub>
 800a1ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1ce:	4680      	mov	r8, r0
 800a1d0:	4689      	mov	r9, r1
 800a1d2:	f7f6 fcc1 	bl	8000b58 <__aeabi_dcmpgt>
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	f040 8296 	bne.w	800a708 <_dtoa_r+0x990>
 800a1dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a1e0:	4640      	mov	r0, r8
 800a1e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1e6:	4649      	mov	r1, r9
 800a1e8:	f7f6 fc98 	bl	8000b1c <__aeabi_dcmplt>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	f040 8289 	bne.w	800a704 <_dtoa_r+0x98c>
 800a1f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a1f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f2c0 814e 	blt.w	800a49a <_dtoa_r+0x722>
 800a1fe:	f1bb 0f0e 	cmp.w	fp, #14
 800a202:	f300 814a 	bgt.w	800a49a <_dtoa_r+0x722>
 800a206:	4b6b      	ldr	r3, [pc, #428]	; (800a3b4 <_dtoa_r+0x63c>)
 800a208:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a20c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a212:	2b00      	cmp	r3, #0
 800a214:	f280 80dc 	bge.w	800a3d0 <_dtoa_r+0x658>
 800a218:	9b04      	ldr	r3, [sp, #16]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f300 80d8 	bgt.w	800a3d0 <_dtoa_r+0x658>
 800a220:	f040 826f 	bne.w	800a702 <_dtoa_r+0x98a>
 800a224:	4b68      	ldr	r3, [pc, #416]	; (800a3c8 <_dtoa_r+0x650>)
 800a226:	2200      	movs	r2, #0
 800a228:	4640      	mov	r0, r8
 800a22a:	4649      	mov	r1, r9
 800a22c:	f7f6 fa04 	bl	8000638 <__aeabi_dmul>
 800a230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a234:	f7f6 fc86 	bl	8000b44 <__aeabi_dcmpge>
 800a238:	9e04      	ldr	r6, [sp, #16]
 800a23a:	4637      	mov	r7, r6
 800a23c:	2800      	cmp	r0, #0
 800a23e:	f040 8245 	bne.w	800a6cc <_dtoa_r+0x954>
 800a242:	9d00      	ldr	r5, [sp, #0]
 800a244:	2331      	movs	r3, #49	; 0x31
 800a246:	f805 3b01 	strb.w	r3, [r5], #1
 800a24a:	f10b 0b01 	add.w	fp, fp, #1
 800a24e:	e241      	b.n	800a6d4 <_dtoa_r+0x95c>
 800a250:	07f2      	lsls	r2, r6, #31
 800a252:	d505      	bpl.n	800a260 <_dtoa_r+0x4e8>
 800a254:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a258:	f7f6 f9ee 	bl	8000638 <__aeabi_dmul>
 800a25c:	3501      	adds	r5, #1
 800a25e:	2301      	movs	r3, #1
 800a260:	1076      	asrs	r6, r6, #1
 800a262:	3708      	adds	r7, #8
 800a264:	e773      	b.n	800a14e <_dtoa_r+0x3d6>
 800a266:	2502      	movs	r5, #2
 800a268:	e775      	b.n	800a156 <_dtoa_r+0x3de>
 800a26a:	9e04      	ldr	r6, [sp, #16]
 800a26c:	465f      	mov	r7, fp
 800a26e:	e792      	b.n	800a196 <_dtoa_r+0x41e>
 800a270:	9900      	ldr	r1, [sp, #0]
 800a272:	4b50      	ldr	r3, [pc, #320]	; (800a3b4 <_dtoa_r+0x63c>)
 800a274:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a278:	4431      	add	r1, r6
 800a27a:	9102      	str	r1, [sp, #8]
 800a27c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a27e:	eeb0 9a47 	vmov.f32	s18, s14
 800a282:	eef0 9a67 	vmov.f32	s19, s15
 800a286:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a28a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a28e:	2900      	cmp	r1, #0
 800a290:	d044      	beq.n	800a31c <_dtoa_r+0x5a4>
 800a292:	494e      	ldr	r1, [pc, #312]	; (800a3cc <_dtoa_r+0x654>)
 800a294:	2000      	movs	r0, #0
 800a296:	f7f6 faf9 	bl	800088c <__aeabi_ddiv>
 800a29a:	ec53 2b19 	vmov	r2, r3, d9
 800a29e:	f7f6 f813 	bl	80002c8 <__aeabi_dsub>
 800a2a2:	9d00      	ldr	r5, [sp, #0]
 800a2a4:	ec41 0b19 	vmov	d9, r0, r1
 800a2a8:	4649      	mov	r1, r9
 800a2aa:	4640      	mov	r0, r8
 800a2ac:	f7f6 fc74 	bl	8000b98 <__aeabi_d2iz>
 800a2b0:	4606      	mov	r6, r0
 800a2b2:	f7f6 f957 	bl	8000564 <__aeabi_i2d>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	4640      	mov	r0, r8
 800a2bc:	4649      	mov	r1, r9
 800a2be:	f7f6 f803 	bl	80002c8 <__aeabi_dsub>
 800a2c2:	3630      	adds	r6, #48	; 0x30
 800a2c4:	f805 6b01 	strb.w	r6, [r5], #1
 800a2c8:	ec53 2b19 	vmov	r2, r3, d9
 800a2cc:	4680      	mov	r8, r0
 800a2ce:	4689      	mov	r9, r1
 800a2d0:	f7f6 fc24 	bl	8000b1c <__aeabi_dcmplt>
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	d164      	bne.n	800a3a2 <_dtoa_r+0x62a>
 800a2d8:	4642      	mov	r2, r8
 800a2da:	464b      	mov	r3, r9
 800a2dc:	4937      	ldr	r1, [pc, #220]	; (800a3bc <_dtoa_r+0x644>)
 800a2de:	2000      	movs	r0, #0
 800a2e0:	f7f5 fff2 	bl	80002c8 <__aeabi_dsub>
 800a2e4:	ec53 2b19 	vmov	r2, r3, d9
 800a2e8:	f7f6 fc18 	bl	8000b1c <__aeabi_dcmplt>
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	f040 80b6 	bne.w	800a45e <_dtoa_r+0x6e6>
 800a2f2:	9b02      	ldr	r3, [sp, #8]
 800a2f4:	429d      	cmp	r5, r3
 800a2f6:	f43f af7c 	beq.w	800a1f2 <_dtoa_r+0x47a>
 800a2fa:	4b31      	ldr	r3, [pc, #196]	; (800a3c0 <_dtoa_r+0x648>)
 800a2fc:	ec51 0b19 	vmov	r0, r1, d9
 800a300:	2200      	movs	r2, #0
 800a302:	f7f6 f999 	bl	8000638 <__aeabi_dmul>
 800a306:	4b2e      	ldr	r3, [pc, #184]	; (800a3c0 <_dtoa_r+0x648>)
 800a308:	ec41 0b19 	vmov	d9, r0, r1
 800a30c:	2200      	movs	r2, #0
 800a30e:	4640      	mov	r0, r8
 800a310:	4649      	mov	r1, r9
 800a312:	f7f6 f991 	bl	8000638 <__aeabi_dmul>
 800a316:	4680      	mov	r8, r0
 800a318:	4689      	mov	r9, r1
 800a31a:	e7c5      	b.n	800a2a8 <_dtoa_r+0x530>
 800a31c:	ec51 0b17 	vmov	r0, r1, d7
 800a320:	f7f6 f98a 	bl	8000638 <__aeabi_dmul>
 800a324:	9b02      	ldr	r3, [sp, #8]
 800a326:	9d00      	ldr	r5, [sp, #0]
 800a328:	930f      	str	r3, [sp, #60]	; 0x3c
 800a32a:	ec41 0b19 	vmov	d9, r0, r1
 800a32e:	4649      	mov	r1, r9
 800a330:	4640      	mov	r0, r8
 800a332:	f7f6 fc31 	bl	8000b98 <__aeabi_d2iz>
 800a336:	4606      	mov	r6, r0
 800a338:	f7f6 f914 	bl	8000564 <__aeabi_i2d>
 800a33c:	3630      	adds	r6, #48	; 0x30
 800a33e:	4602      	mov	r2, r0
 800a340:	460b      	mov	r3, r1
 800a342:	4640      	mov	r0, r8
 800a344:	4649      	mov	r1, r9
 800a346:	f7f5 ffbf 	bl	80002c8 <__aeabi_dsub>
 800a34a:	f805 6b01 	strb.w	r6, [r5], #1
 800a34e:	9b02      	ldr	r3, [sp, #8]
 800a350:	429d      	cmp	r5, r3
 800a352:	4680      	mov	r8, r0
 800a354:	4689      	mov	r9, r1
 800a356:	f04f 0200 	mov.w	r2, #0
 800a35a:	d124      	bne.n	800a3a6 <_dtoa_r+0x62e>
 800a35c:	4b1b      	ldr	r3, [pc, #108]	; (800a3cc <_dtoa_r+0x654>)
 800a35e:	ec51 0b19 	vmov	r0, r1, d9
 800a362:	f7f5 ffb3 	bl	80002cc <__adddf3>
 800a366:	4602      	mov	r2, r0
 800a368:	460b      	mov	r3, r1
 800a36a:	4640      	mov	r0, r8
 800a36c:	4649      	mov	r1, r9
 800a36e:	f7f6 fbf3 	bl	8000b58 <__aeabi_dcmpgt>
 800a372:	2800      	cmp	r0, #0
 800a374:	d173      	bne.n	800a45e <_dtoa_r+0x6e6>
 800a376:	ec53 2b19 	vmov	r2, r3, d9
 800a37a:	4914      	ldr	r1, [pc, #80]	; (800a3cc <_dtoa_r+0x654>)
 800a37c:	2000      	movs	r0, #0
 800a37e:	f7f5 ffa3 	bl	80002c8 <__aeabi_dsub>
 800a382:	4602      	mov	r2, r0
 800a384:	460b      	mov	r3, r1
 800a386:	4640      	mov	r0, r8
 800a388:	4649      	mov	r1, r9
 800a38a:	f7f6 fbc7 	bl	8000b1c <__aeabi_dcmplt>
 800a38e:	2800      	cmp	r0, #0
 800a390:	f43f af2f 	beq.w	800a1f2 <_dtoa_r+0x47a>
 800a394:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a396:	1e6b      	subs	r3, r5, #1
 800a398:	930f      	str	r3, [sp, #60]	; 0x3c
 800a39a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a39e:	2b30      	cmp	r3, #48	; 0x30
 800a3a0:	d0f8      	beq.n	800a394 <_dtoa_r+0x61c>
 800a3a2:	46bb      	mov	fp, r7
 800a3a4:	e04a      	b.n	800a43c <_dtoa_r+0x6c4>
 800a3a6:	4b06      	ldr	r3, [pc, #24]	; (800a3c0 <_dtoa_r+0x648>)
 800a3a8:	f7f6 f946 	bl	8000638 <__aeabi_dmul>
 800a3ac:	4680      	mov	r8, r0
 800a3ae:	4689      	mov	r9, r1
 800a3b0:	e7bd      	b.n	800a32e <_dtoa_r+0x5b6>
 800a3b2:	bf00      	nop
 800a3b4:	0800cad8 	.word	0x0800cad8
 800a3b8:	0800cab0 	.word	0x0800cab0
 800a3bc:	3ff00000 	.word	0x3ff00000
 800a3c0:	40240000 	.word	0x40240000
 800a3c4:	401c0000 	.word	0x401c0000
 800a3c8:	40140000 	.word	0x40140000
 800a3cc:	3fe00000 	.word	0x3fe00000
 800a3d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a3d4:	9d00      	ldr	r5, [sp, #0]
 800a3d6:	4642      	mov	r2, r8
 800a3d8:	464b      	mov	r3, r9
 800a3da:	4630      	mov	r0, r6
 800a3dc:	4639      	mov	r1, r7
 800a3de:	f7f6 fa55 	bl	800088c <__aeabi_ddiv>
 800a3e2:	f7f6 fbd9 	bl	8000b98 <__aeabi_d2iz>
 800a3e6:	9001      	str	r0, [sp, #4]
 800a3e8:	f7f6 f8bc 	bl	8000564 <__aeabi_i2d>
 800a3ec:	4642      	mov	r2, r8
 800a3ee:	464b      	mov	r3, r9
 800a3f0:	f7f6 f922 	bl	8000638 <__aeabi_dmul>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	4630      	mov	r0, r6
 800a3fa:	4639      	mov	r1, r7
 800a3fc:	f7f5 ff64 	bl	80002c8 <__aeabi_dsub>
 800a400:	9e01      	ldr	r6, [sp, #4]
 800a402:	9f04      	ldr	r7, [sp, #16]
 800a404:	3630      	adds	r6, #48	; 0x30
 800a406:	f805 6b01 	strb.w	r6, [r5], #1
 800a40a:	9e00      	ldr	r6, [sp, #0]
 800a40c:	1bae      	subs	r6, r5, r6
 800a40e:	42b7      	cmp	r7, r6
 800a410:	4602      	mov	r2, r0
 800a412:	460b      	mov	r3, r1
 800a414:	d134      	bne.n	800a480 <_dtoa_r+0x708>
 800a416:	f7f5 ff59 	bl	80002cc <__adddf3>
 800a41a:	4642      	mov	r2, r8
 800a41c:	464b      	mov	r3, r9
 800a41e:	4606      	mov	r6, r0
 800a420:	460f      	mov	r7, r1
 800a422:	f7f6 fb99 	bl	8000b58 <__aeabi_dcmpgt>
 800a426:	b9c8      	cbnz	r0, 800a45c <_dtoa_r+0x6e4>
 800a428:	4642      	mov	r2, r8
 800a42a:	464b      	mov	r3, r9
 800a42c:	4630      	mov	r0, r6
 800a42e:	4639      	mov	r1, r7
 800a430:	f7f6 fb6a 	bl	8000b08 <__aeabi_dcmpeq>
 800a434:	b110      	cbz	r0, 800a43c <_dtoa_r+0x6c4>
 800a436:	9b01      	ldr	r3, [sp, #4]
 800a438:	07db      	lsls	r3, r3, #31
 800a43a:	d40f      	bmi.n	800a45c <_dtoa_r+0x6e4>
 800a43c:	4651      	mov	r1, sl
 800a43e:	4620      	mov	r0, r4
 800a440:	f000 fe82 	bl	800b148 <_Bfree>
 800a444:	2300      	movs	r3, #0
 800a446:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a448:	702b      	strb	r3, [r5, #0]
 800a44a:	f10b 0301 	add.w	r3, fp, #1
 800a44e:	6013      	str	r3, [r2, #0]
 800a450:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a452:	2b00      	cmp	r3, #0
 800a454:	f43f ace2 	beq.w	8009e1c <_dtoa_r+0xa4>
 800a458:	601d      	str	r5, [r3, #0]
 800a45a:	e4df      	b.n	8009e1c <_dtoa_r+0xa4>
 800a45c:	465f      	mov	r7, fp
 800a45e:	462b      	mov	r3, r5
 800a460:	461d      	mov	r5, r3
 800a462:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a466:	2a39      	cmp	r2, #57	; 0x39
 800a468:	d106      	bne.n	800a478 <_dtoa_r+0x700>
 800a46a:	9a00      	ldr	r2, [sp, #0]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d1f7      	bne.n	800a460 <_dtoa_r+0x6e8>
 800a470:	9900      	ldr	r1, [sp, #0]
 800a472:	2230      	movs	r2, #48	; 0x30
 800a474:	3701      	adds	r7, #1
 800a476:	700a      	strb	r2, [r1, #0]
 800a478:	781a      	ldrb	r2, [r3, #0]
 800a47a:	3201      	adds	r2, #1
 800a47c:	701a      	strb	r2, [r3, #0]
 800a47e:	e790      	b.n	800a3a2 <_dtoa_r+0x62a>
 800a480:	4ba3      	ldr	r3, [pc, #652]	; (800a710 <_dtoa_r+0x998>)
 800a482:	2200      	movs	r2, #0
 800a484:	f7f6 f8d8 	bl	8000638 <__aeabi_dmul>
 800a488:	2200      	movs	r2, #0
 800a48a:	2300      	movs	r3, #0
 800a48c:	4606      	mov	r6, r0
 800a48e:	460f      	mov	r7, r1
 800a490:	f7f6 fb3a 	bl	8000b08 <__aeabi_dcmpeq>
 800a494:	2800      	cmp	r0, #0
 800a496:	d09e      	beq.n	800a3d6 <_dtoa_r+0x65e>
 800a498:	e7d0      	b.n	800a43c <_dtoa_r+0x6c4>
 800a49a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a49c:	2a00      	cmp	r2, #0
 800a49e:	f000 80ca 	beq.w	800a636 <_dtoa_r+0x8be>
 800a4a2:	9a07      	ldr	r2, [sp, #28]
 800a4a4:	2a01      	cmp	r2, #1
 800a4a6:	f300 80ad 	bgt.w	800a604 <_dtoa_r+0x88c>
 800a4aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4ac:	2a00      	cmp	r2, #0
 800a4ae:	f000 80a5 	beq.w	800a5fc <_dtoa_r+0x884>
 800a4b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a4b6:	9e08      	ldr	r6, [sp, #32]
 800a4b8:	9d05      	ldr	r5, [sp, #20]
 800a4ba:	9a05      	ldr	r2, [sp, #20]
 800a4bc:	441a      	add	r2, r3
 800a4be:	9205      	str	r2, [sp, #20]
 800a4c0:	9a06      	ldr	r2, [sp, #24]
 800a4c2:	2101      	movs	r1, #1
 800a4c4:	441a      	add	r2, r3
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	9206      	str	r2, [sp, #24]
 800a4ca:	f000 ff3d 	bl	800b348 <__i2b>
 800a4ce:	4607      	mov	r7, r0
 800a4d0:	b165      	cbz	r5, 800a4ec <_dtoa_r+0x774>
 800a4d2:	9b06      	ldr	r3, [sp, #24]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	dd09      	ble.n	800a4ec <_dtoa_r+0x774>
 800a4d8:	42ab      	cmp	r3, r5
 800a4da:	9a05      	ldr	r2, [sp, #20]
 800a4dc:	bfa8      	it	ge
 800a4de:	462b      	movge	r3, r5
 800a4e0:	1ad2      	subs	r2, r2, r3
 800a4e2:	9205      	str	r2, [sp, #20]
 800a4e4:	9a06      	ldr	r2, [sp, #24]
 800a4e6:	1aed      	subs	r5, r5, r3
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	9306      	str	r3, [sp, #24]
 800a4ec:	9b08      	ldr	r3, [sp, #32]
 800a4ee:	b1f3      	cbz	r3, 800a52e <_dtoa_r+0x7b6>
 800a4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	f000 80a3 	beq.w	800a63e <_dtoa_r+0x8c6>
 800a4f8:	2e00      	cmp	r6, #0
 800a4fa:	dd10      	ble.n	800a51e <_dtoa_r+0x7a6>
 800a4fc:	4639      	mov	r1, r7
 800a4fe:	4632      	mov	r2, r6
 800a500:	4620      	mov	r0, r4
 800a502:	f000 ffe1 	bl	800b4c8 <__pow5mult>
 800a506:	4652      	mov	r2, sl
 800a508:	4601      	mov	r1, r0
 800a50a:	4607      	mov	r7, r0
 800a50c:	4620      	mov	r0, r4
 800a50e:	f000 ff31 	bl	800b374 <__multiply>
 800a512:	4651      	mov	r1, sl
 800a514:	4680      	mov	r8, r0
 800a516:	4620      	mov	r0, r4
 800a518:	f000 fe16 	bl	800b148 <_Bfree>
 800a51c:	46c2      	mov	sl, r8
 800a51e:	9b08      	ldr	r3, [sp, #32]
 800a520:	1b9a      	subs	r2, r3, r6
 800a522:	d004      	beq.n	800a52e <_dtoa_r+0x7b6>
 800a524:	4651      	mov	r1, sl
 800a526:	4620      	mov	r0, r4
 800a528:	f000 ffce 	bl	800b4c8 <__pow5mult>
 800a52c:	4682      	mov	sl, r0
 800a52e:	2101      	movs	r1, #1
 800a530:	4620      	mov	r0, r4
 800a532:	f000 ff09 	bl	800b348 <__i2b>
 800a536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a538:	2b00      	cmp	r3, #0
 800a53a:	4606      	mov	r6, r0
 800a53c:	f340 8081 	ble.w	800a642 <_dtoa_r+0x8ca>
 800a540:	461a      	mov	r2, r3
 800a542:	4601      	mov	r1, r0
 800a544:	4620      	mov	r0, r4
 800a546:	f000 ffbf 	bl	800b4c8 <__pow5mult>
 800a54a:	9b07      	ldr	r3, [sp, #28]
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	4606      	mov	r6, r0
 800a550:	dd7a      	ble.n	800a648 <_dtoa_r+0x8d0>
 800a552:	f04f 0800 	mov.w	r8, #0
 800a556:	6933      	ldr	r3, [r6, #16]
 800a558:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a55c:	6918      	ldr	r0, [r3, #16]
 800a55e:	f000 fea5 	bl	800b2ac <__hi0bits>
 800a562:	f1c0 0020 	rsb	r0, r0, #32
 800a566:	9b06      	ldr	r3, [sp, #24]
 800a568:	4418      	add	r0, r3
 800a56a:	f010 001f 	ands.w	r0, r0, #31
 800a56e:	f000 8094 	beq.w	800a69a <_dtoa_r+0x922>
 800a572:	f1c0 0320 	rsb	r3, r0, #32
 800a576:	2b04      	cmp	r3, #4
 800a578:	f340 8085 	ble.w	800a686 <_dtoa_r+0x90e>
 800a57c:	9b05      	ldr	r3, [sp, #20]
 800a57e:	f1c0 001c 	rsb	r0, r0, #28
 800a582:	4403      	add	r3, r0
 800a584:	9305      	str	r3, [sp, #20]
 800a586:	9b06      	ldr	r3, [sp, #24]
 800a588:	4403      	add	r3, r0
 800a58a:	4405      	add	r5, r0
 800a58c:	9306      	str	r3, [sp, #24]
 800a58e:	9b05      	ldr	r3, [sp, #20]
 800a590:	2b00      	cmp	r3, #0
 800a592:	dd05      	ble.n	800a5a0 <_dtoa_r+0x828>
 800a594:	4651      	mov	r1, sl
 800a596:	461a      	mov	r2, r3
 800a598:	4620      	mov	r0, r4
 800a59a:	f000 ffef 	bl	800b57c <__lshift>
 800a59e:	4682      	mov	sl, r0
 800a5a0:	9b06      	ldr	r3, [sp, #24]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	dd05      	ble.n	800a5b2 <_dtoa_r+0x83a>
 800a5a6:	4631      	mov	r1, r6
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f000 ffe6 	bl	800b57c <__lshift>
 800a5b0:	4606      	mov	r6, r0
 800a5b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d072      	beq.n	800a69e <_dtoa_r+0x926>
 800a5b8:	4631      	mov	r1, r6
 800a5ba:	4650      	mov	r0, sl
 800a5bc:	f001 f84a 	bl	800b654 <__mcmp>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	da6c      	bge.n	800a69e <_dtoa_r+0x926>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	4651      	mov	r1, sl
 800a5c8:	220a      	movs	r2, #10
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	f000 fdde 	bl	800b18c <__multadd>
 800a5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a5d6:	4682      	mov	sl, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	f000 81b0 	beq.w	800a93e <_dtoa_r+0xbc6>
 800a5de:	2300      	movs	r3, #0
 800a5e0:	4639      	mov	r1, r7
 800a5e2:	220a      	movs	r2, #10
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	f000 fdd1 	bl	800b18c <__multadd>
 800a5ea:	9b01      	ldr	r3, [sp, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	4607      	mov	r7, r0
 800a5f0:	f300 8096 	bgt.w	800a720 <_dtoa_r+0x9a8>
 800a5f4:	9b07      	ldr	r3, [sp, #28]
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	dc59      	bgt.n	800a6ae <_dtoa_r+0x936>
 800a5fa:	e091      	b.n	800a720 <_dtoa_r+0x9a8>
 800a5fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a602:	e758      	b.n	800a4b6 <_dtoa_r+0x73e>
 800a604:	9b04      	ldr	r3, [sp, #16]
 800a606:	1e5e      	subs	r6, r3, #1
 800a608:	9b08      	ldr	r3, [sp, #32]
 800a60a:	42b3      	cmp	r3, r6
 800a60c:	bfbf      	itttt	lt
 800a60e:	9b08      	ldrlt	r3, [sp, #32]
 800a610:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a612:	9608      	strlt	r6, [sp, #32]
 800a614:	1af3      	sublt	r3, r6, r3
 800a616:	bfb4      	ite	lt
 800a618:	18d2      	addlt	r2, r2, r3
 800a61a:	1b9e      	subge	r6, r3, r6
 800a61c:	9b04      	ldr	r3, [sp, #16]
 800a61e:	bfbc      	itt	lt
 800a620:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a622:	2600      	movlt	r6, #0
 800a624:	2b00      	cmp	r3, #0
 800a626:	bfb7      	itett	lt
 800a628:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a62c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a630:	1a9d      	sublt	r5, r3, r2
 800a632:	2300      	movlt	r3, #0
 800a634:	e741      	b.n	800a4ba <_dtoa_r+0x742>
 800a636:	9e08      	ldr	r6, [sp, #32]
 800a638:	9d05      	ldr	r5, [sp, #20]
 800a63a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a63c:	e748      	b.n	800a4d0 <_dtoa_r+0x758>
 800a63e:	9a08      	ldr	r2, [sp, #32]
 800a640:	e770      	b.n	800a524 <_dtoa_r+0x7ac>
 800a642:	9b07      	ldr	r3, [sp, #28]
 800a644:	2b01      	cmp	r3, #1
 800a646:	dc19      	bgt.n	800a67c <_dtoa_r+0x904>
 800a648:	9b02      	ldr	r3, [sp, #8]
 800a64a:	b9bb      	cbnz	r3, 800a67c <_dtoa_r+0x904>
 800a64c:	9b03      	ldr	r3, [sp, #12]
 800a64e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a652:	b99b      	cbnz	r3, 800a67c <_dtoa_r+0x904>
 800a654:	9b03      	ldr	r3, [sp, #12]
 800a656:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a65a:	0d1b      	lsrs	r3, r3, #20
 800a65c:	051b      	lsls	r3, r3, #20
 800a65e:	b183      	cbz	r3, 800a682 <_dtoa_r+0x90a>
 800a660:	9b05      	ldr	r3, [sp, #20]
 800a662:	3301      	adds	r3, #1
 800a664:	9305      	str	r3, [sp, #20]
 800a666:	9b06      	ldr	r3, [sp, #24]
 800a668:	3301      	adds	r3, #1
 800a66a:	9306      	str	r3, [sp, #24]
 800a66c:	f04f 0801 	mov.w	r8, #1
 800a670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a672:	2b00      	cmp	r3, #0
 800a674:	f47f af6f 	bne.w	800a556 <_dtoa_r+0x7de>
 800a678:	2001      	movs	r0, #1
 800a67a:	e774      	b.n	800a566 <_dtoa_r+0x7ee>
 800a67c:	f04f 0800 	mov.w	r8, #0
 800a680:	e7f6      	b.n	800a670 <_dtoa_r+0x8f8>
 800a682:	4698      	mov	r8, r3
 800a684:	e7f4      	b.n	800a670 <_dtoa_r+0x8f8>
 800a686:	d082      	beq.n	800a58e <_dtoa_r+0x816>
 800a688:	9a05      	ldr	r2, [sp, #20]
 800a68a:	331c      	adds	r3, #28
 800a68c:	441a      	add	r2, r3
 800a68e:	9205      	str	r2, [sp, #20]
 800a690:	9a06      	ldr	r2, [sp, #24]
 800a692:	441a      	add	r2, r3
 800a694:	441d      	add	r5, r3
 800a696:	9206      	str	r2, [sp, #24]
 800a698:	e779      	b.n	800a58e <_dtoa_r+0x816>
 800a69a:	4603      	mov	r3, r0
 800a69c:	e7f4      	b.n	800a688 <_dtoa_r+0x910>
 800a69e:	9b04      	ldr	r3, [sp, #16]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	dc37      	bgt.n	800a714 <_dtoa_r+0x99c>
 800a6a4:	9b07      	ldr	r3, [sp, #28]
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	dd34      	ble.n	800a714 <_dtoa_r+0x99c>
 800a6aa:	9b04      	ldr	r3, [sp, #16]
 800a6ac:	9301      	str	r3, [sp, #4]
 800a6ae:	9b01      	ldr	r3, [sp, #4]
 800a6b0:	b963      	cbnz	r3, 800a6cc <_dtoa_r+0x954>
 800a6b2:	4631      	mov	r1, r6
 800a6b4:	2205      	movs	r2, #5
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f000 fd68 	bl	800b18c <__multadd>
 800a6bc:	4601      	mov	r1, r0
 800a6be:	4606      	mov	r6, r0
 800a6c0:	4650      	mov	r0, sl
 800a6c2:	f000 ffc7 	bl	800b654 <__mcmp>
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	f73f adbb 	bgt.w	800a242 <_dtoa_r+0x4ca>
 800a6cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6ce:	9d00      	ldr	r5, [sp, #0]
 800a6d0:	ea6f 0b03 	mvn.w	fp, r3
 800a6d4:	f04f 0800 	mov.w	r8, #0
 800a6d8:	4631      	mov	r1, r6
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f000 fd34 	bl	800b148 <_Bfree>
 800a6e0:	2f00      	cmp	r7, #0
 800a6e2:	f43f aeab 	beq.w	800a43c <_dtoa_r+0x6c4>
 800a6e6:	f1b8 0f00 	cmp.w	r8, #0
 800a6ea:	d005      	beq.n	800a6f8 <_dtoa_r+0x980>
 800a6ec:	45b8      	cmp	r8, r7
 800a6ee:	d003      	beq.n	800a6f8 <_dtoa_r+0x980>
 800a6f0:	4641      	mov	r1, r8
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f000 fd28 	bl	800b148 <_Bfree>
 800a6f8:	4639      	mov	r1, r7
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f000 fd24 	bl	800b148 <_Bfree>
 800a700:	e69c      	b.n	800a43c <_dtoa_r+0x6c4>
 800a702:	2600      	movs	r6, #0
 800a704:	4637      	mov	r7, r6
 800a706:	e7e1      	b.n	800a6cc <_dtoa_r+0x954>
 800a708:	46bb      	mov	fp, r7
 800a70a:	4637      	mov	r7, r6
 800a70c:	e599      	b.n	800a242 <_dtoa_r+0x4ca>
 800a70e:	bf00      	nop
 800a710:	40240000 	.word	0x40240000
 800a714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a716:	2b00      	cmp	r3, #0
 800a718:	f000 80c8 	beq.w	800a8ac <_dtoa_r+0xb34>
 800a71c:	9b04      	ldr	r3, [sp, #16]
 800a71e:	9301      	str	r3, [sp, #4]
 800a720:	2d00      	cmp	r5, #0
 800a722:	dd05      	ble.n	800a730 <_dtoa_r+0x9b8>
 800a724:	4639      	mov	r1, r7
 800a726:	462a      	mov	r2, r5
 800a728:	4620      	mov	r0, r4
 800a72a:	f000 ff27 	bl	800b57c <__lshift>
 800a72e:	4607      	mov	r7, r0
 800a730:	f1b8 0f00 	cmp.w	r8, #0
 800a734:	d05b      	beq.n	800a7ee <_dtoa_r+0xa76>
 800a736:	6879      	ldr	r1, [r7, #4]
 800a738:	4620      	mov	r0, r4
 800a73a:	f000 fcc5 	bl	800b0c8 <_Balloc>
 800a73e:	4605      	mov	r5, r0
 800a740:	b928      	cbnz	r0, 800a74e <_dtoa_r+0x9d6>
 800a742:	4b83      	ldr	r3, [pc, #524]	; (800a950 <_dtoa_r+0xbd8>)
 800a744:	4602      	mov	r2, r0
 800a746:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a74a:	f7ff bb2e 	b.w	8009daa <_dtoa_r+0x32>
 800a74e:	693a      	ldr	r2, [r7, #16]
 800a750:	3202      	adds	r2, #2
 800a752:	0092      	lsls	r2, r2, #2
 800a754:	f107 010c 	add.w	r1, r7, #12
 800a758:	300c      	adds	r0, #12
 800a75a:	f7ff fa66 	bl	8009c2a <memcpy>
 800a75e:	2201      	movs	r2, #1
 800a760:	4629      	mov	r1, r5
 800a762:	4620      	mov	r0, r4
 800a764:	f000 ff0a 	bl	800b57c <__lshift>
 800a768:	9b00      	ldr	r3, [sp, #0]
 800a76a:	3301      	adds	r3, #1
 800a76c:	9304      	str	r3, [sp, #16]
 800a76e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a772:	4413      	add	r3, r2
 800a774:	9308      	str	r3, [sp, #32]
 800a776:	9b02      	ldr	r3, [sp, #8]
 800a778:	f003 0301 	and.w	r3, r3, #1
 800a77c:	46b8      	mov	r8, r7
 800a77e:	9306      	str	r3, [sp, #24]
 800a780:	4607      	mov	r7, r0
 800a782:	9b04      	ldr	r3, [sp, #16]
 800a784:	4631      	mov	r1, r6
 800a786:	3b01      	subs	r3, #1
 800a788:	4650      	mov	r0, sl
 800a78a:	9301      	str	r3, [sp, #4]
 800a78c:	f7ff fa6a 	bl	8009c64 <quorem>
 800a790:	4641      	mov	r1, r8
 800a792:	9002      	str	r0, [sp, #8]
 800a794:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a798:	4650      	mov	r0, sl
 800a79a:	f000 ff5b 	bl	800b654 <__mcmp>
 800a79e:	463a      	mov	r2, r7
 800a7a0:	9005      	str	r0, [sp, #20]
 800a7a2:	4631      	mov	r1, r6
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	f000 ff71 	bl	800b68c <__mdiff>
 800a7aa:	68c2      	ldr	r2, [r0, #12]
 800a7ac:	4605      	mov	r5, r0
 800a7ae:	bb02      	cbnz	r2, 800a7f2 <_dtoa_r+0xa7a>
 800a7b0:	4601      	mov	r1, r0
 800a7b2:	4650      	mov	r0, sl
 800a7b4:	f000 ff4e 	bl	800b654 <__mcmp>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	4629      	mov	r1, r5
 800a7bc:	4620      	mov	r0, r4
 800a7be:	9209      	str	r2, [sp, #36]	; 0x24
 800a7c0:	f000 fcc2 	bl	800b148 <_Bfree>
 800a7c4:	9b07      	ldr	r3, [sp, #28]
 800a7c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7c8:	9d04      	ldr	r5, [sp, #16]
 800a7ca:	ea43 0102 	orr.w	r1, r3, r2
 800a7ce:	9b06      	ldr	r3, [sp, #24]
 800a7d0:	4319      	orrs	r1, r3
 800a7d2:	d110      	bne.n	800a7f6 <_dtoa_r+0xa7e>
 800a7d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a7d8:	d029      	beq.n	800a82e <_dtoa_r+0xab6>
 800a7da:	9b05      	ldr	r3, [sp, #20]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	dd02      	ble.n	800a7e6 <_dtoa_r+0xa6e>
 800a7e0:	9b02      	ldr	r3, [sp, #8]
 800a7e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a7e6:	9b01      	ldr	r3, [sp, #4]
 800a7e8:	f883 9000 	strb.w	r9, [r3]
 800a7ec:	e774      	b.n	800a6d8 <_dtoa_r+0x960>
 800a7ee:	4638      	mov	r0, r7
 800a7f0:	e7ba      	b.n	800a768 <_dtoa_r+0x9f0>
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	e7e1      	b.n	800a7ba <_dtoa_r+0xa42>
 800a7f6:	9b05      	ldr	r3, [sp, #20]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	db04      	blt.n	800a806 <_dtoa_r+0xa8e>
 800a7fc:	9907      	ldr	r1, [sp, #28]
 800a7fe:	430b      	orrs	r3, r1
 800a800:	9906      	ldr	r1, [sp, #24]
 800a802:	430b      	orrs	r3, r1
 800a804:	d120      	bne.n	800a848 <_dtoa_r+0xad0>
 800a806:	2a00      	cmp	r2, #0
 800a808:	dded      	ble.n	800a7e6 <_dtoa_r+0xa6e>
 800a80a:	4651      	mov	r1, sl
 800a80c:	2201      	movs	r2, #1
 800a80e:	4620      	mov	r0, r4
 800a810:	f000 feb4 	bl	800b57c <__lshift>
 800a814:	4631      	mov	r1, r6
 800a816:	4682      	mov	sl, r0
 800a818:	f000 ff1c 	bl	800b654 <__mcmp>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	dc03      	bgt.n	800a828 <_dtoa_r+0xab0>
 800a820:	d1e1      	bne.n	800a7e6 <_dtoa_r+0xa6e>
 800a822:	f019 0f01 	tst.w	r9, #1
 800a826:	d0de      	beq.n	800a7e6 <_dtoa_r+0xa6e>
 800a828:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a82c:	d1d8      	bne.n	800a7e0 <_dtoa_r+0xa68>
 800a82e:	9a01      	ldr	r2, [sp, #4]
 800a830:	2339      	movs	r3, #57	; 0x39
 800a832:	7013      	strb	r3, [r2, #0]
 800a834:	462b      	mov	r3, r5
 800a836:	461d      	mov	r5, r3
 800a838:	3b01      	subs	r3, #1
 800a83a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a83e:	2a39      	cmp	r2, #57	; 0x39
 800a840:	d06c      	beq.n	800a91c <_dtoa_r+0xba4>
 800a842:	3201      	adds	r2, #1
 800a844:	701a      	strb	r2, [r3, #0]
 800a846:	e747      	b.n	800a6d8 <_dtoa_r+0x960>
 800a848:	2a00      	cmp	r2, #0
 800a84a:	dd07      	ble.n	800a85c <_dtoa_r+0xae4>
 800a84c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a850:	d0ed      	beq.n	800a82e <_dtoa_r+0xab6>
 800a852:	9a01      	ldr	r2, [sp, #4]
 800a854:	f109 0301 	add.w	r3, r9, #1
 800a858:	7013      	strb	r3, [r2, #0]
 800a85a:	e73d      	b.n	800a6d8 <_dtoa_r+0x960>
 800a85c:	9b04      	ldr	r3, [sp, #16]
 800a85e:	9a08      	ldr	r2, [sp, #32]
 800a860:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a864:	4293      	cmp	r3, r2
 800a866:	d043      	beq.n	800a8f0 <_dtoa_r+0xb78>
 800a868:	4651      	mov	r1, sl
 800a86a:	2300      	movs	r3, #0
 800a86c:	220a      	movs	r2, #10
 800a86e:	4620      	mov	r0, r4
 800a870:	f000 fc8c 	bl	800b18c <__multadd>
 800a874:	45b8      	cmp	r8, r7
 800a876:	4682      	mov	sl, r0
 800a878:	f04f 0300 	mov.w	r3, #0
 800a87c:	f04f 020a 	mov.w	r2, #10
 800a880:	4641      	mov	r1, r8
 800a882:	4620      	mov	r0, r4
 800a884:	d107      	bne.n	800a896 <_dtoa_r+0xb1e>
 800a886:	f000 fc81 	bl	800b18c <__multadd>
 800a88a:	4680      	mov	r8, r0
 800a88c:	4607      	mov	r7, r0
 800a88e:	9b04      	ldr	r3, [sp, #16]
 800a890:	3301      	adds	r3, #1
 800a892:	9304      	str	r3, [sp, #16]
 800a894:	e775      	b.n	800a782 <_dtoa_r+0xa0a>
 800a896:	f000 fc79 	bl	800b18c <__multadd>
 800a89a:	4639      	mov	r1, r7
 800a89c:	4680      	mov	r8, r0
 800a89e:	2300      	movs	r3, #0
 800a8a0:	220a      	movs	r2, #10
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f000 fc72 	bl	800b18c <__multadd>
 800a8a8:	4607      	mov	r7, r0
 800a8aa:	e7f0      	b.n	800a88e <_dtoa_r+0xb16>
 800a8ac:	9b04      	ldr	r3, [sp, #16]
 800a8ae:	9301      	str	r3, [sp, #4]
 800a8b0:	9d00      	ldr	r5, [sp, #0]
 800a8b2:	4631      	mov	r1, r6
 800a8b4:	4650      	mov	r0, sl
 800a8b6:	f7ff f9d5 	bl	8009c64 <quorem>
 800a8ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a8be:	9b00      	ldr	r3, [sp, #0]
 800a8c0:	f805 9b01 	strb.w	r9, [r5], #1
 800a8c4:	1aea      	subs	r2, r5, r3
 800a8c6:	9b01      	ldr	r3, [sp, #4]
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	dd07      	ble.n	800a8dc <_dtoa_r+0xb64>
 800a8cc:	4651      	mov	r1, sl
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	220a      	movs	r2, #10
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	f000 fc5a 	bl	800b18c <__multadd>
 800a8d8:	4682      	mov	sl, r0
 800a8da:	e7ea      	b.n	800a8b2 <_dtoa_r+0xb3a>
 800a8dc:	9b01      	ldr	r3, [sp, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	bfc8      	it	gt
 800a8e2:	461d      	movgt	r5, r3
 800a8e4:	9b00      	ldr	r3, [sp, #0]
 800a8e6:	bfd8      	it	le
 800a8e8:	2501      	movle	r5, #1
 800a8ea:	441d      	add	r5, r3
 800a8ec:	f04f 0800 	mov.w	r8, #0
 800a8f0:	4651      	mov	r1, sl
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	f000 fe41 	bl	800b57c <__lshift>
 800a8fa:	4631      	mov	r1, r6
 800a8fc:	4682      	mov	sl, r0
 800a8fe:	f000 fea9 	bl	800b654 <__mcmp>
 800a902:	2800      	cmp	r0, #0
 800a904:	dc96      	bgt.n	800a834 <_dtoa_r+0xabc>
 800a906:	d102      	bne.n	800a90e <_dtoa_r+0xb96>
 800a908:	f019 0f01 	tst.w	r9, #1
 800a90c:	d192      	bne.n	800a834 <_dtoa_r+0xabc>
 800a90e:	462b      	mov	r3, r5
 800a910:	461d      	mov	r5, r3
 800a912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a916:	2a30      	cmp	r2, #48	; 0x30
 800a918:	d0fa      	beq.n	800a910 <_dtoa_r+0xb98>
 800a91a:	e6dd      	b.n	800a6d8 <_dtoa_r+0x960>
 800a91c:	9a00      	ldr	r2, [sp, #0]
 800a91e:	429a      	cmp	r2, r3
 800a920:	d189      	bne.n	800a836 <_dtoa_r+0xabe>
 800a922:	f10b 0b01 	add.w	fp, fp, #1
 800a926:	2331      	movs	r3, #49	; 0x31
 800a928:	e796      	b.n	800a858 <_dtoa_r+0xae0>
 800a92a:	4b0a      	ldr	r3, [pc, #40]	; (800a954 <_dtoa_r+0xbdc>)
 800a92c:	f7ff ba99 	b.w	8009e62 <_dtoa_r+0xea>
 800a930:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a932:	2b00      	cmp	r3, #0
 800a934:	f47f aa6d 	bne.w	8009e12 <_dtoa_r+0x9a>
 800a938:	4b07      	ldr	r3, [pc, #28]	; (800a958 <_dtoa_r+0xbe0>)
 800a93a:	f7ff ba92 	b.w	8009e62 <_dtoa_r+0xea>
 800a93e:	9b01      	ldr	r3, [sp, #4]
 800a940:	2b00      	cmp	r3, #0
 800a942:	dcb5      	bgt.n	800a8b0 <_dtoa_r+0xb38>
 800a944:	9b07      	ldr	r3, [sp, #28]
 800a946:	2b02      	cmp	r3, #2
 800a948:	f73f aeb1 	bgt.w	800a6ae <_dtoa_r+0x936>
 800a94c:	e7b0      	b.n	800a8b0 <_dtoa_r+0xb38>
 800a94e:	bf00      	nop
 800a950:	0800c9e1 	.word	0x0800c9e1
 800a954:	0800c939 	.word	0x0800c939
 800a958:	0800c965 	.word	0x0800c965

0800a95c <_free_r>:
 800a95c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a95e:	2900      	cmp	r1, #0
 800a960:	d044      	beq.n	800a9ec <_free_r+0x90>
 800a962:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a966:	9001      	str	r0, [sp, #4]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f1a1 0404 	sub.w	r4, r1, #4
 800a96e:	bfb8      	it	lt
 800a970:	18e4      	addlt	r4, r4, r3
 800a972:	f7fd fa17 	bl	8007da4 <__malloc_lock>
 800a976:	4a1e      	ldr	r2, [pc, #120]	; (800a9f0 <_free_r+0x94>)
 800a978:	9801      	ldr	r0, [sp, #4]
 800a97a:	6813      	ldr	r3, [r2, #0]
 800a97c:	b933      	cbnz	r3, 800a98c <_free_r+0x30>
 800a97e:	6063      	str	r3, [r4, #4]
 800a980:	6014      	str	r4, [r2, #0]
 800a982:	b003      	add	sp, #12
 800a984:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a988:	f7fd ba12 	b.w	8007db0 <__malloc_unlock>
 800a98c:	42a3      	cmp	r3, r4
 800a98e:	d908      	bls.n	800a9a2 <_free_r+0x46>
 800a990:	6825      	ldr	r5, [r4, #0]
 800a992:	1961      	adds	r1, r4, r5
 800a994:	428b      	cmp	r3, r1
 800a996:	bf01      	itttt	eq
 800a998:	6819      	ldreq	r1, [r3, #0]
 800a99a:	685b      	ldreq	r3, [r3, #4]
 800a99c:	1949      	addeq	r1, r1, r5
 800a99e:	6021      	streq	r1, [r4, #0]
 800a9a0:	e7ed      	b.n	800a97e <_free_r+0x22>
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	b10b      	cbz	r3, 800a9ac <_free_r+0x50>
 800a9a8:	42a3      	cmp	r3, r4
 800a9aa:	d9fa      	bls.n	800a9a2 <_free_r+0x46>
 800a9ac:	6811      	ldr	r1, [r2, #0]
 800a9ae:	1855      	adds	r5, r2, r1
 800a9b0:	42a5      	cmp	r5, r4
 800a9b2:	d10b      	bne.n	800a9cc <_free_r+0x70>
 800a9b4:	6824      	ldr	r4, [r4, #0]
 800a9b6:	4421      	add	r1, r4
 800a9b8:	1854      	adds	r4, r2, r1
 800a9ba:	42a3      	cmp	r3, r4
 800a9bc:	6011      	str	r1, [r2, #0]
 800a9be:	d1e0      	bne.n	800a982 <_free_r+0x26>
 800a9c0:	681c      	ldr	r4, [r3, #0]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	6053      	str	r3, [r2, #4]
 800a9c6:	440c      	add	r4, r1
 800a9c8:	6014      	str	r4, [r2, #0]
 800a9ca:	e7da      	b.n	800a982 <_free_r+0x26>
 800a9cc:	d902      	bls.n	800a9d4 <_free_r+0x78>
 800a9ce:	230c      	movs	r3, #12
 800a9d0:	6003      	str	r3, [r0, #0]
 800a9d2:	e7d6      	b.n	800a982 <_free_r+0x26>
 800a9d4:	6825      	ldr	r5, [r4, #0]
 800a9d6:	1961      	adds	r1, r4, r5
 800a9d8:	428b      	cmp	r3, r1
 800a9da:	bf04      	itt	eq
 800a9dc:	6819      	ldreq	r1, [r3, #0]
 800a9de:	685b      	ldreq	r3, [r3, #4]
 800a9e0:	6063      	str	r3, [r4, #4]
 800a9e2:	bf04      	itt	eq
 800a9e4:	1949      	addeq	r1, r1, r5
 800a9e6:	6021      	streq	r1, [r4, #0]
 800a9e8:	6054      	str	r4, [r2, #4]
 800a9ea:	e7ca      	b.n	800a982 <_free_r+0x26>
 800a9ec:	b003      	add	sp, #12
 800a9ee:	bd30      	pop	{r4, r5, pc}
 800a9f0:	20002b68 	.word	0x20002b68

0800a9f4 <rshift>:
 800a9f4:	6903      	ldr	r3, [r0, #16]
 800a9f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a9fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aa02:	f100 0414 	add.w	r4, r0, #20
 800aa06:	dd45      	ble.n	800aa94 <rshift+0xa0>
 800aa08:	f011 011f 	ands.w	r1, r1, #31
 800aa0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aa10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aa14:	d10c      	bne.n	800aa30 <rshift+0x3c>
 800aa16:	f100 0710 	add.w	r7, r0, #16
 800aa1a:	4629      	mov	r1, r5
 800aa1c:	42b1      	cmp	r1, r6
 800aa1e:	d334      	bcc.n	800aa8a <rshift+0x96>
 800aa20:	1a9b      	subs	r3, r3, r2
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	1eea      	subs	r2, r5, #3
 800aa26:	4296      	cmp	r6, r2
 800aa28:	bf38      	it	cc
 800aa2a:	2300      	movcc	r3, #0
 800aa2c:	4423      	add	r3, r4
 800aa2e:	e015      	b.n	800aa5c <rshift+0x68>
 800aa30:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aa34:	f1c1 0820 	rsb	r8, r1, #32
 800aa38:	40cf      	lsrs	r7, r1
 800aa3a:	f105 0e04 	add.w	lr, r5, #4
 800aa3e:	46a1      	mov	r9, r4
 800aa40:	4576      	cmp	r6, lr
 800aa42:	46f4      	mov	ip, lr
 800aa44:	d815      	bhi.n	800aa72 <rshift+0x7e>
 800aa46:	1a9a      	subs	r2, r3, r2
 800aa48:	0092      	lsls	r2, r2, #2
 800aa4a:	3a04      	subs	r2, #4
 800aa4c:	3501      	adds	r5, #1
 800aa4e:	42ae      	cmp	r6, r5
 800aa50:	bf38      	it	cc
 800aa52:	2200      	movcc	r2, #0
 800aa54:	18a3      	adds	r3, r4, r2
 800aa56:	50a7      	str	r7, [r4, r2]
 800aa58:	b107      	cbz	r7, 800aa5c <rshift+0x68>
 800aa5a:	3304      	adds	r3, #4
 800aa5c:	1b1a      	subs	r2, r3, r4
 800aa5e:	42a3      	cmp	r3, r4
 800aa60:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa64:	bf08      	it	eq
 800aa66:	2300      	moveq	r3, #0
 800aa68:	6102      	str	r2, [r0, #16]
 800aa6a:	bf08      	it	eq
 800aa6c:	6143      	streq	r3, [r0, #20]
 800aa6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa72:	f8dc c000 	ldr.w	ip, [ip]
 800aa76:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa7a:	ea4c 0707 	orr.w	r7, ip, r7
 800aa7e:	f849 7b04 	str.w	r7, [r9], #4
 800aa82:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa86:	40cf      	lsrs	r7, r1
 800aa88:	e7da      	b.n	800aa40 <rshift+0x4c>
 800aa8a:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa8e:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa92:	e7c3      	b.n	800aa1c <rshift+0x28>
 800aa94:	4623      	mov	r3, r4
 800aa96:	e7e1      	b.n	800aa5c <rshift+0x68>

0800aa98 <__hexdig_fun>:
 800aa98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aa9c:	2b09      	cmp	r3, #9
 800aa9e:	d802      	bhi.n	800aaa6 <__hexdig_fun+0xe>
 800aaa0:	3820      	subs	r0, #32
 800aaa2:	b2c0      	uxtb	r0, r0
 800aaa4:	4770      	bx	lr
 800aaa6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aaaa:	2b05      	cmp	r3, #5
 800aaac:	d801      	bhi.n	800aab2 <__hexdig_fun+0x1a>
 800aaae:	3847      	subs	r0, #71	; 0x47
 800aab0:	e7f7      	b.n	800aaa2 <__hexdig_fun+0xa>
 800aab2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aab6:	2b05      	cmp	r3, #5
 800aab8:	d801      	bhi.n	800aabe <__hexdig_fun+0x26>
 800aaba:	3827      	subs	r0, #39	; 0x27
 800aabc:	e7f1      	b.n	800aaa2 <__hexdig_fun+0xa>
 800aabe:	2000      	movs	r0, #0
 800aac0:	4770      	bx	lr
	...

0800aac4 <__gethex>:
 800aac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac8:	4617      	mov	r7, r2
 800aaca:	680a      	ldr	r2, [r1, #0]
 800aacc:	b085      	sub	sp, #20
 800aace:	f102 0b02 	add.w	fp, r2, #2
 800aad2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800aad6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800aada:	4681      	mov	r9, r0
 800aadc:	468a      	mov	sl, r1
 800aade:	9302      	str	r3, [sp, #8]
 800aae0:	32fe      	adds	r2, #254	; 0xfe
 800aae2:	eb02 030b 	add.w	r3, r2, fp
 800aae6:	46d8      	mov	r8, fp
 800aae8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800aaec:	9301      	str	r3, [sp, #4]
 800aaee:	2830      	cmp	r0, #48	; 0x30
 800aaf0:	d0f7      	beq.n	800aae2 <__gethex+0x1e>
 800aaf2:	f7ff ffd1 	bl	800aa98 <__hexdig_fun>
 800aaf6:	4604      	mov	r4, r0
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	d138      	bne.n	800ab6e <__gethex+0xaa>
 800aafc:	49a7      	ldr	r1, [pc, #668]	; (800ad9c <__gethex+0x2d8>)
 800aafe:	2201      	movs	r2, #1
 800ab00:	4640      	mov	r0, r8
 800ab02:	f7fe ffb4 	bl	8009a6e <strncmp>
 800ab06:	4606      	mov	r6, r0
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	d169      	bne.n	800abe0 <__gethex+0x11c>
 800ab0c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ab10:	465d      	mov	r5, fp
 800ab12:	f7ff ffc1 	bl	800aa98 <__hexdig_fun>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	d064      	beq.n	800abe4 <__gethex+0x120>
 800ab1a:	465a      	mov	r2, fp
 800ab1c:	7810      	ldrb	r0, [r2, #0]
 800ab1e:	2830      	cmp	r0, #48	; 0x30
 800ab20:	4690      	mov	r8, r2
 800ab22:	f102 0201 	add.w	r2, r2, #1
 800ab26:	d0f9      	beq.n	800ab1c <__gethex+0x58>
 800ab28:	f7ff ffb6 	bl	800aa98 <__hexdig_fun>
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	fab0 f480 	clz	r4, r0
 800ab32:	0964      	lsrs	r4, r4, #5
 800ab34:	465e      	mov	r6, fp
 800ab36:	9301      	str	r3, [sp, #4]
 800ab38:	4642      	mov	r2, r8
 800ab3a:	4615      	mov	r5, r2
 800ab3c:	3201      	adds	r2, #1
 800ab3e:	7828      	ldrb	r0, [r5, #0]
 800ab40:	f7ff ffaa 	bl	800aa98 <__hexdig_fun>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	d1f8      	bne.n	800ab3a <__gethex+0x76>
 800ab48:	4994      	ldr	r1, [pc, #592]	; (800ad9c <__gethex+0x2d8>)
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	4628      	mov	r0, r5
 800ab4e:	f7fe ff8e 	bl	8009a6e <strncmp>
 800ab52:	b978      	cbnz	r0, 800ab74 <__gethex+0xb0>
 800ab54:	b946      	cbnz	r6, 800ab68 <__gethex+0xa4>
 800ab56:	1c6e      	adds	r6, r5, #1
 800ab58:	4632      	mov	r2, r6
 800ab5a:	4615      	mov	r5, r2
 800ab5c:	3201      	adds	r2, #1
 800ab5e:	7828      	ldrb	r0, [r5, #0]
 800ab60:	f7ff ff9a 	bl	800aa98 <__hexdig_fun>
 800ab64:	2800      	cmp	r0, #0
 800ab66:	d1f8      	bne.n	800ab5a <__gethex+0x96>
 800ab68:	1b73      	subs	r3, r6, r5
 800ab6a:	009e      	lsls	r6, r3, #2
 800ab6c:	e004      	b.n	800ab78 <__gethex+0xb4>
 800ab6e:	2400      	movs	r4, #0
 800ab70:	4626      	mov	r6, r4
 800ab72:	e7e1      	b.n	800ab38 <__gethex+0x74>
 800ab74:	2e00      	cmp	r6, #0
 800ab76:	d1f7      	bne.n	800ab68 <__gethex+0xa4>
 800ab78:	782b      	ldrb	r3, [r5, #0]
 800ab7a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ab7e:	2b50      	cmp	r3, #80	; 0x50
 800ab80:	d13d      	bne.n	800abfe <__gethex+0x13a>
 800ab82:	786b      	ldrb	r3, [r5, #1]
 800ab84:	2b2b      	cmp	r3, #43	; 0x2b
 800ab86:	d02f      	beq.n	800abe8 <__gethex+0x124>
 800ab88:	2b2d      	cmp	r3, #45	; 0x2d
 800ab8a:	d031      	beq.n	800abf0 <__gethex+0x12c>
 800ab8c:	1c69      	adds	r1, r5, #1
 800ab8e:	f04f 0b00 	mov.w	fp, #0
 800ab92:	7808      	ldrb	r0, [r1, #0]
 800ab94:	f7ff ff80 	bl	800aa98 <__hexdig_fun>
 800ab98:	1e42      	subs	r2, r0, #1
 800ab9a:	b2d2      	uxtb	r2, r2
 800ab9c:	2a18      	cmp	r2, #24
 800ab9e:	d82e      	bhi.n	800abfe <__gethex+0x13a>
 800aba0:	f1a0 0210 	sub.w	r2, r0, #16
 800aba4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aba8:	f7ff ff76 	bl	800aa98 <__hexdig_fun>
 800abac:	f100 3cff 	add.w	ip, r0, #4294967295
 800abb0:	fa5f fc8c 	uxtb.w	ip, ip
 800abb4:	f1bc 0f18 	cmp.w	ip, #24
 800abb8:	d91d      	bls.n	800abf6 <__gethex+0x132>
 800abba:	f1bb 0f00 	cmp.w	fp, #0
 800abbe:	d000      	beq.n	800abc2 <__gethex+0xfe>
 800abc0:	4252      	negs	r2, r2
 800abc2:	4416      	add	r6, r2
 800abc4:	f8ca 1000 	str.w	r1, [sl]
 800abc8:	b1dc      	cbz	r4, 800ac02 <__gethex+0x13e>
 800abca:	9b01      	ldr	r3, [sp, #4]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	bf14      	ite	ne
 800abd0:	f04f 0800 	movne.w	r8, #0
 800abd4:	f04f 0806 	moveq.w	r8, #6
 800abd8:	4640      	mov	r0, r8
 800abda:	b005      	add	sp, #20
 800abdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abe0:	4645      	mov	r5, r8
 800abe2:	4626      	mov	r6, r4
 800abe4:	2401      	movs	r4, #1
 800abe6:	e7c7      	b.n	800ab78 <__gethex+0xb4>
 800abe8:	f04f 0b00 	mov.w	fp, #0
 800abec:	1ca9      	adds	r1, r5, #2
 800abee:	e7d0      	b.n	800ab92 <__gethex+0xce>
 800abf0:	f04f 0b01 	mov.w	fp, #1
 800abf4:	e7fa      	b.n	800abec <__gethex+0x128>
 800abf6:	230a      	movs	r3, #10
 800abf8:	fb03 0002 	mla	r0, r3, r2, r0
 800abfc:	e7d0      	b.n	800aba0 <__gethex+0xdc>
 800abfe:	4629      	mov	r1, r5
 800ac00:	e7e0      	b.n	800abc4 <__gethex+0x100>
 800ac02:	eba5 0308 	sub.w	r3, r5, r8
 800ac06:	3b01      	subs	r3, #1
 800ac08:	4621      	mov	r1, r4
 800ac0a:	2b07      	cmp	r3, #7
 800ac0c:	dc0a      	bgt.n	800ac24 <__gethex+0x160>
 800ac0e:	4648      	mov	r0, r9
 800ac10:	f000 fa5a 	bl	800b0c8 <_Balloc>
 800ac14:	4604      	mov	r4, r0
 800ac16:	b940      	cbnz	r0, 800ac2a <__gethex+0x166>
 800ac18:	4b61      	ldr	r3, [pc, #388]	; (800ada0 <__gethex+0x2dc>)
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	21e4      	movs	r1, #228	; 0xe4
 800ac1e:	4861      	ldr	r0, [pc, #388]	; (800ada4 <__gethex+0x2e0>)
 800ac20:	f001 f912 	bl	800be48 <__assert_func>
 800ac24:	3101      	adds	r1, #1
 800ac26:	105b      	asrs	r3, r3, #1
 800ac28:	e7ef      	b.n	800ac0a <__gethex+0x146>
 800ac2a:	f100 0a14 	add.w	sl, r0, #20
 800ac2e:	2300      	movs	r3, #0
 800ac30:	495a      	ldr	r1, [pc, #360]	; (800ad9c <__gethex+0x2d8>)
 800ac32:	f8cd a004 	str.w	sl, [sp, #4]
 800ac36:	469b      	mov	fp, r3
 800ac38:	45a8      	cmp	r8, r5
 800ac3a:	d342      	bcc.n	800acc2 <__gethex+0x1fe>
 800ac3c:	9801      	ldr	r0, [sp, #4]
 800ac3e:	f840 bb04 	str.w	fp, [r0], #4
 800ac42:	eba0 000a 	sub.w	r0, r0, sl
 800ac46:	1080      	asrs	r0, r0, #2
 800ac48:	6120      	str	r0, [r4, #16]
 800ac4a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ac4e:	4658      	mov	r0, fp
 800ac50:	f000 fb2c 	bl	800b2ac <__hi0bits>
 800ac54:	683d      	ldr	r5, [r7, #0]
 800ac56:	eba8 0000 	sub.w	r0, r8, r0
 800ac5a:	42a8      	cmp	r0, r5
 800ac5c:	dd59      	ble.n	800ad12 <__gethex+0x24e>
 800ac5e:	eba0 0805 	sub.w	r8, r0, r5
 800ac62:	4641      	mov	r1, r8
 800ac64:	4620      	mov	r0, r4
 800ac66:	f000 febb 	bl	800b9e0 <__any_on>
 800ac6a:	4683      	mov	fp, r0
 800ac6c:	b1b8      	cbz	r0, 800ac9e <__gethex+0x1da>
 800ac6e:	f108 33ff 	add.w	r3, r8, #4294967295
 800ac72:	1159      	asrs	r1, r3, #5
 800ac74:	f003 021f 	and.w	r2, r3, #31
 800ac78:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ac7c:	f04f 0b01 	mov.w	fp, #1
 800ac80:	fa0b f202 	lsl.w	r2, fp, r2
 800ac84:	420a      	tst	r2, r1
 800ac86:	d00a      	beq.n	800ac9e <__gethex+0x1da>
 800ac88:	455b      	cmp	r3, fp
 800ac8a:	dd06      	ble.n	800ac9a <__gethex+0x1d6>
 800ac8c:	f1a8 0102 	sub.w	r1, r8, #2
 800ac90:	4620      	mov	r0, r4
 800ac92:	f000 fea5 	bl	800b9e0 <__any_on>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d138      	bne.n	800ad0c <__gethex+0x248>
 800ac9a:	f04f 0b02 	mov.w	fp, #2
 800ac9e:	4641      	mov	r1, r8
 800aca0:	4620      	mov	r0, r4
 800aca2:	f7ff fea7 	bl	800a9f4 <rshift>
 800aca6:	4446      	add	r6, r8
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	42b3      	cmp	r3, r6
 800acac:	da41      	bge.n	800ad32 <__gethex+0x26e>
 800acae:	4621      	mov	r1, r4
 800acb0:	4648      	mov	r0, r9
 800acb2:	f000 fa49 	bl	800b148 <_Bfree>
 800acb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acb8:	2300      	movs	r3, #0
 800acba:	6013      	str	r3, [r2, #0]
 800acbc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800acc0:	e78a      	b.n	800abd8 <__gethex+0x114>
 800acc2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800acc6:	2a2e      	cmp	r2, #46	; 0x2e
 800acc8:	d014      	beq.n	800acf4 <__gethex+0x230>
 800acca:	2b20      	cmp	r3, #32
 800accc:	d106      	bne.n	800acdc <__gethex+0x218>
 800acce:	9b01      	ldr	r3, [sp, #4]
 800acd0:	f843 bb04 	str.w	fp, [r3], #4
 800acd4:	f04f 0b00 	mov.w	fp, #0
 800acd8:	9301      	str	r3, [sp, #4]
 800acda:	465b      	mov	r3, fp
 800acdc:	7828      	ldrb	r0, [r5, #0]
 800acde:	9303      	str	r3, [sp, #12]
 800ace0:	f7ff feda 	bl	800aa98 <__hexdig_fun>
 800ace4:	9b03      	ldr	r3, [sp, #12]
 800ace6:	f000 000f 	and.w	r0, r0, #15
 800acea:	4098      	lsls	r0, r3
 800acec:	ea4b 0b00 	orr.w	fp, fp, r0
 800acf0:	3304      	adds	r3, #4
 800acf2:	e7a1      	b.n	800ac38 <__gethex+0x174>
 800acf4:	45a8      	cmp	r8, r5
 800acf6:	d8e8      	bhi.n	800acca <__gethex+0x206>
 800acf8:	2201      	movs	r2, #1
 800acfa:	4628      	mov	r0, r5
 800acfc:	9303      	str	r3, [sp, #12]
 800acfe:	f7fe feb6 	bl	8009a6e <strncmp>
 800ad02:	4926      	ldr	r1, [pc, #152]	; (800ad9c <__gethex+0x2d8>)
 800ad04:	9b03      	ldr	r3, [sp, #12]
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d1df      	bne.n	800acca <__gethex+0x206>
 800ad0a:	e795      	b.n	800ac38 <__gethex+0x174>
 800ad0c:	f04f 0b03 	mov.w	fp, #3
 800ad10:	e7c5      	b.n	800ac9e <__gethex+0x1da>
 800ad12:	da0b      	bge.n	800ad2c <__gethex+0x268>
 800ad14:	eba5 0800 	sub.w	r8, r5, r0
 800ad18:	4621      	mov	r1, r4
 800ad1a:	4642      	mov	r2, r8
 800ad1c:	4648      	mov	r0, r9
 800ad1e:	f000 fc2d 	bl	800b57c <__lshift>
 800ad22:	eba6 0608 	sub.w	r6, r6, r8
 800ad26:	4604      	mov	r4, r0
 800ad28:	f100 0a14 	add.w	sl, r0, #20
 800ad2c:	f04f 0b00 	mov.w	fp, #0
 800ad30:	e7ba      	b.n	800aca8 <__gethex+0x1e4>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	42b3      	cmp	r3, r6
 800ad36:	dd73      	ble.n	800ae20 <__gethex+0x35c>
 800ad38:	1b9e      	subs	r6, r3, r6
 800ad3a:	42b5      	cmp	r5, r6
 800ad3c:	dc34      	bgt.n	800ada8 <__gethex+0x2e4>
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	d023      	beq.n	800ad8c <__gethex+0x2c8>
 800ad44:	2b03      	cmp	r3, #3
 800ad46:	d025      	beq.n	800ad94 <__gethex+0x2d0>
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d115      	bne.n	800ad78 <__gethex+0x2b4>
 800ad4c:	42b5      	cmp	r5, r6
 800ad4e:	d113      	bne.n	800ad78 <__gethex+0x2b4>
 800ad50:	2d01      	cmp	r5, #1
 800ad52:	d10b      	bne.n	800ad6c <__gethex+0x2a8>
 800ad54:	9a02      	ldr	r2, [sp, #8]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6013      	str	r3, [r2, #0]
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	6123      	str	r3, [r4, #16]
 800ad5e:	f8ca 3000 	str.w	r3, [sl]
 800ad62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad64:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ad68:	601c      	str	r4, [r3, #0]
 800ad6a:	e735      	b.n	800abd8 <__gethex+0x114>
 800ad6c:	1e69      	subs	r1, r5, #1
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 fe36 	bl	800b9e0 <__any_on>
 800ad74:	2800      	cmp	r0, #0
 800ad76:	d1ed      	bne.n	800ad54 <__gethex+0x290>
 800ad78:	4621      	mov	r1, r4
 800ad7a:	4648      	mov	r0, r9
 800ad7c:	f000 f9e4 	bl	800b148 <_Bfree>
 800ad80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad82:	2300      	movs	r3, #0
 800ad84:	6013      	str	r3, [r2, #0]
 800ad86:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ad8a:	e725      	b.n	800abd8 <__gethex+0x114>
 800ad8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d1f2      	bne.n	800ad78 <__gethex+0x2b4>
 800ad92:	e7df      	b.n	800ad54 <__gethex+0x290>
 800ad94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1dc      	bne.n	800ad54 <__gethex+0x290>
 800ad9a:	e7ed      	b.n	800ad78 <__gethex+0x2b4>
 800ad9c:	0800c7d6 	.word	0x0800c7d6
 800ada0:	0800c9e1 	.word	0x0800c9e1
 800ada4:	0800c9f2 	.word	0x0800c9f2
 800ada8:	f106 38ff 	add.w	r8, r6, #4294967295
 800adac:	f1bb 0f00 	cmp.w	fp, #0
 800adb0:	d133      	bne.n	800ae1a <__gethex+0x356>
 800adb2:	f1b8 0f00 	cmp.w	r8, #0
 800adb6:	d004      	beq.n	800adc2 <__gethex+0x2fe>
 800adb8:	4641      	mov	r1, r8
 800adba:	4620      	mov	r0, r4
 800adbc:	f000 fe10 	bl	800b9e0 <__any_on>
 800adc0:	4683      	mov	fp, r0
 800adc2:	ea4f 1268 	mov.w	r2, r8, asr #5
 800adc6:	2301      	movs	r3, #1
 800adc8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800adcc:	f008 081f 	and.w	r8, r8, #31
 800add0:	fa03 f308 	lsl.w	r3, r3, r8
 800add4:	4213      	tst	r3, r2
 800add6:	4631      	mov	r1, r6
 800add8:	4620      	mov	r0, r4
 800adda:	bf18      	it	ne
 800addc:	f04b 0b02 	orrne.w	fp, fp, #2
 800ade0:	1bad      	subs	r5, r5, r6
 800ade2:	f7ff fe07 	bl	800a9f4 <rshift>
 800ade6:	687e      	ldr	r6, [r7, #4]
 800ade8:	f04f 0802 	mov.w	r8, #2
 800adec:	f1bb 0f00 	cmp.w	fp, #0
 800adf0:	d04a      	beq.n	800ae88 <__gethex+0x3c4>
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2b02      	cmp	r3, #2
 800adf6:	d016      	beq.n	800ae26 <__gethex+0x362>
 800adf8:	2b03      	cmp	r3, #3
 800adfa:	d018      	beq.n	800ae2e <__gethex+0x36a>
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d109      	bne.n	800ae14 <__gethex+0x350>
 800ae00:	f01b 0f02 	tst.w	fp, #2
 800ae04:	d006      	beq.n	800ae14 <__gethex+0x350>
 800ae06:	f8da 3000 	ldr.w	r3, [sl]
 800ae0a:	ea4b 0b03 	orr.w	fp, fp, r3
 800ae0e:	f01b 0f01 	tst.w	fp, #1
 800ae12:	d10f      	bne.n	800ae34 <__gethex+0x370>
 800ae14:	f048 0810 	orr.w	r8, r8, #16
 800ae18:	e036      	b.n	800ae88 <__gethex+0x3c4>
 800ae1a:	f04f 0b01 	mov.w	fp, #1
 800ae1e:	e7d0      	b.n	800adc2 <__gethex+0x2fe>
 800ae20:	f04f 0801 	mov.w	r8, #1
 800ae24:	e7e2      	b.n	800adec <__gethex+0x328>
 800ae26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae28:	f1c3 0301 	rsb	r3, r3, #1
 800ae2c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d0ef      	beq.n	800ae14 <__gethex+0x350>
 800ae34:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ae38:	f104 0214 	add.w	r2, r4, #20
 800ae3c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ae40:	9301      	str	r3, [sp, #4]
 800ae42:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ae46:	2300      	movs	r3, #0
 800ae48:	4694      	mov	ip, r2
 800ae4a:	f852 1b04 	ldr.w	r1, [r2], #4
 800ae4e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ae52:	d01e      	beq.n	800ae92 <__gethex+0x3ce>
 800ae54:	3101      	adds	r1, #1
 800ae56:	f8cc 1000 	str.w	r1, [ip]
 800ae5a:	f1b8 0f02 	cmp.w	r8, #2
 800ae5e:	f104 0214 	add.w	r2, r4, #20
 800ae62:	d13d      	bne.n	800aee0 <__gethex+0x41c>
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	3b01      	subs	r3, #1
 800ae68:	42ab      	cmp	r3, r5
 800ae6a:	d10b      	bne.n	800ae84 <__gethex+0x3c0>
 800ae6c:	1169      	asrs	r1, r5, #5
 800ae6e:	2301      	movs	r3, #1
 800ae70:	f005 051f 	and.w	r5, r5, #31
 800ae74:	fa03 f505 	lsl.w	r5, r3, r5
 800ae78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae7c:	421d      	tst	r5, r3
 800ae7e:	bf18      	it	ne
 800ae80:	f04f 0801 	movne.w	r8, #1
 800ae84:	f048 0820 	orr.w	r8, r8, #32
 800ae88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae8a:	601c      	str	r4, [r3, #0]
 800ae8c:	9b02      	ldr	r3, [sp, #8]
 800ae8e:	601e      	str	r6, [r3, #0]
 800ae90:	e6a2      	b.n	800abd8 <__gethex+0x114>
 800ae92:	4290      	cmp	r0, r2
 800ae94:	f842 3c04 	str.w	r3, [r2, #-4]
 800ae98:	d8d6      	bhi.n	800ae48 <__gethex+0x384>
 800ae9a:	68a2      	ldr	r2, [r4, #8]
 800ae9c:	4593      	cmp	fp, r2
 800ae9e:	db17      	blt.n	800aed0 <__gethex+0x40c>
 800aea0:	6861      	ldr	r1, [r4, #4]
 800aea2:	4648      	mov	r0, r9
 800aea4:	3101      	adds	r1, #1
 800aea6:	f000 f90f 	bl	800b0c8 <_Balloc>
 800aeaa:	4682      	mov	sl, r0
 800aeac:	b918      	cbnz	r0, 800aeb6 <__gethex+0x3f2>
 800aeae:	4b1b      	ldr	r3, [pc, #108]	; (800af1c <__gethex+0x458>)
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	2184      	movs	r1, #132	; 0x84
 800aeb4:	e6b3      	b.n	800ac1e <__gethex+0x15a>
 800aeb6:	6922      	ldr	r2, [r4, #16]
 800aeb8:	3202      	adds	r2, #2
 800aeba:	f104 010c 	add.w	r1, r4, #12
 800aebe:	0092      	lsls	r2, r2, #2
 800aec0:	300c      	adds	r0, #12
 800aec2:	f7fe feb2 	bl	8009c2a <memcpy>
 800aec6:	4621      	mov	r1, r4
 800aec8:	4648      	mov	r0, r9
 800aeca:	f000 f93d 	bl	800b148 <_Bfree>
 800aece:	4654      	mov	r4, sl
 800aed0:	6922      	ldr	r2, [r4, #16]
 800aed2:	1c51      	adds	r1, r2, #1
 800aed4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800aed8:	6121      	str	r1, [r4, #16]
 800aeda:	2101      	movs	r1, #1
 800aedc:	6151      	str	r1, [r2, #20]
 800aede:	e7bc      	b.n	800ae5a <__gethex+0x396>
 800aee0:	6921      	ldr	r1, [r4, #16]
 800aee2:	4559      	cmp	r1, fp
 800aee4:	dd0b      	ble.n	800aefe <__gethex+0x43a>
 800aee6:	2101      	movs	r1, #1
 800aee8:	4620      	mov	r0, r4
 800aeea:	f7ff fd83 	bl	800a9f4 <rshift>
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	3601      	adds	r6, #1
 800aef2:	42b3      	cmp	r3, r6
 800aef4:	f6ff aedb 	blt.w	800acae <__gethex+0x1ea>
 800aef8:	f04f 0801 	mov.w	r8, #1
 800aefc:	e7c2      	b.n	800ae84 <__gethex+0x3c0>
 800aefe:	f015 051f 	ands.w	r5, r5, #31
 800af02:	d0f9      	beq.n	800aef8 <__gethex+0x434>
 800af04:	9b01      	ldr	r3, [sp, #4]
 800af06:	441a      	add	r2, r3
 800af08:	f1c5 0520 	rsb	r5, r5, #32
 800af0c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800af10:	f000 f9cc 	bl	800b2ac <__hi0bits>
 800af14:	42a8      	cmp	r0, r5
 800af16:	dbe6      	blt.n	800aee6 <__gethex+0x422>
 800af18:	e7ee      	b.n	800aef8 <__gethex+0x434>
 800af1a:	bf00      	nop
 800af1c:	0800c9e1 	.word	0x0800c9e1

0800af20 <L_shift>:
 800af20:	f1c2 0208 	rsb	r2, r2, #8
 800af24:	0092      	lsls	r2, r2, #2
 800af26:	b570      	push	{r4, r5, r6, lr}
 800af28:	f1c2 0620 	rsb	r6, r2, #32
 800af2c:	6843      	ldr	r3, [r0, #4]
 800af2e:	6804      	ldr	r4, [r0, #0]
 800af30:	fa03 f506 	lsl.w	r5, r3, r6
 800af34:	432c      	orrs	r4, r5
 800af36:	40d3      	lsrs	r3, r2
 800af38:	6004      	str	r4, [r0, #0]
 800af3a:	f840 3f04 	str.w	r3, [r0, #4]!
 800af3e:	4288      	cmp	r0, r1
 800af40:	d3f4      	bcc.n	800af2c <L_shift+0xc>
 800af42:	bd70      	pop	{r4, r5, r6, pc}

0800af44 <__match>:
 800af44:	b530      	push	{r4, r5, lr}
 800af46:	6803      	ldr	r3, [r0, #0]
 800af48:	3301      	adds	r3, #1
 800af4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af4e:	b914      	cbnz	r4, 800af56 <__match+0x12>
 800af50:	6003      	str	r3, [r0, #0]
 800af52:	2001      	movs	r0, #1
 800af54:	bd30      	pop	{r4, r5, pc}
 800af56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af5a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800af5e:	2d19      	cmp	r5, #25
 800af60:	bf98      	it	ls
 800af62:	3220      	addls	r2, #32
 800af64:	42a2      	cmp	r2, r4
 800af66:	d0f0      	beq.n	800af4a <__match+0x6>
 800af68:	2000      	movs	r0, #0
 800af6a:	e7f3      	b.n	800af54 <__match+0x10>

0800af6c <__hexnan>:
 800af6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af70:	680b      	ldr	r3, [r1, #0]
 800af72:	6801      	ldr	r1, [r0, #0]
 800af74:	115e      	asrs	r6, r3, #5
 800af76:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800af7a:	f013 031f 	ands.w	r3, r3, #31
 800af7e:	b087      	sub	sp, #28
 800af80:	bf18      	it	ne
 800af82:	3604      	addne	r6, #4
 800af84:	2500      	movs	r5, #0
 800af86:	1f37      	subs	r7, r6, #4
 800af88:	4682      	mov	sl, r0
 800af8a:	4690      	mov	r8, r2
 800af8c:	9301      	str	r3, [sp, #4]
 800af8e:	f846 5c04 	str.w	r5, [r6, #-4]
 800af92:	46b9      	mov	r9, r7
 800af94:	463c      	mov	r4, r7
 800af96:	9502      	str	r5, [sp, #8]
 800af98:	46ab      	mov	fp, r5
 800af9a:	784a      	ldrb	r2, [r1, #1]
 800af9c:	1c4b      	adds	r3, r1, #1
 800af9e:	9303      	str	r3, [sp, #12]
 800afa0:	b342      	cbz	r2, 800aff4 <__hexnan+0x88>
 800afa2:	4610      	mov	r0, r2
 800afa4:	9105      	str	r1, [sp, #20]
 800afa6:	9204      	str	r2, [sp, #16]
 800afa8:	f7ff fd76 	bl	800aa98 <__hexdig_fun>
 800afac:	2800      	cmp	r0, #0
 800afae:	d14f      	bne.n	800b050 <__hexnan+0xe4>
 800afb0:	9a04      	ldr	r2, [sp, #16]
 800afb2:	9905      	ldr	r1, [sp, #20]
 800afb4:	2a20      	cmp	r2, #32
 800afb6:	d818      	bhi.n	800afea <__hexnan+0x7e>
 800afb8:	9b02      	ldr	r3, [sp, #8]
 800afba:	459b      	cmp	fp, r3
 800afbc:	dd13      	ble.n	800afe6 <__hexnan+0x7a>
 800afbe:	454c      	cmp	r4, r9
 800afc0:	d206      	bcs.n	800afd0 <__hexnan+0x64>
 800afc2:	2d07      	cmp	r5, #7
 800afc4:	dc04      	bgt.n	800afd0 <__hexnan+0x64>
 800afc6:	462a      	mov	r2, r5
 800afc8:	4649      	mov	r1, r9
 800afca:	4620      	mov	r0, r4
 800afcc:	f7ff ffa8 	bl	800af20 <L_shift>
 800afd0:	4544      	cmp	r4, r8
 800afd2:	d950      	bls.n	800b076 <__hexnan+0x10a>
 800afd4:	2300      	movs	r3, #0
 800afd6:	f1a4 0904 	sub.w	r9, r4, #4
 800afda:	f844 3c04 	str.w	r3, [r4, #-4]
 800afde:	f8cd b008 	str.w	fp, [sp, #8]
 800afe2:	464c      	mov	r4, r9
 800afe4:	461d      	mov	r5, r3
 800afe6:	9903      	ldr	r1, [sp, #12]
 800afe8:	e7d7      	b.n	800af9a <__hexnan+0x2e>
 800afea:	2a29      	cmp	r2, #41	; 0x29
 800afec:	d155      	bne.n	800b09a <__hexnan+0x12e>
 800afee:	3102      	adds	r1, #2
 800aff0:	f8ca 1000 	str.w	r1, [sl]
 800aff4:	f1bb 0f00 	cmp.w	fp, #0
 800aff8:	d04f      	beq.n	800b09a <__hexnan+0x12e>
 800affa:	454c      	cmp	r4, r9
 800affc:	d206      	bcs.n	800b00c <__hexnan+0xa0>
 800affe:	2d07      	cmp	r5, #7
 800b000:	dc04      	bgt.n	800b00c <__hexnan+0xa0>
 800b002:	462a      	mov	r2, r5
 800b004:	4649      	mov	r1, r9
 800b006:	4620      	mov	r0, r4
 800b008:	f7ff ff8a 	bl	800af20 <L_shift>
 800b00c:	4544      	cmp	r4, r8
 800b00e:	d934      	bls.n	800b07a <__hexnan+0x10e>
 800b010:	f1a8 0204 	sub.w	r2, r8, #4
 800b014:	4623      	mov	r3, r4
 800b016:	f853 1b04 	ldr.w	r1, [r3], #4
 800b01a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b01e:	429f      	cmp	r7, r3
 800b020:	d2f9      	bcs.n	800b016 <__hexnan+0xaa>
 800b022:	1b3b      	subs	r3, r7, r4
 800b024:	f023 0303 	bic.w	r3, r3, #3
 800b028:	3304      	adds	r3, #4
 800b02a:	3e03      	subs	r6, #3
 800b02c:	3401      	adds	r4, #1
 800b02e:	42a6      	cmp	r6, r4
 800b030:	bf38      	it	cc
 800b032:	2304      	movcc	r3, #4
 800b034:	4443      	add	r3, r8
 800b036:	2200      	movs	r2, #0
 800b038:	f843 2b04 	str.w	r2, [r3], #4
 800b03c:	429f      	cmp	r7, r3
 800b03e:	d2fb      	bcs.n	800b038 <__hexnan+0xcc>
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	b91b      	cbnz	r3, 800b04c <__hexnan+0xe0>
 800b044:	4547      	cmp	r7, r8
 800b046:	d126      	bne.n	800b096 <__hexnan+0x12a>
 800b048:	2301      	movs	r3, #1
 800b04a:	603b      	str	r3, [r7, #0]
 800b04c:	2005      	movs	r0, #5
 800b04e:	e025      	b.n	800b09c <__hexnan+0x130>
 800b050:	3501      	adds	r5, #1
 800b052:	2d08      	cmp	r5, #8
 800b054:	f10b 0b01 	add.w	fp, fp, #1
 800b058:	dd06      	ble.n	800b068 <__hexnan+0xfc>
 800b05a:	4544      	cmp	r4, r8
 800b05c:	d9c3      	bls.n	800afe6 <__hexnan+0x7a>
 800b05e:	2300      	movs	r3, #0
 800b060:	f844 3c04 	str.w	r3, [r4, #-4]
 800b064:	2501      	movs	r5, #1
 800b066:	3c04      	subs	r4, #4
 800b068:	6822      	ldr	r2, [r4, #0]
 800b06a:	f000 000f 	and.w	r0, r0, #15
 800b06e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b072:	6020      	str	r0, [r4, #0]
 800b074:	e7b7      	b.n	800afe6 <__hexnan+0x7a>
 800b076:	2508      	movs	r5, #8
 800b078:	e7b5      	b.n	800afe6 <__hexnan+0x7a>
 800b07a:	9b01      	ldr	r3, [sp, #4]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d0df      	beq.n	800b040 <__hexnan+0xd4>
 800b080:	f1c3 0320 	rsb	r3, r3, #32
 800b084:	f04f 32ff 	mov.w	r2, #4294967295
 800b088:	40da      	lsrs	r2, r3
 800b08a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b08e:	4013      	ands	r3, r2
 800b090:	f846 3c04 	str.w	r3, [r6, #-4]
 800b094:	e7d4      	b.n	800b040 <__hexnan+0xd4>
 800b096:	3f04      	subs	r7, #4
 800b098:	e7d2      	b.n	800b040 <__hexnan+0xd4>
 800b09a:	2004      	movs	r0, #4
 800b09c:	b007      	add	sp, #28
 800b09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b0a2 <__ascii_mbtowc>:
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	b901      	cbnz	r1, 800b0a8 <__ascii_mbtowc+0x6>
 800b0a6:	a901      	add	r1, sp, #4
 800b0a8:	b142      	cbz	r2, 800b0bc <__ascii_mbtowc+0x1a>
 800b0aa:	b14b      	cbz	r3, 800b0c0 <__ascii_mbtowc+0x1e>
 800b0ac:	7813      	ldrb	r3, [r2, #0]
 800b0ae:	600b      	str	r3, [r1, #0]
 800b0b0:	7812      	ldrb	r2, [r2, #0]
 800b0b2:	1e10      	subs	r0, r2, #0
 800b0b4:	bf18      	it	ne
 800b0b6:	2001      	movne	r0, #1
 800b0b8:	b002      	add	sp, #8
 800b0ba:	4770      	bx	lr
 800b0bc:	4610      	mov	r0, r2
 800b0be:	e7fb      	b.n	800b0b8 <__ascii_mbtowc+0x16>
 800b0c0:	f06f 0001 	mvn.w	r0, #1
 800b0c4:	e7f8      	b.n	800b0b8 <__ascii_mbtowc+0x16>
	...

0800b0c8 <_Balloc>:
 800b0c8:	b570      	push	{r4, r5, r6, lr}
 800b0ca:	69c6      	ldr	r6, [r0, #28]
 800b0cc:	4604      	mov	r4, r0
 800b0ce:	460d      	mov	r5, r1
 800b0d0:	b976      	cbnz	r6, 800b0f0 <_Balloc+0x28>
 800b0d2:	2010      	movs	r0, #16
 800b0d4:	f7fc fdb6 	bl	8007c44 <malloc>
 800b0d8:	4602      	mov	r2, r0
 800b0da:	61e0      	str	r0, [r4, #28]
 800b0dc:	b920      	cbnz	r0, 800b0e8 <_Balloc+0x20>
 800b0de:	4b18      	ldr	r3, [pc, #96]	; (800b140 <_Balloc+0x78>)
 800b0e0:	4818      	ldr	r0, [pc, #96]	; (800b144 <_Balloc+0x7c>)
 800b0e2:	216b      	movs	r1, #107	; 0x6b
 800b0e4:	f000 feb0 	bl	800be48 <__assert_func>
 800b0e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0ec:	6006      	str	r6, [r0, #0]
 800b0ee:	60c6      	str	r6, [r0, #12]
 800b0f0:	69e6      	ldr	r6, [r4, #28]
 800b0f2:	68f3      	ldr	r3, [r6, #12]
 800b0f4:	b183      	cbz	r3, 800b118 <_Balloc+0x50>
 800b0f6:	69e3      	ldr	r3, [r4, #28]
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b0fe:	b9b8      	cbnz	r0, 800b130 <_Balloc+0x68>
 800b100:	2101      	movs	r1, #1
 800b102:	fa01 f605 	lsl.w	r6, r1, r5
 800b106:	1d72      	adds	r2, r6, #5
 800b108:	0092      	lsls	r2, r2, #2
 800b10a:	4620      	mov	r0, r4
 800b10c:	f000 feba 	bl	800be84 <_calloc_r>
 800b110:	b160      	cbz	r0, 800b12c <_Balloc+0x64>
 800b112:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b116:	e00e      	b.n	800b136 <_Balloc+0x6e>
 800b118:	2221      	movs	r2, #33	; 0x21
 800b11a:	2104      	movs	r1, #4
 800b11c:	4620      	mov	r0, r4
 800b11e:	f000 feb1 	bl	800be84 <_calloc_r>
 800b122:	69e3      	ldr	r3, [r4, #28]
 800b124:	60f0      	str	r0, [r6, #12]
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1e4      	bne.n	800b0f6 <_Balloc+0x2e>
 800b12c:	2000      	movs	r0, #0
 800b12e:	bd70      	pop	{r4, r5, r6, pc}
 800b130:	6802      	ldr	r2, [r0, #0]
 800b132:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b136:	2300      	movs	r3, #0
 800b138:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b13c:	e7f7      	b.n	800b12e <_Balloc+0x66>
 800b13e:	bf00      	nop
 800b140:	0800c972 	.word	0x0800c972
 800b144:	0800ca52 	.word	0x0800ca52

0800b148 <_Bfree>:
 800b148:	b570      	push	{r4, r5, r6, lr}
 800b14a:	69c6      	ldr	r6, [r0, #28]
 800b14c:	4605      	mov	r5, r0
 800b14e:	460c      	mov	r4, r1
 800b150:	b976      	cbnz	r6, 800b170 <_Bfree+0x28>
 800b152:	2010      	movs	r0, #16
 800b154:	f7fc fd76 	bl	8007c44 <malloc>
 800b158:	4602      	mov	r2, r0
 800b15a:	61e8      	str	r0, [r5, #28]
 800b15c:	b920      	cbnz	r0, 800b168 <_Bfree+0x20>
 800b15e:	4b09      	ldr	r3, [pc, #36]	; (800b184 <_Bfree+0x3c>)
 800b160:	4809      	ldr	r0, [pc, #36]	; (800b188 <_Bfree+0x40>)
 800b162:	218f      	movs	r1, #143	; 0x8f
 800b164:	f000 fe70 	bl	800be48 <__assert_func>
 800b168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b16c:	6006      	str	r6, [r0, #0]
 800b16e:	60c6      	str	r6, [r0, #12]
 800b170:	b13c      	cbz	r4, 800b182 <_Bfree+0x3a>
 800b172:	69eb      	ldr	r3, [r5, #28]
 800b174:	6862      	ldr	r2, [r4, #4]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b17c:	6021      	str	r1, [r4, #0]
 800b17e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b182:	bd70      	pop	{r4, r5, r6, pc}
 800b184:	0800c972 	.word	0x0800c972
 800b188:	0800ca52 	.word	0x0800ca52

0800b18c <__multadd>:
 800b18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b190:	690d      	ldr	r5, [r1, #16]
 800b192:	4607      	mov	r7, r0
 800b194:	460c      	mov	r4, r1
 800b196:	461e      	mov	r6, r3
 800b198:	f101 0c14 	add.w	ip, r1, #20
 800b19c:	2000      	movs	r0, #0
 800b19e:	f8dc 3000 	ldr.w	r3, [ip]
 800b1a2:	b299      	uxth	r1, r3
 800b1a4:	fb02 6101 	mla	r1, r2, r1, r6
 800b1a8:	0c1e      	lsrs	r6, r3, #16
 800b1aa:	0c0b      	lsrs	r3, r1, #16
 800b1ac:	fb02 3306 	mla	r3, r2, r6, r3
 800b1b0:	b289      	uxth	r1, r1
 800b1b2:	3001      	adds	r0, #1
 800b1b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b1b8:	4285      	cmp	r5, r0
 800b1ba:	f84c 1b04 	str.w	r1, [ip], #4
 800b1be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b1c2:	dcec      	bgt.n	800b19e <__multadd+0x12>
 800b1c4:	b30e      	cbz	r6, 800b20a <__multadd+0x7e>
 800b1c6:	68a3      	ldr	r3, [r4, #8]
 800b1c8:	42ab      	cmp	r3, r5
 800b1ca:	dc19      	bgt.n	800b200 <__multadd+0x74>
 800b1cc:	6861      	ldr	r1, [r4, #4]
 800b1ce:	4638      	mov	r0, r7
 800b1d0:	3101      	adds	r1, #1
 800b1d2:	f7ff ff79 	bl	800b0c8 <_Balloc>
 800b1d6:	4680      	mov	r8, r0
 800b1d8:	b928      	cbnz	r0, 800b1e6 <__multadd+0x5a>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	4b0c      	ldr	r3, [pc, #48]	; (800b210 <__multadd+0x84>)
 800b1de:	480d      	ldr	r0, [pc, #52]	; (800b214 <__multadd+0x88>)
 800b1e0:	21ba      	movs	r1, #186	; 0xba
 800b1e2:	f000 fe31 	bl	800be48 <__assert_func>
 800b1e6:	6922      	ldr	r2, [r4, #16]
 800b1e8:	3202      	adds	r2, #2
 800b1ea:	f104 010c 	add.w	r1, r4, #12
 800b1ee:	0092      	lsls	r2, r2, #2
 800b1f0:	300c      	adds	r0, #12
 800b1f2:	f7fe fd1a 	bl	8009c2a <memcpy>
 800b1f6:	4621      	mov	r1, r4
 800b1f8:	4638      	mov	r0, r7
 800b1fa:	f7ff ffa5 	bl	800b148 <_Bfree>
 800b1fe:	4644      	mov	r4, r8
 800b200:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b204:	3501      	adds	r5, #1
 800b206:	615e      	str	r6, [r3, #20]
 800b208:	6125      	str	r5, [r4, #16]
 800b20a:	4620      	mov	r0, r4
 800b20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b210:	0800c9e1 	.word	0x0800c9e1
 800b214:	0800ca52 	.word	0x0800ca52

0800b218 <__s2b>:
 800b218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b21c:	460c      	mov	r4, r1
 800b21e:	4615      	mov	r5, r2
 800b220:	461f      	mov	r7, r3
 800b222:	2209      	movs	r2, #9
 800b224:	3308      	adds	r3, #8
 800b226:	4606      	mov	r6, r0
 800b228:	fb93 f3f2 	sdiv	r3, r3, r2
 800b22c:	2100      	movs	r1, #0
 800b22e:	2201      	movs	r2, #1
 800b230:	429a      	cmp	r2, r3
 800b232:	db09      	blt.n	800b248 <__s2b+0x30>
 800b234:	4630      	mov	r0, r6
 800b236:	f7ff ff47 	bl	800b0c8 <_Balloc>
 800b23a:	b940      	cbnz	r0, 800b24e <__s2b+0x36>
 800b23c:	4602      	mov	r2, r0
 800b23e:	4b19      	ldr	r3, [pc, #100]	; (800b2a4 <__s2b+0x8c>)
 800b240:	4819      	ldr	r0, [pc, #100]	; (800b2a8 <__s2b+0x90>)
 800b242:	21d3      	movs	r1, #211	; 0xd3
 800b244:	f000 fe00 	bl	800be48 <__assert_func>
 800b248:	0052      	lsls	r2, r2, #1
 800b24a:	3101      	adds	r1, #1
 800b24c:	e7f0      	b.n	800b230 <__s2b+0x18>
 800b24e:	9b08      	ldr	r3, [sp, #32]
 800b250:	6143      	str	r3, [r0, #20]
 800b252:	2d09      	cmp	r5, #9
 800b254:	f04f 0301 	mov.w	r3, #1
 800b258:	6103      	str	r3, [r0, #16]
 800b25a:	dd16      	ble.n	800b28a <__s2b+0x72>
 800b25c:	f104 0909 	add.w	r9, r4, #9
 800b260:	46c8      	mov	r8, r9
 800b262:	442c      	add	r4, r5
 800b264:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b268:	4601      	mov	r1, r0
 800b26a:	3b30      	subs	r3, #48	; 0x30
 800b26c:	220a      	movs	r2, #10
 800b26e:	4630      	mov	r0, r6
 800b270:	f7ff ff8c 	bl	800b18c <__multadd>
 800b274:	45a0      	cmp	r8, r4
 800b276:	d1f5      	bne.n	800b264 <__s2b+0x4c>
 800b278:	f1a5 0408 	sub.w	r4, r5, #8
 800b27c:	444c      	add	r4, r9
 800b27e:	1b2d      	subs	r5, r5, r4
 800b280:	1963      	adds	r3, r4, r5
 800b282:	42bb      	cmp	r3, r7
 800b284:	db04      	blt.n	800b290 <__s2b+0x78>
 800b286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b28a:	340a      	adds	r4, #10
 800b28c:	2509      	movs	r5, #9
 800b28e:	e7f6      	b.n	800b27e <__s2b+0x66>
 800b290:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b294:	4601      	mov	r1, r0
 800b296:	3b30      	subs	r3, #48	; 0x30
 800b298:	220a      	movs	r2, #10
 800b29a:	4630      	mov	r0, r6
 800b29c:	f7ff ff76 	bl	800b18c <__multadd>
 800b2a0:	e7ee      	b.n	800b280 <__s2b+0x68>
 800b2a2:	bf00      	nop
 800b2a4:	0800c9e1 	.word	0x0800c9e1
 800b2a8:	0800ca52 	.word	0x0800ca52

0800b2ac <__hi0bits>:
 800b2ac:	0c03      	lsrs	r3, r0, #16
 800b2ae:	041b      	lsls	r3, r3, #16
 800b2b0:	b9d3      	cbnz	r3, 800b2e8 <__hi0bits+0x3c>
 800b2b2:	0400      	lsls	r0, r0, #16
 800b2b4:	2310      	movs	r3, #16
 800b2b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b2ba:	bf04      	itt	eq
 800b2bc:	0200      	lsleq	r0, r0, #8
 800b2be:	3308      	addeq	r3, #8
 800b2c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b2c4:	bf04      	itt	eq
 800b2c6:	0100      	lsleq	r0, r0, #4
 800b2c8:	3304      	addeq	r3, #4
 800b2ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b2ce:	bf04      	itt	eq
 800b2d0:	0080      	lsleq	r0, r0, #2
 800b2d2:	3302      	addeq	r3, #2
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	db05      	blt.n	800b2e4 <__hi0bits+0x38>
 800b2d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b2dc:	f103 0301 	add.w	r3, r3, #1
 800b2e0:	bf08      	it	eq
 800b2e2:	2320      	moveq	r3, #32
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	4770      	bx	lr
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	e7e4      	b.n	800b2b6 <__hi0bits+0xa>

0800b2ec <__lo0bits>:
 800b2ec:	6803      	ldr	r3, [r0, #0]
 800b2ee:	f013 0207 	ands.w	r2, r3, #7
 800b2f2:	d00c      	beq.n	800b30e <__lo0bits+0x22>
 800b2f4:	07d9      	lsls	r1, r3, #31
 800b2f6:	d422      	bmi.n	800b33e <__lo0bits+0x52>
 800b2f8:	079a      	lsls	r2, r3, #30
 800b2fa:	bf49      	itett	mi
 800b2fc:	085b      	lsrmi	r3, r3, #1
 800b2fe:	089b      	lsrpl	r3, r3, #2
 800b300:	6003      	strmi	r3, [r0, #0]
 800b302:	2201      	movmi	r2, #1
 800b304:	bf5c      	itt	pl
 800b306:	6003      	strpl	r3, [r0, #0]
 800b308:	2202      	movpl	r2, #2
 800b30a:	4610      	mov	r0, r2
 800b30c:	4770      	bx	lr
 800b30e:	b299      	uxth	r1, r3
 800b310:	b909      	cbnz	r1, 800b316 <__lo0bits+0x2a>
 800b312:	0c1b      	lsrs	r3, r3, #16
 800b314:	2210      	movs	r2, #16
 800b316:	b2d9      	uxtb	r1, r3
 800b318:	b909      	cbnz	r1, 800b31e <__lo0bits+0x32>
 800b31a:	3208      	adds	r2, #8
 800b31c:	0a1b      	lsrs	r3, r3, #8
 800b31e:	0719      	lsls	r1, r3, #28
 800b320:	bf04      	itt	eq
 800b322:	091b      	lsreq	r3, r3, #4
 800b324:	3204      	addeq	r2, #4
 800b326:	0799      	lsls	r1, r3, #30
 800b328:	bf04      	itt	eq
 800b32a:	089b      	lsreq	r3, r3, #2
 800b32c:	3202      	addeq	r2, #2
 800b32e:	07d9      	lsls	r1, r3, #31
 800b330:	d403      	bmi.n	800b33a <__lo0bits+0x4e>
 800b332:	085b      	lsrs	r3, r3, #1
 800b334:	f102 0201 	add.w	r2, r2, #1
 800b338:	d003      	beq.n	800b342 <__lo0bits+0x56>
 800b33a:	6003      	str	r3, [r0, #0]
 800b33c:	e7e5      	b.n	800b30a <__lo0bits+0x1e>
 800b33e:	2200      	movs	r2, #0
 800b340:	e7e3      	b.n	800b30a <__lo0bits+0x1e>
 800b342:	2220      	movs	r2, #32
 800b344:	e7e1      	b.n	800b30a <__lo0bits+0x1e>
	...

0800b348 <__i2b>:
 800b348:	b510      	push	{r4, lr}
 800b34a:	460c      	mov	r4, r1
 800b34c:	2101      	movs	r1, #1
 800b34e:	f7ff febb 	bl	800b0c8 <_Balloc>
 800b352:	4602      	mov	r2, r0
 800b354:	b928      	cbnz	r0, 800b362 <__i2b+0x1a>
 800b356:	4b05      	ldr	r3, [pc, #20]	; (800b36c <__i2b+0x24>)
 800b358:	4805      	ldr	r0, [pc, #20]	; (800b370 <__i2b+0x28>)
 800b35a:	f240 1145 	movw	r1, #325	; 0x145
 800b35e:	f000 fd73 	bl	800be48 <__assert_func>
 800b362:	2301      	movs	r3, #1
 800b364:	6144      	str	r4, [r0, #20]
 800b366:	6103      	str	r3, [r0, #16]
 800b368:	bd10      	pop	{r4, pc}
 800b36a:	bf00      	nop
 800b36c:	0800c9e1 	.word	0x0800c9e1
 800b370:	0800ca52 	.word	0x0800ca52

0800b374 <__multiply>:
 800b374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b378:	4691      	mov	r9, r2
 800b37a:	690a      	ldr	r2, [r1, #16]
 800b37c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b380:	429a      	cmp	r2, r3
 800b382:	bfb8      	it	lt
 800b384:	460b      	movlt	r3, r1
 800b386:	460c      	mov	r4, r1
 800b388:	bfbc      	itt	lt
 800b38a:	464c      	movlt	r4, r9
 800b38c:	4699      	movlt	r9, r3
 800b38e:	6927      	ldr	r7, [r4, #16]
 800b390:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b394:	68a3      	ldr	r3, [r4, #8]
 800b396:	6861      	ldr	r1, [r4, #4]
 800b398:	eb07 060a 	add.w	r6, r7, sl
 800b39c:	42b3      	cmp	r3, r6
 800b39e:	b085      	sub	sp, #20
 800b3a0:	bfb8      	it	lt
 800b3a2:	3101      	addlt	r1, #1
 800b3a4:	f7ff fe90 	bl	800b0c8 <_Balloc>
 800b3a8:	b930      	cbnz	r0, 800b3b8 <__multiply+0x44>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	4b44      	ldr	r3, [pc, #272]	; (800b4c0 <__multiply+0x14c>)
 800b3ae:	4845      	ldr	r0, [pc, #276]	; (800b4c4 <__multiply+0x150>)
 800b3b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b3b4:	f000 fd48 	bl	800be48 <__assert_func>
 800b3b8:	f100 0514 	add.w	r5, r0, #20
 800b3bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b3c0:	462b      	mov	r3, r5
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	4543      	cmp	r3, r8
 800b3c6:	d321      	bcc.n	800b40c <__multiply+0x98>
 800b3c8:	f104 0314 	add.w	r3, r4, #20
 800b3cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b3d0:	f109 0314 	add.w	r3, r9, #20
 800b3d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b3d8:	9202      	str	r2, [sp, #8]
 800b3da:	1b3a      	subs	r2, r7, r4
 800b3dc:	3a15      	subs	r2, #21
 800b3de:	f022 0203 	bic.w	r2, r2, #3
 800b3e2:	3204      	adds	r2, #4
 800b3e4:	f104 0115 	add.w	r1, r4, #21
 800b3e8:	428f      	cmp	r7, r1
 800b3ea:	bf38      	it	cc
 800b3ec:	2204      	movcc	r2, #4
 800b3ee:	9201      	str	r2, [sp, #4]
 800b3f0:	9a02      	ldr	r2, [sp, #8]
 800b3f2:	9303      	str	r3, [sp, #12]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d80c      	bhi.n	800b412 <__multiply+0x9e>
 800b3f8:	2e00      	cmp	r6, #0
 800b3fa:	dd03      	ble.n	800b404 <__multiply+0x90>
 800b3fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b400:	2b00      	cmp	r3, #0
 800b402:	d05b      	beq.n	800b4bc <__multiply+0x148>
 800b404:	6106      	str	r6, [r0, #16]
 800b406:	b005      	add	sp, #20
 800b408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b40c:	f843 2b04 	str.w	r2, [r3], #4
 800b410:	e7d8      	b.n	800b3c4 <__multiply+0x50>
 800b412:	f8b3 a000 	ldrh.w	sl, [r3]
 800b416:	f1ba 0f00 	cmp.w	sl, #0
 800b41a:	d024      	beq.n	800b466 <__multiply+0xf2>
 800b41c:	f104 0e14 	add.w	lr, r4, #20
 800b420:	46a9      	mov	r9, r5
 800b422:	f04f 0c00 	mov.w	ip, #0
 800b426:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b42a:	f8d9 1000 	ldr.w	r1, [r9]
 800b42e:	fa1f fb82 	uxth.w	fp, r2
 800b432:	b289      	uxth	r1, r1
 800b434:	fb0a 110b 	mla	r1, sl, fp, r1
 800b438:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b43c:	f8d9 2000 	ldr.w	r2, [r9]
 800b440:	4461      	add	r1, ip
 800b442:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b446:	fb0a c20b 	mla	r2, sl, fp, ip
 800b44a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b44e:	b289      	uxth	r1, r1
 800b450:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b454:	4577      	cmp	r7, lr
 800b456:	f849 1b04 	str.w	r1, [r9], #4
 800b45a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b45e:	d8e2      	bhi.n	800b426 <__multiply+0xb2>
 800b460:	9a01      	ldr	r2, [sp, #4]
 800b462:	f845 c002 	str.w	ip, [r5, r2]
 800b466:	9a03      	ldr	r2, [sp, #12]
 800b468:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b46c:	3304      	adds	r3, #4
 800b46e:	f1b9 0f00 	cmp.w	r9, #0
 800b472:	d021      	beq.n	800b4b8 <__multiply+0x144>
 800b474:	6829      	ldr	r1, [r5, #0]
 800b476:	f104 0c14 	add.w	ip, r4, #20
 800b47a:	46ae      	mov	lr, r5
 800b47c:	f04f 0a00 	mov.w	sl, #0
 800b480:	f8bc b000 	ldrh.w	fp, [ip]
 800b484:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b488:	fb09 220b 	mla	r2, r9, fp, r2
 800b48c:	4452      	add	r2, sl
 800b48e:	b289      	uxth	r1, r1
 800b490:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b494:	f84e 1b04 	str.w	r1, [lr], #4
 800b498:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b49c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b4a0:	f8be 1000 	ldrh.w	r1, [lr]
 800b4a4:	fb09 110a 	mla	r1, r9, sl, r1
 800b4a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b4ac:	4567      	cmp	r7, ip
 800b4ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b4b2:	d8e5      	bhi.n	800b480 <__multiply+0x10c>
 800b4b4:	9a01      	ldr	r2, [sp, #4]
 800b4b6:	50a9      	str	r1, [r5, r2]
 800b4b8:	3504      	adds	r5, #4
 800b4ba:	e799      	b.n	800b3f0 <__multiply+0x7c>
 800b4bc:	3e01      	subs	r6, #1
 800b4be:	e79b      	b.n	800b3f8 <__multiply+0x84>
 800b4c0:	0800c9e1 	.word	0x0800c9e1
 800b4c4:	0800ca52 	.word	0x0800ca52

0800b4c8 <__pow5mult>:
 800b4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4cc:	4615      	mov	r5, r2
 800b4ce:	f012 0203 	ands.w	r2, r2, #3
 800b4d2:	4606      	mov	r6, r0
 800b4d4:	460f      	mov	r7, r1
 800b4d6:	d007      	beq.n	800b4e8 <__pow5mult+0x20>
 800b4d8:	4c25      	ldr	r4, [pc, #148]	; (800b570 <__pow5mult+0xa8>)
 800b4da:	3a01      	subs	r2, #1
 800b4dc:	2300      	movs	r3, #0
 800b4de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b4e2:	f7ff fe53 	bl	800b18c <__multadd>
 800b4e6:	4607      	mov	r7, r0
 800b4e8:	10ad      	asrs	r5, r5, #2
 800b4ea:	d03d      	beq.n	800b568 <__pow5mult+0xa0>
 800b4ec:	69f4      	ldr	r4, [r6, #28]
 800b4ee:	b97c      	cbnz	r4, 800b510 <__pow5mult+0x48>
 800b4f0:	2010      	movs	r0, #16
 800b4f2:	f7fc fba7 	bl	8007c44 <malloc>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	61f0      	str	r0, [r6, #28]
 800b4fa:	b928      	cbnz	r0, 800b508 <__pow5mult+0x40>
 800b4fc:	4b1d      	ldr	r3, [pc, #116]	; (800b574 <__pow5mult+0xac>)
 800b4fe:	481e      	ldr	r0, [pc, #120]	; (800b578 <__pow5mult+0xb0>)
 800b500:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b504:	f000 fca0 	bl	800be48 <__assert_func>
 800b508:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b50c:	6004      	str	r4, [r0, #0]
 800b50e:	60c4      	str	r4, [r0, #12]
 800b510:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b514:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b518:	b94c      	cbnz	r4, 800b52e <__pow5mult+0x66>
 800b51a:	f240 2171 	movw	r1, #625	; 0x271
 800b51e:	4630      	mov	r0, r6
 800b520:	f7ff ff12 	bl	800b348 <__i2b>
 800b524:	2300      	movs	r3, #0
 800b526:	f8c8 0008 	str.w	r0, [r8, #8]
 800b52a:	4604      	mov	r4, r0
 800b52c:	6003      	str	r3, [r0, #0]
 800b52e:	f04f 0900 	mov.w	r9, #0
 800b532:	07eb      	lsls	r3, r5, #31
 800b534:	d50a      	bpl.n	800b54c <__pow5mult+0x84>
 800b536:	4639      	mov	r1, r7
 800b538:	4622      	mov	r2, r4
 800b53a:	4630      	mov	r0, r6
 800b53c:	f7ff ff1a 	bl	800b374 <__multiply>
 800b540:	4639      	mov	r1, r7
 800b542:	4680      	mov	r8, r0
 800b544:	4630      	mov	r0, r6
 800b546:	f7ff fdff 	bl	800b148 <_Bfree>
 800b54a:	4647      	mov	r7, r8
 800b54c:	106d      	asrs	r5, r5, #1
 800b54e:	d00b      	beq.n	800b568 <__pow5mult+0xa0>
 800b550:	6820      	ldr	r0, [r4, #0]
 800b552:	b938      	cbnz	r0, 800b564 <__pow5mult+0x9c>
 800b554:	4622      	mov	r2, r4
 800b556:	4621      	mov	r1, r4
 800b558:	4630      	mov	r0, r6
 800b55a:	f7ff ff0b 	bl	800b374 <__multiply>
 800b55e:	6020      	str	r0, [r4, #0]
 800b560:	f8c0 9000 	str.w	r9, [r0]
 800b564:	4604      	mov	r4, r0
 800b566:	e7e4      	b.n	800b532 <__pow5mult+0x6a>
 800b568:	4638      	mov	r0, r7
 800b56a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b56e:	bf00      	nop
 800b570:	0800cba0 	.word	0x0800cba0
 800b574:	0800c972 	.word	0x0800c972
 800b578:	0800ca52 	.word	0x0800ca52

0800b57c <__lshift>:
 800b57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b580:	460c      	mov	r4, r1
 800b582:	6849      	ldr	r1, [r1, #4]
 800b584:	6923      	ldr	r3, [r4, #16]
 800b586:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b58a:	68a3      	ldr	r3, [r4, #8]
 800b58c:	4607      	mov	r7, r0
 800b58e:	4691      	mov	r9, r2
 800b590:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b594:	f108 0601 	add.w	r6, r8, #1
 800b598:	42b3      	cmp	r3, r6
 800b59a:	db0b      	blt.n	800b5b4 <__lshift+0x38>
 800b59c:	4638      	mov	r0, r7
 800b59e:	f7ff fd93 	bl	800b0c8 <_Balloc>
 800b5a2:	4605      	mov	r5, r0
 800b5a4:	b948      	cbnz	r0, 800b5ba <__lshift+0x3e>
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	4b28      	ldr	r3, [pc, #160]	; (800b64c <__lshift+0xd0>)
 800b5aa:	4829      	ldr	r0, [pc, #164]	; (800b650 <__lshift+0xd4>)
 800b5ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b5b0:	f000 fc4a 	bl	800be48 <__assert_func>
 800b5b4:	3101      	adds	r1, #1
 800b5b6:	005b      	lsls	r3, r3, #1
 800b5b8:	e7ee      	b.n	800b598 <__lshift+0x1c>
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	f100 0114 	add.w	r1, r0, #20
 800b5c0:	f100 0210 	add.w	r2, r0, #16
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	4553      	cmp	r3, sl
 800b5c8:	db33      	blt.n	800b632 <__lshift+0xb6>
 800b5ca:	6920      	ldr	r0, [r4, #16]
 800b5cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5d0:	f104 0314 	add.w	r3, r4, #20
 800b5d4:	f019 091f 	ands.w	r9, r9, #31
 800b5d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b5dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b5e0:	d02b      	beq.n	800b63a <__lshift+0xbe>
 800b5e2:	f1c9 0e20 	rsb	lr, r9, #32
 800b5e6:	468a      	mov	sl, r1
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	6818      	ldr	r0, [r3, #0]
 800b5ec:	fa00 f009 	lsl.w	r0, r0, r9
 800b5f0:	4310      	orrs	r0, r2
 800b5f2:	f84a 0b04 	str.w	r0, [sl], #4
 800b5f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5fa:	459c      	cmp	ip, r3
 800b5fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b600:	d8f3      	bhi.n	800b5ea <__lshift+0x6e>
 800b602:	ebac 0304 	sub.w	r3, ip, r4
 800b606:	3b15      	subs	r3, #21
 800b608:	f023 0303 	bic.w	r3, r3, #3
 800b60c:	3304      	adds	r3, #4
 800b60e:	f104 0015 	add.w	r0, r4, #21
 800b612:	4584      	cmp	ip, r0
 800b614:	bf38      	it	cc
 800b616:	2304      	movcc	r3, #4
 800b618:	50ca      	str	r2, [r1, r3]
 800b61a:	b10a      	cbz	r2, 800b620 <__lshift+0xa4>
 800b61c:	f108 0602 	add.w	r6, r8, #2
 800b620:	3e01      	subs	r6, #1
 800b622:	4638      	mov	r0, r7
 800b624:	612e      	str	r6, [r5, #16]
 800b626:	4621      	mov	r1, r4
 800b628:	f7ff fd8e 	bl	800b148 <_Bfree>
 800b62c:	4628      	mov	r0, r5
 800b62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b632:	f842 0f04 	str.w	r0, [r2, #4]!
 800b636:	3301      	adds	r3, #1
 800b638:	e7c5      	b.n	800b5c6 <__lshift+0x4a>
 800b63a:	3904      	subs	r1, #4
 800b63c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b640:	f841 2f04 	str.w	r2, [r1, #4]!
 800b644:	459c      	cmp	ip, r3
 800b646:	d8f9      	bhi.n	800b63c <__lshift+0xc0>
 800b648:	e7ea      	b.n	800b620 <__lshift+0xa4>
 800b64a:	bf00      	nop
 800b64c:	0800c9e1 	.word	0x0800c9e1
 800b650:	0800ca52 	.word	0x0800ca52

0800b654 <__mcmp>:
 800b654:	b530      	push	{r4, r5, lr}
 800b656:	6902      	ldr	r2, [r0, #16]
 800b658:	690c      	ldr	r4, [r1, #16]
 800b65a:	1b12      	subs	r2, r2, r4
 800b65c:	d10e      	bne.n	800b67c <__mcmp+0x28>
 800b65e:	f100 0314 	add.w	r3, r0, #20
 800b662:	3114      	adds	r1, #20
 800b664:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b668:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b66c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b670:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b674:	42a5      	cmp	r5, r4
 800b676:	d003      	beq.n	800b680 <__mcmp+0x2c>
 800b678:	d305      	bcc.n	800b686 <__mcmp+0x32>
 800b67a:	2201      	movs	r2, #1
 800b67c:	4610      	mov	r0, r2
 800b67e:	bd30      	pop	{r4, r5, pc}
 800b680:	4283      	cmp	r3, r0
 800b682:	d3f3      	bcc.n	800b66c <__mcmp+0x18>
 800b684:	e7fa      	b.n	800b67c <__mcmp+0x28>
 800b686:	f04f 32ff 	mov.w	r2, #4294967295
 800b68a:	e7f7      	b.n	800b67c <__mcmp+0x28>

0800b68c <__mdiff>:
 800b68c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b690:	460c      	mov	r4, r1
 800b692:	4606      	mov	r6, r0
 800b694:	4611      	mov	r1, r2
 800b696:	4620      	mov	r0, r4
 800b698:	4690      	mov	r8, r2
 800b69a:	f7ff ffdb 	bl	800b654 <__mcmp>
 800b69e:	1e05      	subs	r5, r0, #0
 800b6a0:	d110      	bne.n	800b6c4 <__mdiff+0x38>
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	4630      	mov	r0, r6
 800b6a6:	f7ff fd0f 	bl	800b0c8 <_Balloc>
 800b6aa:	b930      	cbnz	r0, 800b6ba <__mdiff+0x2e>
 800b6ac:	4b3a      	ldr	r3, [pc, #232]	; (800b798 <__mdiff+0x10c>)
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	f240 2137 	movw	r1, #567	; 0x237
 800b6b4:	4839      	ldr	r0, [pc, #228]	; (800b79c <__mdiff+0x110>)
 800b6b6:	f000 fbc7 	bl	800be48 <__assert_func>
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b6c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c4:	bfa4      	itt	ge
 800b6c6:	4643      	movge	r3, r8
 800b6c8:	46a0      	movge	r8, r4
 800b6ca:	4630      	mov	r0, r6
 800b6cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b6d0:	bfa6      	itte	ge
 800b6d2:	461c      	movge	r4, r3
 800b6d4:	2500      	movge	r5, #0
 800b6d6:	2501      	movlt	r5, #1
 800b6d8:	f7ff fcf6 	bl	800b0c8 <_Balloc>
 800b6dc:	b920      	cbnz	r0, 800b6e8 <__mdiff+0x5c>
 800b6de:	4b2e      	ldr	r3, [pc, #184]	; (800b798 <__mdiff+0x10c>)
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	f240 2145 	movw	r1, #581	; 0x245
 800b6e6:	e7e5      	b.n	800b6b4 <__mdiff+0x28>
 800b6e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b6ec:	6926      	ldr	r6, [r4, #16]
 800b6ee:	60c5      	str	r5, [r0, #12]
 800b6f0:	f104 0914 	add.w	r9, r4, #20
 800b6f4:	f108 0514 	add.w	r5, r8, #20
 800b6f8:	f100 0e14 	add.w	lr, r0, #20
 800b6fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b700:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b704:	f108 0210 	add.w	r2, r8, #16
 800b708:	46f2      	mov	sl, lr
 800b70a:	2100      	movs	r1, #0
 800b70c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b710:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b714:	fa11 f88b 	uxtah	r8, r1, fp
 800b718:	b299      	uxth	r1, r3
 800b71a:	0c1b      	lsrs	r3, r3, #16
 800b71c:	eba8 0801 	sub.w	r8, r8, r1
 800b720:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b724:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b728:	fa1f f888 	uxth.w	r8, r8
 800b72c:	1419      	asrs	r1, r3, #16
 800b72e:	454e      	cmp	r6, r9
 800b730:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b734:	f84a 3b04 	str.w	r3, [sl], #4
 800b738:	d8e8      	bhi.n	800b70c <__mdiff+0x80>
 800b73a:	1b33      	subs	r3, r6, r4
 800b73c:	3b15      	subs	r3, #21
 800b73e:	f023 0303 	bic.w	r3, r3, #3
 800b742:	3304      	adds	r3, #4
 800b744:	3415      	adds	r4, #21
 800b746:	42a6      	cmp	r6, r4
 800b748:	bf38      	it	cc
 800b74a:	2304      	movcc	r3, #4
 800b74c:	441d      	add	r5, r3
 800b74e:	4473      	add	r3, lr
 800b750:	469e      	mov	lr, r3
 800b752:	462e      	mov	r6, r5
 800b754:	4566      	cmp	r6, ip
 800b756:	d30e      	bcc.n	800b776 <__mdiff+0xea>
 800b758:	f10c 0203 	add.w	r2, ip, #3
 800b75c:	1b52      	subs	r2, r2, r5
 800b75e:	f022 0203 	bic.w	r2, r2, #3
 800b762:	3d03      	subs	r5, #3
 800b764:	45ac      	cmp	ip, r5
 800b766:	bf38      	it	cc
 800b768:	2200      	movcc	r2, #0
 800b76a:	4413      	add	r3, r2
 800b76c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b770:	b17a      	cbz	r2, 800b792 <__mdiff+0x106>
 800b772:	6107      	str	r7, [r0, #16]
 800b774:	e7a4      	b.n	800b6c0 <__mdiff+0x34>
 800b776:	f856 8b04 	ldr.w	r8, [r6], #4
 800b77a:	fa11 f288 	uxtah	r2, r1, r8
 800b77e:	1414      	asrs	r4, r2, #16
 800b780:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b784:	b292      	uxth	r2, r2
 800b786:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b78a:	f84e 2b04 	str.w	r2, [lr], #4
 800b78e:	1421      	asrs	r1, r4, #16
 800b790:	e7e0      	b.n	800b754 <__mdiff+0xc8>
 800b792:	3f01      	subs	r7, #1
 800b794:	e7ea      	b.n	800b76c <__mdiff+0xe0>
 800b796:	bf00      	nop
 800b798:	0800c9e1 	.word	0x0800c9e1
 800b79c:	0800ca52 	.word	0x0800ca52

0800b7a0 <__ulp>:
 800b7a0:	b082      	sub	sp, #8
 800b7a2:	ed8d 0b00 	vstr	d0, [sp]
 800b7a6:	9a01      	ldr	r2, [sp, #4]
 800b7a8:	4b0f      	ldr	r3, [pc, #60]	; (800b7e8 <__ulp+0x48>)
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	dc08      	bgt.n	800b7c6 <__ulp+0x26>
 800b7b4:	425b      	negs	r3, r3
 800b7b6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b7ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b7be:	da04      	bge.n	800b7ca <__ulp+0x2a>
 800b7c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b7c4:	4113      	asrs	r3, r2
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	e008      	b.n	800b7dc <__ulp+0x3c>
 800b7ca:	f1a2 0314 	sub.w	r3, r2, #20
 800b7ce:	2b1e      	cmp	r3, #30
 800b7d0:	bfda      	itte	le
 800b7d2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b7d6:	40da      	lsrle	r2, r3
 800b7d8:	2201      	movgt	r2, #1
 800b7da:	2300      	movs	r3, #0
 800b7dc:	4619      	mov	r1, r3
 800b7de:	4610      	mov	r0, r2
 800b7e0:	ec41 0b10 	vmov	d0, r0, r1
 800b7e4:	b002      	add	sp, #8
 800b7e6:	4770      	bx	lr
 800b7e8:	7ff00000 	.word	0x7ff00000

0800b7ec <__b2d>:
 800b7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f0:	6906      	ldr	r6, [r0, #16]
 800b7f2:	f100 0814 	add.w	r8, r0, #20
 800b7f6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b7fa:	1f37      	subs	r7, r6, #4
 800b7fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b800:	4610      	mov	r0, r2
 800b802:	f7ff fd53 	bl	800b2ac <__hi0bits>
 800b806:	f1c0 0320 	rsb	r3, r0, #32
 800b80a:	280a      	cmp	r0, #10
 800b80c:	600b      	str	r3, [r1, #0]
 800b80e:	491b      	ldr	r1, [pc, #108]	; (800b87c <__b2d+0x90>)
 800b810:	dc15      	bgt.n	800b83e <__b2d+0x52>
 800b812:	f1c0 0c0b 	rsb	ip, r0, #11
 800b816:	fa22 f30c 	lsr.w	r3, r2, ip
 800b81a:	45b8      	cmp	r8, r7
 800b81c:	ea43 0501 	orr.w	r5, r3, r1
 800b820:	bf34      	ite	cc
 800b822:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b826:	2300      	movcs	r3, #0
 800b828:	3015      	adds	r0, #21
 800b82a:	fa02 f000 	lsl.w	r0, r2, r0
 800b82e:	fa23 f30c 	lsr.w	r3, r3, ip
 800b832:	4303      	orrs	r3, r0
 800b834:	461c      	mov	r4, r3
 800b836:	ec45 4b10 	vmov	d0, r4, r5
 800b83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b83e:	45b8      	cmp	r8, r7
 800b840:	bf3a      	itte	cc
 800b842:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b846:	f1a6 0708 	subcc.w	r7, r6, #8
 800b84a:	2300      	movcs	r3, #0
 800b84c:	380b      	subs	r0, #11
 800b84e:	d012      	beq.n	800b876 <__b2d+0x8a>
 800b850:	f1c0 0120 	rsb	r1, r0, #32
 800b854:	fa23 f401 	lsr.w	r4, r3, r1
 800b858:	4082      	lsls	r2, r0
 800b85a:	4322      	orrs	r2, r4
 800b85c:	4547      	cmp	r7, r8
 800b85e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b862:	bf8c      	ite	hi
 800b864:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b868:	2200      	movls	r2, #0
 800b86a:	4083      	lsls	r3, r0
 800b86c:	40ca      	lsrs	r2, r1
 800b86e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b872:	4313      	orrs	r3, r2
 800b874:	e7de      	b.n	800b834 <__b2d+0x48>
 800b876:	ea42 0501 	orr.w	r5, r2, r1
 800b87a:	e7db      	b.n	800b834 <__b2d+0x48>
 800b87c:	3ff00000 	.word	0x3ff00000

0800b880 <__d2b>:
 800b880:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b884:	460f      	mov	r7, r1
 800b886:	2101      	movs	r1, #1
 800b888:	ec59 8b10 	vmov	r8, r9, d0
 800b88c:	4616      	mov	r6, r2
 800b88e:	f7ff fc1b 	bl	800b0c8 <_Balloc>
 800b892:	4604      	mov	r4, r0
 800b894:	b930      	cbnz	r0, 800b8a4 <__d2b+0x24>
 800b896:	4602      	mov	r2, r0
 800b898:	4b24      	ldr	r3, [pc, #144]	; (800b92c <__d2b+0xac>)
 800b89a:	4825      	ldr	r0, [pc, #148]	; (800b930 <__d2b+0xb0>)
 800b89c:	f240 310f 	movw	r1, #783	; 0x30f
 800b8a0:	f000 fad2 	bl	800be48 <__assert_func>
 800b8a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b8a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b8ac:	bb2d      	cbnz	r5, 800b8fa <__d2b+0x7a>
 800b8ae:	9301      	str	r3, [sp, #4]
 800b8b0:	f1b8 0300 	subs.w	r3, r8, #0
 800b8b4:	d026      	beq.n	800b904 <__d2b+0x84>
 800b8b6:	4668      	mov	r0, sp
 800b8b8:	9300      	str	r3, [sp, #0]
 800b8ba:	f7ff fd17 	bl	800b2ec <__lo0bits>
 800b8be:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b8c2:	b1e8      	cbz	r0, 800b900 <__d2b+0x80>
 800b8c4:	f1c0 0320 	rsb	r3, r0, #32
 800b8c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b8cc:	430b      	orrs	r3, r1
 800b8ce:	40c2      	lsrs	r2, r0
 800b8d0:	6163      	str	r3, [r4, #20]
 800b8d2:	9201      	str	r2, [sp, #4]
 800b8d4:	9b01      	ldr	r3, [sp, #4]
 800b8d6:	61a3      	str	r3, [r4, #24]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	bf14      	ite	ne
 800b8dc:	2202      	movne	r2, #2
 800b8de:	2201      	moveq	r2, #1
 800b8e0:	6122      	str	r2, [r4, #16]
 800b8e2:	b1bd      	cbz	r5, 800b914 <__d2b+0x94>
 800b8e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b8e8:	4405      	add	r5, r0
 800b8ea:	603d      	str	r5, [r7, #0]
 800b8ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b8f0:	6030      	str	r0, [r6, #0]
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	b003      	add	sp, #12
 800b8f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8fe:	e7d6      	b.n	800b8ae <__d2b+0x2e>
 800b900:	6161      	str	r1, [r4, #20]
 800b902:	e7e7      	b.n	800b8d4 <__d2b+0x54>
 800b904:	a801      	add	r0, sp, #4
 800b906:	f7ff fcf1 	bl	800b2ec <__lo0bits>
 800b90a:	9b01      	ldr	r3, [sp, #4]
 800b90c:	6163      	str	r3, [r4, #20]
 800b90e:	3020      	adds	r0, #32
 800b910:	2201      	movs	r2, #1
 800b912:	e7e5      	b.n	800b8e0 <__d2b+0x60>
 800b914:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b918:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b91c:	6038      	str	r0, [r7, #0]
 800b91e:	6918      	ldr	r0, [r3, #16]
 800b920:	f7ff fcc4 	bl	800b2ac <__hi0bits>
 800b924:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b928:	e7e2      	b.n	800b8f0 <__d2b+0x70>
 800b92a:	bf00      	nop
 800b92c:	0800c9e1 	.word	0x0800c9e1
 800b930:	0800ca52 	.word	0x0800ca52

0800b934 <__ratio>:
 800b934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b938:	4688      	mov	r8, r1
 800b93a:	4669      	mov	r1, sp
 800b93c:	4681      	mov	r9, r0
 800b93e:	f7ff ff55 	bl	800b7ec <__b2d>
 800b942:	a901      	add	r1, sp, #4
 800b944:	4640      	mov	r0, r8
 800b946:	ec55 4b10 	vmov	r4, r5, d0
 800b94a:	f7ff ff4f 	bl	800b7ec <__b2d>
 800b94e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b952:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b956:	eba3 0c02 	sub.w	ip, r3, r2
 800b95a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b95e:	1a9b      	subs	r3, r3, r2
 800b960:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b964:	ec51 0b10 	vmov	r0, r1, d0
 800b968:	2b00      	cmp	r3, #0
 800b96a:	bfd6      	itet	le
 800b96c:	460a      	movle	r2, r1
 800b96e:	462a      	movgt	r2, r5
 800b970:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b974:	468b      	mov	fp, r1
 800b976:	462f      	mov	r7, r5
 800b978:	bfd4      	ite	le
 800b97a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b97e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b982:	4620      	mov	r0, r4
 800b984:	ee10 2a10 	vmov	r2, s0
 800b988:	465b      	mov	r3, fp
 800b98a:	4639      	mov	r1, r7
 800b98c:	f7f4 ff7e 	bl	800088c <__aeabi_ddiv>
 800b990:	ec41 0b10 	vmov	d0, r0, r1
 800b994:	b003      	add	sp, #12
 800b996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b99a <__copybits>:
 800b99a:	3901      	subs	r1, #1
 800b99c:	b570      	push	{r4, r5, r6, lr}
 800b99e:	1149      	asrs	r1, r1, #5
 800b9a0:	6914      	ldr	r4, [r2, #16]
 800b9a2:	3101      	adds	r1, #1
 800b9a4:	f102 0314 	add.w	r3, r2, #20
 800b9a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b9ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b9b0:	1f05      	subs	r5, r0, #4
 800b9b2:	42a3      	cmp	r3, r4
 800b9b4:	d30c      	bcc.n	800b9d0 <__copybits+0x36>
 800b9b6:	1aa3      	subs	r3, r4, r2
 800b9b8:	3b11      	subs	r3, #17
 800b9ba:	f023 0303 	bic.w	r3, r3, #3
 800b9be:	3211      	adds	r2, #17
 800b9c0:	42a2      	cmp	r2, r4
 800b9c2:	bf88      	it	hi
 800b9c4:	2300      	movhi	r3, #0
 800b9c6:	4418      	add	r0, r3
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	4288      	cmp	r0, r1
 800b9cc:	d305      	bcc.n	800b9da <__copybits+0x40>
 800b9ce:	bd70      	pop	{r4, r5, r6, pc}
 800b9d0:	f853 6b04 	ldr.w	r6, [r3], #4
 800b9d4:	f845 6f04 	str.w	r6, [r5, #4]!
 800b9d8:	e7eb      	b.n	800b9b2 <__copybits+0x18>
 800b9da:	f840 3b04 	str.w	r3, [r0], #4
 800b9de:	e7f4      	b.n	800b9ca <__copybits+0x30>

0800b9e0 <__any_on>:
 800b9e0:	f100 0214 	add.w	r2, r0, #20
 800b9e4:	6900      	ldr	r0, [r0, #16]
 800b9e6:	114b      	asrs	r3, r1, #5
 800b9e8:	4298      	cmp	r0, r3
 800b9ea:	b510      	push	{r4, lr}
 800b9ec:	db11      	blt.n	800ba12 <__any_on+0x32>
 800b9ee:	dd0a      	ble.n	800ba06 <__any_on+0x26>
 800b9f0:	f011 011f 	ands.w	r1, r1, #31
 800b9f4:	d007      	beq.n	800ba06 <__any_on+0x26>
 800b9f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b9fa:	fa24 f001 	lsr.w	r0, r4, r1
 800b9fe:	fa00 f101 	lsl.w	r1, r0, r1
 800ba02:	428c      	cmp	r4, r1
 800ba04:	d10b      	bne.n	800ba1e <__any_on+0x3e>
 800ba06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d803      	bhi.n	800ba16 <__any_on+0x36>
 800ba0e:	2000      	movs	r0, #0
 800ba10:	bd10      	pop	{r4, pc}
 800ba12:	4603      	mov	r3, r0
 800ba14:	e7f7      	b.n	800ba06 <__any_on+0x26>
 800ba16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba1a:	2900      	cmp	r1, #0
 800ba1c:	d0f5      	beq.n	800ba0a <__any_on+0x2a>
 800ba1e:	2001      	movs	r0, #1
 800ba20:	e7f6      	b.n	800ba10 <__any_on+0x30>

0800ba22 <__ascii_wctomb>:
 800ba22:	b149      	cbz	r1, 800ba38 <__ascii_wctomb+0x16>
 800ba24:	2aff      	cmp	r2, #255	; 0xff
 800ba26:	bf85      	ittet	hi
 800ba28:	238a      	movhi	r3, #138	; 0x8a
 800ba2a:	6003      	strhi	r3, [r0, #0]
 800ba2c:	700a      	strbls	r2, [r1, #0]
 800ba2e:	f04f 30ff 	movhi.w	r0, #4294967295
 800ba32:	bf98      	it	ls
 800ba34:	2001      	movls	r0, #1
 800ba36:	4770      	bx	lr
 800ba38:	4608      	mov	r0, r1
 800ba3a:	4770      	bx	lr

0800ba3c <__ssputs_r>:
 800ba3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba40:	688e      	ldr	r6, [r1, #8]
 800ba42:	461f      	mov	r7, r3
 800ba44:	42be      	cmp	r6, r7
 800ba46:	680b      	ldr	r3, [r1, #0]
 800ba48:	4682      	mov	sl, r0
 800ba4a:	460c      	mov	r4, r1
 800ba4c:	4690      	mov	r8, r2
 800ba4e:	d82c      	bhi.n	800baaa <__ssputs_r+0x6e>
 800ba50:	898a      	ldrh	r2, [r1, #12]
 800ba52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba56:	d026      	beq.n	800baa6 <__ssputs_r+0x6a>
 800ba58:	6965      	ldr	r5, [r4, #20]
 800ba5a:	6909      	ldr	r1, [r1, #16]
 800ba5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba60:	eba3 0901 	sub.w	r9, r3, r1
 800ba64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba68:	1c7b      	adds	r3, r7, #1
 800ba6a:	444b      	add	r3, r9
 800ba6c:	106d      	asrs	r5, r5, #1
 800ba6e:	429d      	cmp	r5, r3
 800ba70:	bf38      	it	cc
 800ba72:	461d      	movcc	r5, r3
 800ba74:	0553      	lsls	r3, r2, #21
 800ba76:	d527      	bpl.n	800bac8 <__ssputs_r+0x8c>
 800ba78:	4629      	mov	r1, r5
 800ba7a:	f7fc f913 	bl	8007ca4 <_malloc_r>
 800ba7e:	4606      	mov	r6, r0
 800ba80:	b360      	cbz	r0, 800badc <__ssputs_r+0xa0>
 800ba82:	6921      	ldr	r1, [r4, #16]
 800ba84:	464a      	mov	r2, r9
 800ba86:	f7fe f8d0 	bl	8009c2a <memcpy>
 800ba8a:	89a3      	ldrh	r3, [r4, #12]
 800ba8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba94:	81a3      	strh	r3, [r4, #12]
 800ba96:	6126      	str	r6, [r4, #16]
 800ba98:	6165      	str	r5, [r4, #20]
 800ba9a:	444e      	add	r6, r9
 800ba9c:	eba5 0509 	sub.w	r5, r5, r9
 800baa0:	6026      	str	r6, [r4, #0]
 800baa2:	60a5      	str	r5, [r4, #8]
 800baa4:	463e      	mov	r6, r7
 800baa6:	42be      	cmp	r6, r7
 800baa8:	d900      	bls.n	800baac <__ssputs_r+0x70>
 800baaa:	463e      	mov	r6, r7
 800baac:	6820      	ldr	r0, [r4, #0]
 800baae:	4632      	mov	r2, r6
 800bab0:	4641      	mov	r1, r8
 800bab2:	f7fd ffba 	bl	8009a2a <memmove>
 800bab6:	68a3      	ldr	r3, [r4, #8]
 800bab8:	1b9b      	subs	r3, r3, r6
 800baba:	60a3      	str	r3, [r4, #8]
 800babc:	6823      	ldr	r3, [r4, #0]
 800babe:	4433      	add	r3, r6
 800bac0:	6023      	str	r3, [r4, #0]
 800bac2:	2000      	movs	r0, #0
 800bac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bac8:	462a      	mov	r2, r5
 800baca:	f000 f9f1 	bl	800beb0 <_realloc_r>
 800bace:	4606      	mov	r6, r0
 800bad0:	2800      	cmp	r0, #0
 800bad2:	d1e0      	bne.n	800ba96 <__ssputs_r+0x5a>
 800bad4:	6921      	ldr	r1, [r4, #16]
 800bad6:	4650      	mov	r0, sl
 800bad8:	f7fe ff40 	bl	800a95c <_free_r>
 800badc:	230c      	movs	r3, #12
 800bade:	f8ca 3000 	str.w	r3, [sl]
 800bae2:	89a3      	ldrh	r3, [r4, #12]
 800bae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bae8:	81a3      	strh	r3, [r4, #12]
 800baea:	f04f 30ff 	mov.w	r0, #4294967295
 800baee:	e7e9      	b.n	800bac4 <__ssputs_r+0x88>

0800baf0 <_svfiprintf_r>:
 800baf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf4:	4698      	mov	r8, r3
 800baf6:	898b      	ldrh	r3, [r1, #12]
 800baf8:	061b      	lsls	r3, r3, #24
 800bafa:	b09d      	sub	sp, #116	; 0x74
 800bafc:	4607      	mov	r7, r0
 800bafe:	460d      	mov	r5, r1
 800bb00:	4614      	mov	r4, r2
 800bb02:	d50e      	bpl.n	800bb22 <_svfiprintf_r+0x32>
 800bb04:	690b      	ldr	r3, [r1, #16]
 800bb06:	b963      	cbnz	r3, 800bb22 <_svfiprintf_r+0x32>
 800bb08:	2140      	movs	r1, #64	; 0x40
 800bb0a:	f7fc f8cb 	bl	8007ca4 <_malloc_r>
 800bb0e:	6028      	str	r0, [r5, #0]
 800bb10:	6128      	str	r0, [r5, #16]
 800bb12:	b920      	cbnz	r0, 800bb1e <_svfiprintf_r+0x2e>
 800bb14:	230c      	movs	r3, #12
 800bb16:	603b      	str	r3, [r7, #0]
 800bb18:	f04f 30ff 	mov.w	r0, #4294967295
 800bb1c:	e0d0      	b.n	800bcc0 <_svfiprintf_r+0x1d0>
 800bb1e:	2340      	movs	r3, #64	; 0x40
 800bb20:	616b      	str	r3, [r5, #20]
 800bb22:	2300      	movs	r3, #0
 800bb24:	9309      	str	r3, [sp, #36]	; 0x24
 800bb26:	2320      	movs	r3, #32
 800bb28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb30:	2330      	movs	r3, #48	; 0x30
 800bb32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bcd8 <_svfiprintf_r+0x1e8>
 800bb36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb3a:	f04f 0901 	mov.w	r9, #1
 800bb3e:	4623      	mov	r3, r4
 800bb40:	469a      	mov	sl, r3
 800bb42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb46:	b10a      	cbz	r2, 800bb4c <_svfiprintf_r+0x5c>
 800bb48:	2a25      	cmp	r2, #37	; 0x25
 800bb4a:	d1f9      	bne.n	800bb40 <_svfiprintf_r+0x50>
 800bb4c:	ebba 0b04 	subs.w	fp, sl, r4
 800bb50:	d00b      	beq.n	800bb6a <_svfiprintf_r+0x7a>
 800bb52:	465b      	mov	r3, fp
 800bb54:	4622      	mov	r2, r4
 800bb56:	4629      	mov	r1, r5
 800bb58:	4638      	mov	r0, r7
 800bb5a:	f7ff ff6f 	bl	800ba3c <__ssputs_r>
 800bb5e:	3001      	adds	r0, #1
 800bb60:	f000 80a9 	beq.w	800bcb6 <_svfiprintf_r+0x1c6>
 800bb64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb66:	445a      	add	r2, fp
 800bb68:	9209      	str	r2, [sp, #36]	; 0x24
 800bb6a:	f89a 3000 	ldrb.w	r3, [sl]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	f000 80a1 	beq.w	800bcb6 <_svfiprintf_r+0x1c6>
 800bb74:	2300      	movs	r3, #0
 800bb76:	f04f 32ff 	mov.w	r2, #4294967295
 800bb7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb7e:	f10a 0a01 	add.w	sl, sl, #1
 800bb82:	9304      	str	r3, [sp, #16]
 800bb84:	9307      	str	r3, [sp, #28]
 800bb86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb8a:	931a      	str	r3, [sp, #104]	; 0x68
 800bb8c:	4654      	mov	r4, sl
 800bb8e:	2205      	movs	r2, #5
 800bb90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb94:	4850      	ldr	r0, [pc, #320]	; (800bcd8 <_svfiprintf_r+0x1e8>)
 800bb96:	f7f4 fb3b 	bl	8000210 <memchr>
 800bb9a:	9a04      	ldr	r2, [sp, #16]
 800bb9c:	b9d8      	cbnz	r0, 800bbd6 <_svfiprintf_r+0xe6>
 800bb9e:	06d0      	lsls	r0, r2, #27
 800bba0:	bf44      	itt	mi
 800bba2:	2320      	movmi	r3, #32
 800bba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bba8:	0711      	lsls	r1, r2, #28
 800bbaa:	bf44      	itt	mi
 800bbac:	232b      	movmi	r3, #43	; 0x2b
 800bbae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbb2:	f89a 3000 	ldrb.w	r3, [sl]
 800bbb6:	2b2a      	cmp	r3, #42	; 0x2a
 800bbb8:	d015      	beq.n	800bbe6 <_svfiprintf_r+0xf6>
 800bbba:	9a07      	ldr	r2, [sp, #28]
 800bbbc:	4654      	mov	r4, sl
 800bbbe:	2000      	movs	r0, #0
 800bbc0:	f04f 0c0a 	mov.w	ip, #10
 800bbc4:	4621      	mov	r1, r4
 800bbc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbca:	3b30      	subs	r3, #48	; 0x30
 800bbcc:	2b09      	cmp	r3, #9
 800bbce:	d94d      	bls.n	800bc6c <_svfiprintf_r+0x17c>
 800bbd0:	b1b0      	cbz	r0, 800bc00 <_svfiprintf_r+0x110>
 800bbd2:	9207      	str	r2, [sp, #28]
 800bbd4:	e014      	b.n	800bc00 <_svfiprintf_r+0x110>
 800bbd6:	eba0 0308 	sub.w	r3, r0, r8
 800bbda:	fa09 f303 	lsl.w	r3, r9, r3
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	9304      	str	r3, [sp, #16]
 800bbe2:	46a2      	mov	sl, r4
 800bbe4:	e7d2      	b.n	800bb8c <_svfiprintf_r+0x9c>
 800bbe6:	9b03      	ldr	r3, [sp, #12]
 800bbe8:	1d19      	adds	r1, r3, #4
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	9103      	str	r1, [sp, #12]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	bfbb      	ittet	lt
 800bbf2:	425b      	neglt	r3, r3
 800bbf4:	f042 0202 	orrlt.w	r2, r2, #2
 800bbf8:	9307      	strge	r3, [sp, #28]
 800bbfa:	9307      	strlt	r3, [sp, #28]
 800bbfc:	bfb8      	it	lt
 800bbfe:	9204      	strlt	r2, [sp, #16]
 800bc00:	7823      	ldrb	r3, [r4, #0]
 800bc02:	2b2e      	cmp	r3, #46	; 0x2e
 800bc04:	d10c      	bne.n	800bc20 <_svfiprintf_r+0x130>
 800bc06:	7863      	ldrb	r3, [r4, #1]
 800bc08:	2b2a      	cmp	r3, #42	; 0x2a
 800bc0a:	d134      	bne.n	800bc76 <_svfiprintf_r+0x186>
 800bc0c:	9b03      	ldr	r3, [sp, #12]
 800bc0e:	1d1a      	adds	r2, r3, #4
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	9203      	str	r2, [sp, #12]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	bfb8      	it	lt
 800bc18:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc1c:	3402      	adds	r4, #2
 800bc1e:	9305      	str	r3, [sp, #20]
 800bc20:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bce8 <_svfiprintf_r+0x1f8>
 800bc24:	7821      	ldrb	r1, [r4, #0]
 800bc26:	2203      	movs	r2, #3
 800bc28:	4650      	mov	r0, sl
 800bc2a:	f7f4 faf1 	bl	8000210 <memchr>
 800bc2e:	b138      	cbz	r0, 800bc40 <_svfiprintf_r+0x150>
 800bc30:	9b04      	ldr	r3, [sp, #16]
 800bc32:	eba0 000a 	sub.w	r0, r0, sl
 800bc36:	2240      	movs	r2, #64	; 0x40
 800bc38:	4082      	lsls	r2, r0
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	3401      	adds	r4, #1
 800bc3e:	9304      	str	r3, [sp, #16]
 800bc40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc44:	4825      	ldr	r0, [pc, #148]	; (800bcdc <_svfiprintf_r+0x1ec>)
 800bc46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc4a:	2206      	movs	r2, #6
 800bc4c:	f7f4 fae0 	bl	8000210 <memchr>
 800bc50:	2800      	cmp	r0, #0
 800bc52:	d038      	beq.n	800bcc6 <_svfiprintf_r+0x1d6>
 800bc54:	4b22      	ldr	r3, [pc, #136]	; (800bce0 <_svfiprintf_r+0x1f0>)
 800bc56:	bb1b      	cbnz	r3, 800bca0 <_svfiprintf_r+0x1b0>
 800bc58:	9b03      	ldr	r3, [sp, #12]
 800bc5a:	3307      	adds	r3, #7
 800bc5c:	f023 0307 	bic.w	r3, r3, #7
 800bc60:	3308      	adds	r3, #8
 800bc62:	9303      	str	r3, [sp, #12]
 800bc64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc66:	4433      	add	r3, r6
 800bc68:	9309      	str	r3, [sp, #36]	; 0x24
 800bc6a:	e768      	b.n	800bb3e <_svfiprintf_r+0x4e>
 800bc6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc70:	460c      	mov	r4, r1
 800bc72:	2001      	movs	r0, #1
 800bc74:	e7a6      	b.n	800bbc4 <_svfiprintf_r+0xd4>
 800bc76:	2300      	movs	r3, #0
 800bc78:	3401      	adds	r4, #1
 800bc7a:	9305      	str	r3, [sp, #20]
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	f04f 0c0a 	mov.w	ip, #10
 800bc82:	4620      	mov	r0, r4
 800bc84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc88:	3a30      	subs	r2, #48	; 0x30
 800bc8a:	2a09      	cmp	r2, #9
 800bc8c:	d903      	bls.n	800bc96 <_svfiprintf_r+0x1a6>
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d0c6      	beq.n	800bc20 <_svfiprintf_r+0x130>
 800bc92:	9105      	str	r1, [sp, #20]
 800bc94:	e7c4      	b.n	800bc20 <_svfiprintf_r+0x130>
 800bc96:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc9a:	4604      	mov	r4, r0
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e7f0      	b.n	800bc82 <_svfiprintf_r+0x192>
 800bca0:	ab03      	add	r3, sp, #12
 800bca2:	9300      	str	r3, [sp, #0]
 800bca4:	462a      	mov	r2, r5
 800bca6:	4b0f      	ldr	r3, [pc, #60]	; (800bce4 <_svfiprintf_r+0x1f4>)
 800bca8:	a904      	add	r1, sp, #16
 800bcaa:	4638      	mov	r0, r7
 800bcac:	f7fd f9ae 	bl	800900c <_printf_float>
 800bcb0:	1c42      	adds	r2, r0, #1
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	d1d6      	bne.n	800bc64 <_svfiprintf_r+0x174>
 800bcb6:	89ab      	ldrh	r3, [r5, #12]
 800bcb8:	065b      	lsls	r3, r3, #25
 800bcba:	f53f af2d 	bmi.w	800bb18 <_svfiprintf_r+0x28>
 800bcbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcc0:	b01d      	add	sp, #116	; 0x74
 800bcc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcc6:	ab03      	add	r3, sp, #12
 800bcc8:	9300      	str	r3, [sp, #0]
 800bcca:	462a      	mov	r2, r5
 800bccc:	4b05      	ldr	r3, [pc, #20]	; (800bce4 <_svfiprintf_r+0x1f4>)
 800bcce:	a904      	add	r1, sp, #16
 800bcd0:	4638      	mov	r0, r7
 800bcd2:	f7fd fc3f 	bl	8009554 <_printf_i>
 800bcd6:	e7eb      	b.n	800bcb0 <_svfiprintf_r+0x1c0>
 800bcd8:	0800cbac 	.word	0x0800cbac
 800bcdc:	0800cbb6 	.word	0x0800cbb6
 800bce0:	0800900d 	.word	0x0800900d
 800bce4:	0800ba3d 	.word	0x0800ba3d
 800bce8:	0800cbb2 	.word	0x0800cbb2

0800bcec <__sflush_r>:
 800bcec:	898a      	ldrh	r2, [r1, #12]
 800bcee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf2:	4605      	mov	r5, r0
 800bcf4:	0710      	lsls	r0, r2, #28
 800bcf6:	460c      	mov	r4, r1
 800bcf8:	d458      	bmi.n	800bdac <__sflush_r+0xc0>
 800bcfa:	684b      	ldr	r3, [r1, #4]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	dc05      	bgt.n	800bd0c <__sflush_r+0x20>
 800bd00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	dc02      	bgt.n	800bd0c <__sflush_r+0x20>
 800bd06:	2000      	movs	r0, #0
 800bd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd0e:	2e00      	cmp	r6, #0
 800bd10:	d0f9      	beq.n	800bd06 <__sflush_r+0x1a>
 800bd12:	2300      	movs	r3, #0
 800bd14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd18:	682f      	ldr	r7, [r5, #0]
 800bd1a:	6a21      	ldr	r1, [r4, #32]
 800bd1c:	602b      	str	r3, [r5, #0]
 800bd1e:	d032      	beq.n	800bd86 <__sflush_r+0x9a>
 800bd20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd22:	89a3      	ldrh	r3, [r4, #12]
 800bd24:	075a      	lsls	r2, r3, #29
 800bd26:	d505      	bpl.n	800bd34 <__sflush_r+0x48>
 800bd28:	6863      	ldr	r3, [r4, #4]
 800bd2a:	1ac0      	subs	r0, r0, r3
 800bd2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd2e:	b10b      	cbz	r3, 800bd34 <__sflush_r+0x48>
 800bd30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd32:	1ac0      	subs	r0, r0, r3
 800bd34:	2300      	movs	r3, #0
 800bd36:	4602      	mov	r2, r0
 800bd38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd3a:	6a21      	ldr	r1, [r4, #32]
 800bd3c:	4628      	mov	r0, r5
 800bd3e:	47b0      	blx	r6
 800bd40:	1c43      	adds	r3, r0, #1
 800bd42:	89a3      	ldrh	r3, [r4, #12]
 800bd44:	d106      	bne.n	800bd54 <__sflush_r+0x68>
 800bd46:	6829      	ldr	r1, [r5, #0]
 800bd48:	291d      	cmp	r1, #29
 800bd4a:	d82b      	bhi.n	800bda4 <__sflush_r+0xb8>
 800bd4c:	4a29      	ldr	r2, [pc, #164]	; (800bdf4 <__sflush_r+0x108>)
 800bd4e:	410a      	asrs	r2, r1
 800bd50:	07d6      	lsls	r6, r2, #31
 800bd52:	d427      	bmi.n	800bda4 <__sflush_r+0xb8>
 800bd54:	2200      	movs	r2, #0
 800bd56:	6062      	str	r2, [r4, #4]
 800bd58:	04d9      	lsls	r1, r3, #19
 800bd5a:	6922      	ldr	r2, [r4, #16]
 800bd5c:	6022      	str	r2, [r4, #0]
 800bd5e:	d504      	bpl.n	800bd6a <__sflush_r+0x7e>
 800bd60:	1c42      	adds	r2, r0, #1
 800bd62:	d101      	bne.n	800bd68 <__sflush_r+0x7c>
 800bd64:	682b      	ldr	r3, [r5, #0]
 800bd66:	b903      	cbnz	r3, 800bd6a <__sflush_r+0x7e>
 800bd68:	6560      	str	r0, [r4, #84]	; 0x54
 800bd6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd6c:	602f      	str	r7, [r5, #0]
 800bd6e:	2900      	cmp	r1, #0
 800bd70:	d0c9      	beq.n	800bd06 <__sflush_r+0x1a>
 800bd72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd76:	4299      	cmp	r1, r3
 800bd78:	d002      	beq.n	800bd80 <__sflush_r+0x94>
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	f7fe fdee 	bl	800a95c <_free_r>
 800bd80:	2000      	movs	r0, #0
 800bd82:	6360      	str	r0, [r4, #52]	; 0x34
 800bd84:	e7c0      	b.n	800bd08 <__sflush_r+0x1c>
 800bd86:	2301      	movs	r3, #1
 800bd88:	4628      	mov	r0, r5
 800bd8a:	47b0      	blx	r6
 800bd8c:	1c41      	adds	r1, r0, #1
 800bd8e:	d1c8      	bne.n	800bd22 <__sflush_r+0x36>
 800bd90:	682b      	ldr	r3, [r5, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d0c5      	beq.n	800bd22 <__sflush_r+0x36>
 800bd96:	2b1d      	cmp	r3, #29
 800bd98:	d001      	beq.n	800bd9e <__sflush_r+0xb2>
 800bd9a:	2b16      	cmp	r3, #22
 800bd9c:	d101      	bne.n	800bda2 <__sflush_r+0xb6>
 800bd9e:	602f      	str	r7, [r5, #0]
 800bda0:	e7b1      	b.n	800bd06 <__sflush_r+0x1a>
 800bda2:	89a3      	ldrh	r3, [r4, #12]
 800bda4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bda8:	81a3      	strh	r3, [r4, #12]
 800bdaa:	e7ad      	b.n	800bd08 <__sflush_r+0x1c>
 800bdac:	690f      	ldr	r7, [r1, #16]
 800bdae:	2f00      	cmp	r7, #0
 800bdb0:	d0a9      	beq.n	800bd06 <__sflush_r+0x1a>
 800bdb2:	0793      	lsls	r3, r2, #30
 800bdb4:	680e      	ldr	r6, [r1, #0]
 800bdb6:	bf08      	it	eq
 800bdb8:	694b      	ldreq	r3, [r1, #20]
 800bdba:	600f      	str	r7, [r1, #0]
 800bdbc:	bf18      	it	ne
 800bdbe:	2300      	movne	r3, #0
 800bdc0:	eba6 0807 	sub.w	r8, r6, r7
 800bdc4:	608b      	str	r3, [r1, #8]
 800bdc6:	f1b8 0f00 	cmp.w	r8, #0
 800bdca:	dd9c      	ble.n	800bd06 <__sflush_r+0x1a>
 800bdcc:	6a21      	ldr	r1, [r4, #32]
 800bdce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bdd0:	4643      	mov	r3, r8
 800bdd2:	463a      	mov	r2, r7
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	47b0      	blx	r6
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	dc06      	bgt.n	800bdea <__sflush_r+0xfe>
 800bddc:	89a3      	ldrh	r3, [r4, #12]
 800bdde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bde2:	81a3      	strh	r3, [r4, #12]
 800bde4:	f04f 30ff 	mov.w	r0, #4294967295
 800bde8:	e78e      	b.n	800bd08 <__sflush_r+0x1c>
 800bdea:	4407      	add	r7, r0
 800bdec:	eba8 0800 	sub.w	r8, r8, r0
 800bdf0:	e7e9      	b.n	800bdc6 <__sflush_r+0xda>
 800bdf2:	bf00      	nop
 800bdf4:	dfbffffe 	.word	0xdfbffffe

0800bdf8 <_fflush_r>:
 800bdf8:	b538      	push	{r3, r4, r5, lr}
 800bdfa:	690b      	ldr	r3, [r1, #16]
 800bdfc:	4605      	mov	r5, r0
 800bdfe:	460c      	mov	r4, r1
 800be00:	b913      	cbnz	r3, 800be08 <_fflush_r+0x10>
 800be02:	2500      	movs	r5, #0
 800be04:	4628      	mov	r0, r5
 800be06:	bd38      	pop	{r3, r4, r5, pc}
 800be08:	b118      	cbz	r0, 800be12 <_fflush_r+0x1a>
 800be0a:	6a03      	ldr	r3, [r0, #32]
 800be0c:	b90b      	cbnz	r3, 800be12 <_fflush_r+0x1a>
 800be0e:	f7fd fd4f 	bl	80098b0 <__sinit>
 800be12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d0f3      	beq.n	800be02 <_fflush_r+0xa>
 800be1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be1c:	07d0      	lsls	r0, r2, #31
 800be1e:	d404      	bmi.n	800be2a <_fflush_r+0x32>
 800be20:	0599      	lsls	r1, r3, #22
 800be22:	d402      	bmi.n	800be2a <_fflush_r+0x32>
 800be24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be26:	f7fd fefe 	bl	8009c26 <__retarget_lock_acquire_recursive>
 800be2a:	4628      	mov	r0, r5
 800be2c:	4621      	mov	r1, r4
 800be2e:	f7ff ff5d 	bl	800bcec <__sflush_r>
 800be32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be34:	07da      	lsls	r2, r3, #31
 800be36:	4605      	mov	r5, r0
 800be38:	d4e4      	bmi.n	800be04 <_fflush_r+0xc>
 800be3a:	89a3      	ldrh	r3, [r4, #12]
 800be3c:	059b      	lsls	r3, r3, #22
 800be3e:	d4e1      	bmi.n	800be04 <_fflush_r+0xc>
 800be40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be42:	f7fd fef1 	bl	8009c28 <__retarget_lock_release_recursive>
 800be46:	e7dd      	b.n	800be04 <_fflush_r+0xc>

0800be48 <__assert_func>:
 800be48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be4a:	4614      	mov	r4, r2
 800be4c:	461a      	mov	r2, r3
 800be4e:	4b09      	ldr	r3, [pc, #36]	; (800be74 <__assert_func+0x2c>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4605      	mov	r5, r0
 800be54:	68d8      	ldr	r0, [r3, #12]
 800be56:	b14c      	cbz	r4, 800be6c <__assert_func+0x24>
 800be58:	4b07      	ldr	r3, [pc, #28]	; (800be78 <__assert_func+0x30>)
 800be5a:	9100      	str	r1, [sp, #0]
 800be5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be60:	4906      	ldr	r1, [pc, #24]	; (800be7c <__assert_func+0x34>)
 800be62:	462b      	mov	r3, r5
 800be64:	f000 f854 	bl	800bf10 <fiprintf>
 800be68:	f7fb fee4 	bl	8007c34 <abort>
 800be6c:	4b04      	ldr	r3, [pc, #16]	; (800be80 <__assert_func+0x38>)
 800be6e:	461c      	mov	r4, r3
 800be70:	e7f3      	b.n	800be5a <__assert_func+0x12>
 800be72:	bf00      	nop
 800be74:	200001ec 	.word	0x200001ec
 800be78:	0800cbbd 	.word	0x0800cbbd
 800be7c:	0800cbca 	.word	0x0800cbca
 800be80:	0800cbf8 	.word	0x0800cbf8

0800be84 <_calloc_r>:
 800be84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be86:	fba1 2402 	umull	r2, r4, r1, r2
 800be8a:	b94c      	cbnz	r4, 800bea0 <_calloc_r+0x1c>
 800be8c:	4611      	mov	r1, r2
 800be8e:	9201      	str	r2, [sp, #4]
 800be90:	f7fb ff08 	bl	8007ca4 <_malloc_r>
 800be94:	9a01      	ldr	r2, [sp, #4]
 800be96:	4605      	mov	r5, r0
 800be98:	b930      	cbnz	r0, 800bea8 <_calloc_r+0x24>
 800be9a:	4628      	mov	r0, r5
 800be9c:	b003      	add	sp, #12
 800be9e:	bd30      	pop	{r4, r5, pc}
 800bea0:	220c      	movs	r2, #12
 800bea2:	6002      	str	r2, [r0, #0]
 800bea4:	2500      	movs	r5, #0
 800bea6:	e7f8      	b.n	800be9a <_calloc_r+0x16>
 800bea8:	4621      	mov	r1, r4
 800beaa:	f7fd fdd8 	bl	8009a5e <memset>
 800beae:	e7f4      	b.n	800be9a <_calloc_r+0x16>

0800beb0 <_realloc_r>:
 800beb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beb4:	4680      	mov	r8, r0
 800beb6:	4614      	mov	r4, r2
 800beb8:	460e      	mov	r6, r1
 800beba:	b921      	cbnz	r1, 800bec6 <_realloc_r+0x16>
 800bebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bec0:	4611      	mov	r1, r2
 800bec2:	f7fb beef 	b.w	8007ca4 <_malloc_r>
 800bec6:	b92a      	cbnz	r2, 800bed4 <_realloc_r+0x24>
 800bec8:	f7fe fd48 	bl	800a95c <_free_r>
 800becc:	4625      	mov	r5, r4
 800bece:	4628      	mov	r0, r5
 800bed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bed4:	f000 f82e 	bl	800bf34 <_malloc_usable_size_r>
 800bed8:	4284      	cmp	r4, r0
 800beda:	4607      	mov	r7, r0
 800bedc:	d802      	bhi.n	800bee4 <_realloc_r+0x34>
 800bede:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bee2:	d812      	bhi.n	800bf0a <_realloc_r+0x5a>
 800bee4:	4621      	mov	r1, r4
 800bee6:	4640      	mov	r0, r8
 800bee8:	f7fb fedc 	bl	8007ca4 <_malloc_r>
 800beec:	4605      	mov	r5, r0
 800beee:	2800      	cmp	r0, #0
 800bef0:	d0ed      	beq.n	800bece <_realloc_r+0x1e>
 800bef2:	42bc      	cmp	r4, r7
 800bef4:	4622      	mov	r2, r4
 800bef6:	4631      	mov	r1, r6
 800bef8:	bf28      	it	cs
 800befa:	463a      	movcs	r2, r7
 800befc:	f7fd fe95 	bl	8009c2a <memcpy>
 800bf00:	4631      	mov	r1, r6
 800bf02:	4640      	mov	r0, r8
 800bf04:	f7fe fd2a 	bl	800a95c <_free_r>
 800bf08:	e7e1      	b.n	800bece <_realloc_r+0x1e>
 800bf0a:	4635      	mov	r5, r6
 800bf0c:	e7df      	b.n	800bece <_realloc_r+0x1e>
	...

0800bf10 <fiprintf>:
 800bf10:	b40e      	push	{r1, r2, r3}
 800bf12:	b503      	push	{r0, r1, lr}
 800bf14:	4601      	mov	r1, r0
 800bf16:	ab03      	add	r3, sp, #12
 800bf18:	4805      	ldr	r0, [pc, #20]	; (800bf30 <fiprintf+0x20>)
 800bf1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf1e:	6800      	ldr	r0, [r0, #0]
 800bf20:	9301      	str	r3, [sp, #4]
 800bf22:	f000 f839 	bl	800bf98 <_vfiprintf_r>
 800bf26:	b002      	add	sp, #8
 800bf28:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf2c:	b003      	add	sp, #12
 800bf2e:	4770      	bx	lr
 800bf30:	200001ec 	.word	0x200001ec

0800bf34 <_malloc_usable_size_r>:
 800bf34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf38:	1f18      	subs	r0, r3, #4
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	bfbc      	itt	lt
 800bf3e:	580b      	ldrlt	r3, [r1, r0]
 800bf40:	18c0      	addlt	r0, r0, r3
 800bf42:	4770      	bx	lr

0800bf44 <__sfputc_r>:
 800bf44:	6893      	ldr	r3, [r2, #8]
 800bf46:	3b01      	subs	r3, #1
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	b410      	push	{r4}
 800bf4c:	6093      	str	r3, [r2, #8]
 800bf4e:	da08      	bge.n	800bf62 <__sfputc_r+0x1e>
 800bf50:	6994      	ldr	r4, [r2, #24]
 800bf52:	42a3      	cmp	r3, r4
 800bf54:	db01      	blt.n	800bf5a <__sfputc_r+0x16>
 800bf56:	290a      	cmp	r1, #10
 800bf58:	d103      	bne.n	800bf62 <__sfputc_r+0x1e>
 800bf5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf5e:	f000 b935 	b.w	800c1cc <__swbuf_r>
 800bf62:	6813      	ldr	r3, [r2, #0]
 800bf64:	1c58      	adds	r0, r3, #1
 800bf66:	6010      	str	r0, [r2, #0]
 800bf68:	7019      	strb	r1, [r3, #0]
 800bf6a:	4608      	mov	r0, r1
 800bf6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf70:	4770      	bx	lr

0800bf72 <__sfputs_r>:
 800bf72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf74:	4606      	mov	r6, r0
 800bf76:	460f      	mov	r7, r1
 800bf78:	4614      	mov	r4, r2
 800bf7a:	18d5      	adds	r5, r2, r3
 800bf7c:	42ac      	cmp	r4, r5
 800bf7e:	d101      	bne.n	800bf84 <__sfputs_r+0x12>
 800bf80:	2000      	movs	r0, #0
 800bf82:	e007      	b.n	800bf94 <__sfputs_r+0x22>
 800bf84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf88:	463a      	mov	r2, r7
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	f7ff ffda 	bl	800bf44 <__sfputc_r>
 800bf90:	1c43      	adds	r3, r0, #1
 800bf92:	d1f3      	bne.n	800bf7c <__sfputs_r+0xa>
 800bf94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf98 <_vfiprintf_r>:
 800bf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf9c:	460d      	mov	r5, r1
 800bf9e:	b09d      	sub	sp, #116	; 0x74
 800bfa0:	4614      	mov	r4, r2
 800bfa2:	4698      	mov	r8, r3
 800bfa4:	4606      	mov	r6, r0
 800bfa6:	b118      	cbz	r0, 800bfb0 <_vfiprintf_r+0x18>
 800bfa8:	6a03      	ldr	r3, [r0, #32]
 800bfaa:	b90b      	cbnz	r3, 800bfb0 <_vfiprintf_r+0x18>
 800bfac:	f7fd fc80 	bl	80098b0 <__sinit>
 800bfb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfb2:	07d9      	lsls	r1, r3, #31
 800bfb4:	d405      	bmi.n	800bfc2 <_vfiprintf_r+0x2a>
 800bfb6:	89ab      	ldrh	r3, [r5, #12]
 800bfb8:	059a      	lsls	r2, r3, #22
 800bfba:	d402      	bmi.n	800bfc2 <_vfiprintf_r+0x2a>
 800bfbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfbe:	f7fd fe32 	bl	8009c26 <__retarget_lock_acquire_recursive>
 800bfc2:	89ab      	ldrh	r3, [r5, #12]
 800bfc4:	071b      	lsls	r3, r3, #28
 800bfc6:	d501      	bpl.n	800bfcc <_vfiprintf_r+0x34>
 800bfc8:	692b      	ldr	r3, [r5, #16]
 800bfca:	b99b      	cbnz	r3, 800bff4 <_vfiprintf_r+0x5c>
 800bfcc:	4629      	mov	r1, r5
 800bfce:	4630      	mov	r0, r6
 800bfd0:	f000 f93a 	bl	800c248 <__swsetup_r>
 800bfd4:	b170      	cbz	r0, 800bff4 <_vfiprintf_r+0x5c>
 800bfd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfd8:	07dc      	lsls	r4, r3, #31
 800bfda:	d504      	bpl.n	800bfe6 <_vfiprintf_r+0x4e>
 800bfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe0:	b01d      	add	sp, #116	; 0x74
 800bfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe6:	89ab      	ldrh	r3, [r5, #12]
 800bfe8:	0598      	lsls	r0, r3, #22
 800bfea:	d4f7      	bmi.n	800bfdc <_vfiprintf_r+0x44>
 800bfec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfee:	f7fd fe1b 	bl	8009c28 <__retarget_lock_release_recursive>
 800bff2:	e7f3      	b.n	800bfdc <_vfiprintf_r+0x44>
 800bff4:	2300      	movs	r3, #0
 800bff6:	9309      	str	r3, [sp, #36]	; 0x24
 800bff8:	2320      	movs	r3, #32
 800bffa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bffe:	f8cd 800c 	str.w	r8, [sp, #12]
 800c002:	2330      	movs	r3, #48	; 0x30
 800c004:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c1b8 <_vfiprintf_r+0x220>
 800c008:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c00c:	f04f 0901 	mov.w	r9, #1
 800c010:	4623      	mov	r3, r4
 800c012:	469a      	mov	sl, r3
 800c014:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c018:	b10a      	cbz	r2, 800c01e <_vfiprintf_r+0x86>
 800c01a:	2a25      	cmp	r2, #37	; 0x25
 800c01c:	d1f9      	bne.n	800c012 <_vfiprintf_r+0x7a>
 800c01e:	ebba 0b04 	subs.w	fp, sl, r4
 800c022:	d00b      	beq.n	800c03c <_vfiprintf_r+0xa4>
 800c024:	465b      	mov	r3, fp
 800c026:	4622      	mov	r2, r4
 800c028:	4629      	mov	r1, r5
 800c02a:	4630      	mov	r0, r6
 800c02c:	f7ff ffa1 	bl	800bf72 <__sfputs_r>
 800c030:	3001      	adds	r0, #1
 800c032:	f000 80a9 	beq.w	800c188 <_vfiprintf_r+0x1f0>
 800c036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c038:	445a      	add	r2, fp
 800c03a:	9209      	str	r2, [sp, #36]	; 0x24
 800c03c:	f89a 3000 	ldrb.w	r3, [sl]
 800c040:	2b00      	cmp	r3, #0
 800c042:	f000 80a1 	beq.w	800c188 <_vfiprintf_r+0x1f0>
 800c046:	2300      	movs	r3, #0
 800c048:	f04f 32ff 	mov.w	r2, #4294967295
 800c04c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c050:	f10a 0a01 	add.w	sl, sl, #1
 800c054:	9304      	str	r3, [sp, #16]
 800c056:	9307      	str	r3, [sp, #28]
 800c058:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c05c:	931a      	str	r3, [sp, #104]	; 0x68
 800c05e:	4654      	mov	r4, sl
 800c060:	2205      	movs	r2, #5
 800c062:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c066:	4854      	ldr	r0, [pc, #336]	; (800c1b8 <_vfiprintf_r+0x220>)
 800c068:	f7f4 f8d2 	bl	8000210 <memchr>
 800c06c:	9a04      	ldr	r2, [sp, #16]
 800c06e:	b9d8      	cbnz	r0, 800c0a8 <_vfiprintf_r+0x110>
 800c070:	06d1      	lsls	r1, r2, #27
 800c072:	bf44      	itt	mi
 800c074:	2320      	movmi	r3, #32
 800c076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c07a:	0713      	lsls	r3, r2, #28
 800c07c:	bf44      	itt	mi
 800c07e:	232b      	movmi	r3, #43	; 0x2b
 800c080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c084:	f89a 3000 	ldrb.w	r3, [sl]
 800c088:	2b2a      	cmp	r3, #42	; 0x2a
 800c08a:	d015      	beq.n	800c0b8 <_vfiprintf_r+0x120>
 800c08c:	9a07      	ldr	r2, [sp, #28]
 800c08e:	4654      	mov	r4, sl
 800c090:	2000      	movs	r0, #0
 800c092:	f04f 0c0a 	mov.w	ip, #10
 800c096:	4621      	mov	r1, r4
 800c098:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c09c:	3b30      	subs	r3, #48	; 0x30
 800c09e:	2b09      	cmp	r3, #9
 800c0a0:	d94d      	bls.n	800c13e <_vfiprintf_r+0x1a6>
 800c0a2:	b1b0      	cbz	r0, 800c0d2 <_vfiprintf_r+0x13a>
 800c0a4:	9207      	str	r2, [sp, #28]
 800c0a6:	e014      	b.n	800c0d2 <_vfiprintf_r+0x13a>
 800c0a8:	eba0 0308 	sub.w	r3, r0, r8
 800c0ac:	fa09 f303 	lsl.w	r3, r9, r3
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	9304      	str	r3, [sp, #16]
 800c0b4:	46a2      	mov	sl, r4
 800c0b6:	e7d2      	b.n	800c05e <_vfiprintf_r+0xc6>
 800c0b8:	9b03      	ldr	r3, [sp, #12]
 800c0ba:	1d19      	adds	r1, r3, #4
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	9103      	str	r1, [sp, #12]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	bfbb      	ittet	lt
 800c0c4:	425b      	neglt	r3, r3
 800c0c6:	f042 0202 	orrlt.w	r2, r2, #2
 800c0ca:	9307      	strge	r3, [sp, #28]
 800c0cc:	9307      	strlt	r3, [sp, #28]
 800c0ce:	bfb8      	it	lt
 800c0d0:	9204      	strlt	r2, [sp, #16]
 800c0d2:	7823      	ldrb	r3, [r4, #0]
 800c0d4:	2b2e      	cmp	r3, #46	; 0x2e
 800c0d6:	d10c      	bne.n	800c0f2 <_vfiprintf_r+0x15a>
 800c0d8:	7863      	ldrb	r3, [r4, #1]
 800c0da:	2b2a      	cmp	r3, #42	; 0x2a
 800c0dc:	d134      	bne.n	800c148 <_vfiprintf_r+0x1b0>
 800c0de:	9b03      	ldr	r3, [sp, #12]
 800c0e0:	1d1a      	adds	r2, r3, #4
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	9203      	str	r2, [sp, #12]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	bfb8      	it	lt
 800c0ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800c0ee:	3402      	adds	r4, #2
 800c0f0:	9305      	str	r3, [sp, #20]
 800c0f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c1c8 <_vfiprintf_r+0x230>
 800c0f6:	7821      	ldrb	r1, [r4, #0]
 800c0f8:	2203      	movs	r2, #3
 800c0fa:	4650      	mov	r0, sl
 800c0fc:	f7f4 f888 	bl	8000210 <memchr>
 800c100:	b138      	cbz	r0, 800c112 <_vfiprintf_r+0x17a>
 800c102:	9b04      	ldr	r3, [sp, #16]
 800c104:	eba0 000a 	sub.w	r0, r0, sl
 800c108:	2240      	movs	r2, #64	; 0x40
 800c10a:	4082      	lsls	r2, r0
 800c10c:	4313      	orrs	r3, r2
 800c10e:	3401      	adds	r4, #1
 800c110:	9304      	str	r3, [sp, #16]
 800c112:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c116:	4829      	ldr	r0, [pc, #164]	; (800c1bc <_vfiprintf_r+0x224>)
 800c118:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c11c:	2206      	movs	r2, #6
 800c11e:	f7f4 f877 	bl	8000210 <memchr>
 800c122:	2800      	cmp	r0, #0
 800c124:	d03f      	beq.n	800c1a6 <_vfiprintf_r+0x20e>
 800c126:	4b26      	ldr	r3, [pc, #152]	; (800c1c0 <_vfiprintf_r+0x228>)
 800c128:	bb1b      	cbnz	r3, 800c172 <_vfiprintf_r+0x1da>
 800c12a:	9b03      	ldr	r3, [sp, #12]
 800c12c:	3307      	adds	r3, #7
 800c12e:	f023 0307 	bic.w	r3, r3, #7
 800c132:	3308      	adds	r3, #8
 800c134:	9303      	str	r3, [sp, #12]
 800c136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c138:	443b      	add	r3, r7
 800c13a:	9309      	str	r3, [sp, #36]	; 0x24
 800c13c:	e768      	b.n	800c010 <_vfiprintf_r+0x78>
 800c13e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c142:	460c      	mov	r4, r1
 800c144:	2001      	movs	r0, #1
 800c146:	e7a6      	b.n	800c096 <_vfiprintf_r+0xfe>
 800c148:	2300      	movs	r3, #0
 800c14a:	3401      	adds	r4, #1
 800c14c:	9305      	str	r3, [sp, #20]
 800c14e:	4619      	mov	r1, r3
 800c150:	f04f 0c0a 	mov.w	ip, #10
 800c154:	4620      	mov	r0, r4
 800c156:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c15a:	3a30      	subs	r2, #48	; 0x30
 800c15c:	2a09      	cmp	r2, #9
 800c15e:	d903      	bls.n	800c168 <_vfiprintf_r+0x1d0>
 800c160:	2b00      	cmp	r3, #0
 800c162:	d0c6      	beq.n	800c0f2 <_vfiprintf_r+0x15a>
 800c164:	9105      	str	r1, [sp, #20]
 800c166:	e7c4      	b.n	800c0f2 <_vfiprintf_r+0x15a>
 800c168:	fb0c 2101 	mla	r1, ip, r1, r2
 800c16c:	4604      	mov	r4, r0
 800c16e:	2301      	movs	r3, #1
 800c170:	e7f0      	b.n	800c154 <_vfiprintf_r+0x1bc>
 800c172:	ab03      	add	r3, sp, #12
 800c174:	9300      	str	r3, [sp, #0]
 800c176:	462a      	mov	r2, r5
 800c178:	4b12      	ldr	r3, [pc, #72]	; (800c1c4 <_vfiprintf_r+0x22c>)
 800c17a:	a904      	add	r1, sp, #16
 800c17c:	4630      	mov	r0, r6
 800c17e:	f7fc ff45 	bl	800900c <_printf_float>
 800c182:	4607      	mov	r7, r0
 800c184:	1c78      	adds	r0, r7, #1
 800c186:	d1d6      	bne.n	800c136 <_vfiprintf_r+0x19e>
 800c188:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c18a:	07d9      	lsls	r1, r3, #31
 800c18c:	d405      	bmi.n	800c19a <_vfiprintf_r+0x202>
 800c18e:	89ab      	ldrh	r3, [r5, #12]
 800c190:	059a      	lsls	r2, r3, #22
 800c192:	d402      	bmi.n	800c19a <_vfiprintf_r+0x202>
 800c194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c196:	f7fd fd47 	bl	8009c28 <__retarget_lock_release_recursive>
 800c19a:	89ab      	ldrh	r3, [r5, #12]
 800c19c:	065b      	lsls	r3, r3, #25
 800c19e:	f53f af1d 	bmi.w	800bfdc <_vfiprintf_r+0x44>
 800c1a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1a4:	e71c      	b.n	800bfe0 <_vfiprintf_r+0x48>
 800c1a6:	ab03      	add	r3, sp, #12
 800c1a8:	9300      	str	r3, [sp, #0]
 800c1aa:	462a      	mov	r2, r5
 800c1ac:	4b05      	ldr	r3, [pc, #20]	; (800c1c4 <_vfiprintf_r+0x22c>)
 800c1ae:	a904      	add	r1, sp, #16
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	f7fd f9cf 	bl	8009554 <_printf_i>
 800c1b6:	e7e4      	b.n	800c182 <_vfiprintf_r+0x1ea>
 800c1b8:	0800cbac 	.word	0x0800cbac
 800c1bc:	0800cbb6 	.word	0x0800cbb6
 800c1c0:	0800900d 	.word	0x0800900d
 800c1c4:	0800bf73 	.word	0x0800bf73
 800c1c8:	0800cbb2 	.word	0x0800cbb2

0800c1cc <__swbuf_r>:
 800c1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ce:	460e      	mov	r6, r1
 800c1d0:	4614      	mov	r4, r2
 800c1d2:	4605      	mov	r5, r0
 800c1d4:	b118      	cbz	r0, 800c1de <__swbuf_r+0x12>
 800c1d6:	6a03      	ldr	r3, [r0, #32]
 800c1d8:	b90b      	cbnz	r3, 800c1de <__swbuf_r+0x12>
 800c1da:	f7fd fb69 	bl	80098b0 <__sinit>
 800c1de:	69a3      	ldr	r3, [r4, #24]
 800c1e0:	60a3      	str	r3, [r4, #8]
 800c1e2:	89a3      	ldrh	r3, [r4, #12]
 800c1e4:	071a      	lsls	r2, r3, #28
 800c1e6:	d525      	bpl.n	800c234 <__swbuf_r+0x68>
 800c1e8:	6923      	ldr	r3, [r4, #16]
 800c1ea:	b31b      	cbz	r3, 800c234 <__swbuf_r+0x68>
 800c1ec:	6823      	ldr	r3, [r4, #0]
 800c1ee:	6922      	ldr	r2, [r4, #16]
 800c1f0:	1a98      	subs	r0, r3, r2
 800c1f2:	6963      	ldr	r3, [r4, #20]
 800c1f4:	b2f6      	uxtb	r6, r6
 800c1f6:	4283      	cmp	r3, r0
 800c1f8:	4637      	mov	r7, r6
 800c1fa:	dc04      	bgt.n	800c206 <__swbuf_r+0x3a>
 800c1fc:	4621      	mov	r1, r4
 800c1fe:	4628      	mov	r0, r5
 800c200:	f7ff fdfa 	bl	800bdf8 <_fflush_r>
 800c204:	b9e0      	cbnz	r0, 800c240 <__swbuf_r+0x74>
 800c206:	68a3      	ldr	r3, [r4, #8]
 800c208:	3b01      	subs	r3, #1
 800c20a:	60a3      	str	r3, [r4, #8]
 800c20c:	6823      	ldr	r3, [r4, #0]
 800c20e:	1c5a      	adds	r2, r3, #1
 800c210:	6022      	str	r2, [r4, #0]
 800c212:	701e      	strb	r6, [r3, #0]
 800c214:	6962      	ldr	r2, [r4, #20]
 800c216:	1c43      	adds	r3, r0, #1
 800c218:	429a      	cmp	r2, r3
 800c21a:	d004      	beq.n	800c226 <__swbuf_r+0x5a>
 800c21c:	89a3      	ldrh	r3, [r4, #12]
 800c21e:	07db      	lsls	r3, r3, #31
 800c220:	d506      	bpl.n	800c230 <__swbuf_r+0x64>
 800c222:	2e0a      	cmp	r6, #10
 800c224:	d104      	bne.n	800c230 <__swbuf_r+0x64>
 800c226:	4621      	mov	r1, r4
 800c228:	4628      	mov	r0, r5
 800c22a:	f7ff fde5 	bl	800bdf8 <_fflush_r>
 800c22e:	b938      	cbnz	r0, 800c240 <__swbuf_r+0x74>
 800c230:	4638      	mov	r0, r7
 800c232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c234:	4621      	mov	r1, r4
 800c236:	4628      	mov	r0, r5
 800c238:	f000 f806 	bl	800c248 <__swsetup_r>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	d0d5      	beq.n	800c1ec <__swbuf_r+0x20>
 800c240:	f04f 37ff 	mov.w	r7, #4294967295
 800c244:	e7f4      	b.n	800c230 <__swbuf_r+0x64>
	...

0800c248 <__swsetup_r>:
 800c248:	b538      	push	{r3, r4, r5, lr}
 800c24a:	4b2a      	ldr	r3, [pc, #168]	; (800c2f4 <__swsetup_r+0xac>)
 800c24c:	4605      	mov	r5, r0
 800c24e:	6818      	ldr	r0, [r3, #0]
 800c250:	460c      	mov	r4, r1
 800c252:	b118      	cbz	r0, 800c25c <__swsetup_r+0x14>
 800c254:	6a03      	ldr	r3, [r0, #32]
 800c256:	b90b      	cbnz	r3, 800c25c <__swsetup_r+0x14>
 800c258:	f7fd fb2a 	bl	80098b0 <__sinit>
 800c25c:	89a3      	ldrh	r3, [r4, #12]
 800c25e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c262:	0718      	lsls	r0, r3, #28
 800c264:	d422      	bmi.n	800c2ac <__swsetup_r+0x64>
 800c266:	06d9      	lsls	r1, r3, #27
 800c268:	d407      	bmi.n	800c27a <__swsetup_r+0x32>
 800c26a:	2309      	movs	r3, #9
 800c26c:	602b      	str	r3, [r5, #0]
 800c26e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c272:	81a3      	strh	r3, [r4, #12]
 800c274:	f04f 30ff 	mov.w	r0, #4294967295
 800c278:	e034      	b.n	800c2e4 <__swsetup_r+0x9c>
 800c27a:	0758      	lsls	r0, r3, #29
 800c27c:	d512      	bpl.n	800c2a4 <__swsetup_r+0x5c>
 800c27e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c280:	b141      	cbz	r1, 800c294 <__swsetup_r+0x4c>
 800c282:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c286:	4299      	cmp	r1, r3
 800c288:	d002      	beq.n	800c290 <__swsetup_r+0x48>
 800c28a:	4628      	mov	r0, r5
 800c28c:	f7fe fb66 	bl	800a95c <_free_r>
 800c290:	2300      	movs	r3, #0
 800c292:	6363      	str	r3, [r4, #52]	; 0x34
 800c294:	89a3      	ldrh	r3, [r4, #12]
 800c296:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c29a:	81a3      	strh	r3, [r4, #12]
 800c29c:	2300      	movs	r3, #0
 800c29e:	6063      	str	r3, [r4, #4]
 800c2a0:	6923      	ldr	r3, [r4, #16]
 800c2a2:	6023      	str	r3, [r4, #0]
 800c2a4:	89a3      	ldrh	r3, [r4, #12]
 800c2a6:	f043 0308 	orr.w	r3, r3, #8
 800c2aa:	81a3      	strh	r3, [r4, #12]
 800c2ac:	6923      	ldr	r3, [r4, #16]
 800c2ae:	b94b      	cbnz	r3, 800c2c4 <__swsetup_r+0x7c>
 800c2b0:	89a3      	ldrh	r3, [r4, #12]
 800c2b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c2b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2ba:	d003      	beq.n	800c2c4 <__swsetup_r+0x7c>
 800c2bc:	4621      	mov	r1, r4
 800c2be:	4628      	mov	r0, r5
 800c2c0:	f000 f840 	bl	800c344 <__smakebuf_r>
 800c2c4:	89a0      	ldrh	r0, [r4, #12]
 800c2c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2ca:	f010 0301 	ands.w	r3, r0, #1
 800c2ce:	d00a      	beq.n	800c2e6 <__swsetup_r+0x9e>
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	60a3      	str	r3, [r4, #8]
 800c2d4:	6963      	ldr	r3, [r4, #20]
 800c2d6:	425b      	negs	r3, r3
 800c2d8:	61a3      	str	r3, [r4, #24]
 800c2da:	6923      	ldr	r3, [r4, #16]
 800c2dc:	b943      	cbnz	r3, 800c2f0 <__swsetup_r+0xa8>
 800c2de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c2e2:	d1c4      	bne.n	800c26e <__swsetup_r+0x26>
 800c2e4:	bd38      	pop	{r3, r4, r5, pc}
 800c2e6:	0781      	lsls	r1, r0, #30
 800c2e8:	bf58      	it	pl
 800c2ea:	6963      	ldrpl	r3, [r4, #20]
 800c2ec:	60a3      	str	r3, [r4, #8]
 800c2ee:	e7f4      	b.n	800c2da <__swsetup_r+0x92>
 800c2f0:	2000      	movs	r0, #0
 800c2f2:	e7f7      	b.n	800c2e4 <__swsetup_r+0x9c>
 800c2f4:	200001ec 	.word	0x200001ec

0800c2f8 <__swhatbuf_r>:
 800c2f8:	b570      	push	{r4, r5, r6, lr}
 800c2fa:	460c      	mov	r4, r1
 800c2fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c300:	2900      	cmp	r1, #0
 800c302:	b096      	sub	sp, #88	; 0x58
 800c304:	4615      	mov	r5, r2
 800c306:	461e      	mov	r6, r3
 800c308:	da0d      	bge.n	800c326 <__swhatbuf_r+0x2e>
 800c30a:	89a3      	ldrh	r3, [r4, #12]
 800c30c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c310:	f04f 0100 	mov.w	r1, #0
 800c314:	bf0c      	ite	eq
 800c316:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c31a:	2340      	movne	r3, #64	; 0x40
 800c31c:	2000      	movs	r0, #0
 800c31e:	6031      	str	r1, [r6, #0]
 800c320:	602b      	str	r3, [r5, #0]
 800c322:	b016      	add	sp, #88	; 0x58
 800c324:	bd70      	pop	{r4, r5, r6, pc}
 800c326:	466a      	mov	r2, sp
 800c328:	f000 f848 	bl	800c3bc <_fstat_r>
 800c32c:	2800      	cmp	r0, #0
 800c32e:	dbec      	blt.n	800c30a <__swhatbuf_r+0x12>
 800c330:	9901      	ldr	r1, [sp, #4]
 800c332:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c336:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c33a:	4259      	negs	r1, r3
 800c33c:	4159      	adcs	r1, r3
 800c33e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c342:	e7eb      	b.n	800c31c <__swhatbuf_r+0x24>

0800c344 <__smakebuf_r>:
 800c344:	898b      	ldrh	r3, [r1, #12]
 800c346:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c348:	079d      	lsls	r5, r3, #30
 800c34a:	4606      	mov	r6, r0
 800c34c:	460c      	mov	r4, r1
 800c34e:	d507      	bpl.n	800c360 <__smakebuf_r+0x1c>
 800c350:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c354:	6023      	str	r3, [r4, #0]
 800c356:	6123      	str	r3, [r4, #16]
 800c358:	2301      	movs	r3, #1
 800c35a:	6163      	str	r3, [r4, #20]
 800c35c:	b002      	add	sp, #8
 800c35e:	bd70      	pop	{r4, r5, r6, pc}
 800c360:	ab01      	add	r3, sp, #4
 800c362:	466a      	mov	r2, sp
 800c364:	f7ff ffc8 	bl	800c2f8 <__swhatbuf_r>
 800c368:	9900      	ldr	r1, [sp, #0]
 800c36a:	4605      	mov	r5, r0
 800c36c:	4630      	mov	r0, r6
 800c36e:	f7fb fc99 	bl	8007ca4 <_malloc_r>
 800c372:	b948      	cbnz	r0, 800c388 <__smakebuf_r+0x44>
 800c374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c378:	059a      	lsls	r2, r3, #22
 800c37a:	d4ef      	bmi.n	800c35c <__smakebuf_r+0x18>
 800c37c:	f023 0303 	bic.w	r3, r3, #3
 800c380:	f043 0302 	orr.w	r3, r3, #2
 800c384:	81a3      	strh	r3, [r4, #12]
 800c386:	e7e3      	b.n	800c350 <__smakebuf_r+0xc>
 800c388:	89a3      	ldrh	r3, [r4, #12]
 800c38a:	6020      	str	r0, [r4, #0]
 800c38c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c390:	81a3      	strh	r3, [r4, #12]
 800c392:	9b00      	ldr	r3, [sp, #0]
 800c394:	6163      	str	r3, [r4, #20]
 800c396:	9b01      	ldr	r3, [sp, #4]
 800c398:	6120      	str	r0, [r4, #16]
 800c39a:	b15b      	cbz	r3, 800c3b4 <__smakebuf_r+0x70>
 800c39c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	f000 f81d 	bl	800c3e0 <_isatty_r>
 800c3a6:	b128      	cbz	r0, 800c3b4 <__smakebuf_r+0x70>
 800c3a8:	89a3      	ldrh	r3, [r4, #12]
 800c3aa:	f023 0303 	bic.w	r3, r3, #3
 800c3ae:	f043 0301 	orr.w	r3, r3, #1
 800c3b2:	81a3      	strh	r3, [r4, #12]
 800c3b4:	89a3      	ldrh	r3, [r4, #12]
 800c3b6:	431d      	orrs	r5, r3
 800c3b8:	81a5      	strh	r5, [r4, #12]
 800c3ba:	e7cf      	b.n	800c35c <__smakebuf_r+0x18>

0800c3bc <_fstat_r>:
 800c3bc:	b538      	push	{r3, r4, r5, lr}
 800c3be:	4d07      	ldr	r5, [pc, #28]	; (800c3dc <_fstat_r+0x20>)
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	4604      	mov	r4, r0
 800c3c4:	4608      	mov	r0, r1
 800c3c6:	4611      	mov	r1, r2
 800c3c8:	602b      	str	r3, [r5, #0]
 800c3ca:	f7f7 fc02 	bl	8003bd2 <_fstat>
 800c3ce:	1c43      	adds	r3, r0, #1
 800c3d0:	d102      	bne.n	800c3d8 <_fstat_r+0x1c>
 800c3d2:	682b      	ldr	r3, [r5, #0]
 800c3d4:	b103      	cbz	r3, 800c3d8 <_fstat_r+0x1c>
 800c3d6:	6023      	str	r3, [r4, #0]
 800c3d8:	bd38      	pop	{r3, r4, r5, pc}
 800c3da:	bf00      	nop
 800c3dc:	20002cac 	.word	0x20002cac

0800c3e0 <_isatty_r>:
 800c3e0:	b538      	push	{r3, r4, r5, lr}
 800c3e2:	4d06      	ldr	r5, [pc, #24]	; (800c3fc <_isatty_r+0x1c>)
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	4604      	mov	r4, r0
 800c3e8:	4608      	mov	r0, r1
 800c3ea:	602b      	str	r3, [r5, #0]
 800c3ec:	f7f7 fc01 	bl	8003bf2 <_isatty>
 800c3f0:	1c43      	adds	r3, r0, #1
 800c3f2:	d102      	bne.n	800c3fa <_isatty_r+0x1a>
 800c3f4:	682b      	ldr	r3, [r5, #0]
 800c3f6:	b103      	cbz	r3, 800c3fa <_isatty_r+0x1a>
 800c3f8:	6023      	str	r3, [r4, #0]
 800c3fa:	bd38      	pop	{r3, r4, r5, pc}
 800c3fc:	20002cac 	.word	0x20002cac

0800c400 <_init>:
 800c400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c402:	bf00      	nop
 800c404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c406:	bc08      	pop	{r3}
 800c408:	469e      	mov	lr, r3
 800c40a:	4770      	bx	lr

0800c40c <_fini>:
 800c40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c40e:	bf00      	nop
 800c410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c412:	bc08      	pop	{r3}
 800c414:	469e      	mov	lr, r3
 800c416:	4770      	bx	lr
