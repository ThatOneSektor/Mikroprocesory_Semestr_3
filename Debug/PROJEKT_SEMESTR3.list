
PROJEKT_SEMESTR3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c168  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007cc  0800c338  0800c338  0001c338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb04  0800cb04  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb04  0800cb04  0001cb04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb0c  0800cb0c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800cb0c  0800cb0c  0001cb0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800cb14  0800cb14  0001cb14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800cb1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ac4  200001f0  0800cd0c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002cb4  0800cd0c  00022cb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012bd8  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029ef  00000000  00000000  00032e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc8  00000000  00000000  00035830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000909  00000000  00000000  000363f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026853  00000000  00000000  00036d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef88  00000000  00000000  0005d554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1cf0  00000000  00000000  0006c4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ab0  00000000  00000000  0014e1cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00153c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c320 	.word	0x0800c320

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0800c320 	.word	0x0800c320

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff f939 	bl	80002b0 <strlen>
 800103e:	4603      	mov	r3, r0
      }
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>:

#if _GLIBCXX_USE_C99_STDLIB
  // 21.4 Numeric Conversions [string.conversions].
  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af02      	add	r7, sp, #8
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f006 fc51 	bl	80078fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800105a:	4602      	mov	r2, r0
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	4904      	ldr	r1, [pc, #16]	; (8001074 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x2c>)
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji+0x30>)
 8001066:	f001 fefc 	bl	8002e62 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 800106a:	4603      	mov	r3, r0
					__idx, __base); }
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	0800c338 	.word	0x0800c338
 8001078:	08008ac9 	.word	0x08008ac9

0800107c <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>:
			     __idx, __base); }

  // NB: strtof vs strtod.
  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f006 fc38 	bl	80078fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800108c:	4602      	mov	r2, r0
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	4905      	ldr	r1, [pc, #20]	; (80010a8 <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj+0x2c>)
 8001092:	4806      	ldr	r0, [pc, #24]	; (80010ac <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj+0x30>)
 8001094:	f001 ff65 	bl	8002f62 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
 8001098:	eef0 7a40 	vmov.f32	s15, s0
 800109c:	eeb0 0a67 	vmov.f32	s0, s15
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	0800c340 	.word	0x0800c340
 80010ac:	080088f9 	.word	0x080088f9

080010b0 <_ZNSt7__cxx119to_stringEi>:

  // DR 1261. Insufficent overloads for to_string / to_wstring

  inline string
  to_string(int __val)
  {
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b087      	sub	sp, #28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	0fdb      	lsrs	r3, r3, #31
 80010be:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <_ZNSt7__cxx119to_stringEi+0x1c>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	425b      	negs	r3, r3
 80010ca:	e000      	b.n	80010ce <_ZNSt7__cxx119to_stringEi+0x1e>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 80010d0:	210a      	movs	r1, #10
 80010d2:	6938      	ldr	r0, [r7, #16]
 80010d4:	f001 ff8e 	bl	8002ff4 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 80010d8:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 80010da:	7dfa      	ldrb	r2, [r7, #23]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	18d4      	adds	r4, r2, r3
 80010e0:	f107 0308 	add.w	r3, r7, #8
 80010e4:	4618      	mov	r0, r3
 80010e6:	f006 f803 	bl	80070f0 <_ZNSaIcEC1Ev>
 80010ea:	f107 0308 	add.w	r3, r7, #8
 80010ee:	222d      	movs	r2, #45	; 0x2d
 80010f0:	4621      	mov	r1, r4
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f006 f9ca 	bl	800748c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	4618      	mov	r0, r3
 80010fe:	f005 fff9 	bl	80070f4 <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 8001102:	7dfb      	ldrb	r3, [r7, #23]
 8001104:	4619      	mov	r1, r3
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f006 fa53 	bl	80075b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800110c:	4603      	mov	r3, r0
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	68f9      	ldr	r1, [r7, #12]
 8001112:	4618      	mov	r0, r3
 8001114:	f001 ffae 	bl	8003074 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 8001118:	bf00      	nop
  }
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	371c      	adds	r7, #28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd90      	pop	{r4, r7, pc}

08001122 <_Z10replaceAllRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS4_S7_>:
  }
  uint32_t capacity(void) {
      return maxSize;
    }
};
void replaceAll(std::string& str, const std::string& from, const std::string& to) {
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
    size_t start_pos = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
    while ((start_pos = str.find(from, start_pos)) != std::string::npos) {
 8001132:	e00f      	b.n	8001154 <_Z10replaceAllRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS4_S7_+0x32>
        str.replace(start_pos, from.length(), to);
 8001134:	68b8      	ldr	r0, [r7, #8]
 8001136:	f006 fa0b 	bl	8007550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800113a:	4602      	mov	r2, r0
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6979      	ldr	r1, [r7, #20]
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f006 fb85 	bl	8007850 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjRKS4_>
        start_pos += to.length();
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f006 fa02 	bl	8007550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800114c:	4602      	mov	r2, r0
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	4413      	add	r3, r2
 8001152:	617b      	str	r3, [r7, #20]
    while ((start_pos = str.find(from, start_pos)) != std::string::npos) {
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	68b9      	ldr	r1, [r7, #8]
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f006 fc03 	bl	8007964 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 800115e:	6178      	str	r0, [r7, #20]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001166:	bf14      	ite	ne
 8001168:	2301      	movne	r3, #1
 800116a:	2300      	moveq	r3, #0
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1e0      	bne.n	8001134 <_Z10replaceAllRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS4_S7_+0x12>
    }
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <_ZN14CircularBufferILj4096EEC1Ev>:
class CircularBuffer {
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800118a:	461a      	mov	r2, r3
 800118c:	2300      	movs	r3, #0
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001196:	461a      	mov	r2, r3
 8001198:	2300      	movs	r3, #0
 800119a:	6053      	str	r3, [r2, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011a2:	2200      	movs	r2, #0
 80011a4:	721a      	strb	r2, [r3, #8]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
uint8_t itemRx;
CircularBuffer<4096> rx;
uint8_t itemTx;
CircularBuffer<4096> tx;
void USART_send(std::string a) {
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b087      	sub	sp, #28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  //tx.push(a);
	if(tx.size()+a.length()>tx.capacity())return;
 80011bc:	4831      	ldr	r0, [pc, #196]	; (8001284 <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>)
 80011be:	f001 ffaf 	bl	8003120 <_ZN14CircularBufferILj4096EE4sizeEv>
 80011c2:	4604      	mov	r4, r0
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f006 f9c3 	bl	8007550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80011ca:	4603      	mov	r3, r0
 80011cc:	441c      	add	r4, r3
 80011ce:	482d      	ldr	r0, [pc, #180]	; (8001284 <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>)
 80011d0:	f001 ffcf 	bl	8003172 <_ZN14CircularBufferILj4096EE8capacityEv>
 80011d4:	4603      	mov	r3, r0
 80011d6:	429c      	cmp	r4, r3
 80011d8:	bf8c      	ite	hi
 80011da:	2301      	movhi	r3, #1
 80011dc:	2300      	movls	r3, #0
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d14a      	bne.n	800127a <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc6>
  for(uint8_t charr:a)tx.push(charr);//dodaj do bufora znaki ze stringa
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	6978      	ldr	r0, [r7, #20]
 80011ea:	f006 f9a3 	bl	8007534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 80011ee:	4603      	mov	r3, r0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	6978      	ldr	r0, [r7, #20]
 80011f4:	f006 f9a2 	bl	800753c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 80011f8:	4603      	mov	r3, r0
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	e011      	b.n	8001222 <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6e>
 80011fe:	f107 030c 	add.w	r3, r7, #12
 8001202:	4618      	mov	r0, r3
 8001204:	f001 ffe9 	bl	80031da <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8001208:	4603      	mov	r3, r0
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	74fb      	strb	r3, [r7, #19]
 800120e:	7cfb      	ldrb	r3, [r7, #19]
 8001210:	4619      	mov	r1, r3
 8001212:	481c      	ldr	r0, [pc, #112]	; (8001284 <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>)
 8001214:	f001 ffed 	bl	80031f2 <_ZN14CircularBufferILj4096EE4pushEh>
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	4618      	mov	r0, r3
 800121e:	f001 ffcc 	bl	80031ba <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 8001222:	f107 0208 	add.w	r2, r7, #8
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f001 ffac 	bl	800318a <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1e2      	bne.n	80011fe <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
}
 800123a:	bf00      	nop
  __disable_irq();//zatrzymaj przerwania w celu nieprzerwanej transmisji
  if ((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) != RESET)) {//sprawdzanie czy linia jest obecnie wykorzystywana
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001246:	2b80      	cmp	r3, #128	; 0x80
 8001248:	bf0c      	ite	eq
 800124a:	2301      	moveq	r3, #1
 800124c:	2300      	movne	r3, #0
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	bf14      	ite	ne
 8001254:	2301      	movne	r3, #1
 8001256:	2300      	moveq	r3, #0
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00b      	beq.n	8001276 <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc2>
    itemTx= tx.pop();//zczytaj znak na końcu
 800125e:	4809      	ldr	r0, [pc, #36]	; (8001284 <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>)
 8001260:	f001 fffa 	bl	8003258 <_ZN14CircularBufferILj4096EE3popEv>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd8>)
 800126a:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_IT(&huart2, &itemTx, 1);//prześlij pierwszy znak z
 800126c:	2201      	movs	r2, #1
 800126e:	4907      	ldr	r1, [pc, #28]	; (800128c <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd8>)
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>)
 8001272:	f004 ffd8 	bl	8006226 <HAL_UART_Transmit_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8001276:	b662      	cpsie	i
}
 8001278:	e000      	b.n	800127c <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>
	if(tx.size()+a.length()>tx.capacity())return;
 800127a:	bf00      	nop
  }
  __enable_irq();//wznów przerwania
}
 800127c:	371c      	adds	r7, #28
 800127e:	46bd      	mov	sp, r7
 8001280:	bd90      	pop	{r4, r7, pc}
 8001282:	bf00      	nop
 8001284:	2000130c 	.word	0x2000130c
 8001288:	200002b4 	.word	0x200002b4
 800128c:	20001308 	.word	0x20001308

08001290 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	if (!(huart == &huart2)) return;//jeżeli odpowiedni interfejs
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <HAL_UART_TxCpltCallback+0x44>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d112      	bne.n	80012c6 <HAL_UART_TxCpltCallback+0x36>
	if (tx.empty()) return;//jeżeli nie koniec buforu
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <HAL_UART_TxCpltCallback+0x48>)
 80012a2:	f002 f805 	bl	80032b0 <_ZN14CircularBufferILj4096EE5emptyEv>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d10e      	bne.n	80012ca <HAL_UART_TxCpltCallback+0x3a>
	itemTx = tx.pop();//zczytaj znak na końcu
 80012ac:	480a      	ldr	r0, [pc, #40]	; (80012d8 <HAL_UART_TxCpltCallback+0x48>)
 80012ae:	f001 ffd3 	bl	8003258 <_ZN14CircularBufferILj4096EE3popEv>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_UART_TxCpltCallback+0x4c>)
 80012b8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart2, &itemTx, 1);//prześlij
 80012ba:	2201      	movs	r2, #1
 80012bc:	4907      	ldr	r1, [pc, #28]	; (80012dc <HAL_UART_TxCpltCallback+0x4c>)
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <HAL_UART_TxCpltCallback+0x44>)
 80012c0:	f004 ffb1 	bl	8006226 <HAL_UART_Transmit_IT>
 80012c4:	e002      	b.n	80012cc <HAL_UART_TxCpltCallback+0x3c>
	if (!(huart == &huart2)) return;//jeżeli odpowiedni interfejs
 80012c6:	bf00      	nop
 80012c8:	e000      	b.n	80012cc <HAL_UART_TxCpltCallback+0x3c>
	if (tx.empty()) return;//jeżeli nie koniec buforu
 80012ca:	bf00      	nop

}
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200002b4 	.word	0x200002b4
 80012d8:	2000130c 	.word	0x2000130c
 80012dc:	20001308 	.word	0x20001308

080012e0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	if (!(huart == &huart2)) return;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a09      	ldr	r2, [pc, #36]	; (8001310 <HAL_UART_RxCpltCallback+0x30>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d10b      	bne.n	8001308 <HAL_UART_RxCpltCallback+0x28>
	rx.push(itemRx);
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_UART_RxCpltCallback+0x34>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	4808      	ldr	r0, [pc, #32]	; (8001318 <HAL_UART_RxCpltCallback+0x38>)
 80012f8:	f001 ff7b 	bl	80031f2 <_ZN14CircularBufferILj4096EE4pushEh>
	//if(itemRx=='|')endcharcounter++;
	HAL_UART_Receive_IT(&huart2, &itemRx, 1);
 80012fc:	2201      	movs	r2, #1
 80012fe:	4905      	ldr	r1, [pc, #20]	; (8001314 <HAL_UART_RxCpltCallback+0x34>)
 8001300:	4803      	ldr	r0, [pc, #12]	; (8001310 <HAL_UART_RxCpltCallback+0x30>)
 8001302:	f004 ffd5 	bl	80062b0 <HAL_UART_Receive_IT>
 8001306:	e000      	b.n	800130a <HAL_UART_RxCpltCallback+0x2a>
	if (!(huart == &huart2)) return;
 8001308:	bf00      	nop
}
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200002b4 	.word	0x200002b4
 8001314:	200002f8 	.word	0x200002f8
 8001318:	200002fc 	.word	0x200002fc

0800131c <_Z22trimStartEndCharactersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcc>:
//----------------------------//
//POWYŻEJ UART, PONIŻEJ RAMKA
//----------------------------//
void trimStartEndCharacters(std::string& str, char startChar, char endChar) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	70fb      	strb	r3, [r7, #3]
 8001328:	4613      	mov	r3, r2
 800132a:	70bb      	strb	r3, [r7, #2]

    // przycinanie do pierwszej instancji znaku
    size_t startPos = str.find_first_not_of(startChar);
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	2200      	movs	r2, #0
 8001330:	4619      	mov	r1, r3
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f006 fb31 	bl	800799a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17find_first_not_ofEcj>
 8001338:	60f8      	str	r0, [r7, #12]
    if (startPos != std::string::npos) {
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001340:	d006      	beq.n	8001350 <_Z22trimStartEndCharactersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcc+0x34>
        str.erase(0, startPos-1);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	3b01      	subs	r3, #1
 8001346:	461a      	mov	r2, r3
 8001348:	2100      	movs	r1, #0
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f006 f954 	bl	80075f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj>
    }

    // ucinanie do jakiegoś znaku
    size_t endPos = str.find_last_not_of(endChar);
 8001350:	78bb      	ldrb	r3, [r7, #2]
 8001352:	f04f 32ff 	mov.w	r2, #4294967295
 8001356:	4619      	mov	r1, r3
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f006 fb2c 	bl	80079b6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16find_last_not_ofEcj>
 800135e:	60b8      	str	r0, [r7, #8]
    if (endPos != std::string::npos) {
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001366:	d007      	beq.n	8001378 <_Z22trimStartEndCharactersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcc+0x5c>
        str.erase(endPos + 2);
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	3302      	adds	r3, #2
 800136c:	f04f 32ff 	mov.w	r2, #4294967295
 8001370:	4619      	mov	r1, r3
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f006 f940 	bl	80075f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj>
    }
}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_Z14calculateCRC16RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
	    USART_send("Calculated checksum of "+checkingstr+" we found out to be "+std::to_string(checksum%1000) +"\r\n");
	   //zwracanie modula
	 return checksum % 1000;

}*/
uint16_t calculateCRC16(const std::string& data) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
    const uint16_t polynomial = 0x8005; //  wielomian
 8001388:	f248 0305 	movw	r3, #32773	; 0x8005
 800138c:	83fb      	strh	r3, [r7, #30]
    uint16_t crc = 0xFFFF; // wstepna wartość dla crc
 800138e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001392:	84fb      	strh	r3, [r7, #38]	; 0x26

    for (char c : data) {//dla każdego znaku w stringu
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	69b8      	ldr	r0, [r7, #24]
 800139a:	f006 f8cd 	bl	8007538 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 800139e:	4603      	mov	r3, r0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	69b8      	ldr	r0, [r7, #24]
 80013a4:	f006 f8ce 	bl	8007544 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 80013a8:	4603      	mov	r3, r0
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	e02c      	b.n	8001408 <_Z14calculateCRC16RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x88>
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	4618      	mov	r0, r3
 80013b4:	f001 ffbb 	bl	800332e <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 80013b8:	4603      	mov	r3, r0
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	75fb      	strb	r3, [r7, #23]
        crc ^= static_cast<uint16_t>(c) << 8;//XOR obecnego CRC z przesuniętym w lewo o 8 bit obecnym znakiem
 80013be:	7dfb      	ldrb	r3, [r7, #23]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80013c8:	4053      	eors	r3, r2
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	84fb      	strh	r3, [r7, #38]	; 0x26

        for (int i = 0; i < 8; ++i) {//dla nowego bitu w nowym bajcie po kolei:
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
 80013d2:	e011      	b.n	80013f8 <_Z14calculateCRC16RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x78>
            if (crc & 0x8000) {//jeżeli najważniejszy bit po lewej stronie
 80013d4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da07      	bge.n	80013ec <_Z14calculateCRC16RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6c>
                crc = (crc << 1) ^ polynomial;//leftshift o 1 i xor z wielomianem
 80013dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	b21a      	sxth	r2, r3
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <_Z14calculateCRC16RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa8>)
 80013e4:	4053      	eors	r3, r2
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80013ea:	e002      	b.n	80013f2 <_Z14calculateCRC16RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x72>
            } else {//jeżeli najważniejszy bit to 0
                crc <<= 1;//bitshift w lewo o 1
 80013ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	84fb      	strh	r3, [r7, #38]	; 0x26
        for (int i = 0; i < 8; ++i) {//dla nowego bitu w nowym bajcie po kolei:
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	3301      	adds	r3, #1
 80013f6:	623b      	str	r3, [r7, #32]
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	2b07      	cmp	r3, #7
 80013fc:	ddea      	ble.n	80013d4 <_Z14calculateCRC16RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>
    for (char c : data) {//dla każdego znaku w stringu
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4618      	mov	r0, r3
 8001404:	f001 ff83 	bl	800330e <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 8001408:	f107 020c 	add.w	r2, r7, #12
 800140c:	f107 0310 	add.w	r3, r7, #16
 8001410:	4611      	mov	r1, r2
 8001412:	4618      	mov	r0, r3
 8001414:	f001 ff63 	bl	80032de <_ZN9__gnu_cxxneIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1c7      	bne.n	80013ae <_Z14calculateCRC16RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2e>
            }
        }
    }
    //USART_send("DEBUG:Calculated checksum: "+std::to_string(crc)+"\r\n");

    return crc;
 800141e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8001420:	4618      	mov	r0, r3
 8001422:	3728      	adds	r7, #40	; 0x28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	ffff8005 	.word	0xffff8005

0800142c <_ZNKSt17integral_constantIbLb1EEcvbEv>:
    struct integral_constant
    {
      static constexpr _Tp                  value = __v;
      typedef _Tp                           value_type;
      typedef integral_constant<_Tp, __v>   type;
      constexpr operator value_type() const noexcept { return value; }
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	2301      	movs	r3, #1
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
std::string reconstructdata(std::string data){
 8001442:	b590      	push	{r4, r7, lr}
 8001444:	b085      	sub	sp, #20
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
	std::string unescapedData;
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f006 f80f 	bl	8007470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	//przejście przez dane przekazane
	  for (size_t i = 0; i < data.length(); ++i) {
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	e046      	b.n	80014e6 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa4>
	        // sprawdzanie czy jest znak escape
	        if (data[i] == '\\' && i + 1 < data.length()) {
 8001458:	68f9      	ldr	r1, [r7, #12]
 800145a:	6838      	ldr	r0, [r7, #0]
 800145c:	f006 f8a9 	bl	80075b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001460:	4603      	mov	r3, r0
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b5c      	cmp	r3, #92	; 0x5c
 8001466:	d109      	bne.n	800147c <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1c5c      	adds	r4, r3, #1
 800146c:	6838      	ldr	r0, [r7, #0]
 800146e:	f006 f86f 	bl	8007550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001472:	4603      	mov	r3, r0
 8001474:	429c      	cmp	r4, r3
 8001476:	d201      	bcs.n	800147c <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3a>
 8001478:	2301      	movs	r3, #1
 800147a:	e000      	b.n	800147e <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
 800147c:	2300      	movs	r3, #0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d024      	beq.n	80014cc <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8a>
	            // zamiana w wyniku escape
	            switch (data[i + 1]) {
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	3301      	adds	r3, #1
 8001486:	4619      	mov	r1, r3
 8001488:	6838      	ldr	r0, [r7, #0]
 800148a:	f006 f892 	bl	80075b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800148e:	4603      	mov	r3, r0
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b40      	cmp	r3, #64	; 0x40
 8001494:	d010      	beq.n	80014b8 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x76>
 8001496:	2b40      	cmp	r3, #64	; 0x40
 8001498:	dc13      	bgt.n	80014c2 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>
 800149a:	2b3a      	cmp	r3, #58	; 0x3a
 800149c:	d002      	beq.n	80014a4 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x62>
 800149e:	2b3b      	cmp	r3, #59	; 0x3b
 80014a0:	d005      	beq.n	80014ae <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6c>
	                case '@':
	                    unescapedData.push_back('\\');
	                    break;
	                default:
	                    // Handle other cases as needed
	                    break;
 80014a2:	e00e      	b.n	80014c2 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x80>
	                    unescapedData.push_back('^');
 80014a4:	215e      	movs	r1, #94	; 0x5e
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f006 f886 	bl	80075b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
	                    break;
 80014ac:	e00a      	b.n	80014c4 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	                    unescapedData.push_back('|');
 80014ae:	217c      	movs	r1, #124	; 0x7c
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f006 f881 	bl	80075b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
	                    break;
 80014b6:	e005      	b.n	80014c4 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	                    unescapedData.push_back('\\');
 80014b8:	215c      	movs	r1, #92	; 0x5c
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f006 f87c 	bl	80075b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
	                    break;
 80014c0:	e000      	b.n	80014c4 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x82>
	                    break;
 80014c2:	bf00      	nop
	            }
	            // Skip the next character as it was part of the escape sequence
	            ++i;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3301      	adds	r3, #1
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	e009      	b.n	80014e0 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9e>
	        } else {
	            // Regular character, add to the unescaped data
	            unescapedData.push_back(data[i]);
 80014cc:	68f9      	ldr	r1, [r7, #12]
 80014ce:	6838      	ldr	r0, [r7, #0]
 80014d0:	f006 f86f 	bl	80075b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80014d4:	4603      	mov	r3, r0
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f006 f86c 	bl	80075b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
	  for (size_t i = 0; i < data.length(); ++i) {
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	3301      	adds	r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	6838      	ldr	r0, [r7, #0]
 80014e8:	f006 f832 	bl	8007550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80014ec:	4602      	mov	r2, r0
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4293      	cmp	r3, r2
 80014f2:	bf34      	ite	cc
 80014f4:	2301      	movcc	r3, #1
 80014f6:	2300      	movcs	r3, #0
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1ac      	bne.n	8001458 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16>
	        }
	    }
	  	  //zwrócenie buforu string tymczasowego
	    return unescapedData;
 80014fe:	bf00      	nop
}
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	bd90      	pop	{r4, r7, pc}

08001508 <_Z16escapeCharactersRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
std::string escapeCharacters(const std::string& data) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b0ac      	sub	sp, #176	; 0xb0
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
    std::string escapedData = data;//zamiana znaków
 8001512:	6839      	ldr	r1, [r7, #0]
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f006 fa83 	bl	8007a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
    replaceAll(escapedData, "\\", "\\@");
 800151a:	f107 0320 	add.w	r3, r7, #32
 800151e:	4618      	mov	r0, r3
 8001520:	f005 fde6 	bl	80070f0 <_ZNSaIcEC1Ev>
 8001524:	f107 0220 	add.w	r2, r7, #32
 8001528:	f107 0308 	add.w	r3, r7, #8
 800152c:	494e      	ldr	r1, [pc, #312]	; (8001668 <_Z16escapeCharactersRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x160>)
 800152e:	4618      	mov	r0, r3
 8001530:	f006 faaa 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001534:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001538:	4618      	mov	r0, r3
 800153a:	f005 fdd9 	bl	80070f0 <_ZNSaIcEC1Ev>
 800153e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	4949      	ldr	r1, [pc, #292]	; (800166c <_Z16escapeCharactersRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x164>)
 8001548:	4618      	mov	r0, r3
 800154a:	f006 fa9d 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800154e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001552:	f107 0308 	add.w	r3, r7, #8
 8001556:	4619      	mov	r1, r3
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff fde2 	bl	8001122 <_Z10replaceAllRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS4_S7_>
 800155e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001562:	4618      	mov	r0, r3
 8001564:	f005 ffb5 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001568:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800156c:	4618      	mov	r0, r3
 800156e:	f005 fdc1 	bl	80070f4 <_ZNSaIcED1Ev>
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	4618      	mov	r0, r3
 8001578:	f005 ffab 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800157c:	f107 0320 	add.w	r3, r7, #32
 8001580:	4618      	mov	r0, r3
 8001582:	f005 fdb7 	bl	80070f4 <_ZNSaIcED1Ev>
    replaceAll(escapedData, "|", "\\;");
 8001586:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800158a:	4618      	mov	r0, r3
 800158c:	f005 fdb0 	bl	80070f0 <_ZNSaIcEC1Ev>
 8001590:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001594:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001598:	4935      	ldr	r1, [pc, #212]	; (8001670 <_Z16escapeCharactersRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x168>)
 800159a:	4618      	mov	r0, r3
 800159c:	f006 fa74 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80015a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015a4:	4618      	mov	r0, r3
 80015a6:	f005 fda3 	bl	80070f0 <_ZNSaIcEC1Ev>
 80015aa:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80015ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015b2:	4930      	ldr	r1, [pc, #192]	; (8001674 <_Z16escapeCharactersRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x16c>)
 80015b4:	4618      	mov	r0, r3
 80015b6:	f006 fa67 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80015ba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80015be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015c2:	4619      	mov	r1, r3
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff fdac 	bl	8001122 <_Z10replaceAllRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS4_S7_>
 80015ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015ce:	4618      	mov	r0, r3
 80015d0:	f005 ff7f 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80015d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80015d8:	4618      	mov	r0, r3
 80015da:	f005 fd8b 	bl	80070f4 <_ZNSaIcED1Ev>
 80015de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015e2:	4618      	mov	r0, r3
 80015e4:	f005 ff75 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80015e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015ec:	4618      	mov	r0, r3
 80015ee:	f005 fd81 	bl	80070f4 <_ZNSaIcED1Ev>
    replaceAll(escapedData, "^", "\\:");
 80015f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015f6:	4618      	mov	r0, r3
 80015f8:	f005 fd7a 	bl	80070f0 <_ZNSaIcEC1Ev>
 80015fc:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001600:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001604:	491c      	ldr	r1, [pc, #112]	; (8001678 <_Z16escapeCharactersRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x170>)
 8001606:	4618      	mov	r0, r3
 8001608:	f006 fa3e 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800160c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001610:	4618      	mov	r0, r3
 8001612:	f005 fd6d 	bl	80070f0 <_ZNSaIcEC1Ev>
 8001616:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800161a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800161e:	4917      	ldr	r1, [pc, #92]	; (800167c <_Z16escapeCharactersRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x174>)
 8001620:	4618      	mov	r0, r3
 8001622:	f006 fa31 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001626:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800162a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800162e:	4619      	mov	r1, r3
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff fd76 	bl	8001122 <_Z10replaceAllRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKS4_S7_>
 8001636:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800163a:	4618      	mov	r0, r3
 800163c:	f005 ff49 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001640:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001644:	4618      	mov	r0, r3
 8001646:	f005 fd55 	bl	80070f4 <_ZNSaIcED1Ev>
 800164a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800164e:	4618      	mov	r0, r3
 8001650:	f005 ff3f 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001654:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001658:	4618      	mov	r0, r3
 800165a:	f005 fd4b 	bl	80070f4 <_ZNSaIcED1Ev>
    return escapedData;
 800165e:	bf00      	nop
}
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	37b0      	adds	r7, #176	; 0xb0
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	0800c348 	.word	0x0800c348
 800166c:	0800c34c 	.word	0x0800c34c
 8001670:	0800c350 	.word	0x0800c350
 8001674:	0800c354 	.word	0x0800c354
 8001678:	0800c358 	.word	0x0800c358
 800167c:	0800c35c 	.word	0x0800c35c

08001680 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
//generowanie ramki odpowiedzi
void respondframe(std::string response){
 8001680:	b580      	push	{r7, lr}
 8001682:	b0c4      	sub	sp, #272	; 0x110
 8001684:	af00      	add	r7, sp, #0
 8001686:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800168a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800168e:	6018      	str	r0, [r3, #0]
	std::string escapedresponse=escapeCharacters(response);//zamiana znaków
 8001690:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001694:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001698:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800169c:	6819      	ldr	r1, [r3, #0]
 800169e:	4610      	mov	r0, r2
 80016a0:	f7ff ff32 	bl	8001508 <_Z16escapeCharactersRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
	char rspchksmbuf[5],rpslenbuf[3];//temp tablice znaków
	uint8_t resplen=static_cast<uint8_t>(escapedresponse.length()-1);//obliczanie długości
 80016a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016a8:	4618      	mov	r0, r3
 80016aa:	f005 ff51 	bl	8007550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80016ae:	4603      	mov	r3, r0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	3b01      	subs	r3, #1
 80016b4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	std::snprintf(rpslenbuf,3,"%02d",resplen);//formatowanie długości
 80016b8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80016bc:	f107 0020 	add.w	r0, r7, #32
 80016c0:	4a58      	ldr	r2, [pc, #352]	; (8001824 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a4>)
 80016c2:	2103      	movs	r1, #3
 80016c4:	f008 f8ba 	bl	800983c <sniprintf>
	uint16_t respchecksum=calculateCRC16("n"+escapedresponse);//checksuma
 80016c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016cc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80016d0:	4955      	ldr	r1, [pc, #340]	; (8001828 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a8>)
 80016d2:	4618      	mov	r0, r3
 80016d4:	f001 fe37 	bl	8003346 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 80016d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fe4f 	bl	8001380 <_Z14calculateCRC16RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 80016e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80016ec:	4618      	mov	r0, r3
 80016ee:	f005 fef0 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	std::snprintf(rspchksmbuf,5,"%04X",respchecksum);//formatowanie checksumy
 80016f2:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80016f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80016fa:	4a4c      	ldr	r2, [pc, #304]	; (800182c <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1ac>)
 80016fc:	2105      	movs	r1, #5
 80016fe:	f008 f89d 	bl	800983c <sniprintf>
	std::string outputresponse="^"+(std::string)rpslenbuf+"n"+escapedresponse+(std::string)rspchksmbuf+"|\r\n";//składanie całości
 8001702:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001706:	4618      	mov	r0, r3
 8001708:	f005 fcf2 	bl	80070f0 <_ZNSaIcEC1Ev>
 800170c:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8001710:	f107 0120 	add.w	r1, r7, #32
 8001714:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001718:	4618      	mov	r0, r3
 800171a:	f006 f9b5 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800171e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001722:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001726:	4942      	ldr	r1, [pc, #264]	; (8001830 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b0>)
 8001728:	4618      	mov	r0, r3
 800172a:	f001 fe4c 	bl	80033c6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800172e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001732:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8001736:	4a3c      	ldr	r2, [pc, #240]	; (8001828 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1a8>)
 8001738:	4618      	mov	r0, r3
 800173a:	f001 fe5c 	bl	80033f6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800173e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001742:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001746:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800174a:	4618      	mov	r0, r3
 800174c:	f001 fe6a 	bl	8003424 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>
 8001750:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001754:	4618      	mov	r0, r3
 8001756:	f005 fccb 	bl	80070f0 <_ZNSaIcEC1Ev>
 800175a:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800175e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001762:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001766:	4618      	mov	r0, r3
 8001768:	f006 f98e 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800176c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001770:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8001774:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001778:	4618      	mov	r0, r3
 800177a:	f001 fe6a 	bl	8003452 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 800177e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001786:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800178a:	4a2a      	ldr	r2, [pc, #168]	; (8001834 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x1b4>)
 800178c:	4618      	mov	r0, r3
 800178e:	f001 fe32 	bl	80033f6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001792:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001796:	4618      	mov	r0, r3
 8001798:	f005 fe9b 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800179c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80017a0:	4618      	mov	r0, r3
 80017a2:	f005 fe96 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017a6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f005 fca2 	bl	80070f4 <_ZNSaIcED1Ev>
 80017b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017b4:	4618      	mov	r0, r3
 80017b6:	f005 fe8c 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017ba:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017be:	4618      	mov	r0, r3
 80017c0:	f005 fe87 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017c8:	4618      	mov	r0, r3
 80017ca:	f005 fe82 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017ce:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017d2:	4618      	mov	r0, r3
 80017d4:	f005 fe7d 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80017d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017dc:	4618      	mov	r0, r3
 80017de:	f005 fc89 	bl	80070f4 <_ZNSaIcED1Ev>
	USART_send(outputresponse);
 80017e2:	f107 0208 	add.w	r2, r7, #8
 80017e6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017ea:	4611      	mov	r1, r2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f006 f917 	bl	8007a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80017f2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fcdc 	bl	80011b4 <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80017fc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001800:	4618      	mov	r0, r3
 8001802:	f005 fe66 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8001806:	f107 0308 	add.w	r3, r7, #8
 800180a:	4618      	mov	r0, r3
 800180c:	f005 fe61 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001810:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001814:	4618      	mov	r0, r3
 8001816:	f005 fe5c 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800181a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	0800c360 	.word	0x0800c360
 8001828:	0800c368 	.word	0x0800c368
 800182c:	0800c36c 	.word	0x0800c36c
 8001830:	0800c358 	.word	0x0800c358
 8001834:	0800c374 	.word	0x0800c374

08001838 <_Z13resettimevalsv>:
//ZMIENNE CZASOWE SYSTEMU GAZOWO-STRZELAJĄCEGO ORAZ RESET
int shotdelay=DELTIME, timebetween=BEWTIME,valvetime=GVOTIME,sparktime=SPTTIME;
float timemul=MULTIPL,realshotdelay=DELTIME*timemul;
void resettimevals(){
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
	shotdelay=DELTIME;
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <_Z13resettimevalsv+0x34>)
 800183e:	2279      	movs	r2, #121	; 0x79
 8001840:	601a      	str	r2, [r3, #0]
	timebetween=BEWTIME;
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <_Z13resettimevalsv+0x38>)
 8001844:	2278      	movs	r2, #120	; 0x78
 8001846:	601a      	str	r2, [r3, #0]
	valvetime=GVOTIME;
 8001848:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <_Z13resettimevalsv+0x3c>)
 800184a:	228c      	movs	r2, #140	; 0x8c
 800184c:	601a      	str	r2, [r3, #0]
	sparktime=SPTTIME;
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <_Z13resettimevalsv+0x40>)
 8001850:	2296      	movs	r2, #150	; 0x96
 8001852:	601a      	str	r2, [r3, #0]
	timemul=MULTIPL;
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <_Z13resettimevalsv+0x44>)
 8001856:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800185a:	601a      	str	r2, [r3, #0]
	realshotdelay=DELTIME*MULTIPL;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <_Z13resettimevalsv+0x48>)
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <_Z13resettimevalsv+0x4c>)
 8001860:	601a      	str	r2, [r3, #0]
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	20000000 	.word	0x20000000
 8001870:	20000004 	.word	0x20000004
 8001874:	20000008 	.word	0x20000008
 8001878:	2000000c 	.word	0x2000000c
 800187c:	20000010 	.word	0x20000010
 8001880:	20002318 	.word	0x20002318
 8001884:	43358000 	.word	0x43358000

08001888 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
//zmienne średnich i median ADC DMA
float c1avg,c2avg,c1med,c2med;
uint8_t FBpressed=0,LOCKpressed=0;
uint16_t ButtonPresses=0;
void processcmd(char cmd,const std::string& data){
 8001888:	b580      	push	{r7, lr}
 800188a:	f5ad 7d3a 	sub.w	sp, sp, #744	; 0x2e8
 800188e:	af02      	add	r7, sp, #8
 8001890:	4602      	mov	r2, r0
 8001892:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001896:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800189a:	6019      	str	r1, [r3, #0]
 800189c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80018a0:	f2a3 23d9 	subw	r3, r3, #729	; 0x2d9
 80018a4:	701a      	strb	r2, [r3, #0]
	std::string respstr="0.00000";
 80018a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018aa:	4618      	mov	r0, r3
 80018ac:	f005 fc20 	bl	80070f0 <_ZNSaIcEC1Ev>
 80018b0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80018b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018b8:	49c9      	ldr	r1, [pc, #804]	; (8001be0 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x358>)
 80018ba:	4618      	mov	r0, r3
 80018bc:	f006 f8e4 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80018c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018c4:	4618      	mov	r0, r3
 80018c6:	f005 fc15 	bl	80070f4 <_ZNSaIcED1Ev>
	char str1[20]={0},str2[20]={0};
 80018ca:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80018ce:	f5a3 7330 	sub.w	r3, r3, #704	; 0x2c0
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	3304      	adds	r3, #4
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80018e6:	f5a3 7335 	sub.w	r3, r3, #724	; 0x2d4
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	3304      	adds	r3, #4
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]

	switch(cmd){
 80018fa:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80018fe:	f2a3 23d9 	subw	r3, r3, #729	; 0x2d9
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	3b61      	subs	r3, #97	; 0x61
 8001906:	2b15      	cmp	r3, #21
 8001908:	f200 82d1 	bhi.w	8001eae <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x626>
 800190c:	a201      	add	r2, pc, #4	; (adr r2, 8001914 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8c>)
 800190e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001912:	bf00      	nop
 8001914:	08001c83 	.word	0x08001c83
 8001918:	08001a83 	.word	0x08001a83
 800191c:	08001c19 	.word	0x08001c19
 8001920:	080019b9 	.word	0x080019b9
 8001924:	0800196d 	.word	0x0800196d
 8001928:	08001e6f 	.word	0x08001e6f
 800192c:	08001eaf 	.word	0x08001eaf
 8001930:	08001eaf 	.word	0x08001eaf
 8001934:	08001d69 	.word	0x08001d69
 8001938:	08001eaf 	.word	0x08001eaf
 800193c:	08001eaf 	.word	0x08001eaf
 8001940:	08001eaf 	.word	0x08001eaf
 8001944:	08001a21 	.word	0x08001a21
 8001948:	08001ee9 	.word	0x08001ee9
 800194c:	08001eaf 	.word	0x08001eaf
 8001950:	08001e47 	.word	0x08001e47
 8001954:	08001eaf 	.word	0x08001eaf
 8001958:	08001ba3 	.word	0x08001ba3
 800195c:	08001b43 	.word	0x08001b43
 8001960:	08001eaf 	.word	0x08001eaf
 8001964:	08001eaf 	.word	0x08001eaf
 8001968:	08001ae3 	.word	0x08001ae3
		//noop do fucking nothing
	break;

	case 'e':
		//echo
		USART_send("ECH:"+data+"\r\n");
 800196c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001970:	f5a3 701e 	sub.w	r0, r3, #632	; 0x278
 8001974:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001978:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4999      	ldr	r1, [pc, #612]	; (8001be4 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x35c>)
 8001980:	f001 fce1 	bl	8003346 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8001984:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001988:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 800198c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001990:	4a95      	ldr	r2, [pc, #596]	; (8001be8 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x360>)
 8001992:	4618      	mov	r0, r3
 8001994:	f001 fd2f 	bl	80033f6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001998:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fc09 	bl	80011b4 <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80019a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019a6:	4618      	mov	r0, r3
 80019a8:	f005 fd93 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80019ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019b0:	4618      	mov	r0, r3
 80019b2:	f005 fd8e 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	break;
 80019b6:	e298      	b.n	8001eea <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x662>

	case 'd':
		//delay
		shotdelay=stof(data);
 80019b8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80019bc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80019c0:	2100      	movs	r1, #0
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	f7ff fb5a 	bl	800107c <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 80019c8:	eef0 7a40 	vmov.f32	s15, s0
 80019cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d0:	ee17 2a90 	vmov	r2, s15
 80019d4:	4b85      	ldr	r3, [pc, #532]	; (8001bec <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x364>)
 80019d6:	601a      	str	r2, [r3, #0]
		respondframe("DEL:"+std::to_string(shotdelay));
 80019d8:	4b84      	ldr	r3, [pc, #528]	; (8001bec <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x364>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80019e0:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80019e4:	4611      	mov	r1, r2
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fb62 	bl	80010b0 <_ZNSt7__cxx119to_stringEi>
 80019ec:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80019f0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80019f4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80019f8:	497d      	ldr	r1, [pc, #500]	; (8001bf0 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x368>)
 80019fa:	4618      	mov	r0, r3
 80019fc:	f001 fce3 	bl	80033c6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8001a00:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fe3b 	bl	8001680 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001a0a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f005 fd5f 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a14:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f005 fd5a 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8001a1e:	e264      	b.n	8001eea <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x662>

	case 'm':
		//timemul
		timemul=stof(data);
 8001a20:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001a24:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	f7ff fb26 	bl	800107c <_ZNSt7__cxx114stofERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPj>
 8001a30:	eef0 7a40 	vmov.f32	s15, s0
 8001a34:	4b6f      	ldr	r3, [pc, #444]	; (8001bf4 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x36c>)
 8001a36:	edc3 7a00 	vstr	s15, [r3]
		respondframe("MUL:"+std::to_string(timebetween));
 8001a3a:	4b6f      	ldr	r3, [pc, #444]	; (8001bf8 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x370>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001a42:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fb31 	bl	80010b0 <_ZNSt7__cxx119to_stringEi>
 8001a4e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001a52:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8001a56:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001a5a:	4968      	ldr	r1, [pc, #416]	; (8001bfc <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x374>)
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f001 fcb2 	bl	80033c6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8001a62:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fe0a 	bl	8001680 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001a6c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f005 fd2e 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a76:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f005 fd29 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	break;
 8001a80:	e233      	b.n	8001eea <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x662>

	case 'b':
		//timebetween
		timebetween=stoi(data);
 8001a82:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001a86:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8001a8a:	220a      	movs	r2, #10
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	6818      	ldr	r0, [r3, #0]
 8001a90:	f7ff fada 	bl	8001048 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4a58      	ldr	r2, [pc, #352]	; (8001bf8 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x370>)
 8001a98:	6013      	str	r3, [r2, #0]
		respondframe("BEW:"+std::to_string(timebetween));
 8001a9a:	4b57      	ldr	r3, [pc, #348]	; (8001bf8 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x370>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001aa2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fb01 	bl	80010b0 <_ZNSt7__cxx119to_stringEi>
 8001aae:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001ab2:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001ab6:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001aba:	4951      	ldr	r1, [pc, #324]	; (8001c00 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x378>)
 8001abc:	4618      	mov	r0, r3
 8001abe:	f001 fc82 	bl	80033c6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8001ac2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fdda 	bl	8001680 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001acc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f005 fcfe 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001ad6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001ada:	4618      	mov	r0, r3
 8001adc:	f005 fcf9 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	break;
 8001ae0:	e203      	b.n	8001eea <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x662>

	case 'v':
		//valvetime
		valvetime=stoi(data);
 8001ae2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001ae6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8001aea:	220a      	movs	r2, #10
 8001aec:	2100      	movs	r1, #0
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	f7ff faaa 	bl	8001048 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4a43      	ldr	r2, [pc, #268]	; (8001c04 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x37c>)
 8001af8:	6013      	str	r3, [r2, #0]
		respondframe("GVO:"+std::to_string(valvetime));
 8001afa:	4b42      	ldr	r3, [pc, #264]	; (8001c04 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x37c>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001b02:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fad1 	bl	80010b0 <_ZNSt7__cxx119to_stringEi>
 8001b0e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001b12:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001b16:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001b1a:	493b      	ldr	r1, [pc, #236]	; (8001c08 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x380>)
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f001 fc52 	bl	80033c6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8001b22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fdaa 	bl	8001680 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001b2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b30:	4618      	mov	r0, r3
 8001b32:	f005 fcce 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001b36:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f005 fcc9 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	break;
 8001b40:	e1d3      	b.n	8001eea <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x662>

	case 's':
		//sparktime
		sparktime=stoi(data);
 8001b42:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001b46:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8001b4a:	220a      	movs	r2, #10
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	f7ff fa7a 	bl	8001048 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8001b54:	4603      	mov	r3, r0
 8001b56:	4a2d      	ldr	r2, [pc, #180]	; (8001c0c <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x384>)
 8001b58:	6013      	str	r3, [r2, #0]
		respondframe("SPT:"+std::to_string(sparktime));
 8001b5a:	4b2c      	ldr	r3, [pc, #176]	; (8001c0c <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x384>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001b62:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff faa1 	bl	80010b0 <_ZNSt7__cxx119to_stringEi>
 8001b6e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001b72:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001b76:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8001b7a:	4925      	ldr	r1, [pc, #148]	; (8001c10 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x388>)
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f001 fc22 	bl	80033c6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8001b82:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fd7a 	bl	8001680 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001b8c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b90:	4618      	mov	r0, r3
 8001b92:	f005 fc9e 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001b96:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f005 fc99 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	break;
 8001ba0:	e1a3      	b.n	8001eea <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x662>

	case 'r':
		resettimevals();
 8001ba2:	f7ff fe49 	bl	8001838 <_Z13resettimevalsv>
		respondframe("RESET");
 8001ba6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001baa:	4618      	mov	r0, r3
 8001bac:	f005 faa0 	bl	80070f0 <_ZNSaIcEC1Ev>
 8001bb0:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001bb4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001bb8:	4916      	ldr	r1, [pc, #88]	; (8001c14 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x38c>)
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f005 ff64 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001bc0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fd5b 	bl	8001680 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001bca:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f005 fc7f 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001bd4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f005 fa8b 	bl	80070f4 <_ZNSaIcED1Ev>
		//reset
	break;
 8001bde:	e184      	b.n	8001eea <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x662>
 8001be0:	0800c378 	.word	0x0800c378
 8001be4:	0800c380 	.word	0x0800c380
 8001be8:	0800c388 	.word	0x0800c388
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	0800c38c 	.word	0x0800c38c
 8001bf4:	20000010 	.word	0x20000010
 8001bf8:	20000004 	.word	0x20000004
 8001bfc:	0800c394 	.word	0x0800c394
 8001c00:	0800c39c 	.word	0x0800c39c
 8001c04:	20000008 	.word	0x20000008
 8001c08:	0800c3a4 	.word	0x0800c3a4
 8001c0c:	2000000c 	.word	0x2000000c
 8001c10:	0800c3ac 	.word	0x0800c3ac
 8001c14:	0800c3b4 	.word	0x0800c3b4
	case 'c':

		//custom - output string is respstr
		respstr="DEBUG:CUSTOM STATEMENTS UNDEFINED YET\r\n";
 8001c18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c1c:	49b7      	ldr	r1, [pc, #732]	; (8001efc <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x674>)
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f005 fddf 	bl	80077e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
		//respondframe("CST:"+respstr);
		USART_send(respstr);
 8001c24:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001c28:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f005 fef6 	bl	8007a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001c34:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fabb 	bl	80011b4 <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001c3e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001c42:	4618      	mov	r0, r3
 8001c44:	f005 fc45 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		respondframe("CMDERR");
 8001c48:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f005 fa4f 	bl	80070f0 <_ZNSaIcEC1Ev>
 8001c52:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 8001c56:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8001c5a:	49a9      	ldr	r1, [pc, #676]	; (8001f00 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x678>)
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f005 ff13 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001c62:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fd0a 	bl	8001680 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001c6c:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8001c70:	4618      	mov	r0, r3
 8001c72:	f005 fc2e 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001c76:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f005 fa3a 	bl	80070f4 <_ZNSaIcED1Ev>
		//TODO:ADD COMMANDS
	break;
 8001c80:	e133      	b.n	8001eea <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x662>
		//DMAbufferavearage
		//respstr="\r\nsrednia kanalu 1 to: "+ std::to_string(c2avg) + ", a kanalu 2 to: "+std::to_string(c1avg);
		//respondframe("\r\nsrednia kanalu 1 to: "+ std::to_string(c1avg) + ", a kanalu 2 to: "+std::to_string(c2avg));
		//c1=std::to_string(c1avg);
		//c2=std::to_string(c2avg);
		snprintf(str1,10,"%f",c1avg);
 8001c82:	4ba0      	ldr	r3, [pc, #640]	; (8001f04 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x67c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fc7e 	bl	8000588 <__aeabi_f2d>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	f107 0020 	add.w	r0, r7, #32
 8001c94:	e9cd 2300 	strd	r2, r3, [sp]
 8001c98:	4a9b      	ldr	r2, [pc, #620]	; (8001f08 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x680>)
 8001c9a:	210a      	movs	r1, #10
 8001c9c:	f007 fdce 	bl	800983c <sniprintf>
		snprintf(str2,10,"%f",c2avg);
 8001ca0:	4b9a      	ldr	r3, [pc, #616]	; (8001f0c <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x684>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fc6f 	bl	8000588 <__aeabi_f2d>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	f107 000c 	add.w	r0, r7, #12
 8001cb2:	e9cd 2300 	strd	r2, r3, [sp]
 8001cb6:	4a94      	ldr	r2, [pc, #592]	; (8001f08 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x680>)
 8001cb8:	210a      	movs	r1, #10
 8001cba:	f007 fdbf 	bl	800983c <sniprintf>
		respondframe((std::string)str1+":"+(std::string)str2);
 8001cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f005 fa14 	bl	80070f0 <_ZNSaIcEC1Ev>
 8001cc8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ccc:	f107 0120 	add.w	r1, r7, #32
 8001cd0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f005 fed7 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001cda:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ce2:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8001ce6:	4a8a      	ldr	r2, [pc, #552]	; (8001f10 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x688>)
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f001 fb84 	bl	80033f6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001cee:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f005 f9fc 	bl	80070f0 <_ZNSaIcEC1Ev>
 8001cf8:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8001cfc:	f107 010c 	add.w	r1, r7, #12
 8001d00:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001d04:	4618      	mov	r0, r3
 8001d06:	f005 febf 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001d0a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8001d0e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d12:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 8001d16:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f001 fb99 	bl	8003452 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8001d20:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fcab 	bl	8001680 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001d2a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f005 fbcf 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001d34:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f005 fbca 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001d3e:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8001d42:	4618      	mov	r0, r3
 8001d44:	f005 f9d6 	bl	80070f4 <_ZNSaIcED1Ev>
 8001d48:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f005 fbc0 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001d52:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f005 fbbb 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001d5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d60:	4618      	mov	r0, r3
 8001d62:	f005 f9c7 	bl	80070f4 <_ZNSaIcED1Ev>

	break;
 8001d66:	e0c0      	b.n	8001eea <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x662>
	case 'i':
		//DMAbuffermean
		//respstr="\r\nmediana kanalu 1 to: "+ std::to_string(c1med)+ ", a kanalu 2 to: "+std::to_string(c2med);
		//respondframe("\r\nmediana kanalu 1 to: "+ std::to_string(c1med)+ ", a kanalu 2 to: "+std::to_string(c2med));

		snprintf(str1,10,"%f",c1med);
 8001d68:	4b6a      	ldr	r3, [pc, #424]	; (8001f14 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x68c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fc0b 	bl	8000588 <__aeabi_f2d>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	f107 0020 	add.w	r0, r7, #32
 8001d7a:	e9cd 2300 	strd	r2, r3, [sp]
 8001d7e:	4a62      	ldr	r2, [pc, #392]	; (8001f08 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x680>)
 8001d80:	210a      	movs	r1, #10
 8001d82:	f007 fd5b 	bl	800983c <sniprintf>
		snprintf(str2,10,"%f",c2med);
 8001d86:	4b64      	ldr	r3, [pc, #400]	; (8001f18 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x690>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fbfc 	bl	8000588 <__aeabi_f2d>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	f107 000c 	add.w	r0, r7, #12
 8001d98:	e9cd 2300 	strd	r2, r3, [sp]
 8001d9c:	4a5a      	ldr	r2, [pc, #360]	; (8001f08 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x680>)
 8001d9e:	210a      	movs	r1, #10
 8001da0:	f007 fd4c 	bl	800983c <sniprintf>
		respondframe((std::string)str1+":"+(std::string)str2);
 8001da4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001da8:	4618      	mov	r0, r3
 8001daa:	f005 f9a1 	bl	80070f0 <_ZNSaIcEC1Ev>
 8001dae:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8001db2:	f107 0120 	add.w	r1, r7, #32
 8001db6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f005 fe64 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001dc0:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001dc4:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8001dc8:	4a51      	ldr	r2, [pc, #324]	; (8001f10 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x688>)
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f001 fb13 	bl	80033f6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8001dd0:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f005 f98b 	bl	80070f0 <_ZNSaIcEC1Ev>
 8001dda:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8001dde:	f107 010c 	add.w	r1, r7, #12
 8001de2:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8001de6:	4618      	mov	r0, r3
 8001de8:	f005 fe4e 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001dec:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001df0:	f507 721d 	add.w	r2, r7, #628	; 0x274
 8001df4:	f507 7110 	add.w	r1, r7, #576	; 0x240
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f001 fb2a 	bl	8003452 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>
 8001dfe:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fc3c 	bl	8001680 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001e08:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f005 fb60 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001e12:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8001e16:	4618      	mov	r0, r3
 8001e18:	f005 fb5b 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001e1c:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8001e20:	4618      	mov	r0, r3
 8001e22:	f005 f967 	bl	80070f4 <_ZNSaIcED1Ev>
 8001e26:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f005 fb51 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001e30:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001e34:	4618      	mov	r0, r3
 8001e36:	f005 fb4c 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001e3a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f005 f958 	bl	80070f4 <_ZNSaIcED1Ev>

	break;
 8001e44:	e051      	b.n	8001eea <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x662>
	case 'p':
		//Button Press counter
		respondframe(std::to_string(ButtonPresses));
 8001e46:	4b35      	ldr	r3, [pc, #212]	; (8001f1c <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x694>)
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8001e50:	4611      	mov	r1, r2
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff f92c 	bl	80010b0 <_ZNSt7__cxx119to_stringEi>
 8001e58:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fc0f 	bl	8001680 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001e62:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8001e66:	4618      	mov	r0, r3
 8001e68:	f005 fb33 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		break;
 8001e6c:	e03d      	b.n	8001eea <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x662>
	case 'f':
		FBpressed=1;
 8001e6e:	4b2c      	ldr	r3, [pc, #176]	; (8001f20 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x698>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
		respondframe("Firing.");
 8001e74:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f005 f939 	bl	80070f0 <_ZNSaIcEC1Ev>
 8001e7e:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8001e82:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001e86:	4927      	ldr	r1, [pc, #156]	; (8001f24 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x69c>)
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f005 fdfd 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001e8e:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fbf4 	bl	8001680 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001e98:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f005 fb18 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001ea2:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f005 f924 	bl	80070f4 <_ZNSaIcED1Ev>
		break;
 8001eac:	e01d      	b.n	8001eea <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x662>
	default:
		respondframe("CMDERR");
 8001eae:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f005 f91c 	bl	80070f0 <_ZNSaIcEC1Ev>
 8001eb8:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 8001ebc:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8001ec0:	490f      	ldr	r1, [pc, #60]	; (8001f00 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x678>)
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f005 fde0 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001ec8:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fbd7 	bl	8001680 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001ed2:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f005 fafb 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001edc:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f005 f907 	bl	80070f4 <_ZNSaIcED1Ev>
 8001ee6:	e000      	b.n	8001eea <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x662>
	break;
 8001ee8:	bf00      	nop

	}
}
 8001eea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f005 faef 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001ef4:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	0800c3bc 	.word	0x0800c3bc
 8001f00:	0800c3e4 	.word	0x0800c3e4
 8001f04:	2000231c 	.word	0x2000231c
 8001f08:	0800c3ec 	.word	0x0800c3ec
 8001f0c:	20002320 	.word	0x20002320
 8001f10:	0800c3f0 	.word	0x0800c3f0
 8001f14:	20002324 	.word	0x20002324
 8001f18:	20002328 	.word	0x20002328
 8001f1c:	2000232e 	.word	0x2000232e
 8001f20:	2000232c 	.word	0x2000232c
 8001f24:	0800c3f4 	.word	0x0800c3f4

08001f28 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

//dekonstrukcja oraz analiza ramki
bool decodePAWNET(const std::string& message) {
 8001f28:	b590      	push	{r4, r7, lr}
 8001f2a:	b0d5      	sub	sp, #340	; 0x154
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001f32:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f36:	6018      	str	r0, [r3, #0]
	//USART_send("\r\nSTARTING DECODING: "+message+" \r\n");
    //zmienna,znajdywanie końca bo długość to długość danych po rozkodowaniu
    uint8_t endidx=message.find('|');
 8001f38:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001f3c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001f40:	2200      	movs	r2, #0
 8001f42:	217c      	movs	r1, #124	; 0x7c
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	f005 fd13 	bl	8007970 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
    if(endidx<=8){return false;}
 8001f50:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d801      	bhi.n	8001f5c <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x34>
 8001f58:	2400      	movs	r4, #0
 8001f5a:	e17c      	b.n	8002256 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x32e>
    std::string fixedData;
 8001f5c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f60:	4618      	mov	r0, r3
 8001f62:	f005 fa85 	bl	8007470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
    USART_send("\r\n");
 8001f66:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f005 f8c0 	bl	80070f0 <_ZNSaIcEC1Ev>
 8001f70:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001f74:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f78:	49ba      	ldr	r1, [pc, #744]	; (8002264 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x33c>)
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f005 fd84 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001f80:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff f915 	bl	80011b4 <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001f8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f005 fa9f 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001f94:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f005 f8ab 	bl	80070f4 <_ZNSaIcED1Ev>
    //dlugosc
    std::string lengthStr = message.substr(1, 2);
 8001f9e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001fa2:	f5a3 7088 	sub.w	r0, r3, #272	; 0x110
 8001fa6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001faa:	f5a3 71a6 	sub.w	r1, r3, #332	; 0x14c
 8001fae:	2302      	movs	r3, #2
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	6809      	ldr	r1, [r1, #0]
 8001fb4:	f005 fda0 	bl	8007af8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
    for (char ch:lengthStr){//sprawdzanie czy aby na pewno pierwsze 2 znaki po start to cyfry dziesiętne
 8001fb8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fbc:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001fc0:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8001fc4:	f005 fab6 	bl	8007534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001fce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8001fd8:	f005 fab0 	bl	800753c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001fe2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	e033      	b.n	8002052 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x12a>
 8001fea:	f107 030c 	add.w	r3, r7, #12
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f001 f8f3 	bl	80031da <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    			if (!(ch >= '0' && ch <= '9')) {
 8001ffc:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8002000:	2b2f      	cmp	r3, #47	; 0x2f
 8002002:	d903      	bls.n	800200c <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xe4>
 8002004:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8002008:	2b39      	cmp	r3, #57	; 0x39
 800200a:	d91d      	bls.n	8002048 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x120>
    	            respondframe("LENERR");
 800200c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002010:	4618      	mov	r0, r3
 8002012:	f005 f86d 	bl	80070f0 <_ZNSaIcEC1Ev>
 8002016:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800201a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800201e:	4992      	ldr	r1, [pc, #584]	; (8002268 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x340>)
 8002020:	4618      	mov	r0, r3
 8002022:	f005 fd31 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002026:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fb28 	bl	8001680 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002030:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002034:	4618      	mov	r0, r3
 8002036:	f005 fa4c 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800203a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800203e:	4618      	mov	r0, r3
 8002040:	f005 f858 	bl	80070f4 <_ZNSaIcED1Ev>
    	            return false;
 8002044:	2400      	movs	r4, #0
 8002046:	e0fc      	b.n	8002242 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x31a>
    for (char ch:lengthStr){//sprawdzanie czy aby na pewno pierwsze 2 znaki po start to cyfry dziesiętne
 8002048:	f107 030c 	add.w	r3, r7, #12
 800204c:	4618      	mov	r0, r3
 800204e:	f001 f8b4 	bl	80031ba <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>
 8002052:	f107 0208 	add.w	r2, r7, #8
 8002056:	f107 030c 	add.w	r3, r7, #12
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f001 f894 	bl	800318a <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1c0      	bne.n	8001fea <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc2>
    	        }
    }
    size_t length = std::stoi(lengthStr)+1;//długość
 8002068:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800206c:	220a      	movs	r2, #10
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe ffe9 	bl	8001048 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 8002076:	4603      	mov	r3, r0
 8002078:	3301      	adds	r3, #1
 800207a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

    //komenda i dane
    char command = message[3];
 800207e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002082:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002086:	2103      	movs	r1, #3
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	f005 fa8f 	bl	80075ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800208e:	4603      	mov	r3, r0
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
    std::string data=message.substr(4,endidx-8);
 8002096:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 800209a:	3b08      	subs	r3, #8
 800209c:	461a      	mov	r2, r3
 800209e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80020a2:	f5a3 7094 	sub.w	r0, r3, #296	; 0x128
 80020a6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80020aa:	f5a3 71a6 	sub.w	r1, r3, #332	; 0x14c
 80020ae:	4613      	mov	r3, r2
 80020b0:	2204      	movs	r2, #4
 80020b2:	6809      	ldr	r1, [r1, #0]
 80020b4:	f005 fd20 	bl	8007af8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>

    //rekonstrukcja danych z escapeowania
    fixedData=reconstructdata(data);
 80020b8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020bc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80020c0:	4611      	mov	r1, r2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f005 fcac 	bl	8007a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80020c8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80020cc:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff f9b5 	bl	8001442 <_Z15reconstructdataNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80020d8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80020dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020e0:	4611      	mov	r1, r2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f005 f9fb 	bl	80074de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80020e8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80020ec:	4618      	mov	r0, r3
 80020ee:	f005 f9f0 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80020f2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f005 f9eb 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    //USART_send("\r\nDEBUG:RECONSTRUCTED DATA: "+fixedData+" \r\n");

    //porównywanie długości danych zrekonstruowanych z długością w ramce
    if(length!=fixedData.length()){
 80020fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002100:	4618      	mov	r0, r3
 8002102:	f005 fa25 	bl	8007550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002106:	4602      	mov	r2, r0
 8002108:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800210c:	4293      	cmp	r3, r2
 800210e:	bf14      	ite	ne
 8002110:	2301      	movne	r3, #1
 8002112:	2300      	moveq	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01d      	beq.n	8002156 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x22e>
    	respondframe("LENERR");
 800211a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800211e:	4618      	mov	r0, r3
 8002120:	f004 ffe6 	bl	80070f0 <_ZNSaIcEC1Ev>
 8002124:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002128:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800212c:	494e      	ldr	r1, [pc, #312]	; (8002268 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x340>)
 800212e:	4618      	mov	r0, r3
 8002130:	f005 fcaa 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002134:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff faa1 	bl	8001680 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800213e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002142:	4618      	mov	r0, r3
 8002144:	f005 f9c5 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002148:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800214c:	4618      	mov	r0, r3
 800214e:	f004 ffd1 	bl	80070f4 <_ZNSaIcED1Ev>
    	//USART_send("\r\nLENERR\r\n DEBUGGIVEN "+std::to_string(length)+" != GATHERED "+std::to_string(fixedData.length())+"\r\n");
    	return false;
 8002152:	2400      	movs	r4, #0
 8002154:	e070      	b.n	8002238 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x310>
    }
    //checksuma
    std::string checksumString="0x"+message.substr(endidx-4,4);//0x dodane aby stoi z automatu konwertował na hex
 8002156:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 800215a:	3b04      	subs	r3, #4
 800215c:	461a      	mov	r2, r3
 800215e:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8002162:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002166:	f5a3 71a6 	sub.w	r1, r3, #332	; 0x14c
 800216a:	2304      	movs	r3, #4
 800216c:	6809      	ldr	r1, [r1, #0]
 800216e:	f005 fcc3 	bl	8007af8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
 8002172:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002176:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800217a:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 800217e:	493b      	ldr	r1, [pc, #236]	; (800226c <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x344>)
 8002180:	4618      	mov	r0, r3
 8002182:	f001 f920 	bl	80033c6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8002186:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800218a:	4618      	mov	r0, r3
 800218c:	f005 f9a1 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    uint16_t packetchecksum=static_cast<uint16_t>(std::stoi(checksumString, 0, 0));
 8002190:	f107 0310 	add.w	r3, r7, #16
 8002194:	2200      	movs	r2, #0
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe ff55 	bl	8001048 <_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPji>
 800219e:	4603      	mov	r3, r0
 80021a0:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140
    //USART_send("DEBUG:ChecksumGathered: "+std::to_string(packetchecksum)+"\r\n");

    //sprawdzanie poprawnosci checksumy
      if(calculateCRC16(command+fixedData)==packetchecksum){
 80021a4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80021a8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80021ac:	f897 1143 	ldrb.w	r1, [r7, #323]	; 0x143
 80021b0:	4618      	mov	r0, r3
 80021b2:	f001 f9c9 	bl	8003548 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EES5_RKS8_>
 80021b6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff f8e0 	bl	8001380 <_Z14calculateCRC16RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80021c0:	4603      	mov	r3, r0
 80021c2:	461a      	mov	r2, r3
 80021c4:	f8b7 3140 	ldrh.w	r3, [r7, #320]	; 0x140
 80021c8:	4293      	cmp	r3, r2
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2dc      	uxtb	r4, r3
 80021d2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80021d6:	4618      	mov	r0, r3
 80021d8:	f005 f97b 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80021dc:	2c00      	cmp	r4, #0
 80021de:	d009      	beq.n	80021f4 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2cc>
    	//sprawdzanie komendy i danych po potwierdzeniu zgodności
    	processcmd(command, fixedData);
 80021e0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80021e4:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 80021e8:	4611      	mov	r1, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fb4c 	bl	8001888 <_Z10processcmdcRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
    	return true;
 80021f0:	2401      	movs	r4, #1
 80021f2:	e01c      	b.n	800222e <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x306>
    }else{//błąd w obliczeniach checksumy
    	respondframe("CVCERR");
 80021f4:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80021f8:	4618      	mov	r0, r3
 80021fa:	f004 ff79 	bl	80070f0 <_ZNSaIcEC1Ev>
 80021fe:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8002202:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8002206:	491a      	ldr	r1, [pc, #104]	; (8002270 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x348>)
 8002208:	4618      	mov	r0, r3
 800220a:	f005 fc3d 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800220e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fa34 	bl	8001680 <_Z12respondframeNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002218:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800221c:	4618      	mov	r0, r3
 800221e:	f005 f958 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002222:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8002226:	4618      	mov	r0, r3
 8002228:	f004 ff64 	bl	80070f4 <_ZNSaIcED1Ev>
    	return false;
 800222c:	2400      	movs	r4, #0
    }
}
 800222e:	f107 0310 	add.w	r3, r7, #16
 8002232:	4618      	mov	r0, r3
 8002234:	f005 f94d 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002238:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800223c:	4618      	mov	r0, r3
 800223e:	f005 f948 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002242:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002246:	4618      	mov	r0, r3
 8002248:	f005 f943 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800224c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002250:	4618      	mov	r0, r3
 8002252:	f005 f93e 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002256:	4623      	mov	r3, r4
 8002258:	4618      	mov	r0, r3
 800225a:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 800225e:	46bd      	mov	sp, r7
 8002260:	bd90      	pop	{r4, r7, pc}
 8002262:	bf00      	nop
 8002264:	0800c388 	.word	0x0800c388
 8002268:	0800c3fc 	.word	0x0800c3fc
 800226c:	0800c404 	.word	0x0800c404
 8002270:	0800c408 	.word	0x0800c408

08002274 <_Z22ADC_DMA_updateAveragesv>:
float POTBufferMin,POTBufferMax,POTBufNormAvg;
uint16_t chn1=0,chn2=0,ADC_DMA_Buffer[ADC_DMABUFFERSIZE*2]={0};
uint8_t convcompl=0;
//TODO: Upewnij się że bufor jest wypełniany w ten sposób, NIE JEST! Do naprawy.

void ADC_DMA_updateAverages() {
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
	uint16_t valid_entries=0;
 800227a:	2300      	movs	r3, #0
 800227c:	81fb      	strh	r3, [r7, #14]
	float tmpc1avg,tmpc2avg;
    for (int i = 0; i < ADC_DMABUFFERSIZE-1 * 2; i += 2) {
 800227e:	2300      	movs	r3, #0
 8002280:	603b      	str	r3, [r7, #0]
 8002282:	e02f      	b.n	80022e4 <_Z22ADC_DMA_updateAveragesv+0x70>
        if (ADC_DMA_Buffer[i] == 0 || ADC_DMA_Buffer[i + 1] == 0) {
 8002284:	4a2c      	ldr	r2, [pc, #176]	; (8002338 <_Z22ADC_DMA_updateAveragesv+0xc4>)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d02d      	beq.n	80022ec <_Z22ADC_DMA_updateAveragesv+0x78>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	3301      	adds	r3, #1
 8002294:	4a28      	ldr	r2, [pc, #160]	; (8002338 <_Z22ADC_DMA_updateAveragesv+0xc4>)
 8002296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d026      	beq.n	80022ec <_Z22ADC_DMA_updateAveragesv+0x78>
            break;//zakończ jeżeli którykolwiek z kanałów ma 0
        }

        tmpc1avg += ADC_DMA_Buffer[i]; //dodawanie do średniej.
 800229e:	4a26      	ldr	r2, [pc, #152]	; (8002338 <_Z22ADC_DMA_updateAveragesv+0xc4>)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022a6:	ee07 3a90 	vmov	s15, r3
 80022aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ae:	ed97 7a02 	vldr	s14, [r7, #8]
 80022b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b6:	edc7 7a02 	vstr	s15, [r7, #8]
        tmpc2avg += ADC_DMA_Buffer[i + 1];
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	3301      	adds	r3, #1
 80022be:	4a1e      	ldr	r2, [pc, #120]	; (8002338 <_Z22ADC_DMA_updateAveragesv+0xc4>)
 80022c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022c4:	ee07 3a90 	vmov	s15, r3
 80022c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80022d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d4:	edc7 7a01 	vstr	s15, [r7, #4]
        valid_entries++;
 80022d8:	89fb      	ldrh	r3, [r7, #14]
 80022da:	3301      	adds	r3, #1
 80022dc:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < ADC_DMABUFFERSIZE-1 * 2; i += 2) {
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	3302      	adds	r3, #2
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80022ea:	dbcb      	blt.n	8002284 <_Z22ADC_DMA_updateAveragesv+0x10>
    }

    // nie dziel przez zero lol
    if (valid_entries > 0) {
 80022ec:	89fb      	ldrh	r3, [r7, #14]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01b      	beq.n	800232a <_Z22ADC_DMA_updateAveragesv+0xb6>
        tmpc1avg /= valid_entries;
 80022f2:	89fb      	ldrh	r3, [r7, #14]
 80022f4:	ee07 3a90 	vmov	s15, r3
 80022f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022fc:	edd7 6a02 	vldr	s13, [r7, #8]
 8002300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002304:	edc7 7a02 	vstr	s15, [r7, #8]
        tmpc2avg /= valid_entries;
 8002308:	89fb      	ldrh	r3, [r7, #14]
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002312:	edd7 6a01 	vldr	s13, [r7, #4]
 8002316:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800231a:	edc7 7a01 	vstr	s15, [r7, #4]
        c1avg=tmpc1avg;
 800231e:	4a07      	ldr	r2, [pc, #28]	; (800233c <_Z22ADC_DMA_updateAveragesv+0xc8>)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	6013      	str	r3, [r2, #0]
        c2avg=tmpc2avg;
 8002324:	4a06      	ldr	r2, [pc, #24]	; (8002340 <_Z22ADC_DMA_updateAveragesv+0xcc>)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6013      	str	r3, [r2, #0]
    }
}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	2000233c 	.word	0x2000233c
 800233c:	2000231c 	.word	0x2000231c
 8002340:	20002320 	.word	0x20002320

08002344 <_Z13compareUint16PKvS0_>:
int compareUint16(const void* a, const void* b) {
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
    return (*(uint16_t*)a - *(uint16_t*)b);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	1ad3      	subs	r3, r2, r3
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <_Z21extractAndSortChannelPti>:
int extractAndSortChannel(uint16_t* channel_buffer, int channel_index) {
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
    int extracted_entries = 0;//zapamiętaj ile jest prawidłowych wartości
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < ADC_DMABUFFERSIZE; ++i) {
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	e018      	b.n	80023ae <_Z21extractAndSortChannelPti+0x46>
        channel_buffer[i] = ADC_DMA_Buffer[i * 2 + channel_index];
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	005a      	lsls	r2, r3, #1
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	441a      	add	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	440b      	add	r3, r1
 800238c:	490f      	ldr	r1, [pc, #60]	; (80023cc <_Z21extractAndSortChannelPti+0x64>)
 800238e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002392:	801a      	strh	r2, [r3, #0]
        if (channel_buffer[i] != 0) {
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	4413      	add	r3, r2
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <_Z21extractAndSortChannelPti+0x40>
            extracted_entries++;//zlicz ilość prawidłowych nie zerowych wpisów
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	3301      	adds	r3, #1
 80023a6:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < ADC_DMABUFFERSIZE; ++i) {
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	3301      	adds	r3, #1
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023b4:	dbe2      	blt.n	800237c <_Z21extractAndSortChannelPti+0x14>
        }
    }

    // sortowanie
    qsort(channel_buffer, extracted_entries, sizeof(uint16_t), compareUint16);
 80023b6:	68f9      	ldr	r1, [r7, #12]
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <_Z21extractAndSortChannelPti+0x68>)
 80023ba:	2202      	movs	r2, #2
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f006 fbc5 	bl	8008b4c <qsort>

    return extracted_entries;
 80023c2:	68fb      	ldr	r3, [r7, #12]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	2000233c 	.word	0x2000233c
 80023d0:	08002345 	.word	0x08002345

080023d4 <_Z13calculateMeanPti>:


int calculateMean(uint16_t* sorted_buffer, int entries) {
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
    if (entries == 0) {
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <_Z13calculateMeanPti+0x14>
        return 0;  // Avoid division by zero
 80023e4:	2300      	movs	r3, #0
 80023e6:	e017      	b.n	8002418 <_Z13calculateMeanPti+0x44>
    }
    return (sorted_buffer[entries / 2 - 1] + sorted_buffer[entries / 2]) / 2;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	0fda      	lsrs	r2, r3, #31
 80023ec:	4413      	add	r3, r2
 80023ee:	105b      	asrs	r3, r3, #1
 80023f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80023f4:	3b01      	subs	r3, #1
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	4413      	add	r3, r2
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	4619      	mov	r1, r3
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	0fda      	lsrs	r2, r3, #31
 8002404:	4413      	add	r3, r2
 8002406:	105b      	asrs	r3, r3, #1
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	440b      	add	r3, r1
 8002412:	0fda      	lsrs	r2, r3, #31
 8002414:	4413      	add	r3, r2
 8002416:	105b      	asrs	r3, r3, #1
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <_Z19ADC_DMA_updateMeansv>:
void ADC_DMA_updateMeans() {
 8002424:	b580      	push	{r7, lr}
 8002426:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 800242a:	af00      	add	r7, sp, #0
		uint16_t channel1_buffer[ADC_DMABUFFERSIZE];
	    uint16_t channel2_buffer[ADC_DMABUFFERSIZE];

	    int entries_channel1 = extractAndSortChannel(channel1_buffer, 0);
 800242c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002430:	2100      	movs	r1, #0
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff ff98 	bl	8002368 <_Z21extractAndSortChannelPti>
 8002438:	f8c7 0804 	str.w	r0, [r7, #2052]	; 0x804
	    int entries_channel2 = extractAndSortChannel(channel2_buffer, 1);
 800243c:	463b      	mov	r3, r7
 800243e:	2101      	movs	r1, #1
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff91 	bl	8002368 <_Z21extractAndSortChannelPti>
 8002446:	f8c7 0800 	str.w	r0, [r7, #2048]	; 0x800

	    // Calculate mean for each channel using the middle values
	    c1med = calculateMean(channel1_buffer, entries_channel1);
 800244a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800244e:	f8d7 1804 	ldr.w	r1, [r7, #2052]	; 0x804
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ffbe 	bl	80023d4 <_Z13calculateMeanPti>
 8002458:	ee07 0a90 	vmov	s15, r0
 800245c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002460:	4b0a      	ldr	r3, [pc, #40]	; (800248c <_Z19ADC_DMA_updateMeansv+0x68>)
 8002462:	edc3 7a00 	vstr	s15, [r3]
	    c2med = calculateMean(channel2_buffer, entries_channel2);
 8002466:	463b      	mov	r3, r7
 8002468:	f8d7 1800 	ldr.w	r1, [r7, #2048]	; 0x800
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ffb1 	bl	80023d4 <_Z13calculateMeanPti>
 8002472:	ee07 0a90 	vmov	s15, r0
 8002476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800247a:	4b05      	ldr	r3, [pc, #20]	; (8002490 <_Z19ADC_DMA_updateMeansv+0x6c>)
 800247c:	edc3 7a00 	vstr	s15, [r3]
}
 8002480:	bf00      	nop
 8002482:	f607 0708 	addw	r7, r7, #2056	; 0x808
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20002324 	.word	0x20002324
 8002490:	20002328 	.word	0x20002328

08002494 <_Z15normaliseADCOutv>:
void normaliseADCOut(){
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
	POTBufNormAvg=(c1avg-POTBufferMin)/(POTBufferMax-POTBufferMin);
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <_Z15normaliseADCOutv+0x38>)
 800249a:	ed93 7a00 	vldr	s14, [r3]
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <_Z15normaliseADCOutv+0x3c>)
 80024a0:	edd3 7a00 	vldr	s15, [r3]
 80024a4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024a8:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <_Z15normaliseADCOutv+0x40>)
 80024aa:	ed93 7a00 	vldr	s14, [r3]
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <_Z15normaliseADCOutv+0x3c>)
 80024b0:	edd3 7a00 	vldr	s15, [r3]
 80024b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <_Z15normaliseADCOutv+0x44>)
 80024be:	edc3 7a00 	vstr	s15, [r3]
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	2000231c 	.word	0x2000231c
 80024d0:	20002330 	.word	0x20002330
 80024d4:	20002334 	.word	0x20002334
 80024d8:	20002338 	.word	0x20002338

080024dc <_Z14ADC_DMA_UPDATEv>:
bool ReadyToUpdateAvg=false;
void ADC_DMA_UPDATE(){//TODO: figure this out
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
	ADC_DMA_updateAverages();
 80024e0:	f7ff fec8 	bl	8002274 <_Z22ADC_DMA_updateAveragesv>
	if(convcompl){
 80024e4:	4b15      	ldr	r3, [pc, #84]	; (800253c <_Z14ADC_DMA_UPDATEv+0x60>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d021      	beq.n	8002530 <_Z14ADC_DMA_UPDATEv+0x54>
		if(c1avg<POTBufferMin)POTBufferMin=c1avg;
 80024ec:	4b14      	ldr	r3, [pc, #80]	; (8002540 <_Z14ADC_DMA_UPDATEv+0x64>)
 80024ee:	ed93 7a00 	vldr	s14, [r3]
 80024f2:	4b14      	ldr	r3, [pc, #80]	; (8002544 <_Z14ADC_DMA_UPDATEv+0x68>)
 80024f4:	edd3 7a00 	vldr	s15, [r3]
 80024f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002500:	d503      	bpl.n	800250a <_Z14ADC_DMA_UPDATEv+0x2e>
 8002502:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <_Z14ADC_DMA_UPDATEv+0x64>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a0f      	ldr	r2, [pc, #60]	; (8002544 <_Z14ADC_DMA_UPDATEv+0x68>)
 8002508:	6013      	str	r3, [r2, #0]
		if(c1avg>POTBufferMax)POTBufferMax=c1avg;
 800250a:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <_Z14ADC_DMA_UPDATEv+0x64>)
 800250c:	ed93 7a00 	vldr	s14, [r3]
 8002510:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <_Z14ADC_DMA_UPDATEv+0x6c>)
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800251a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251e:	dd03      	ble.n	8002528 <_Z14ADC_DMA_UPDATEv+0x4c>
 8002520:	4b07      	ldr	r3, [pc, #28]	; (8002540 <_Z14ADC_DMA_UPDATEv+0x64>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a08      	ldr	r2, [pc, #32]	; (8002548 <_Z14ADC_DMA_UPDATEv+0x6c>)
 8002526:	6013      	str	r3, [r2, #0]
		normaliseADCOut();
 8002528:	f7ff ffb4 	bl	8002494 <_Z15normaliseADCOutv>
		ADC_DMA_updateMeans();
 800252c:	f7ff ff7a 	bl	8002424 <_Z19ADC_DMA_updateMeansv>
	}
	ReadyToUpdateAvg=false;
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <_Z14ADC_DMA_UPDATEv+0x70>)
 8002532:	2200      	movs	r2, #0
 8002534:	701a      	strb	r2, [r3, #0]
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20002b3c 	.word	0x20002b3c
 8002540:	2000231c 	.word	0x2000231c
 8002544:	20002330 	.word	0x20002330
 8002548:	20002334 	.word	0x20002334
 800254c:	20002b3d 	.word	0x20002b3d

08002550 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	if(!convcompl)convcompl=1;//doszło do konwersji na całej długości bufora
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <HAL_ADC_ConvCpltCallback+0x28>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d102      	bne.n	8002566 <HAL_ADC_ConvCpltCallback+0x16>
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_ADC_ConvCpltCallback+0x28>)
 8002562:	2201      	movs	r2, #1
 8002564:	701a      	strb	r2, [r3, #0]
	ReadyToUpdateAvg=true;
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_ADC_ConvCpltCallback+0x2c>)
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	20002b3c 	.word	0x20002b3c
 800257c:	20002b3d 	.word	0x20002b3d

08002580 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
	if(!convcompl)POTBufferMin=ADC_DMA_Buffer[0];//inicjalizacja min max
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d108      	bne.n	80025a2 <HAL_ADC_ConvHalfCpltCallback+0x22>
 8002590:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	ee07 3a90 	vmov	s15, r3
 8002598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800259c:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 800259e:	edc3 7a00 	vstr	s15, [r3]
	if(!convcompl)POTBufferMax=ADC_DMA_Buffer[0];
 80025a2:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d108      	bne.n	80025bc <HAL_ADC_ConvHalfCpltCallback+0x3c>
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025b6:	4b09      	ldr	r3, [pc, #36]	; (80025dc <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 80025b8:	edc3 7a00 	vstr	s15, [r3]
	ReadyToUpdateAvg=true;
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20002b3c 	.word	0x20002b3c
 80025d4:	2000233c 	.word	0x2000233c
 80025d8:	20002330 	.word	0x20002330
 80025dc:	20002334 	.word	0x20002334
 80025e0:	20002b3d 	.word	0x20002b3d

080025e4 <HAL_GPIO_EXTI_Callback>:

float firingcounter=1;
//uint8_t Firingstate=0;//0-gasvalvesopen/1-waitforgasmix/2-sparkplugignite/3-notfiring
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	80fb      	strh	r3, [r7, #6]
	ButtonPresses++;
 80025ee:	4b21      	ldr	r3, [pc, #132]	; (8002674 <HAL_GPIO_EXTI_Callback+0x90>)
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	3301      	adds	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <HAL_GPIO_EXTI_Callback+0x90>)
 80025f8:	801a      	strh	r2, [r3, #0]
	switch(GPIO_Pin){//TODO: EXTI przycisk debounce
 80025fa:	88fb      	ldrh	r3, [r7, #6]
 80025fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002600:	d003      	beq.n	800260a <HAL_GPIO_EXTI_Callback+0x26>
 8002602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002606:	d01c      	beq.n	8002642 <HAL_GPIO_EXTI_Callback+0x5e>
 8002608:	e02c      	b.n	8002664 <HAL_GPIO_EXTI_Callback+0x80>
	case FB_Pin://przerwanie wykonane przez przycisk fire
		if(HAL_GPIO_ReadPin(FB_GPIO_Port, FB_Pin)==GPIO_PIN_SET){
 800260a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800260e:	481a      	ldr	r0, [pc, #104]	; (8002678 <HAL_GPIO_EXTI_Callback+0x94>)
 8002610:	f002 ff8a 	bl	8005528 <HAL_GPIO_ReadPin>
 8002614:	4603      	mov	r3, r0
 8002616:	2b01      	cmp	r3, #1
 8002618:	bf0c      	ite	eq
 800261a:	2301      	moveq	r3, #1
 800261c:	2300      	movne	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_GPIO_EXTI_Callback+0x56>
			//wykryto fire
			FBpressed=1;
 8002624:	4b15      	ldr	r3, [pc, #84]	; (800267c <HAL_GPIO_EXTI_Callback+0x98>)
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]
			firingcounter=1;
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <HAL_GPIO_EXTI_Callback+0x9c>)
 800262c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002630:	601a      	str	r2, [r3, #0]
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002632:	2017      	movs	r0, #23
 8002634:	f002 f9c7 	bl	80049c6 <HAL_NVIC_DisableIRQ>
		}else{
			//wykryto niefire
			FBpressed=0;
		}
		break;
 8002638:	e017      	b.n	800266a <HAL_GPIO_EXTI_Callback+0x86>
			FBpressed=0;
 800263a:	4b10      	ldr	r3, [pc, #64]	; (800267c <HAL_GPIO_EXTI_Callback+0x98>)
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
		break;
 8002640:	e013      	b.n	800266a <HAL_GPIO_EXTI_Callback+0x86>
	case B1_Pin://przerwanie wykonane przez przycisk lock
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==GPIO_PIN_SET){
 8002642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002646:	480f      	ldr	r0, [pc, #60]	; (8002684 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002648:	f002 ff6e 	bl	8005528 <HAL_GPIO_ReadPin>
 800264c:	4603      	mov	r3, r0
 800264e:	2b01      	cmp	r3, #1
 8002650:	bf0c      	ite	eq
 8002652:	2301      	moveq	r3, #1
 8002654:	2300      	movne	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_GPIO_EXTI_Callback+0x84>
				LOCKpressed=1;
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <HAL_GPIO_EXTI_Callback+0xa4>)
 800265e:	2201      	movs	r2, #1
 8002660:	701a      	strb	r2, [r3, #0]
				//USART_send("\r\nDEBUG: LOCKPRESSED\r\n");
				//hardcloseallvalves();
				}else{

			}
		break;
 8002662:	e001      	b.n	8002668 <HAL_GPIO_EXTI_Callback+0x84>
	default:
		__NOP();
 8002664:	bf00      	nop
		break;
 8002666:	e000      	b.n	800266a <HAL_GPIO_EXTI_Callback+0x86>
		break;
 8002668:	bf00      	nop
	}

}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	2000232e 	.word	0x2000232e
 8002678:	40020000 	.word	0x40020000
 800267c:	2000232c 	.word	0x2000232c
 8002680:	20000014 	.word	0x20000014
 8002684:	40020800 	.word	0x40020800
 8002688:	2000232d 	.word	0x2000232d

0800268c <_Z18hardcloseallvalvesv>:
void hardcloseallvalves(){
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GV_GPIO_Port, GV_Pin, GPIO_PIN_RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	2180      	movs	r1, #128	; 0x80
 8002694:	4807      	ldr	r0, [pc, #28]	; (80026b4 <_Z18hardcloseallvalvesv+0x28>)
 8002696:	f002 ff5f 	bl	8005558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OV_GPIO_Port, OV_Pin, GPIO_PIN_RESET);
 800269a:	2200      	movs	r2, #0
 800269c:	2140      	movs	r1, #64	; 0x40
 800269e:	4806      	ldr	r0, [pc, #24]	; (80026b8 <_Z18hardcloseallvalvesv+0x2c>)
 80026a0:	f002 ff5a 	bl	8005558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SP_GPIO_Port, SP_Pin, GPIO_PIN_RESET);
 80026a4:	2200      	movs	r2, #0
 80026a6:	2180      	movs	r1, #128	; 0x80
 80026a8:	4804      	ldr	r0, [pc, #16]	; (80026bc <_Z18hardcloseallvalvesv+0x30>)
 80026aa:	f002 ff55 	bl	8005558 <HAL_GPIO_WritePin>
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40020800 	.word	0x40020800
 80026b8:	40020400 	.word	0x40020400
 80026bc:	40020000 	.word	0x40020000

080026c0 <_Z17switchfiringstatev>:
enum firingstateenum{GasValvesOpen,WaitForGasMix,SparkPlugIgnite,FiringDelay};
firingstateenum firingstate=GasValvesOpen;
float interval=GVOTIME;
void switchfiringstate(){
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
	switch(firingstate){
 80026c4:	4b46      	ldr	r3, [pc, #280]	; (80027e0 <_Z17switchfiringstatev+0x120>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	f200 8080 	bhi.w	80027ce <_Z17switchfiringstatev+0x10e>
 80026ce:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <_Z17switchfiringstatev+0x14>)
 80026d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d4:	080026e5 	.word	0x080026e5
 80026d8:	08002713 	.word	0x08002713
 80026dc:	08002741 	.word	0x08002741
 80026e0:	08002765 	.word	0x08002765
			case GasValvesOpen://otwarte zawory gazu
				HAL_GPIO_WritePin(GV_GPIO_Port, GV_Pin, GPIO_PIN_SET);
 80026e4:	2201      	movs	r2, #1
 80026e6:	2180      	movs	r1, #128	; 0x80
 80026e8:	483e      	ldr	r0, [pc, #248]	; (80027e4 <_Z17switchfiringstatev+0x124>)
 80026ea:	f002 ff35 	bl	8005558 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OV_GPIO_Port, OV_Pin, GPIO_PIN_SET);
 80026ee:	2201      	movs	r2, #1
 80026f0:	2140      	movs	r1, #64	; 0x40
 80026f2:	483d      	ldr	r0, [pc, #244]	; (80027e8 <_Z17switchfiringstatev+0x128>)
 80026f4:	f002 ff30 	bl	8005558 <HAL_GPIO_WritePin>
				interval=valvetime;
 80026f8:	4b3c      	ldr	r3, [pc, #240]	; (80027ec <_Z17switchfiringstatev+0x12c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	ee07 3a90 	vmov	s15, r3
 8002700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002704:	4b3a      	ldr	r3, [pc, #232]	; (80027f0 <_Z17switchfiringstatev+0x130>)
 8002706:	edc3 7a00 	vstr	s15, [r3]
				firingstate=WaitForGasMix;
 800270a:	4b35      	ldr	r3, [pc, #212]	; (80027e0 <_Z17switchfiringstatev+0x120>)
 800270c:	2201      	movs	r2, #1
 800270e:	701a      	strb	r2, [r3, #0]
				break;
 8002710:	e063      	b.n	80027da <_Z17switchfiringstatev+0x11a>
			case WaitForGasMix://zamkniete zawory, czekanie na mieszanke
				HAL_GPIO_WritePin(GV_GPIO_Port, GV_Pin, GPIO_PIN_RESET);
 8002712:	2200      	movs	r2, #0
 8002714:	2180      	movs	r1, #128	; 0x80
 8002716:	4833      	ldr	r0, [pc, #204]	; (80027e4 <_Z17switchfiringstatev+0x124>)
 8002718:	f002 ff1e 	bl	8005558 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(OV_GPIO_Port, OV_Pin, GPIO_PIN_RESET);
 800271c:	2200      	movs	r2, #0
 800271e:	2140      	movs	r1, #64	; 0x40
 8002720:	4831      	ldr	r0, [pc, #196]	; (80027e8 <_Z17switchfiringstatev+0x128>)
 8002722:	f002 ff19 	bl	8005558 <HAL_GPIO_WritePin>
				interval=timebetween;
 8002726:	4b33      	ldr	r3, [pc, #204]	; (80027f4 <_Z17switchfiringstatev+0x134>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	ee07 3a90 	vmov	s15, r3
 800272e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002732:	4b2f      	ldr	r3, [pc, #188]	; (80027f0 <_Z17switchfiringstatev+0x130>)
 8002734:	edc3 7a00 	vstr	s15, [r3]
				firingstate=SparkPlugIgnite;
 8002738:	4b29      	ldr	r3, [pc, #164]	; (80027e0 <_Z17switchfiringstatev+0x120>)
 800273a:	2202      	movs	r2, #2
 800273c:	701a      	strb	r2, [r3, #0]
				break;
 800273e:	e04c      	b.n	80027da <_Z17switchfiringstatev+0x11a>
			case SparkPlugIgnite://swieca w ruch, wyliczamy delay
				HAL_GPIO_WritePin(SP_GPIO_Port, SP_Pin, GPIO_PIN_SET);
 8002740:	2201      	movs	r2, #1
 8002742:	2180      	movs	r1, #128	; 0x80
 8002744:	482c      	ldr	r0, [pc, #176]	; (80027f8 <_Z17switchfiringstatev+0x138>)
 8002746:	f002 ff07 	bl	8005558 <HAL_GPIO_WritePin>
				interval=sparktime;
 800274a:	4b2c      	ldr	r3, [pc, #176]	; (80027fc <_Z17switchfiringstatev+0x13c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	ee07 3a90 	vmov	s15, r3
 8002752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002756:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <_Z17switchfiringstatev+0x130>)
 8002758:	edc3 7a00 	vstr	s15, [r3]
				firingstate=FiringDelay;
 800275c:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <_Z17switchfiringstatev+0x120>)
 800275e:	2203      	movs	r2, #3
 8002760:	701a      	strb	r2, [r3, #0]
				break;
 8002762:	e03a      	b.n	80027da <_Z17switchfiringstatev+0x11a>
			case FiringDelay://wszystko zamkniete, oczekujemy do nastepnego strzalu
				HAL_GPIO_WritePin(SP_GPIO_Port, SP_Pin, GPIO_PIN_RESET);
 8002764:	2200      	movs	r2, #0
 8002766:	2180      	movs	r1, #128	; 0x80
 8002768:	4823      	ldr	r0, [pc, #140]	; (80027f8 <_Z17switchfiringstatev+0x138>)
 800276a:	f002 fef5 	bl	8005558 <HAL_GPIO_WritePin>
				normaliseADCOut();
 800276e:	f7ff fe91 	bl	8002494 <_Z15normaliseADCOutv>
				realshotdelay=shotdelay*timemul*POTBufNormAvg;
 8002772:	4b23      	ldr	r3, [pc, #140]	; (8002800 <_Z17switchfiringstatev+0x140>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	ee07 3a90 	vmov	s15, r3
 800277a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800277e:	4b21      	ldr	r3, [pc, #132]	; (8002804 <_Z17switchfiringstatev+0x144>)
 8002780:	edd3 7a00 	vldr	s15, [r3]
 8002784:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002788:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <_Z17switchfiringstatev+0x148>)
 800278a:	edd3 7a00 	vldr	s15, [r3]
 800278e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002792:	4b1e      	ldr	r3, [pc, #120]	; (800280c <_Z17switchfiringstatev+0x14c>)
 8002794:	edc3 7a00 	vstr	s15, [r3]
				interval=realshotdelay;//powyżej zaktualizowanie i obliczenie czasu między strzałami
 8002798:	4b1c      	ldr	r3, [pc, #112]	; (800280c <_Z17switchfiringstatev+0x14c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a14      	ldr	r2, [pc, #80]	; (80027f0 <_Z17switchfiringstatev+0x130>)
 800279e:	6013      	str	r3, [r2, #0]
				if(HAL_GPIO_ReadPin(FB_GPIO_Port, FB_Pin)!=GPIO_PIN_SET){
 80027a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027a4:	4814      	ldr	r0, [pc, #80]	; (80027f8 <_Z17switchfiringstatev+0x138>)
 80027a6:	f002 febf 	bl	8005528 <HAL_GPIO_ReadPin>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	bf14      	ite	ne
 80027b0:	2301      	movne	r3, #1
 80027b2:	2300      	moveq	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <_Z17switchfiringstatev+0x106>
					FBpressed=0;
 80027ba:	4b15      	ldr	r3, [pc, #84]	; (8002810 <_Z17switchfiringstatev+0x150>)
 80027bc:	2200      	movs	r2, #0
 80027be:	701a      	strb	r2, [r3, #0]
					HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80027c0:	2017      	movs	r0, #23
 80027c2:	f002 f8f2 	bl	80049aa <HAL_NVIC_EnableIRQ>
				}

				firingstate=GasValvesOpen;
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <_Z17switchfiringstatev+0x120>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
				break;
 80027cc:	e005      	b.n	80027da <_Z17switchfiringstatev+0x11a>
			default:
				//jakim cudem tu jesteś powiedz ty to mi
				hardcloseallvalves();
 80027ce:	f7ff ff5d 	bl	800268c <_Z18hardcloseallvalvesv>
				interval=1000;
 80027d2:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <_Z17switchfiringstatev+0x130>)
 80027d4:	4a0f      	ldr	r2, [pc, #60]	; (8002814 <_Z17switchfiringstatev+0x154>)
 80027d6:	601a      	str	r2, [r3, #0]
				break;
 80027d8:	bf00      	nop
			}
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20002b3e 	.word	0x20002b3e
 80027e4:	40020800 	.word	0x40020800
 80027e8:	40020400 	.word	0x40020400
 80027ec:	20000008 	.word	0x20000008
 80027f0:	20000018 	.word	0x20000018
 80027f4:	20000004 	.word	0x20000004
 80027f8:	40020000 	.word	0x40020000
 80027fc:	2000000c 	.word	0x2000000c
 8002800:	20000000 	.word	0x20000000
 8002804:	20000010 	.word	0x20000010
 8002808:	20002338 	.word	0x20002338
 800280c:	20002318 	.word	0x20002318
 8002810:	2000232c 	.word	0x2000232c
 8002814:	447a0000 	.word	0x447a0000

08002818 <firingswitch>:
void firingswitch(){
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
	if(FBpressed){
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <firingswitch+0x44>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d018      	beq.n	8002856 <firingswitch+0x3e>
		if(firingcounter<=0){
 8002824:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <firingswitch+0x48>)
 8002826:	edd3 7a00 	vldr	s15, [r3]
 800282a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800282e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002832:	d806      	bhi.n	8002842 <firingswitch+0x2a>
			switchfiringstate();
 8002834:	f7ff ff44 	bl	80026c0 <_Z17switchfiringstatev>
			firingcounter=interval;
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <firingswitch+0x4c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a08      	ldr	r2, [pc, #32]	; (8002860 <firingswitch+0x48>)
 800283e:	6013      	str	r3, [r2, #0]
		}else{
			firingcounter--;
		}
	}

}
 8002840:	e009      	b.n	8002856 <firingswitch+0x3e>
			firingcounter--;
 8002842:	4b07      	ldr	r3, [pc, #28]	; (8002860 <firingswitch+0x48>)
 8002844:	edd3 7a00 	vldr	s15, [r3]
 8002848:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800284c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002850:	4b03      	ldr	r3, [pc, #12]	; (8002860 <firingswitch+0x48>)
 8002852:	edc3 7a00 	vstr	s15, [r3]
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	2000232c 	.word	0x2000232c
 8002860:	20000014 	.word	0x20000014
 8002864:	20000018 	.word	0x20000018

08002868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08e      	sub	sp, #56	; 0x38
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800286e:	f001 f9dd 	bl	8003c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002872:	f000 f8cd 	bl	8002a10 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002876:	f000 fa01 	bl	8002c7c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800287a:	f000 f9df 	bl	8002c3c <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 800287e:	f000 f9af 	bl	8002be0 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 8002882:	f000 f93d 	bl	8002b00 <_ZL12MX_ADC1_Initv>
  /* USER CODE BEGIN 2 */
  hardcloseallvalves();
 8002886:	f7ff ff01 	bl	800268c <_Z18hardcloseallvalvesv>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *) ADC_DMA_Buffer, ADC_DMABUFFERSIZE*2);
 800288a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800288e:	4955      	ldr	r1, [pc, #340]	; (80029e4 <main+0x17c>)
 8002890:	4855      	ldr	r0, [pc, #340]	; (80029e8 <main+0x180>)
 8002892:	f001 fb91 	bl	8003fb8 <HAL_ADC_Start_DMA>
  HAL_UART_Receive_IT(&huart2, &itemRx, 1);
 8002896:	2201      	movs	r2, #1
 8002898:	4954      	ldr	r1, [pc, #336]	; (80029ec <main+0x184>)
 800289a:	4855      	ldr	r0, [pc, #340]	; (80029f0 <main+0x188>)
 800289c:	f003 fd08 	bl	80062b0 <HAL_UART_Receive_IT>
  USART_send("\r\n----------------------\r\n  STM32 Gas Gun INIT\r\n----------------------\r\n");
 80028a0:	f107 031c 	add.w	r3, r7, #28
 80028a4:	4618      	mov	r0, r3
 80028a6:	f004 fc23 	bl	80070f0 <_ZNSaIcEC1Ev>
 80028aa:	f107 021c 	add.w	r2, r7, #28
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	4950      	ldr	r1, [pc, #320]	; (80029f4 <main+0x18c>)
 80028b2:	4618      	mov	r0, r3
 80028b4:	f005 f8e8 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe fc7a 	bl	80011b4 <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80028c0:	1d3b      	adds	r3, r7, #4
 80028c2:	4618      	mov	r0, r3
 80028c4:	f004 fe05 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80028c8:	f107 031c 	add.w	r3, r7, #28
 80028cc:	4618      	mov	r0, r3
 80028ce:	f004 fc11 	bl	80070f4 <_ZNSaIcED1Ev>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //todo: main loop
  FBpressed=1;
 80028d2:	4b49      	ldr	r3, [pc, #292]	; (80029f8 <main+0x190>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  if (rx.written()&&__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) != RESET) {
 80028d8:	4848      	ldr	r0, [pc, #288]	; (80029fc <main+0x194>)
 80028da:	f000 fe73 	bl	80035c4 <_ZN14CircularBufferILj4096EE7writtenEv>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00d      	beq.n	8002900 <main+0x98>
 80028e4:	4b42      	ldr	r3, [pc, #264]	; (80029f0 <main+0x188>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ee:	2b80      	cmp	r3, #128	; 0x80
 80028f0:	bf0c      	ite	eq
 80028f2:	2301      	moveq	r3, #1
 80028f4:	2300      	movne	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <main+0x98>
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <main+0x9a>
 8002900:	2300      	movs	r3, #0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00f      	beq.n	8002926 <main+0xbe>
	  	  USART_send(rx.read());
 8002906:	f107 0320 	add.w	r3, r7, #32
 800290a:	493c      	ldr	r1, [pc, #240]	; (80029fc <main+0x194>)
 800290c:	4618      	mov	r0, r3
 800290e:	f000 fe6c 	bl	80035ea <_ZN14CircularBufferILj4096EE4readB5cxx11Ev>
 8002912:	f107 0320 	add.w	r3, r7, #32
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fc4c 	bl	80011b4 <_Z10USART_sendNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800291c:	f107 0320 	add.w	r3, r7, #32
 8002920:	4618      	mov	r0, r3
 8002922:	f004 fdd6 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	  	}

	  if(ReadyToUpdateAvg){
 8002926:	4b36      	ldr	r3, [pc, #216]	; (8002a00 <main+0x198>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <main+0xca>
		  ADC_DMA_UPDATE();
 800292e:	f7ff fdd5 	bl	80024dc <_Z14ADC_DMA_UPDATEv>
	  }
	  if(frameMainBuffer.length()>250){
 8002932:	4834      	ldr	r0, [pc, #208]	; (8002a04 <main+0x19c>)
 8002934:	f004 fe0c 	bl	8007550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8002938:	4603      	mov	r3, r0
 800293a:	2bfa      	cmp	r3, #250	; 0xfa
 800293c:	bf8c      	ite	hi
 800293e:	2301      	movhi	r3, #1
 8002940:	2300      	movls	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <main+0xec>
		  //Jeżeli w buforze znajdzie się za dużo danych to czyścimy
		  frameMainBuffer.clear();
 8002948:	482e      	ldr	r0, [pc, #184]	; (8002a04 <main+0x19c>)
 800294a:	f004 fe2a 	bl	80075a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
		  FrameState=noInput;
 800294e:	4b2e      	ldr	r3, [pc, #184]	; (8002a08 <main+0x1a0>)
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
	  }
	  if(!rx.empty()){//jeżeli coś jest w buforze nie przeanalizowane
 8002954:	4829      	ldr	r0, [pc, #164]	; (80029fc <main+0x194>)
 8002956:	f000 fcab 	bl	80032b0 <_ZN14CircularBufferILj4096EE5emptyEv>
 800295a:	4603      	mov	r3, r0
 800295c:	f083 0301 	eor.w	r3, r3, #1
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d02e      	beq.n	80029c4 <main+0x15c>
	  readchar=rx.pop();
 8002966:	4825      	ldr	r0, [pc, #148]	; (80029fc <main+0x194>)
 8002968:	f000 fc76 	bl	8003258 <_ZN14CircularBufferILj4096EE3popEv>
 800296c:	4603      	mov	r3, r0
 800296e:	461a      	mov	r2, r3
 8002970:	4b26      	ldr	r3, [pc, #152]	; (8002a0c <main+0x1a4>)
 8002972:	701a      	strb	r2, [r3, #0]
	  if(readchar=='^'){//jeżeli znak start
 8002974:	4b25      	ldr	r3, [pc, #148]	; (8002a0c <main+0x1a4>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b5e      	cmp	r3, #94	; 0x5e
 800297a:	d10b      	bne.n	8002994 <main+0x12c>
	  		  frameMainBuffer.clear();//czyść bufor
 800297c:	4821      	ldr	r0, [pc, #132]	; (8002a04 <main+0x19c>)
 800297e:	f004 fe10 	bl	80075a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>
	  		  FrameState=startReceived;
 8002982:	4b21      	ldr	r3, [pc, #132]	; (8002a08 <main+0x1a0>)
 8002984:	2201      	movs	r2, #1
 8002986:	701a      	strb	r2, [r3, #0]
	  		  frameMainBuffer.push_back(readchar);//dodaj znak
 8002988:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <main+0x1a4>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	4619      	mov	r1, r3
 800298e:	481d      	ldr	r0, [pc, #116]	; (8002a04 <main+0x19c>)
 8002990:	f004 fe12 	bl	80075b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
	  	  }
	  	  if(FrameState==startReceived){//jeżeli doszedł znak początku
 8002994:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <main+0x1a0>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d113      	bne.n	80029c4 <main+0x15c>
	  		  if(readchar!='|'){//dopóki nie ma znaku końca dodawaj znaki normalnie
 800299c:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <main+0x1a4>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b7c      	cmp	r3, #124	; 0x7c
 80029a2:	d006      	beq.n	80029b2 <main+0x14a>
	  			  frameMainBuffer.push_back(readchar);
 80029a4:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <main+0x1a4>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	4816      	ldr	r0, [pc, #88]	; (8002a04 <main+0x19c>)
 80029ac:	f004 fe04 	bl	80075b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
 80029b0:	e008      	b.n	80029c4 <main+0x15c>
	  		  }else{
	  			  frameMainBuffer.push_back(readchar);
 80029b2:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <main+0x1a4>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	4619      	mov	r1, r3
 80029b8:	4812      	ldr	r0, [pc, #72]	; (8002a04 <main+0x19c>)
 80029ba:	f004 fdfd 	bl	80075b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
	  			  FrameState=frameReady;//ustaw flagę końca.
 80029be:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <main+0x1a0>)
 80029c0:	2203      	movs	r2, #3
 80029c2:	701a      	strb	r2, [r3, #0]
	  		  }
	  	  }
	  }

	  if(FrameState==frameReady)
 80029c4:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <main+0x1a0>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d185      	bne.n	80028d8 <main+0x70>
	   {
		    //USART_send("\r\n END CHAR FOUND\r\n");
	        //std::string msg = rx.popUntilIncl('|');
	        //przycinanie ramki
		  	//trimStartEndCharacters(msg, '^', '|');
		      trimStartEndCharacters(frameMainBuffer, '^', '|');
 80029cc:	227c      	movs	r2, #124	; 0x7c
 80029ce:	215e      	movs	r1, #94	; 0x5e
 80029d0:	480c      	ldr	r0, [pc, #48]	; (8002a04 <main+0x19c>)
 80029d2:	f7fe fca3 	bl	800131c <_Z22trimStartEndCharactersRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEcc>
	        //rozkoduj ramkę
	        //if(decodePAWNET(msg)){

		  	  if(decodePAWNET(frameMainBuffer)){
 80029d6:	480b      	ldr	r0, [pc, #44]	; (8002a04 <main+0x19c>)
 80029d8:	f7ff faa6 	bl	8001f28 <_Z12decodePAWNETRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
	        	//USART_send("\r\nDEBUG:MESSAGE DECODE SUCCESS\r\n");
	        }else{
	        	//jeżeli gdziekolwiek podczas rozkodowania wystąpi błąd
	        	//USART_send("\r\nDEBUG:MESSAGE DECODE FAIL\r\n");
	        }
	        FrameState=noInput;
 80029dc:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <main+0x1a0>)
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
	  if (rx.written()&&__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) != RESET) {
 80029e2:	e779      	b.n	80028d8 <main+0x70>
 80029e4:	2000233c 	.word	0x2000233c
 80029e8:	2000020c 	.word	0x2000020c
 80029ec:	200002f8 	.word	0x200002f8
 80029f0:	200002b4 	.word	0x200002b4
 80029f4:	0800c410 	.word	0x0800c410
 80029f8:	2000232c 	.word	0x2000232c
 80029fc:	200002fc 	.word	0x200002fc
 8002a00:	20002b3d 	.word	0x20002b3d
 8002a04:	20002b40 	.word	0x20002b40
 8002a08:	20002b59 	.word	0x20002b59
 8002a0c:	20002b58 	.word	0x20002b58

08002a10 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b094      	sub	sp, #80	; 0x50
 8002a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a16:	f107 031c 	add.w	r3, r7, #28
 8002a1a:	2234      	movs	r2, #52	; 0x34
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f006 ffad 	bl	800997e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a24:	f107 0308 	add.w	r3, r7, #8
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a34:	2300      	movs	r3, #0
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	4b2f      	ldr	r3, [pc, #188]	; (8002af8 <_Z18SystemClock_Configv+0xe8>)
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	4a2e      	ldr	r2, [pc, #184]	; (8002af8 <_Z18SystemClock_Configv+0xe8>)
 8002a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a42:	6413      	str	r3, [r2, #64]	; 0x40
 8002a44:	4b2c      	ldr	r3, [pc, #176]	; (8002af8 <_Z18SystemClock_Configv+0xe8>)
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	607b      	str	r3, [r7, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002a50:	2300      	movs	r3, #0
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	4b29      	ldr	r3, [pc, #164]	; (8002afc <_Z18SystemClock_Configv+0xec>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a5c:	4a27      	ldr	r2, [pc, #156]	; (8002afc <_Z18SystemClock_Configv+0xec>)
 8002a5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	4b25      	ldr	r3, [pc, #148]	; (8002afc <_Z18SystemClock_Configv+0xec>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a6c:	603b      	str	r3, [r7, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a70:	2302      	movs	r3, #2
 8002a72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a74:	2301      	movs	r3, #1
 8002a76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a78:	2310      	movs	r3, #16
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a80:	2300      	movs	r3, #0
 8002a82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002a84:	2310      	movs	r3, #16
 8002a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002a88:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002a8c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002a8e:	2304      	movs	r3, #4
 8002a90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002a92:	2302      	movs	r3, #2
 8002a94:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a96:	2302      	movs	r3, #2
 8002a98:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a9a:	f107 031c 	add.w	r3, r7, #28
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f003 f8d6 	bl	8005c50 <HAL_RCC_OscConfig>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bf14      	ite	ne
 8002aaa:	2301      	movne	r3, #1
 8002aac:	2300      	moveq	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <_Z18SystemClock_Configv+0xa8>
  {
    Error_Handler();
 8002ab4:	f000 f996 	bl	8002de4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ab8:	230f      	movs	r3, #15
 8002aba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002abc:	2302      	movs	r3, #2
 8002abe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ac8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ace:	f107 0308 	add.w	r3, r7, #8
 8002ad2:	2102      	movs	r1, #2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f002 fd71 	bl	80055bc <HAL_RCC_ClockConfig>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf14      	ite	ne
 8002ae0:	2301      	movne	r3, #1
 8002ae2:	2300      	moveq	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 8002aea:	f000 f97b 	bl	8002de4 <Error_Handler>
  }
}
 8002aee:	bf00      	nop
 8002af0:	3750      	adds	r7, #80	; 0x50
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40007000 	.word	0x40007000

08002b00 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b06:	463b      	mov	r3, r7
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002b12:	4b30      	ldr	r3, [pc, #192]	; (8002bd4 <_ZL12MX_ADC1_Initv+0xd4>)
 8002b14:	4a30      	ldr	r2, [pc, #192]	; (8002bd8 <_ZL12MX_ADC1_Initv+0xd8>)
 8002b16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002b18:	4b2e      	ldr	r3, [pc, #184]	; (8002bd4 <_ZL12MX_ADC1_Initv+0xd4>)
 8002b1a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b20:	4b2c      	ldr	r3, [pc, #176]	; (8002bd4 <_ZL12MX_ADC1_Initv+0xd4>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002b26:	4b2b      	ldr	r3, [pc, #172]	; (8002bd4 <_ZL12MX_ADC1_Initv+0xd4>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002b2c:	4b29      	ldr	r3, [pc, #164]	; (8002bd4 <_ZL12MX_ADC1_Initv+0xd4>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b32:	4b28      	ldr	r3, [pc, #160]	; (8002bd4 <_ZL12MX_ADC1_Initv+0xd4>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b3a:	4b26      	ldr	r3, [pc, #152]	; (8002bd4 <_ZL12MX_ADC1_Initv+0xd4>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b40:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <_ZL12MX_ADC1_Initv+0xd4>)
 8002b42:	4a26      	ldr	r2, [pc, #152]	; (8002bdc <_ZL12MX_ADC1_Initv+0xdc>)
 8002b44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b46:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <_ZL12MX_ADC1_Initv+0xd4>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002b4c:	4b21      	ldr	r3, [pc, #132]	; (8002bd4 <_ZL12MX_ADC1_Initv+0xd4>)
 8002b4e:	2202      	movs	r2, #2
 8002b50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002b52:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <_ZL12MX_ADC1_Initv+0xd4>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b5a:	4b1e      	ldr	r3, [pc, #120]	; (8002bd4 <_ZL12MX_ADC1_Initv+0xd4>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b60:	481c      	ldr	r0, [pc, #112]	; (8002bd4 <_ZL12MX_ADC1_Initv+0xd4>)
 8002b62:	f001 f8d5 	bl	8003d10 <HAL_ADC_Init>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	bf14      	ite	ne
 8002b6c:	2301      	movne	r3, #1
 8002b6e:	2300      	moveq	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 8002b76:	f000 f935 	bl	8002de4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002b82:	2307      	movs	r3, #7
 8002b84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b86:	463b      	mov	r3, r7
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4812      	ldr	r0, [pc, #72]	; (8002bd4 <_ZL12MX_ADC1_Initv+0xd4>)
 8002b8c:	f001 fb38 	bl	8004200 <HAL_ADC_ConfigChannel>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	bf14      	ite	ne
 8002b96:	2301      	movne	r3, #1
 8002b98:	2300      	moveq	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8002ba0:	f000 f920 	bl	8002de4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bac:	463b      	mov	r3, r7
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4808      	ldr	r0, [pc, #32]	; (8002bd4 <_ZL12MX_ADC1_Initv+0xd4>)
 8002bb2:	f001 fb25 	bl	8004200 <HAL_ADC_ConfigChannel>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	bf14      	ite	ne
 8002bbc:	2301      	movne	r3, #1
 8002bbe:	2300      	moveq	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <_ZL12MX_ADC1_Initv+0xca>
  {
    Error_Handler();
 8002bc6:	f000 f90d 	bl	8002de4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	2000020c 	.word	0x2000020c
 8002bd8:	40012000 	.word	0x40012000
 8002bdc:	0f000001 	.word	0x0f000001

08002be0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002be4:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002be6:	4a14      	ldr	r2, [pc, #80]	; (8002c38 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002be8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002bea:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c06:	220c      	movs	r2, #12
 8002c08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c10:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c16:	4807      	ldr	r0, [pc, #28]	; (8002c34 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002c18:	f003 fab8 	bl	800618c <HAL_UART_Init>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	bf14      	ite	ne
 8002c22:	2301      	movne	r3, #1
 8002c24:	2300      	moveq	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002c2c:	f000 f8da 	bl	8002de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c30:	bf00      	nop
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	200002b4 	.word	0x200002b4
 8002c38:	40004400 	.word	0x40004400

08002c3c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	607b      	str	r3, [r7, #4]
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <_ZL11MX_DMA_Initv+0x3c>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	4a0b      	ldr	r2, [pc, #44]	; (8002c78 <_ZL11MX_DMA_Initv+0x3c>)
 8002c4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c50:	6313      	str	r3, [r2, #48]	; 0x30
 8002c52:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <_ZL11MX_DMA_Initv+0x3c>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5a:	607b      	str	r3, [r7, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2100      	movs	r1, #0
 8002c62:	2038      	movs	r0, #56	; 0x38
 8002c64:	f001 fe85 	bl	8004972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002c68:	2038      	movs	r0, #56	; 0x38
 8002c6a:	f001 fe9e 	bl	80049aa <HAL_NVIC_EnableIRQ>

}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800

08002c7c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	; 0x28
 8002c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c82:	f107 0314 	add.w	r3, r7, #20
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	605a      	str	r2, [r3, #4]
 8002c8c:	609a      	str	r2, [r3, #8]
 8002c8e:	60da      	str	r2, [r3, #12]
 8002c90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	4b4f      	ldr	r3, [pc, #316]	; (8002dd4 <_ZL12MX_GPIO_Initv+0x158>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	4a4e      	ldr	r2, [pc, #312]	; (8002dd4 <_ZL12MX_GPIO_Initv+0x158>)
 8002c9c:	f043 0304 	orr.w	r3, r3, #4
 8002ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca2:	4b4c      	ldr	r3, [pc, #304]	; (8002dd4 <_ZL12MX_GPIO_Initv+0x158>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	4b48      	ldr	r3, [pc, #288]	; (8002dd4 <_ZL12MX_GPIO_Initv+0x158>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	4a47      	ldr	r2, [pc, #284]	; (8002dd4 <_ZL12MX_GPIO_Initv+0x158>)
 8002cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbe:	4b45      	ldr	r3, [pc, #276]	; (8002dd4 <_ZL12MX_GPIO_Initv+0x158>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <_ZL12MX_GPIO_Initv+0x158>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	4a40      	ldr	r2, [pc, #256]	; (8002dd4 <_ZL12MX_GPIO_Initv+0x158>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cda:	4b3e      	ldr	r3, [pc, #248]	; (8002dd4 <_ZL12MX_GPIO_Initv+0x158>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	4b3a      	ldr	r3, [pc, #232]	; (8002dd4 <_ZL12MX_GPIO_Initv+0x158>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	4a39      	ldr	r2, [pc, #228]	; (8002dd4 <_ZL12MX_GPIO_Initv+0x158>)
 8002cf0:	f043 0302 	orr.w	r3, r3, #2
 8002cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf6:	4b37      	ldr	r3, [pc, #220]	; (8002dd4 <_ZL12MX_GPIO_Initv+0x158>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SP_Pin, GPIO_PIN_RESET);
 8002d02:	2200      	movs	r2, #0
 8002d04:	21a0      	movs	r1, #160	; 0xa0
 8002d06:	4834      	ldr	r0, [pc, #208]	; (8002dd8 <_ZL12MX_GPIO_Initv+0x15c>)
 8002d08:	f002 fc26 	bl	8005558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GV_GPIO_Port, GV_Pin, GPIO_PIN_RESET);
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2180      	movs	r1, #128	; 0x80
 8002d10:	4832      	ldr	r0, [pc, #200]	; (8002ddc <_ZL12MX_GPIO_Initv+0x160>)
 8002d12:	f002 fc21 	bl	8005558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OV_GPIO_Port, OV_Pin, GPIO_PIN_RESET);
 8002d16:	2200      	movs	r2, #0
 8002d18:	2140      	movs	r1, #64	; 0x40
 8002d1a:	4831      	ldr	r0, [pc, #196]	; (8002de0 <_ZL12MX_GPIO_Initv+0x164>)
 8002d1c:	f002 fc1c 	bl	8005558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d26:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	4619      	mov	r1, r3
 8002d36:	4829      	ldr	r0, [pc, #164]	; (8002ddc <_ZL12MX_GPIO_Initv+0x160>)
 8002d38:	f002 fa62 	bl	8005200 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SP_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SP_Pin;
 8002d3c:	23a0      	movs	r3, #160	; 0xa0
 8002d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d40:	2301      	movs	r3, #1
 8002d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4c:	f107 0314 	add.w	r3, r7, #20
 8002d50:	4619      	mov	r1, r3
 8002d52:	4821      	ldr	r0, [pc, #132]	; (8002dd8 <_ZL12MX_GPIO_Initv+0x15c>)
 8002d54:	f002 fa54 	bl	8005200 <HAL_GPIO_Init>

  /*Configure GPIO pin : GV_Pin */
  GPIO_InitStruct.Pin = GV_Pin;
 8002d58:	2380      	movs	r3, #128	; 0x80
 8002d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d64:	2300      	movs	r3, #0
 8002d66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GV_GPIO_Port, &GPIO_InitStruct);
 8002d68:	f107 0314 	add.w	r3, r7, #20
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	481b      	ldr	r0, [pc, #108]	; (8002ddc <_ZL12MX_GPIO_Initv+0x160>)
 8002d70:	f002 fa46 	bl	8005200 <HAL_GPIO_Init>

  /*Configure GPIO pin : FB_Pin */
  GPIO_InitStruct.Pin = FB_Pin;
 8002d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002d7a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d80:	2302      	movs	r3, #2
 8002d82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FB_GPIO_Port, &GPIO_InitStruct);
 8002d84:	f107 0314 	add.w	r3, r7, #20
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4813      	ldr	r0, [pc, #76]	; (8002dd8 <_ZL12MX_GPIO_Initv+0x15c>)
 8002d8c:	f002 fa38 	bl	8005200 <HAL_GPIO_Init>

  /*Configure GPIO pin : OV_Pin */
  GPIO_InitStruct.Pin = OV_Pin;
 8002d90:	2340      	movs	r3, #64	; 0x40
 8002d92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d94:	2301      	movs	r3, #1
 8002d96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OV_GPIO_Port, &GPIO_InitStruct);
 8002da0:	f107 0314 	add.w	r3, r7, #20
 8002da4:	4619      	mov	r1, r3
 8002da6:	480e      	ldr	r0, [pc, #56]	; (8002de0 <_ZL12MX_GPIO_Initv+0x164>)
 8002da8:	f002 fa2a 	bl	8005200 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002dac:	2200      	movs	r2, #0
 8002dae:	2100      	movs	r1, #0
 8002db0:	2017      	movs	r0, #23
 8002db2:	f001 fdde 	bl	8004972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002db6:	2017      	movs	r0, #23
 8002db8:	f001 fdf7 	bl	80049aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	2028      	movs	r0, #40	; 0x28
 8002dc2:	f001 fdd6 	bl	8004972 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002dc6:	2028      	movs	r0, #40	; 0x28
 8002dc8:	f001 fdef 	bl	80049aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002dcc:	bf00      	nop
 8002dce:	3728      	adds	r7, #40	; 0x28
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40020000 	.word	0x40020000
 8002ddc:	40020800 	.word	0x40020800
 8002de0:	40020400 	.word	0x40020400

08002de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002de8:	b672      	cpsid	i
}
 8002dea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dec:	e7fe      	b.n	8002dec <Error_Handler+0x8>

08002dee <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	f006 fe7b 	bl	8009af0 <__errno>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	f006 fe75 	bl	8009af0 <__errno>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	f006 fe67 	bl	8009af0 <__errno>
 8002e22:	4603      	mov	r3, r0
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	bf0c      	ite	eq
 8002e2a:	2301      	moveq	r3, #1
 8002e2c:	2300      	movne	r3, #0
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8002e34:	f006 fe5c 	bl	8009af0 <__errno>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>:
      struct _Range_chk {
	  static bool
	  _S_chk(_TRet, std::false_type) { return false; }

	  static bool
	  _S_chk(_TRet __val, std::true_type) // only called when _Ret is int
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	7039      	strb	r1, [r7, #0]
	  {
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
 8002e54:	2300      	movs	r3, #0
	  }
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8002e62:	b590      	push	{r4, r7, lr}
 8002e64:	b08b      	sub	sp, #44	; 0x2c
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff ffba 	bl	8002dee <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8002e7a:	f107 0118 	add.w	r1, r7, #24
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	4798      	blx	r3
 8002e86:	6278      	str	r0, [r7, #36]	; 0x24

      if (__endptr == __str)
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d102      	bne.n	8002e96 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x34>
	std::__throw_invalid_argument(__name);
 8002e90:	68b8      	ldr	r0, [r7, #8]
 8002e92:	f004 f936 	bl	8007102 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8002e96:	f006 fe2b 	bl	8009af0 <__errno>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8002e9e:	2b22      	cmp	r3, #34	; 0x22
 8002ea0:	d006      	beq.n	8002eb0 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
 8002ea2:	4621      	mov	r1, r4
 8002ea4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ea6:	f7ff ffd0 	bl	8002e4a <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkElSt17integral_constantIbLb1EE>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x54>
 8002eb4:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5e>
	std::__throw_out_of_range(__name);
 8002eba:	68b8      	ldr	r0, [r7, #8]
 8002ebc:	f004 f927 	bl	800710e <_ZSt20__throw_out_of_rangePKc>
      else
	__ret = __tmp;
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	623b      	str	r3, [r7, #32]

      if (__idx)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d005      	beq.n	8002ed6 <_ZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x74>
	*__idx = __endptr - __str;
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	601a      	str	r2, [r3, #0]

      return __ret;
 8002ed6:	6a3c      	ldr	r4, [r7, #32]
    }
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff9a 	bl	8002e16 <_ZZN9__gnu_cxx6__stoaIlicJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8002ee2:	4623      	mov	r3, r4
    }
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	372c      	adds	r7, #44	; 0x2c
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd90      	pop	{r4, r7, pc}

08002eec <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>:
	_Save_errno() : _M_errno(errno) { errno = 0; }
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	f006 fdfc 	bl	8009af0 <__errno>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	f006 fdf6 	bl	8009af0 <__errno>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>:
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	f006 fde8 	bl	8009af0 <__errno>
 8002f20:	4603      	mov	r3, r0
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	bf0c      	ite	eq
 8002f28:	2301      	moveq	r3, #1
 8002f2a:	2300      	movne	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev+0x2a>
 8002f32:	f006 fddd 	bl	8009af0 <__errno>
 8002f36:	4602      	mov	r2, r0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEfSt17integral_constantIbLb0EE>:
	  _S_chk(_TRet, std::false_type) { return false; }
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002f52:	7038      	strb	r0, [r7, #0]
 8002f54:	2300      	movs	r3, #0
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
 8002f62:	b590      	push	{r4, r7, lr}
 8002f64:	b08b      	sub	sp, #44	; 0x2c
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
 8002f6e:	603b      	str	r3, [r7, #0]
      } const __save_errno;
 8002f70:	f107 0314 	add.w	r3, r7, #20
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ffb9 	bl	8002eec <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoC1Ev>
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
 8002f7a:	f107 0218 	add.w	r2, r7, #24
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4611      	mov	r1, r2
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	4798      	blx	r3
 8002f86:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
      if (__endptr == __str)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d102      	bne.n	8002f98 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x36>
	std::__throw_invalid_argument(__name);
 8002f92:	68b8      	ldr	r0, [r7, #8]
 8002f94:	f004 f8b5 	bl	8007102 <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
 8002f98:	f006 fdaa 	bl	8009af0 <__errno>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	681b      	ldr	r3, [r3, #0]
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 8002fa0:	2b22      	cmp	r3, #34	; 0x22
 8002fa2:	d007      	beq.n	8002fb4 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x52>
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002faa:	f7ff ffcd 	bl	8002f48 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN10_Range_chk6_S_chkEfSt17integral_constantIbLb0EE>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x56>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x58>
 8002fb8:	2300      	movs	r3, #0
      else if (errno == ERANGE
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x62>
	std::__throw_out_of_range(__name);
 8002fbe:	68b8      	ldr	r0, [r7, #8]
 8002fc0:	f004 f8a5 	bl	800710e <_ZSt20__throw_out_of_rangePKc>
	__ret = __tmp;
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	623b      	str	r3, [r7, #32]
      if (__idx)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d005      	beq.n	8002fda <_ZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x78>
	*__idx = __endptr - __str;
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	601a      	str	r2, [r3, #0]
      return __ret;
 8002fda:	6a3c      	ldr	r4, [r7, #32]
    }
 8002fdc:	f107 0314 	add.w	r3, r7, #20
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff ff97 	bl	8002f14 <_ZZN9__gnu_cxx6__stoaIffcJEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_EN11_Save_errnoD1Ev>
      return __ret;
 8002fe6:	ee07 4a90 	vmov	s15, r4
    }
 8002fea:	eeb0 0a67 	vmov.f32	s0, s15
 8002fee:	372c      	adds	r7, #44	; 0x2c
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd90      	pop	{r4, r7, pc}

08002ff4 <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 8002ffe:	2301      	movs	r3, #1
 8003000:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	fb03 f303 	mul.w	r3, r3, r3
 8003008:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	fb02 f303 	mul.w	r3, r2, r3
 800301c:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	429a      	cmp	r2, r3
 8003024:	d201      	bcs.n	800302a <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	e01d      	b.n	8003066 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	429a      	cmp	r2, r3
 8003030:	d202      	bcs.n	8003038 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	3301      	adds	r3, #1
 8003036:	e016      	b.n	8003066 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	429a      	cmp	r2, r3
 800303e:	d202      	bcs.n	8003046 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	3302      	adds	r3, #2
 8003044:	e00f      	b.n	8003066 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	429a      	cmp	r2, r3
 800304c:	d202      	bcs.n	8003054 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	3303      	adds	r3, #3
 8003052:	e008      	b.n	8003066 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	fbb2 f3f3 	udiv	r3, r2, r3
 800305c:	607b      	str	r3, [r7, #4]
	  __n += 4;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	3304      	adds	r3, #4
 8003062:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8003064:	e7db      	b.n	800301e <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 8003066:	4618      	mov	r0, r3
 8003068:	371c      	adds	r7, #28
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8003074:	b480      	push	{r7}
 8003076:	b089      	sub	sp, #36	; 0x24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	3b01      	subs	r3, #1
 8003084:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8003086:	e024      	b.n	80030d2 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x5e>
	{
	  auto const __num = (__val % 100) * 2;
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	4b23      	ldr	r3, [pc, #140]	; (8003118 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 800308c:	fba3 1302 	umull	r1, r3, r3, r2
 8003090:	095b      	lsrs	r3, r3, #5
 8003092:	2164      	movs	r1, #100	; 0x64
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	617b      	str	r3, [r7, #20]
	  __val /= 100;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a1d      	ldr	r2, [pc, #116]	; (8003118 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	68f9      	ldr	r1, [r7, #12]
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	440b      	add	r3, r1
 80030b4:	4919      	ldr	r1, [pc, #100]	; (800311c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80030b6:	5c8a      	ldrb	r2, [r1, r2]
 80030b8:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3b01      	subs	r3, #1
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4413      	add	r3, r2
 80030c2:	4916      	ldr	r1, [pc, #88]	; (800311c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	440a      	add	r2, r1
 80030c8:	7812      	ldrb	r2, [r2, #0]
 80030ca:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	3b02      	subs	r3, #2
 80030d0:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b63      	cmp	r3, #99	; 0x63
 80030d6:	d8d7      	bhi.n	8003088 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x14>
	}
      if (__val >= 10)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b09      	cmp	r3, #9
 80030dc:	d910      	bls.n	8003100 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	61bb      	str	r3, [r7, #24]
	  __first[1] = __digits[__num + 1];
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	3301      	adds	r3, #1
 80030ec:	490b      	ldr	r1, [pc, #44]	; (800311c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80030ee:	5c8a      	ldrb	r2, [r1, r2]
 80030f0:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 80030f2:	4a0a      	ldr	r2, [pc, #40]	; (800311c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	4413      	add	r3, r2
 80030f8:	781a      	ldrb	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 80030fe:	e005      	b.n	800310c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	3330      	adds	r3, #48	; 0x30
 8003106:	b2da      	uxtb	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	701a      	strb	r2, [r3, #0]
    }
 800310c:	bf00      	nop
 800310e:	3724      	adds	r7, #36	; 0x24
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	51eb851f 	.word	0x51eb851f
 800311c:	0800c460 	.word	0x0800c460

08003120 <_ZN14CircularBufferILj4096EE4sizeEv>:
  std::size_t size() {
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
    if (tail >= head) return tail - head;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d309      	bcc.n	8003150 <_ZN14CircularBufferILj4096EE4sizeEv+0x30>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	e00a      	b.n	8003166 <_ZN14CircularBufferILj4096EE4sizeEv+0x46>
    return maxSize - head - tail;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4413      	add	r3, r2
 8003162:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
  }
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <_ZN14CircularBufferILj4096EE8capacityEv>:
  uint32_t capacity(void) {
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
      return maxSize;
 800317a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    }
 800317e:	4618      	mov	r0, r3
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <_ZN9__gnu_cxxneIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800318a:	b590      	push	{r4, r7, lr}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fa51 	bl	800363c <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800319a:	4603      	mov	r3, r0
 800319c:	681c      	ldr	r4, [r3, #0]
 800319e:	6838      	ldr	r0, [r7, #0]
 80031a0:	f000 fa4c 	bl	800363c <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80031a4:	4603      	mov	r3, r0
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	429c      	cmp	r4, r3
 80031aa:	bf14      	ite	ne
 80031ac:	2301      	movne	r3, #1
 80031ae:	2300      	moveq	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd90      	pop	{r4, r7, pc}

080031ba <_ZN9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
	++_M_current;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	601a      	str	r2, [r3, #0]
	return *this;
 80031cc:	687b      	ldr	r3, [r7, #4]
      }
 80031ce:	4618      	mov	r0, r3
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <_ZN14CircularBufferILj4096EE4pushEh>:
  void push(uint8_t item) {
 80031f2:	b480      	push	{r7}
 80031f4:	b085      	sub	sp, #20
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	460b      	mov	r3, r1
 80031fc:	70fb      	strb	r3, [r7, #3]
    if (tail == (head - 1) % maxSize) return;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3b01      	subs	r3, #1
 8003210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003214:	429a      	cmp	r2, r3
 8003216:	d019      	beq.n	800324c <_ZN14CircularBufferILj4096EE4pushEh+0x5a>
    buffer[tail] = item;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	78f9      	ldrb	r1, [r7, #3]
 8003224:	54d1      	strb	r1, [r2, r3]
    volatile std::size_t temp = (tail + 1) % maxSize;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	3301      	adds	r3, #1
 8003230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003234:	60fb      	str	r3, [r7, #12]
    tail = temp;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800323e:	6053      	str	r3, [r2, #4]
    writeFlag = Char;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003246:	2201      	movs	r2, #1
 8003248:	721a      	strb	r2, [r3, #8]
 800324a:	e000      	b.n	800324e <_ZN14CircularBufferILj4096EE4pushEh+0x5c>
    if (tail == (head - 1) % maxSize) return;
 800324c:	bf00      	nop
  }
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <_ZN14CircularBufferILj4096EE3popEv>:
  uint8_t pop() {
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
	if (empty()) return 0;
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f825 	bl	80032b0 <_ZN14CircularBufferILj4096EE5emptyEv>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <_ZN14CircularBufferILj4096EE3popEv+0x18>
 800326c:	2300      	movs	r3, #0
 800326e:	e01b      	b.n	80032a8 <_ZN14CircularBufferILj4096EE3popEv+0x50>
    uint8_t item = buffer[head];
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	5cd3      	ldrb	r3, [r2, r3]
 800327c:	73fb      	strb	r3, [r7, #15]
    buffer[head] = 0;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	2100      	movs	r1, #0
 800328a:	54d1      	strb	r1, [r2, r3]
    volatile std::size_t temp = (head + 1) % maxSize;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3301      	adds	r3, #1
 8003296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800329a:	60bb      	str	r3, [r7, #8]
    head = temp;
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032a4:	6013      	str	r3, [r2, #0]
    return item;
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
  }
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <_ZN14CircularBufferILj4096EE5emptyEv>:
  bool empty() {
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
    return head == tail;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	bf0c      	ite	eq
 80032cc:	2301      	moveq	r3, #1
 80032ce:	2300      	movne	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
  }
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <_ZN9__gnu_cxxneIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80032de:	b590      	push	{r4, r7, lr}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f9b2 	bl	8003652 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80032ee:	4603      	mov	r3, r0
 80032f0:	681c      	ldr	r4, [r3, #0]
 80032f2:	6838      	ldr	r0, [r7, #0]
 80032f4:	f000 f9ad 	bl	8003652 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 80032f8:	4603      	mov	r3, r0
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	429c      	cmp	r4, r3
 80032fe:	bf14      	ite	ne
 8003300:	2301      	movne	r3, #1
 8003302:	2300      	moveq	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	bd90      	pop	{r4, r7, pc}

0800330e <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	601a      	str	r2, [r3, #0]
	return *this;
 8003320:	687b      	ldr	r3, [r7, #4]
      }
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
    }
#endif  // !_GLIBCXX_USE_CXX11_ABI
   
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 8003346:	b580      	push	{r7, lr}
 8003348:	b088      	sub	sp, #32
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
	rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
      const __size_type __len = _Traits::length(__lhs);
 8003352:	68b8      	ldr	r0, [r7, #8]
 8003354:	f7fd fe6c 	bl	8001030 <_ZNSt11char_traitsIcE6lengthEPKc>
 8003358:	61f8      	str	r0, [r7, #28]
      __string_type __str(_Alloc_traits::_S_select_on_copy(
 800335a:	f107 0318 	add.w	r3, r7, #24
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4618      	mov	r0, r3
 8003362:	f004 facd 	bl	8007900 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 8003366:	f107 0314 	add.w	r3, r7, #20
 800336a:	f107 0218 	add.w	r2, r7, #24
 800336e:	4611      	mov	r1, r2
 8003370:	4618      	mov	r0, r3
 8003372:	f000 f979 	bl	8003668 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 8003376:	f107 0314 	add.w	r3, r7, #20
 800337a:	4619      	mov	r1, r3
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f004 f87e 	bl	800747e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>
 8003382:	f107 0314 	add.w	r3, r7, #20
 8003386:	4618      	mov	r0, r3
 8003388:	f003 feb4 	bl	80070f4 <_ZNSaIcED1Ev>
 800338c:	f107 0318 	add.w	r3, r7, #24
 8003390:	4618      	mov	r0, r3
 8003392:	f003 feaf 	bl	80070f4 <_ZNSaIcED1Ev>
          __rhs.get_allocator()));
      __str.reserve(__len + __rhs.size());
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f004 f8d8 	bl	800754c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800339c:	4602      	mov	r2, r0
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	4413      	add	r3, r2
 80033a2:	4619      	mov	r1, r3
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f004 f8dd 	bl	8007564 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__lhs, __len);
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f004 fa7e 	bl	80078b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
      __str.append(__rhs);
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f004 fa74 	bl	80078a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 80033bc:	bf00      	nop
    }
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	3720      	adds	r7, #32
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	2100      	movs	r1, #0
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f004 fa2a 	bl	8007830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 80033dc:	4603      	mov	r3, r0
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f950 	bl	8003684 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80033e4:	4603      	mov	r3, r0
 80033e6:	4619      	mov	r1, r3
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f004 f858 	bl	800749e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	68b8      	ldr	r0, [r7, #8]
 8003406:	f004 fa63 	bl	80078d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 800340a:	4603      	mov	r3, r0
 800340c:	4618      	mov	r0, r3
 800340e:	f000 f939 	bl	8003684 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003412:	4603      	mov	r3, r0
 8003414:	4619      	mov	r1, r3
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f004 f841 	bl	800749e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_RKS8_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	68b8      	ldr	r0, [r7, #8]
 8003434:	f004 fa36 	bl	80078a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8003438:	4603      	mov	r3, r0
 800343a:	4618      	mov	r0, r3
 800343c:	f000 f922 	bl	8003684 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003440:	4603      	mov	r3, r0
 8003442:	4619      	mov	r1, r3
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f004 f82a 	bl	800749e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8003452:	b590      	push	{r4, r7, lr}
 8003454:	b08b      	sub	sp, #44	; 0x2c
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
      bool __use_rhs = false;
 800345e:	2300      	movs	r3, #0
 8003460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if _GLIBCXX17_CONSTEXPR (typename _Alloc_traits::is_always_equal{})
 8003464:	f107 0314 	add.w	r3, r7, #20
 8003468:	4618      	mov	r0, r3
 800346a:	f7fd ffdf 	bl	800142c <_ZNKSt17integral_constantIbLb1EEcvbEv>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x2a>
	__use_rhs = true;
 8003474:	2301      	movs	r3, #1
 8003476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800347a:	e024      	b.n	80034c6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x74>
      else if (__lhs.get_allocator() == __rhs.get_allocator())
 800347c:	f107 0318 	add.w	r3, r7, #24
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	4618      	mov	r0, r3
 8003484:	f004 fa3c 	bl	8007900 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 8003488:	f107 031c 	add.w	r3, r7, #28
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4618      	mov	r0, r3
 8003490:	f004 fa36 	bl	8007900 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 8003494:	f107 021c 	add.w	r2, r7, #28
 8003498:	f107 0318 	add.w	r3, r7, #24
 800349c:	4611      	mov	r1, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f8fb 	bl	800369a <_ZSteqRKSaIcES1_>
 80034a4:	4603      	mov	r3, r0
 80034a6:	461c      	mov	r4, r3
 80034a8:	f107 031c 	add.w	r3, r7, #28
 80034ac:	4618      	mov	r0, r3
 80034ae:	f003 fe21 	bl	80070f4 <_ZNSaIcED1Ev>
 80034b2:	f107 0318 	add.w	r3, r7, #24
 80034b6:	4618      	mov	r0, r3
 80034b8:	f003 fe1c 	bl	80070f4 <_ZNSaIcED1Ev>
 80034bc:	2c00      	cmp	r4, #0
 80034be:	d002      	beq.n	80034c6 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0x74>
	__use_rhs = true;
 80034c0:	2301      	movs	r3, #1
 80034c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if (__use_rhs)
 80034c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d02b      	beq.n	8003526 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xd4>
	  const auto __size = __lhs.size() + __rhs.size();
 80034ce:	68b8      	ldr	r0, [r7, #8]
 80034d0:	f004 f83c 	bl	800754c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80034d4:	4604      	mov	r4, r0
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f004 f838 	bl	800754c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80034dc:	4603      	mov	r3, r0
 80034de:	4423      	add	r3, r4
 80034e0:	623b      	str	r3, [r7, #32]
	  if (__size > __lhs.capacity() && __size <= __rhs.capacity())
 80034e2:	68b8      	ldr	r0, [r7, #8]
 80034e4:	f004 f836 	bl	8007554 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80034e8:	4602      	mov	r2, r0
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d908      	bls.n	8003502 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb0>
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f004 f82f 	bl	8007554 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80034f6:	4602      	mov	r2, r0
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d801      	bhi.n	8003502 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb0>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xb2>
 8003502:	2300      	movs	r3, #0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00e      	beq.n	8003526 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xd4>
	    return std::move(__rhs.insert(0, __lhs));
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	2100      	movs	r1, #0
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f004 f985 	bl	800781c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>
 8003512:	4603      	mov	r3, r0
 8003514:	4618      	mov	r0, r3
 8003516:	f000 f8b5 	bl	8003684 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 800351a:	4603      	mov	r3, r0
 800351c:	4619      	mov	r1, r3
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f003 ffbd 	bl	800749e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8003524:	e00c      	b.n	8003540 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_S9_+0xee>
      return std::move(__lhs.append(__rhs));
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	68b8      	ldr	r0, [r7, #8]
 800352a:	f004 f9bb 	bl	80078a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 800352e:	4603      	mov	r3, r0
 8003530:	4618      	mov	r0, r3
 8003532:	f000 f8a7 	bl	8003684 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003536:	4603      	mov	r3, r0
 8003538:	4619      	mov	r1, r3
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f003 ffaf 	bl	800749e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
    }
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	372c      	adds	r7, #44	; 0x2c
 8003544:	46bd      	mov	sp, r7
 8003546:	bd90      	pop	{r4, r7, pc}

08003548 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EES5_RKS8_>:

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	460b      	mov	r3, r1
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	72fb      	strb	r3, [r7, #11]
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
	rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
      __string_type __str(_Alloc_traits::_S_select_on_copy(
 8003556:	f107 0318 	add.w	r3, r7, #24
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4618      	mov	r0, r3
 800355e:	f004 f9cf 	bl	8007900 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 8003562:	f107 0314 	add.w	r3, r7, #20
 8003566:	f107 0218 	add.w	r2, r7, #24
 800356a:	4611      	mov	r1, r2
 800356c:	4618      	mov	r0, r3
 800356e:	f000 f87b 	bl	8003668 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 8003572:	f107 0314 	add.w	r3, r7, #20
 8003576:	4619      	mov	r1, r3
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f003 ff80 	bl	800747e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>
 800357e:	f107 0314 	add.w	r3, r7, #20
 8003582:	4618      	mov	r0, r3
 8003584:	f003 fdb6 	bl	80070f4 <_ZNSaIcED1Ev>
 8003588:	f107 0318 	add.w	r3, r7, #24
 800358c:	4618      	mov	r0, r3
 800358e:	f003 fdb1 	bl	80070f4 <_ZNSaIcED1Ev>
          __rhs.get_allocator()));
      const __size_type __len = __rhs.size();
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f003 ffda 	bl	800754c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8003598:	61f8      	str	r0, [r7, #28]
      __str.reserve(__len + 1);
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	3301      	adds	r3, #1
 800359e:	4619      	mov	r1, r3
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f003 ffdf 	bl	8007564 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__size_type(1), __lhs);
 80035a6:	7afb      	ldrb	r3, [r7, #11]
 80035a8:	461a      	mov	r2, r3
 80035aa:	2101      	movs	r1, #1
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f004 f881 	bl	80076b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      __str.append(__rhs);
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f004 f975 	bl	80078a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 80035ba:	bf00      	nop
    }
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	3720      	adds	r7, #32
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <_ZN14CircularBufferILj4096EE7writtenEv>:
  bool written() {
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
    return writeFlag;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035d2:	7a1b      	ldrb	r3, [r3, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf14      	ite	ne
 80035d8:	2301      	movne	r3, #1
 80035da:	2300      	moveq	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
  }
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <_ZN14CircularBufferILj4096EE4readB5cxx11Ev>:
  std::string read() {
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	6039      	str	r1, [r7, #0]
	std::string a;
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f003 ff3b 	bl	8007470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
    switch (writeFlag) {
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003600:	7a1b      	ldrb	r3, [r3, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00f      	beq.n	8003626 <_ZN14CircularBufferILj4096EE4readB5cxx11Ev+0x3c>
 8003606:	2b01      	cmp	r3, #1
 8003608:	d10e      	bne.n	8003628 <_ZN14CircularBufferILj4096EE4readB5cxx11Ev+0x3e>
        a.push_back(buffer[(tail - 1) % maxSize]);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	3b01      	subs	r3, #1
 8003614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	5cd3      	ldrb	r3, [r2, r3]
 800361c:	4619      	mov	r1, r3
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f003 ffca 	bl	80075b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
        break;
 8003624:	e000      	b.n	8003628 <_ZN14CircularBufferILj4096EE4readB5cxx11Ev+0x3e>
        break;
 8003626:	bf00      	nop
    writeFlag = None;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800362e:	2200      	movs	r2, #0
 8003630:	721a      	strb	r2, [r3, #8]
    return a;
 8003632:	bf00      	nop
  }
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <_ZNK9__gnu_cxx17__normal_iteratorIPcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4618      	mov	r0, r3
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6839      	ldr	r1, [r7, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f000 f81b 	bl	80036b2 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <_ZSteqRKSaIcES1_>:
	__allocator_base<_Tp>::deallocate(__p, __n);
      }
#endif // C++20

      friend _GLIBCXX20_CONSTEXPR bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	6039      	str	r1, [r7, #0]
      { return true; }
 80036a4:	2301      	movs	r3, #1
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static _GLIBCXX20_CONSTEXPR allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 80036bc:	6839      	ldr	r1, [r7, #0]
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f003 fd17 	bl	80070f2 <_ZNSaIcEC1ERKS_>
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d125      	bne.n	8003728 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d120      	bne.n	8003728 <_Z41__static_initialization_and_destruction_0ii+0x5c>
CircularBuffer<4096> rx;
 80036e6:	4818      	ldr	r0, [pc, #96]	; (8003748 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80036e8:	f7fd fd48 	bl	800117c <_ZN14CircularBufferILj4096EEC1Ev>
CircularBuffer<4096> tx;
 80036ec:	4817      	ldr	r0, [pc, #92]	; (800374c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80036ee:	f7fd fd45 	bl	800117c <_ZN14CircularBufferILj4096EEC1Ev>
float timemul=MULTIPL,realshotdelay=DELTIME*timemul;
 80036f2:	4b17      	ldr	r3, [pc, #92]	; (8003750 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80036f4:	edd3 7a00 	vldr	s15, [r3]
 80036f8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003754 <_Z41__static_initialization_and_destruction_0ii+0x88>
 80036fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003700:	4b15      	ldr	r3, [pc, #84]	; (8003758 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003702:	edc3 7a00 	vstr	s15, [r3]
	std::string frameMainBuffer="";
 8003706:	f107 030c 	add.w	r3, r7, #12
 800370a:	4618      	mov	r0, r3
 800370c:	f003 fcf0 	bl	80070f0 <_ZNSaIcEC1Ev>
 8003710:	f107 030c 	add.w	r3, r7, #12
 8003714:	461a      	mov	r2, r3
 8003716:	4911      	ldr	r1, [pc, #68]	; (800375c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003718:	4811      	ldr	r0, [pc, #68]	; (8003760 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800371a:	f004 f9b5 	bl	8007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800371e:	f107 030c 	add.w	r3, r7, #12
 8003722:	4618      	mov	r0, r3
 8003724:	f003 fce6 	bl	80070f4 <_ZNSaIcED1Ev>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d107      	bne.n	800373e <_Z41__static_initialization_and_destruction_0ii+0x72>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003734:	4293      	cmp	r3, r2
 8003736:	d102      	bne.n	800373e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003738:	4809      	ldr	r0, [pc, #36]	; (8003760 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800373a:	f003 feca 	bl	80074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800373e:	bf00      	nop
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	200002fc 	.word	0x200002fc
 800374c:	2000130c 	.word	0x2000130c
 8003750:	20000010 	.word	0x20000010
 8003754:	42f20000 	.word	0x42f20000
 8003758:	20002318 	.word	0x20002318
 800375c:	0800c45c 	.word	0x0800c45c
 8003760:	20002b40 	.word	0x20002b40

08003764 <_GLOBAL__sub_I_hadc1>:
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
 8003768:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800376c:	2001      	movs	r0, #1
 800376e:	f7ff ffad 	bl	80036cc <_Z41__static_initialization_and_destruction_0ii>
 8003772:	bd80      	pop	{r7, pc}

08003774 <_GLOBAL__sub_D_hadc1>:
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
 8003778:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800377c:	2000      	movs	r0, #0
 800377e:	f7ff ffa5 	bl	80036cc <_Z41__static_initialization_and_destruction_0ii>
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	607b      	str	r3, [r7, #4]
 800378e:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <HAL_MspInit+0x4c>)
 8003790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003792:	4a0f      	ldr	r2, [pc, #60]	; (80037d0 <HAL_MspInit+0x4c>)
 8003794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003798:	6453      	str	r3, [r2, #68]	; 0x44
 800379a:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <HAL_MspInit+0x4c>)
 800379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037a2:	607b      	str	r3, [r7, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	603b      	str	r3, [r7, #0]
 80037aa:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <HAL_MspInit+0x4c>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	4a08      	ldr	r2, [pc, #32]	; (80037d0 <HAL_MspInit+0x4c>)
 80037b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b4:	6413      	str	r3, [r2, #64]	; 0x40
 80037b6:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <HAL_MspInit+0x4c>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80037c2:	2007      	movs	r0, #7
 80037c4:	f001 f8ca 	bl	800495c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037c8:	bf00      	nop
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40023800 	.word	0x40023800

080037d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08a      	sub	sp, #40	; 0x28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037dc:	f107 0314 	add.w	r3, r7, #20
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	609a      	str	r2, [r3, #8]
 80037e8:	60da      	str	r2, [r3, #12]
 80037ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a33      	ldr	r2, [pc, #204]	; (80038c0 <HAL_ADC_MspInit+0xec>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d15f      	bne.n	80038b6 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	4b32      	ldr	r3, [pc, #200]	; (80038c4 <HAL_ADC_MspInit+0xf0>)
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	4a31      	ldr	r2, [pc, #196]	; (80038c4 <HAL_ADC_MspInit+0xf0>)
 8003800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003804:	6453      	str	r3, [r2, #68]	; 0x44
 8003806:	4b2f      	ldr	r3, [pc, #188]	; (80038c4 <HAL_ADC_MspInit+0xf0>)
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	4b2b      	ldr	r3, [pc, #172]	; (80038c4 <HAL_ADC_MspInit+0xf0>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	4a2a      	ldr	r2, [pc, #168]	; (80038c4 <HAL_ADC_MspInit+0xf0>)
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	6313      	str	r3, [r2, #48]	; 0x30
 8003822:	4b28      	ldr	r3, [pc, #160]	; (80038c4 <HAL_ADC_MspInit+0xf0>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800382e:	2303      	movs	r3, #3
 8003830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003832:	2303      	movs	r3, #3
 8003834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003836:	2300      	movs	r3, #0
 8003838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800383a:	f107 0314 	add.w	r3, r7, #20
 800383e:	4619      	mov	r1, r3
 8003840:	4821      	ldr	r0, [pc, #132]	; (80038c8 <HAL_ADC_MspInit+0xf4>)
 8003842:	f001 fcdd 	bl	8005200 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003846:	4b21      	ldr	r3, [pc, #132]	; (80038cc <HAL_ADC_MspInit+0xf8>)
 8003848:	4a21      	ldr	r2, [pc, #132]	; (80038d0 <HAL_ADC_MspInit+0xfc>)
 800384a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800384c:	4b1f      	ldr	r3, [pc, #124]	; (80038cc <HAL_ADC_MspInit+0xf8>)
 800384e:	2200      	movs	r2, #0
 8003850:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003852:	4b1e      	ldr	r3, [pc, #120]	; (80038cc <HAL_ADC_MspInit+0xf8>)
 8003854:	2200      	movs	r2, #0
 8003856:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003858:	4b1c      	ldr	r3, [pc, #112]	; (80038cc <HAL_ADC_MspInit+0xf8>)
 800385a:	2200      	movs	r2, #0
 800385c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800385e:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <HAL_ADC_MspInit+0xf8>)
 8003860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003864:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003866:	4b19      	ldr	r3, [pc, #100]	; (80038cc <HAL_ADC_MspInit+0xf8>)
 8003868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800386c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800386e:	4b17      	ldr	r3, [pc, #92]	; (80038cc <HAL_ADC_MspInit+0xf8>)
 8003870:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003874:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003876:	4b15      	ldr	r3, [pc, #84]	; (80038cc <HAL_ADC_MspInit+0xf8>)
 8003878:	f44f 7280 	mov.w	r2, #256	; 0x100
 800387c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800387e:	4b13      	ldr	r3, [pc, #76]	; (80038cc <HAL_ADC_MspInit+0xf8>)
 8003880:	2200      	movs	r2, #0
 8003882:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003884:	4b11      	ldr	r3, [pc, #68]	; (80038cc <HAL_ADC_MspInit+0xf8>)
 8003886:	2200      	movs	r2, #0
 8003888:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800388a:	4810      	ldr	r0, [pc, #64]	; (80038cc <HAL_ADC_MspInit+0xf8>)
 800388c:	f001 f8b6 	bl	80049fc <HAL_DMA_Init>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003896:	f7ff faa5 	bl	8002de4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a0b      	ldr	r2, [pc, #44]	; (80038cc <HAL_ADC_MspInit+0xf8>)
 800389e:	639a      	str	r2, [r3, #56]	; 0x38
 80038a0:	4a0a      	ldr	r2, [pc, #40]	; (80038cc <HAL_ADC_MspInit+0xf8>)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80038a6:	2200      	movs	r2, #0
 80038a8:	2100      	movs	r1, #0
 80038aa:	2012      	movs	r0, #18
 80038ac:	f001 f861 	bl	8004972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80038b0:	2012      	movs	r0, #18
 80038b2:	f001 f87a 	bl	80049aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80038b6:	bf00      	nop
 80038b8:	3728      	adds	r7, #40	; 0x28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40012000 	.word	0x40012000
 80038c4:	40023800 	.word	0x40023800
 80038c8:	40020000 	.word	0x40020000
 80038cc:	20000254 	.word	0x20000254
 80038d0:	40026410 	.word	0x40026410

080038d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08a      	sub	sp, #40	; 0x28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038dc:	f107 0314 	add.w	r3, r7, #20
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a1d      	ldr	r2, [pc, #116]	; (8003968 <HAL_UART_MspInit+0x94>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d133      	bne.n	800395e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	4b1c      	ldr	r3, [pc, #112]	; (800396c <HAL_UART_MspInit+0x98>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	4a1b      	ldr	r2, [pc, #108]	; (800396c <HAL_UART_MspInit+0x98>)
 8003900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003904:	6413      	str	r3, [r2, #64]	; 0x40
 8003906:	4b19      	ldr	r3, [pc, #100]	; (800396c <HAL_UART_MspInit+0x98>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	4b15      	ldr	r3, [pc, #84]	; (800396c <HAL_UART_MspInit+0x98>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	4a14      	ldr	r2, [pc, #80]	; (800396c <HAL_UART_MspInit+0x98>)
 800391c:	f043 0301 	orr.w	r3, r3, #1
 8003920:	6313      	str	r3, [r2, #48]	; 0x30
 8003922:	4b12      	ldr	r3, [pc, #72]	; (800396c <HAL_UART_MspInit+0x98>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800392e:	230c      	movs	r3, #12
 8003930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003932:	2302      	movs	r3, #2
 8003934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800393a:	2303      	movs	r3, #3
 800393c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800393e:	2307      	movs	r3, #7
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003942:	f107 0314 	add.w	r3, r7, #20
 8003946:	4619      	mov	r1, r3
 8003948:	4809      	ldr	r0, [pc, #36]	; (8003970 <HAL_UART_MspInit+0x9c>)
 800394a:	f001 fc59 	bl	8005200 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800394e:	2200      	movs	r2, #0
 8003950:	2100      	movs	r1, #0
 8003952:	2026      	movs	r0, #38	; 0x26
 8003954:	f001 f80d 	bl	8004972 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003958:	2026      	movs	r0, #38	; 0x26
 800395a:	f001 f826 	bl	80049aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800395e:	bf00      	nop
 8003960:	3728      	adds	r7, #40	; 0x28
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40004400 	.word	0x40004400
 800396c:	40023800 	.word	0x40023800
 8003970:	40020000 	.word	0x40020000

08003974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003978:	e7fe      	b.n	8003978 <NMI_Handler+0x4>

0800397a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800397a:	b480      	push	{r7}
 800397c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800397e:	e7fe      	b.n	800397e <HardFault_Handler+0x4>

08003980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003984:	e7fe      	b.n	8003984 <MemManage_Handler+0x4>

08003986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003986:	b480      	push	{r7}
 8003988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800398a:	e7fe      	b.n	800398a <BusFault_Handler+0x4>

0800398c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003990:	e7fe      	b.n	8003990 <UsageFault_Handler+0x4>

08003992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003992:	b480      	push	{r7}
 8003994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003996:	bf00      	nop
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039a4:	bf00      	nop
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039ae:	b480      	push	{r7}
 80039b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039b2:	bf00      	nop
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	//przerwania co 1ms
	firingswitch();
 80039c0:	f7fe ff2a 	bl	8002818 <firingswitch>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039c4:	f000 f984 	bl	8003cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039c8:	bf00      	nop
 80039ca:	bd80      	pop	{r7, pc}

080039cc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80039d0:	4802      	ldr	r0, [pc, #8]	; (80039dc <ADC_IRQHandler+0x10>)
 80039d2:	f000 f9e0 	bl	8003d96 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	2000020c 	.word	0x2000020c

080039e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(FB_Pin);
 80039e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80039e8:	f001 fdd0 	bl	800558c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80039ec:	bf00      	nop
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80039f4:	4802      	ldr	r0, [pc, #8]	; (8003a00 <USART2_IRQHandler+0x10>)
 80039f6:	f002 fc8b 	bl	8006310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	200002b4 	.word	0x200002b4

08003a04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003a08:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003a0c:	f001 fdbe 	bl	800558c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a10:	bf00      	nop
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a18:	4802      	ldr	r0, [pc, #8]	; (8003a24 <DMA2_Stream0_IRQHandler+0x10>)
 8003a1a:	f001 f987 	bl	8004d2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000254 	.word	0x20000254

08003a28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  return 1;
 8003a2c:	2301      	movs	r3, #1
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <_kill>:

int _kill(int pid, int sig)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a42:	f006 f855 	bl	8009af0 <__errno>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2216      	movs	r2, #22
 8003a4a:	601a      	str	r2, [r3, #0]
  return -1;
 8003a4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <_exit>:

void _exit (int status)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a60:	f04f 31ff 	mov.w	r1, #4294967295
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff ffe7 	bl	8003a38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a6a:	e7fe      	b.n	8003a6a <_exit+0x12>

08003a6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	e00a      	b.n	8003a94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a7e:	f3af 8000 	nop.w
 8003a82:	4601      	mov	r1, r0
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	60ba      	str	r2, [r7, #8]
 8003a8a:	b2ca      	uxtb	r2, r1
 8003a8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	3301      	adds	r3, #1
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	dbf0      	blt.n	8003a7e <_read+0x12>
  }

  return len;
 8003a9c:	687b      	ldr	r3, [r7, #4]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b086      	sub	sp, #24
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	e009      	b.n	8003acc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	60ba      	str	r2, [r7, #8]
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	dbf1      	blt.n	8003ab8 <_write+0x12>
  }
  return len;
 8003ad4:	687b      	ldr	r3, [r7, #4]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <_close>:

int _close(int file)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ae6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b06:	605a      	str	r2, [r3, #4]
  return 0;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <_isatty>:

int _isatty(int file)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b1e:	2301      	movs	r3, #1
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b50:	4a14      	ldr	r2, [pc, #80]	; (8003ba4 <_sbrk+0x5c>)
 8003b52:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <_sbrk+0x60>)
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b5c:	4b13      	ldr	r3, [pc, #76]	; (8003bac <_sbrk+0x64>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d102      	bne.n	8003b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b64:	4b11      	ldr	r3, [pc, #68]	; (8003bac <_sbrk+0x64>)
 8003b66:	4a12      	ldr	r2, [pc, #72]	; (8003bb0 <_sbrk+0x68>)
 8003b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b6a:	4b10      	ldr	r3, [pc, #64]	; (8003bac <_sbrk+0x64>)
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4413      	add	r3, r2
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d207      	bcs.n	8003b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b78:	f005 ffba 	bl	8009af0 <__errno>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	220c      	movs	r2, #12
 8003b80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b82:	f04f 33ff 	mov.w	r3, #4294967295
 8003b86:	e009      	b.n	8003b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b88:	4b08      	ldr	r3, [pc, #32]	; (8003bac <_sbrk+0x64>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b8e:	4b07      	ldr	r3, [pc, #28]	; (8003bac <_sbrk+0x64>)
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4413      	add	r3, r2
 8003b96:	4a05      	ldr	r2, [pc, #20]	; (8003bac <_sbrk+0x64>)
 8003b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	20020000 	.word	0x20020000
 8003ba8:	00000400 	.word	0x00000400
 8003bac:	20002b5c 	.word	0x20002b5c
 8003bb0:	20002cb8 	.word	0x20002cb8

08003bb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <SystemInit+0x20>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	4a05      	ldr	r2, [pc, #20]	; (8003bd4 <SystemInit+0x20>)
 8003bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bc8:	bf00      	nop
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	e000ed00 	.word	0xe000ed00

08003bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bdc:	480d      	ldr	r0, [pc, #52]	; (8003c14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003bde:	490e      	ldr	r1, [pc, #56]	; (8003c18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003be0:	4a0e      	ldr	r2, [pc, #56]	; (8003c1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003be4:	e002      	b.n	8003bec <LoopCopyDataInit>

08003be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bea:	3304      	adds	r3, #4

08003bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bf0:	d3f9      	bcc.n	8003be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bf2:	4a0b      	ldr	r2, [pc, #44]	; (8003c20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003bf4:	4c0b      	ldr	r4, [pc, #44]	; (8003c24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bf8:	e001      	b.n	8003bfe <LoopFillZerobss>

08003bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bfc:	3204      	adds	r2, #4

08003bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c00:	d3fb      	bcc.n	8003bfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c02:	f7ff ffd7 	bl	8003bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c06:	f005 ff79 	bl	8009afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c0a:	f7fe fe2d 	bl	8002868 <main>
  bx  lr    
 8003c0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c18:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8003c1c:	0800cb1c 	.word	0x0800cb1c
  ldr r2, =_sbss
 8003c20:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003c24:	20002cb4 	.word	0x20002cb4

08003c28 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c28:	e7fe      	b.n	8003c28 <CAN1_RX0_IRQHandler>
	...

08003c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c30:	4b0e      	ldr	r3, [pc, #56]	; (8003c6c <HAL_Init+0x40>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a0d      	ldr	r2, [pc, #52]	; (8003c6c <HAL_Init+0x40>)
 8003c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_Init+0x40>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a0a      	ldr	r2, [pc, #40]	; (8003c6c <HAL_Init+0x40>)
 8003c42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c48:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <HAL_Init+0x40>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a07      	ldr	r2, [pc, #28]	; (8003c6c <HAL_Init+0x40>)
 8003c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c54:	2003      	movs	r0, #3
 8003c56:	f000 fe81 	bl	800495c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	f000 f808 	bl	8003c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c60:	f7ff fd90 	bl	8003784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40023c00 	.word	0x40023c00

08003c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c78:	4b12      	ldr	r3, [pc, #72]	; (8003cc4 <HAL_InitTick+0x54>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_InitTick+0x58>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	4619      	mov	r1, r3
 8003c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fea7 	bl	80049e2 <HAL_SYSTICK_Config>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e00e      	b.n	8003cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b0f      	cmp	r3, #15
 8003ca2:	d80a      	bhi.n	8003cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cac:	f000 fe61 	bl	8004972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cb0:	4a06      	ldr	r2, [pc, #24]	; (8003ccc <HAL_InitTick+0x5c>)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	e000      	b.n	8003cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	2000001c 	.word	0x2000001c
 8003cc8:	20000024 	.word	0x20000024
 8003ccc:	20000020 	.word	0x20000020

08003cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <HAL_IncTick+0x20>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <HAL_IncTick+0x24>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4413      	add	r3, r2
 8003ce0:	4a04      	ldr	r2, [pc, #16]	; (8003cf4 <HAL_IncTick+0x24>)
 8003ce2:	6013      	str	r3, [r2, #0]
}
 8003ce4:	bf00      	nop
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	20000024 	.word	0x20000024
 8003cf4:	20002b60 	.word	0x20002b60

08003cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8003cfc:	4b03      	ldr	r3, [pc, #12]	; (8003d0c <HAL_GetTick+0x14>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	20002b60 	.word	0x20002b60

08003d10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e033      	b.n	8003d8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d109      	bne.n	8003d42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff fd50 	bl	80037d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d118      	bne.n	8003d80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d56:	f023 0302 	bic.w	r3, r3, #2
 8003d5a:	f043 0202 	orr.w	r2, r3, #2
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fb7e 	bl	8004464 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f023 0303 	bic.w	r3, r3, #3
 8003d76:	f043 0201 	orr.w	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40
 8003d7e:	e001      	b.n	8003d84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b086      	sub	sp, #24
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	2300      	movs	r3, #0
 8003da4:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d049      	beq.n	8003e60 <HAL_ADC_IRQHandler+0xca>
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d046      	beq.n	8003e60 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d105      	bne.n	8003dea <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d12b      	bne.n	8003e50 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d127      	bne.n	8003e50 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d006      	beq.n	8003e1c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d119      	bne.n	8003e50 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0220 	bic.w	r2, r2, #32
 8003e2a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d105      	bne.n	8003e50 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e48:	f043 0201 	orr.w	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7fe fb7d 	bl	8002550 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f06f 0212 	mvn.w	r2, #18
 8003e5e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d057      	beq.n	8003f26 <HAL_ADC_IRQHandler+0x190>
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d054      	beq.n	8003f26 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	f003 0310 	and.w	r3, r3, #16
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d105      	bne.n	8003e94 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d139      	bne.n	8003f16 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d006      	beq.n	8003ebe <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d12b      	bne.n	8003f16 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d124      	bne.n	8003f16 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d11d      	bne.n	8003f16 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d119      	bne.n	8003f16 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ef0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d105      	bne.n	8003f16 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f043 0201 	orr.w	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fc22 	bl	8004760 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f06f 020c 	mvn.w	r2, #12
 8003f24:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f34:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d017      	beq.n	8003f6c <HAL_ADC_IRQHandler+0x1d6>
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d014      	beq.n	8003f6c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d10d      	bne.n	8003f6c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f93b 	bl	80041d8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f06f 0201 	mvn.w	r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f7a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d015      	beq.n	8003fae <HAL_ADC_IRQHandler+0x218>
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d012      	beq.n	8003fae <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8c:	f043 0202 	orr.w	r2, r3, #2
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0220 	mvn.w	r2, #32
 8003f9c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f924 	bl	80041ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f06f 0220 	mvn.w	r2, #32
 8003fac:	601a      	str	r2, [r3, #0]
  }
}
 8003fae:	bf00      	nop
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_ADC_Start_DMA+0x1e>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e0e9      	b.n	80041aa <HAL_ADC_Start_DMA+0x1f2>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d018      	beq.n	800401e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0201 	orr.w	r2, r2, #1
 8003ffa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ffc:	4b6d      	ldr	r3, [pc, #436]	; (80041b4 <HAL_ADC_Start_DMA+0x1fc>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a6d      	ldr	r2, [pc, #436]	; (80041b8 <HAL_ADC_Start_DMA+0x200>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	0c9a      	lsrs	r2, r3, #18
 8004008:	4613      	mov	r3, r2
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	4413      	add	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004010:	e002      	b.n	8004018 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	3b01      	subs	r3, #1
 8004016:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f9      	bne.n	8004012 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800402c:	d107      	bne.n	800403e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800403c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b01      	cmp	r3, #1
 800404a:	f040 80a1 	bne.w	8004190 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004056:	f023 0301 	bic.w	r3, r3, #1
 800405a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406c:	2b00      	cmp	r3, #0
 800406e:	d007      	beq.n	8004080 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004078:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408c:	d106      	bne.n	800409c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004092:	f023 0206 	bic.w	r2, r3, #6
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	645a      	str	r2, [r3, #68]	; 0x44
 800409a:	e002      	b.n	80040a2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040aa:	4b44      	ldr	r3, [pc, #272]	; (80041bc <HAL_ADC_Start_DMA+0x204>)
 80040ac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	4a43      	ldr	r2, [pc, #268]	; (80041c0 <HAL_ADC_Start_DMA+0x208>)
 80040b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ba:	4a42      	ldr	r2, [pc, #264]	; (80041c4 <HAL_ADC_Start_DMA+0x20c>)
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c2:	4a41      	ldr	r2, [pc, #260]	; (80041c8 <HAL_ADC_Start_DMA+0x210>)
 80040c4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80040ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80040de:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	334c      	adds	r3, #76	; 0x4c
 80040fa:	4619      	mov	r1, r3
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f000 fd2a 	bl	8004b58 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f003 031f 	and.w	r3, r3, #31
 800410c:	2b00      	cmp	r3, #0
 800410e:	d12a      	bne.n	8004166 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a2d      	ldr	r2, [pc, #180]	; (80041cc <HAL_ADC_Start_DMA+0x214>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d015      	beq.n	8004146 <HAL_ADC_Start_DMA+0x18e>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a2c      	ldr	r2, [pc, #176]	; (80041d0 <HAL_ADC_Start_DMA+0x218>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d105      	bne.n	8004130 <HAL_ADC_Start_DMA+0x178>
 8004124:	4b25      	ldr	r3, [pc, #148]	; (80041bc <HAL_ADC_Start_DMA+0x204>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a27      	ldr	r2, [pc, #156]	; (80041d4 <HAL_ADC_Start_DMA+0x21c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d136      	bne.n	80041a8 <HAL_ADC_Start_DMA+0x1f0>
 800413a:	4b20      	ldr	r3, [pc, #128]	; (80041bc <HAL_ADC_Start_DMA+0x204>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	2b00      	cmp	r3, #0
 8004144:	d130      	bne.n	80041a8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d129      	bne.n	80041a8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689a      	ldr	r2, [r3, #8]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004162:	609a      	str	r2, [r3, #8]
 8004164:	e020      	b.n	80041a8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a18      	ldr	r2, [pc, #96]	; (80041cc <HAL_ADC_Start_DMA+0x214>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d11b      	bne.n	80041a8 <HAL_ADC_Start_DMA+0x1f0>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d114      	bne.n	80041a8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800418c:	609a      	str	r2, [r3, #8]
 800418e:	e00b      	b.n	80041a8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	f043 0210 	orr.w	r2, r3, #16
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a0:	f043 0201 	orr.w	r2, r3, #1
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	2000001c 	.word	0x2000001c
 80041b8:	431bde83 	.word	0x431bde83
 80041bc:	40012300 	.word	0x40012300
 80041c0:	0800465d 	.word	0x0800465d
 80041c4:	08004717 	.word	0x08004717
 80041c8:	08004733 	.word	0x08004733
 80041cc:	40012000 	.word	0x40012000
 80041d0:	40012100 	.word	0x40012100
 80041d4:	40012200 	.word	0x40012200

080041d8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004214:	2b01      	cmp	r3, #1
 8004216:	d101      	bne.n	800421c <HAL_ADC_ConfigChannel+0x1c>
 8004218:	2302      	movs	r3, #2
 800421a:	e113      	b.n	8004444 <HAL_ADC_ConfigChannel+0x244>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b09      	cmp	r3, #9
 800422a:	d925      	bls.n	8004278 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68d9      	ldr	r1, [r3, #12]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	b29b      	uxth	r3, r3
 8004238:	461a      	mov	r2, r3
 800423a:	4613      	mov	r3, r2
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	4413      	add	r3, r2
 8004240:	3b1e      	subs	r3, #30
 8004242:	2207      	movs	r2, #7
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	43da      	mvns	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	400a      	ands	r2, r1
 8004250:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68d9      	ldr	r1, [r3, #12]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	b29b      	uxth	r3, r3
 8004262:	4618      	mov	r0, r3
 8004264:	4603      	mov	r3, r0
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	4403      	add	r3, r0
 800426a:	3b1e      	subs	r3, #30
 800426c:	409a      	lsls	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	60da      	str	r2, [r3, #12]
 8004276:	e022      	b.n	80042be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6919      	ldr	r1, [r3, #16]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	b29b      	uxth	r3, r3
 8004284:	461a      	mov	r2, r3
 8004286:	4613      	mov	r3, r2
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	4413      	add	r3, r2
 800428c:	2207      	movs	r2, #7
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43da      	mvns	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	400a      	ands	r2, r1
 800429a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6919      	ldr	r1, [r3, #16]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	4618      	mov	r0, r3
 80042ae:	4603      	mov	r3, r0
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	4403      	add	r3, r0
 80042b4:	409a      	lsls	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b06      	cmp	r3, #6
 80042c4:	d824      	bhi.n	8004310 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	4613      	mov	r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	3b05      	subs	r3, #5
 80042d8:	221f      	movs	r2, #31
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43da      	mvns	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	400a      	ands	r2, r1
 80042e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	4618      	mov	r0, r3
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	3b05      	subs	r3, #5
 8004302:	fa00 f203 	lsl.w	r2, r0, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	635a      	str	r2, [r3, #52]	; 0x34
 800430e:	e04c      	b.n	80043aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b0c      	cmp	r3, #12
 8004316:	d824      	bhi.n	8004362 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	3b23      	subs	r3, #35	; 0x23
 800432a:	221f      	movs	r2, #31
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	43da      	mvns	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	400a      	ands	r2, r1
 8004338:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	b29b      	uxth	r3, r3
 8004346:	4618      	mov	r0, r3
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	3b23      	subs	r3, #35	; 0x23
 8004354:	fa00 f203 	lsl.w	r2, r0, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	631a      	str	r2, [r3, #48]	; 0x30
 8004360:	e023      	b.n	80043aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	4613      	mov	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	3b41      	subs	r3, #65	; 0x41
 8004374:	221f      	movs	r2, #31
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43da      	mvns	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	400a      	ands	r2, r1
 8004382:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	b29b      	uxth	r3, r3
 8004390:	4618      	mov	r0, r3
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	3b41      	subs	r3, #65	; 0x41
 800439e:	fa00 f203 	lsl.w	r2, r0, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043aa:	4b29      	ldr	r3, [pc, #164]	; (8004450 <HAL_ADC_ConfigChannel+0x250>)
 80043ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a28      	ldr	r2, [pc, #160]	; (8004454 <HAL_ADC_ConfigChannel+0x254>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d10f      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0x1d8>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b12      	cmp	r3, #18
 80043be:	d10b      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a1d      	ldr	r2, [pc, #116]	; (8004454 <HAL_ADC_ConfigChannel+0x254>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d12b      	bne.n	800443a <HAL_ADC_ConfigChannel+0x23a>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a1c      	ldr	r2, [pc, #112]	; (8004458 <HAL_ADC_ConfigChannel+0x258>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d003      	beq.n	80043f4 <HAL_ADC_ConfigChannel+0x1f4>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b11      	cmp	r3, #17
 80043f2:	d122      	bne.n	800443a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a11      	ldr	r2, [pc, #68]	; (8004458 <HAL_ADC_ConfigChannel+0x258>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d111      	bne.n	800443a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004416:	4b11      	ldr	r3, [pc, #68]	; (800445c <HAL_ADC_ConfigChannel+0x25c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a11      	ldr	r2, [pc, #68]	; (8004460 <HAL_ADC_ConfigChannel+0x260>)
 800441c:	fba2 2303 	umull	r2, r3, r2, r3
 8004420:	0c9a      	lsrs	r2, r3, #18
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800442c:	e002      	b.n	8004434 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	3b01      	subs	r3, #1
 8004432:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f9      	bne.n	800442e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	40012300 	.word	0x40012300
 8004454:	40012000 	.word	0x40012000
 8004458:	10000012 	.word	0x10000012
 800445c:	2000001c 	.word	0x2000001c
 8004460:	431bde83 	.word	0x431bde83

08004464 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800446c:	4b79      	ldr	r3, [pc, #484]	; (8004654 <ADC_Init+0x1f0>)
 800446e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	431a      	orrs	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004498:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6859      	ldr	r1, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	021a      	lsls	r2, r3, #8
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80044bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6859      	ldr	r1, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6899      	ldr	r1, [r3, #8]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f6:	4a58      	ldr	r2, [pc, #352]	; (8004658 <ADC_Init+0x1f4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d022      	beq.n	8004542 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800450a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6899      	ldr	r1, [r3, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800452c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6899      	ldr	r1, [r3, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	609a      	str	r2, [r3, #8]
 8004540:	e00f      	b.n	8004562 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004550:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004560:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0202 	bic.w	r2, r2, #2
 8004570:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6899      	ldr	r1, [r3, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	7e1b      	ldrb	r3, [r3, #24]
 800457c:	005a      	lsls	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 3020 	ldrb.w	r3, [r3, #32]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01b      	beq.n	80045c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800459e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80045ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6859      	ldr	r1, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	3b01      	subs	r3, #1
 80045bc:	035a      	lsls	r2, r3, #13
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]
 80045c6:	e007      	b.n	80045d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80045e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	051a      	lsls	r2, r3, #20
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800460c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6899      	ldr	r1, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800461a:	025a      	lsls	r2, r3, #9
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004632:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6899      	ldr	r1, [r3, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	029a      	lsls	r2, r3, #10
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	609a      	str	r2, [r3, #8]
}
 8004648:	bf00      	nop
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	40012300 	.word	0x40012300
 8004658:	0f000001 	.word	0x0f000001

0800465c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004668:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004672:	2b00      	cmp	r3, #0
 8004674:	d13c      	bne.n	80046f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d12b      	bne.n	80046e8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004694:	2b00      	cmp	r3, #0
 8004696:	d127      	bne.n	80046e8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d006      	beq.n	80046b4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d119      	bne.n	80046e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0220 	bic.w	r2, r2, #32
 80046c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d105      	bne.n	80046e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	f043 0201 	orr.w	r2, r3, #1
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f7fd ff31 	bl	8002550 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80046ee:	e00e      	b.n	800470e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f7ff fd75 	bl	80041ec <HAL_ADC_ErrorCallback>
}
 8004702:	e004      	b.n	800470e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	4798      	blx	r3
}
 800470e:	bf00      	nop
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b084      	sub	sp, #16
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f7fd ff2b 	bl	8002580 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800472a:	bf00      	nop
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2240      	movs	r2, #64	; 0x40
 8004744:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474a:	f043 0204 	orr.w	r2, r3, #4
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f7ff fd4a 	bl	80041ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004758:	bf00      	nop
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004784:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004790:	4013      	ands	r3, r2
 8004792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800479c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047a6:	4a04      	ldr	r2, [pc, #16]	; (80047b8 <__NVIC_SetPriorityGrouping+0x44>)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	60d3      	str	r3, [r2, #12]
}
 80047ac:	bf00      	nop
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	e000ed00 	.word	0xe000ed00

080047bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047c0:	4b04      	ldr	r3, [pc, #16]	; (80047d4 <__NVIC_GetPriorityGrouping+0x18>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	0a1b      	lsrs	r3, r3, #8
 80047c6:	f003 0307 	and.w	r3, r3, #7
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	e000ed00 	.word	0xe000ed00

080047d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	db0b      	blt.n	8004802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ea:	79fb      	ldrb	r3, [r7, #7]
 80047ec:	f003 021f 	and.w	r2, r3, #31
 80047f0:	4907      	ldr	r1, [pc, #28]	; (8004810 <__NVIC_EnableIRQ+0x38>)
 80047f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	2001      	movs	r0, #1
 80047fa:	fa00 f202 	lsl.w	r2, r0, r2
 80047fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	e000e100 	.word	0xe000e100

08004814 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800481e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004822:	2b00      	cmp	r3, #0
 8004824:	db12      	blt.n	800484c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	f003 021f 	and.w	r2, r3, #31
 800482c:	490a      	ldr	r1, [pc, #40]	; (8004858 <__NVIC_DisableIRQ+0x44>)
 800482e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	2001      	movs	r0, #1
 8004836:	fa00 f202 	lsl.w	r2, r0, r2
 800483a:	3320      	adds	r3, #32
 800483c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004840:	f3bf 8f4f 	dsb	sy
}
 8004844:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004846:	f3bf 8f6f 	isb	sy
}
 800484a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	e000e100 	.word	0xe000e100

0800485c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	6039      	str	r1, [r7, #0]
 8004866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486c:	2b00      	cmp	r3, #0
 800486e:	db0a      	blt.n	8004886 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	b2da      	uxtb	r2, r3
 8004874:	490c      	ldr	r1, [pc, #48]	; (80048a8 <__NVIC_SetPriority+0x4c>)
 8004876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487a:	0112      	lsls	r2, r2, #4
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	440b      	add	r3, r1
 8004880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004884:	e00a      	b.n	800489c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	b2da      	uxtb	r2, r3
 800488a:	4908      	ldr	r1, [pc, #32]	; (80048ac <__NVIC_SetPriority+0x50>)
 800488c:	79fb      	ldrb	r3, [r7, #7]
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	3b04      	subs	r3, #4
 8004894:	0112      	lsls	r2, r2, #4
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	440b      	add	r3, r1
 800489a:	761a      	strb	r2, [r3, #24]
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	e000e100 	.word	0xe000e100
 80048ac:	e000ed00 	.word	0xe000ed00

080048b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b089      	sub	sp, #36	; 0x24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	f1c3 0307 	rsb	r3, r3, #7
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	bf28      	it	cs
 80048ce:	2304      	movcs	r3, #4
 80048d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	3304      	adds	r3, #4
 80048d6:	2b06      	cmp	r3, #6
 80048d8:	d902      	bls.n	80048e0 <NVIC_EncodePriority+0x30>
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	3b03      	subs	r3, #3
 80048de:	e000      	b.n	80048e2 <NVIC_EncodePriority+0x32>
 80048e0:	2300      	movs	r3, #0
 80048e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048e4:	f04f 32ff 	mov.w	r2, #4294967295
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	43da      	mvns	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	401a      	ands	r2, r3
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048f8:	f04f 31ff 	mov.w	r1, #4294967295
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004902:	43d9      	mvns	r1, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004908:	4313      	orrs	r3, r2
         );
}
 800490a:	4618      	mov	r0, r3
 800490c:	3724      	adds	r7, #36	; 0x24
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
	...

08004918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3b01      	subs	r3, #1
 8004924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004928:	d301      	bcc.n	800492e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800492a:	2301      	movs	r3, #1
 800492c:	e00f      	b.n	800494e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800492e:	4a0a      	ldr	r2, [pc, #40]	; (8004958 <SysTick_Config+0x40>)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3b01      	subs	r3, #1
 8004934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004936:	210f      	movs	r1, #15
 8004938:	f04f 30ff 	mov.w	r0, #4294967295
 800493c:	f7ff ff8e 	bl	800485c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004940:	4b05      	ldr	r3, [pc, #20]	; (8004958 <SysTick_Config+0x40>)
 8004942:	2200      	movs	r2, #0
 8004944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004946:	4b04      	ldr	r3, [pc, #16]	; (8004958 <SysTick_Config+0x40>)
 8004948:	2207      	movs	r2, #7
 800494a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	e000e010 	.word	0xe000e010

0800495c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff ff05 	bl	8004774 <__NVIC_SetPriorityGrouping>
}
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004972:	b580      	push	{r7, lr}
 8004974:	b086      	sub	sp, #24
 8004976:	af00      	add	r7, sp, #0
 8004978:	4603      	mov	r3, r0
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	607a      	str	r2, [r7, #4]
 800497e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004980:	2300      	movs	r3, #0
 8004982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004984:	f7ff ff1a 	bl	80047bc <__NVIC_GetPriorityGrouping>
 8004988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	6978      	ldr	r0, [r7, #20]
 8004990:	f7ff ff8e 	bl	80048b0 <NVIC_EncodePriority>
 8004994:	4602      	mov	r2, r0
 8004996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800499a:	4611      	mov	r1, r2
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff ff5d 	bl	800485c <__NVIC_SetPriority>
}
 80049a2:	bf00      	nop
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b082      	sub	sp, #8
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	4603      	mov	r3, r0
 80049b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff ff0d 	bl	80047d8 <__NVIC_EnableIRQ>
}
 80049be:	bf00      	nop
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	4603      	mov	r3, r0
 80049ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80049d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff ff1d 	bl	8004814 <__NVIC_DisableIRQ>
}
 80049da:	bf00      	nop
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff ff94 	bl	8004918 <SysTick_Config>
 80049f0:	4603      	mov	r3, r0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a08:	f7ff f976 	bl	8003cf8 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e099      	b.n	8004b4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0201 	bic.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a38:	e00f      	b.n	8004a5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a3a:	f7ff f95d 	bl	8003cf8 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b05      	cmp	r3, #5
 8004a46:	d908      	bls.n	8004a5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2203      	movs	r2, #3
 8004a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e078      	b.n	8004b4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1e8      	bne.n	8004a3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	4b38      	ldr	r3, [pc, #224]	; (8004b54 <HAL_DMA_Init+0x158>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	d107      	bne.n	8004ac4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	4313      	orrs	r3, r2
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f023 0307 	bic.w	r3, r3, #7
 8004ada:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d117      	bne.n	8004b1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00e      	beq.n	8004b1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 fb01 	bl	8005108 <DMA_CheckFifoParam>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d008      	beq.n	8004b1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2240      	movs	r2, #64	; 0x40
 8004b10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e016      	b.n	8004b4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fab8 	bl	800509c <DMA_CalcBaseAndBitshift>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b34:	223f      	movs	r2, #63	; 0x3f
 8004b36:	409a      	lsls	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	f010803f 	.word	0xf010803f

08004b58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_DMA_Start_IT+0x26>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e040      	b.n	8004c00 <HAL_DMA_Start_IT+0xa8>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d12f      	bne.n	8004bf2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2202      	movs	r2, #2
 8004b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	68b9      	ldr	r1, [r7, #8]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 fa4a 	bl	8005040 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb0:	223f      	movs	r2, #63	; 0x3f
 8004bb2:	409a      	lsls	r2, r3
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0216 	orr.w	r2, r2, #22
 8004bc6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d007      	beq.n	8004be0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0208 	orr.w	r2, r2, #8
 8004bde:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0201 	orr.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	e005      	b.n	8004bfe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004c16:	f7ff f86f 	bl	8003cf8 <HAL_GetTick>
 8004c1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d008      	beq.n	8004c3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2280      	movs	r2, #128	; 0x80
 8004c2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e052      	b.n	8004ce0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0216 	bic.w	r2, r2, #22
 8004c48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695a      	ldr	r2, [r3, #20]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d103      	bne.n	8004c6a <HAL_DMA_Abort+0x62>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d007      	beq.n	8004c7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0208 	bic.w	r2, r2, #8
 8004c78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0201 	bic.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c8a:	e013      	b.n	8004cb4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c8c:	f7ff f834 	bl	8003cf8 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b05      	cmp	r3, #5
 8004c98:	d90c      	bls.n	8004cb4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2203      	movs	r2, #3
 8004ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e015      	b.n	8004ce0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e4      	bne.n	8004c8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc6:	223f      	movs	r2, #63	; 0x3f
 8004cc8:	409a      	lsls	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d004      	beq.n	8004d06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2280      	movs	r2, #128	; 0x80
 8004d00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e00c      	b.n	8004d20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2205      	movs	r2, #5
 8004d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0201 	bic.w	r2, r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d38:	4b8e      	ldr	r3, [pc, #568]	; (8004f74 <HAL_DMA_IRQHandler+0x248>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a8e      	ldr	r2, [pc, #568]	; (8004f78 <HAL_DMA_IRQHandler+0x24c>)
 8004d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d42:	0a9b      	lsrs	r3, r3, #10
 8004d44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d56:	2208      	movs	r2, #8
 8004d58:	409a      	lsls	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d01a      	beq.n	8004d98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d013      	beq.n	8004d98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0204 	bic.w	r2, r2, #4
 8004d7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d84:	2208      	movs	r2, #8
 8004d86:	409a      	lsls	r2, r3
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d90:	f043 0201 	orr.w	r2, r3, #1
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	409a      	lsls	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4013      	ands	r3, r2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d012      	beq.n	8004dce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00b      	beq.n	8004dce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dba:	2201      	movs	r2, #1
 8004dbc:	409a      	lsls	r2, r3
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc6:	f043 0202 	orr.w	r2, r3, #2
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd2:	2204      	movs	r2, #4
 8004dd4:	409a      	lsls	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d012      	beq.n	8004e04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00b      	beq.n	8004e04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df0:	2204      	movs	r2, #4
 8004df2:	409a      	lsls	r2, r3
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfc:	f043 0204 	orr.w	r2, r3, #4
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e08:	2210      	movs	r2, #16
 8004e0a:	409a      	lsls	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d043      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d03c      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e26:	2210      	movs	r2, #16
 8004e28:	409a      	lsls	r2, r3
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d018      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d108      	bne.n	8004e5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d024      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	4798      	blx	r3
 8004e5a:	e01f      	b.n	8004e9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d01b      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	4798      	blx	r3
 8004e6c:	e016      	b.n	8004e9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d107      	bne.n	8004e8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0208 	bic.w	r2, r2, #8
 8004e8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	409a      	lsls	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 808f 	beq.w	8004fcc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0310 	and.w	r3, r3, #16
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 8087 	beq.w	8004fcc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	409a      	lsls	r2, r3
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b05      	cmp	r3, #5
 8004ed4:	d136      	bne.n	8004f44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0216 	bic.w	r2, r2, #22
 8004ee4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695a      	ldr	r2, [r3, #20]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ef4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d103      	bne.n	8004f06 <HAL_DMA_IRQHandler+0x1da>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d007      	beq.n	8004f16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0208 	bic.w	r2, r2, #8
 8004f14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1a:	223f      	movs	r2, #63	; 0x3f
 8004f1c:	409a      	lsls	r2, r3
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d07e      	beq.n	8005038 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	4798      	blx	r3
        }
        return;
 8004f42:	e079      	b.n	8005038 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d01d      	beq.n	8004f8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10d      	bne.n	8004f7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d031      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	4798      	blx	r3
 8004f70:	e02c      	b.n	8004fcc <HAL_DMA_IRQHandler+0x2a0>
 8004f72:	bf00      	nop
 8004f74:	2000001c 	.word	0x2000001c
 8004f78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d023      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	4798      	blx	r3
 8004f8c:	e01e      	b.n	8004fcc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10f      	bne.n	8004fbc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0210 	bic.w	r2, r2, #16
 8004faa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d032      	beq.n	800503a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d022      	beq.n	8005026 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2205      	movs	r2, #5
 8004fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0201 	bic.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	60bb      	str	r3, [r7, #8]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	429a      	cmp	r2, r3
 8005002:	d307      	bcc.n	8005014 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f2      	bne.n	8004ff8 <HAL_DMA_IRQHandler+0x2cc>
 8005012:	e000      	b.n	8005016 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005014:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502a:	2b00      	cmp	r3, #0
 800502c:	d005      	beq.n	800503a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	4798      	blx	r3
 8005036:	e000      	b.n	800503a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005038:	bf00      	nop
    }
  }
}
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800505c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	2b40      	cmp	r3, #64	; 0x40
 800506c:	d108      	bne.n	8005080 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800507e:	e007      	b.n	8005090 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	60da      	str	r2, [r3, #12]
}
 8005090:	bf00      	nop
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	3b10      	subs	r3, #16
 80050ac:	4a14      	ldr	r2, [pc, #80]	; (8005100 <DMA_CalcBaseAndBitshift+0x64>)
 80050ae:	fba2 2303 	umull	r2, r3, r2, r3
 80050b2:	091b      	lsrs	r3, r3, #4
 80050b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80050b6:	4a13      	ldr	r2, [pc, #76]	; (8005104 <DMA_CalcBaseAndBitshift+0x68>)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	d909      	bls.n	80050de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050d2:	f023 0303 	bic.w	r3, r3, #3
 80050d6:	1d1a      	adds	r2, r3, #4
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	659a      	str	r2, [r3, #88]	; 0x58
 80050dc:	e007      	b.n	80050ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050e6:	f023 0303 	bic.w	r3, r3, #3
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	aaaaaaab 	.word	0xaaaaaaab
 8005104:	0800c544 	.word	0x0800c544

08005108 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005110:	2300      	movs	r3, #0
 8005112:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d11f      	bne.n	8005162 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2b03      	cmp	r3, #3
 8005126:	d856      	bhi.n	80051d6 <DMA_CheckFifoParam+0xce>
 8005128:	a201      	add	r2, pc, #4	; (adr r2, 8005130 <DMA_CheckFifoParam+0x28>)
 800512a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512e:	bf00      	nop
 8005130:	08005141 	.word	0x08005141
 8005134:	08005153 	.word	0x08005153
 8005138:	08005141 	.word	0x08005141
 800513c:	080051d7 	.word	0x080051d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d046      	beq.n	80051da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005150:	e043      	b.n	80051da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005156:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800515a:	d140      	bne.n	80051de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005160:	e03d      	b.n	80051de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800516a:	d121      	bne.n	80051b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b03      	cmp	r3, #3
 8005170:	d837      	bhi.n	80051e2 <DMA_CheckFifoParam+0xda>
 8005172:	a201      	add	r2, pc, #4	; (adr r2, 8005178 <DMA_CheckFifoParam+0x70>)
 8005174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005178:	08005189 	.word	0x08005189
 800517c:	0800518f 	.word	0x0800518f
 8005180:	08005189 	.word	0x08005189
 8005184:	080051a1 	.word	0x080051a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	73fb      	strb	r3, [r7, #15]
      break;
 800518c:	e030      	b.n	80051f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005192:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d025      	beq.n	80051e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800519e:	e022      	b.n	80051e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051a8:	d11f      	bne.n	80051ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80051ae:	e01c      	b.n	80051ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d903      	bls.n	80051be <DMA_CheckFifoParam+0xb6>
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b03      	cmp	r3, #3
 80051ba:	d003      	beq.n	80051c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80051bc:	e018      	b.n	80051f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	73fb      	strb	r3, [r7, #15]
      break;
 80051c2:	e015      	b.n	80051f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00e      	beq.n	80051ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	73fb      	strb	r3, [r7, #15]
      break;
 80051d4:	e00b      	b.n	80051ee <DMA_CheckFifoParam+0xe6>
      break;
 80051d6:	bf00      	nop
 80051d8:	e00a      	b.n	80051f0 <DMA_CheckFifoParam+0xe8>
      break;
 80051da:	bf00      	nop
 80051dc:	e008      	b.n	80051f0 <DMA_CheckFifoParam+0xe8>
      break;
 80051de:	bf00      	nop
 80051e0:	e006      	b.n	80051f0 <DMA_CheckFifoParam+0xe8>
      break;
 80051e2:	bf00      	nop
 80051e4:	e004      	b.n	80051f0 <DMA_CheckFifoParam+0xe8>
      break;
 80051e6:	bf00      	nop
 80051e8:	e002      	b.n	80051f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80051ea:	bf00      	nop
 80051ec:	e000      	b.n	80051f0 <DMA_CheckFifoParam+0xe8>
      break;
 80051ee:	bf00      	nop
    }
  } 
  
  return status; 
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop

08005200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005200:	b480      	push	{r7}
 8005202:	b089      	sub	sp, #36	; 0x24
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800520e:	2300      	movs	r3, #0
 8005210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005212:	2300      	movs	r3, #0
 8005214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
 800521a:	e165      	b.n	80054e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800521c:	2201      	movs	r2, #1
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4013      	ands	r3, r2
 800522e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	429a      	cmp	r2, r3
 8005236:	f040 8154 	bne.w	80054e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	2b01      	cmp	r3, #1
 8005244:	d005      	beq.n	8005252 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800524e:	2b02      	cmp	r3, #2
 8005250:	d130      	bne.n	80052b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	2203      	movs	r2, #3
 800525e:	fa02 f303 	lsl.w	r3, r2, r3
 8005262:	43db      	mvns	r3, r3
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	4013      	ands	r3, r2
 8005268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	fa02 f303 	lsl.w	r3, r2, r3
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	4313      	orrs	r3, r2
 800527a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005288:	2201      	movs	r2, #1
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	43db      	mvns	r3, r3
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	4013      	ands	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	091b      	lsrs	r3, r3, #4
 800529e:	f003 0201 	and.w	r2, r3, #1
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d017      	beq.n	80052f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	2203      	movs	r2, #3
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	43db      	mvns	r3, r3
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	4013      	ands	r3, r2
 80052d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f003 0303 	and.w	r3, r3, #3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d123      	bne.n	8005344 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	08da      	lsrs	r2, r3, #3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3208      	adds	r2, #8
 8005304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005308:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	220f      	movs	r2, #15
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	43db      	mvns	r3, r3
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	4013      	ands	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	4313      	orrs	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	08da      	lsrs	r2, r3, #3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3208      	adds	r2, #8
 800533e:	69b9      	ldr	r1, [r7, #24]
 8005340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	2203      	movs	r2, #3
 8005350:	fa02 f303 	lsl.w	r3, r2, r3
 8005354:	43db      	mvns	r3, r3
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	4013      	ands	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f003 0203 	and.w	r2, r3, #3
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	4313      	orrs	r3, r2
 8005370:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80ae 	beq.w	80054e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005386:	2300      	movs	r3, #0
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	4b5d      	ldr	r3, [pc, #372]	; (8005500 <HAL_GPIO_Init+0x300>)
 800538c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538e:	4a5c      	ldr	r2, [pc, #368]	; (8005500 <HAL_GPIO_Init+0x300>)
 8005390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005394:	6453      	str	r3, [r2, #68]	; 0x44
 8005396:	4b5a      	ldr	r3, [pc, #360]	; (8005500 <HAL_GPIO_Init+0x300>)
 8005398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053a2:	4a58      	ldr	r2, [pc, #352]	; (8005504 <HAL_GPIO_Init+0x304>)
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	089b      	lsrs	r3, r3, #2
 80053a8:	3302      	adds	r3, #2
 80053aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	220f      	movs	r2, #15
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	43db      	mvns	r3, r3
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	4013      	ands	r3, r2
 80053c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a4f      	ldr	r2, [pc, #316]	; (8005508 <HAL_GPIO_Init+0x308>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d025      	beq.n	800541a <HAL_GPIO_Init+0x21a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a4e      	ldr	r2, [pc, #312]	; (800550c <HAL_GPIO_Init+0x30c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d01f      	beq.n	8005416 <HAL_GPIO_Init+0x216>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a4d      	ldr	r2, [pc, #308]	; (8005510 <HAL_GPIO_Init+0x310>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d019      	beq.n	8005412 <HAL_GPIO_Init+0x212>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a4c      	ldr	r2, [pc, #304]	; (8005514 <HAL_GPIO_Init+0x314>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d013      	beq.n	800540e <HAL_GPIO_Init+0x20e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a4b      	ldr	r2, [pc, #300]	; (8005518 <HAL_GPIO_Init+0x318>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00d      	beq.n	800540a <HAL_GPIO_Init+0x20a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a4a      	ldr	r2, [pc, #296]	; (800551c <HAL_GPIO_Init+0x31c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d007      	beq.n	8005406 <HAL_GPIO_Init+0x206>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a49      	ldr	r2, [pc, #292]	; (8005520 <HAL_GPIO_Init+0x320>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d101      	bne.n	8005402 <HAL_GPIO_Init+0x202>
 80053fe:	2306      	movs	r3, #6
 8005400:	e00c      	b.n	800541c <HAL_GPIO_Init+0x21c>
 8005402:	2307      	movs	r3, #7
 8005404:	e00a      	b.n	800541c <HAL_GPIO_Init+0x21c>
 8005406:	2305      	movs	r3, #5
 8005408:	e008      	b.n	800541c <HAL_GPIO_Init+0x21c>
 800540a:	2304      	movs	r3, #4
 800540c:	e006      	b.n	800541c <HAL_GPIO_Init+0x21c>
 800540e:	2303      	movs	r3, #3
 8005410:	e004      	b.n	800541c <HAL_GPIO_Init+0x21c>
 8005412:	2302      	movs	r3, #2
 8005414:	e002      	b.n	800541c <HAL_GPIO_Init+0x21c>
 8005416:	2301      	movs	r3, #1
 8005418:	e000      	b.n	800541c <HAL_GPIO_Init+0x21c>
 800541a:	2300      	movs	r3, #0
 800541c:	69fa      	ldr	r2, [r7, #28]
 800541e:	f002 0203 	and.w	r2, r2, #3
 8005422:	0092      	lsls	r2, r2, #2
 8005424:	4093      	lsls	r3, r2
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	4313      	orrs	r3, r2
 800542a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800542c:	4935      	ldr	r1, [pc, #212]	; (8005504 <HAL_GPIO_Init+0x304>)
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	089b      	lsrs	r3, r3, #2
 8005432:	3302      	adds	r3, #2
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800543a:	4b3a      	ldr	r3, [pc, #232]	; (8005524 <HAL_GPIO_Init+0x324>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	43db      	mvns	r3, r3
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	4013      	ands	r3, r2
 8005448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	4313      	orrs	r3, r2
 800545c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800545e:	4a31      	ldr	r2, [pc, #196]	; (8005524 <HAL_GPIO_Init+0x324>)
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005464:	4b2f      	ldr	r3, [pc, #188]	; (8005524 <HAL_GPIO_Init+0x324>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	43db      	mvns	r3, r3
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	4013      	ands	r3, r2
 8005472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	4313      	orrs	r3, r2
 8005486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005488:	4a26      	ldr	r2, [pc, #152]	; (8005524 <HAL_GPIO_Init+0x324>)
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800548e:	4b25      	ldr	r3, [pc, #148]	; (8005524 <HAL_GPIO_Init+0x324>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	43db      	mvns	r3, r3
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	4013      	ands	r3, r2
 800549c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054b2:	4a1c      	ldr	r2, [pc, #112]	; (8005524 <HAL_GPIO_Init+0x324>)
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054b8:	4b1a      	ldr	r3, [pc, #104]	; (8005524 <HAL_GPIO_Init+0x324>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	43db      	mvns	r3, r3
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	4013      	ands	r3, r2
 80054c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	4313      	orrs	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054dc:	4a11      	ldr	r2, [pc, #68]	; (8005524 <HAL_GPIO_Init+0x324>)
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	3301      	adds	r3, #1
 80054e6:	61fb      	str	r3, [r7, #28]
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	2b0f      	cmp	r3, #15
 80054ec:	f67f ae96 	bls.w	800521c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop
 80054f4:	3724      	adds	r7, #36	; 0x24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	40023800 	.word	0x40023800
 8005504:	40013800 	.word	0x40013800
 8005508:	40020000 	.word	0x40020000
 800550c:	40020400 	.word	0x40020400
 8005510:	40020800 	.word	0x40020800
 8005514:	40020c00 	.word	0x40020c00
 8005518:	40021000 	.word	0x40021000
 800551c:	40021400 	.word	0x40021400
 8005520:	40021800 	.word	0x40021800
 8005524:	40013c00 	.word	0x40013c00

08005528 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	460b      	mov	r3, r1
 8005532:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	887b      	ldrh	r3, [r7, #2]
 800553a:	4013      	ands	r3, r2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005540:	2301      	movs	r3, #1
 8005542:	73fb      	strb	r3, [r7, #15]
 8005544:	e001      	b.n	800554a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005546:	2300      	movs	r3, #0
 8005548:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800554a:	7bfb      	ldrb	r3, [r7, #15]
}
 800554c:	4618      	mov	r0, r3
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	807b      	strh	r3, [r7, #2]
 8005564:	4613      	mov	r3, r2
 8005566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005568:	787b      	ldrb	r3, [r7, #1]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800556e:	887a      	ldrh	r2, [r7, #2]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005574:	e003      	b.n	800557e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005576:	887b      	ldrh	r3, [r7, #2]
 8005578:	041a      	lsls	r2, r3, #16
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	619a      	str	r2, [r3, #24]
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
	...

0800558c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	4603      	mov	r3, r0
 8005594:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005596:	4b08      	ldr	r3, [pc, #32]	; (80055b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	88fb      	ldrh	r3, [r7, #6]
 800559c:	4013      	ands	r3, r2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d006      	beq.n	80055b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055a2:	4a05      	ldr	r2, [pc, #20]	; (80055b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055a4:	88fb      	ldrh	r3, [r7, #6]
 80055a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055a8:	88fb      	ldrh	r3, [r7, #6]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fd f81a 	bl	80025e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40013c00 	.word	0x40013c00

080055bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e0cc      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055d0:	4b68      	ldr	r3, [pc, #416]	; (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 030f 	and.w	r3, r3, #15
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d90c      	bls.n	80055f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055de:	4b65      	ldr	r3, [pc, #404]	; (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055e6:	4b63      	ldr	r3, [pc, #396]	; (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d001      	beq.n	80055f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e0b8      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d020      	beq.n	8005646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005610:	4b59      	ldr	r3, [pc, #356]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	4a58      	ldr	r2, [pc, #352]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800561a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0308 	and.w	r3, r3, #8
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005628:	4b53      	ldr	r3, [pc, #332]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	4a52      	ldr	r2, [pc, #328]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800562e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005634:	4b50      	ldr	r3, [pc, #320]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	494d      	ldr	r1, [pc, #308]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005642:	4313      	orrs	r3, r2
 8005644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d044      	beq.n	80056dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d107      	bne.n	800566a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800565a:	4b47      	ldr	r3, [pc, #284]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d119      	bne.n	800569a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e07f      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b02      	cmp	r3, #2
 8005670:	d003      	beq.n	800567a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005676:	2b03      	cmp	r3, #3
 8005678:	d107      	bne.n	800568a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800567a:	4b3f      	ldr	r3, [pc, #252]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d109      	bne.n	800569a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e06f      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800568a:	4b3b      	ldr	r3, [pc, #236]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e067      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800569a:	4b37      	ldr	r3, [pc, #220]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f023 0203 	bic.w	r2, r3, #3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	4934      	ldr	r1, [pc, #208]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056ac:	f7fe fb24 	bl	8003cf8 <HAL_GetTick>
 80056b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b2:	e00a      	b.n	80056ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056b4:	f7fe fb20 	bl	8003cf8 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e04f      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ca:	4b2b      	ldr	r3, [pc, #172]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 020c 	and.w	r2, r3, #12
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	429a      	cmp	r2, r3
 80056da:	d1eb      	bne.n	80056b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056dc:	4b25      	ldr	r3, [pc, #148]	; (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 030f 	and.w	r3, r3, #15
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d20c      	bcs.n	8005704 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ea:	4b22      	ldr	r3, [pc, #136]	; (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f2:	4b20      	ldr	r3, [pc, #128]	; (8005774 <HAL_RCC_ClockConfig+0x1b8>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 030f 	and.w	r3, r3, #15
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d001      	beq.n	8005704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e032      	b.n	800576a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	d008      	beq.n	8005722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005710:	4b19      	ldr	r3, [pc, #100]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	4916      	ldr	r1, [pc, #88]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800571e:	4313      	orrs	r3, r2
 8005720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d009      	beq.n	8005742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800572e:	4b12      	ldr	r3, [pc, #72]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	490e      	ldr	r1, [pc, #56]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800573e:	4313      	orrs	r3, r2
 8005740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005742:	f000 f855 	bl	80057f0 <HAL_RCC_GetSysClockFreq>
 8005746:	4602      	mov	r2, r0
 8005748:	4b0b      	ldr	r3, [pc, #44]	; (8005778 <HAL_RCC_ClockConfig+0x1bc>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	091b      	lsrs	r3, r3, #4
 800574e:	f003 030f 	and.w	r3, r3, #15
 8005752:	490a      	ldr	r1, [pc, #40]	; (800577c <HAL_RCC_ClockConfig+0x1c0>)
 8005754:	5ccb      	ldrb	r3, [r1, r3]
 8005756:	fa22 f303 	lsr.w	r3, r2, r3
 800575a:	4a09      	ldr	r2, [pc, #36]	; (8005780 <HAL_RCC_ClockConfig+0x1c4>)
 800575c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800575e:	4b09      	ldr	r3, [pc, #36]	; (8005784 <HAL_RCC_ClockConfig+0x1c8>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4618      	mov	r0, r3
 8005764:	f7fe fa84 	bl	8003c70 <HAL_InitTick>

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40023c00 	.word	0x40023c00
 8005778:	40023800 	.word	0x40023800
 800577c:	0800c52c 	.word	0x0800c52c
 8005780:	2000001c 	.word	0x2000001c
 8005784:	20000020 	.word	0x20000020

08005788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800578c:	4b03      	ldr	r3, [pc, #12]	; (800579c <HAL_RCC_GetHCLKFreq+0x14>)
 800578e:	681b      	ldr	r3, [r3, #0]
}
 8005790:	4618      	mov	r0, r3
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	2000001c 	.word	0x2000001c

080057a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057a4:	f7ff fff0 	bl	8005788 <HAL_RCC_GetHCLKFreq>
 80057a8:	4602      	mov	r2, r0
 80057aa:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	0a9b      	lsrs	r3, r3, #10
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	4903      	ldr	r1, [pc, #12]	; (80057c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057b6:	5ccb      	ldrb	r3, [r1, r3]
 80057b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057bc:	4618      	mov	r0, r3
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	40023800 	.word	0x40023800
 80057c4:	0800c53c 	.word	0x0800c53c

080057c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057cc:	f7ff ffdc 	bl	8005788 <HAL_RCC_GetHCLKFreq>
 80057d0:	4602      	mov	r2, r0
 80057d2:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	0b5b      	lsrs	r3, r3, #13
 80057d8:	f003 0307 	and.w	r3, r3, #7
 80057dc:	4903      	ldr	r1, [pc, #12]	; (80057ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80057de:	5ccb      	ldrb	r3, [r1, r3]
 80057e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40023800 	.word	0x40023800
 80057ec:	0800c53c 	.word	0x0800c53c

080057f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057f4:	b0ae      	sub	sp, #184	; 0xb8
 80057f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80057fe:	2300      	movs	r3, #0
 8005800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005816:	4bcb      	ldr	r3, [pc, #812]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x354>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 030c 	and.w	r3, r3, #12
 800581e:	2b0c      	cmp	r3, #12
 8005820:	f200 8206 	bhi.w	8005c30 <HAL_RCC_GetSysClockFreq+0x440>
 8005824:	a201      	add	r2, pc, #4	; (adr r2, 800582c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582a:	bf00      	nop
 800582c:	08005861 	.word	0x08005861
 8005830:	08005c31 	.word	0x08005c31
 8005834:	08005c31 	.word	0x08005c31
 8005838:	08005c31 	.word	0x08005c31
 800583c:	08005869 	.word	0x08005869
 8005840:	08005c31 	.word	0x08005c31
 8005844:	08005c31 	.word	0x08005c31
 8005848:	08005c31 	.word	0x08005c31
 800584c:	08005871 	.word	0x08005871
 8005850:	08005c31 	.word	0x08005c31
 8005854:	08005c31 	.word	0x08005c31
 8005858:	08005c31 	.word	0x08005c31
 800585c:	08005a61 	.word	0x08005a61
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005860:	4bb9      	ldr	r3, [pc, #740]	; (8005b48 <HAL_RCC_GetSysClockFreq+0x358>)
 8005862:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005866:	e1e7      	b.n	8005c38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005868:	4bb8      	ldr	r3, [pc, #736]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x35c>)
 800586a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800586e:	e1e3      	b.n	8005c38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005870:	4bb4      	ldr	r3, [pc, #720]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x354>)
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005878:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800587c:	4bb1      	ldr	r3, [pc, #708]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x354>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d071      	beq.n	800596c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005888:	4bae      	ldr	r3, [pc, #696]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x354>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	099b      	lsrs	r3, r3, #6
 800588e:	2200      	movs	r2, #0
 8005890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005894:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005898:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800589c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058a4:	2300      	movs	r3, #0
 80058a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058ae:	4622      	mov	r2, r4
 80058b0:	462b      	mov	r3, r5
 80058b2:	f04f 0000 	mov.w	r0, #0
 80058b6:	f04f 0100 	mov.w	r1, #0
 80058ba:	0159      	lsls	r1, r3, #5
 80058bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058c0:	0150      	lsls	r0, r2, #5
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4621      	mov	r1, r4
 80058c8:	1a51      	subs	r1, r2, r1
 80058ca:	6439      	str	r1, [r7, #64]	; 0x40
 80058cc:	4629      	mov	r1, r5
 80058ce:	eb63 0301 	sbc.w	r3, r3, r1
 80058d2:	647b      	str	r3, [r7, #68]	; 0x44
 80058d4:	f04f 0200 	mov.w	r2, #0
 80058d8:	f04f 0300 	mov.w	r3, #0
 80058dc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80058e0:	4649      	mov	r1, r9
 80058e2:	018b      	lsls	r3, r1, #6
 80058e4:	4641      	mov	r1, r8
 80058e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058ea:	4641      	mov	r1, r8
 80058ec:	018a      	lsls	r2, r1, #6
 80058ee:	4641      	mov	r1, r8
 80058f0:	1a51      	subs	r1, r2, r1
 80058f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80058f4:	4649      	mov	r1, r9
 80058f6:	eb63 0301 	sbc.w	r3, r3, r1
 80058fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005908:	4649      	mov	r1, r9
 800590a:	00cb      	lsls	r3, r1, #3
 800590c:	4641      	mov	r1, r8
 800590e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005912:	4641      	mov	r1, r8
 8005914:	00ca      	lsls	r2, r1, #3
 8005916:	4610      	mov	r0, r2
 8005918:	4619      	mov	r1, r3
 800591a:	4603      	mov	r3, r0
 800591c:	4622      	mov	r2, r4
 800591e:	189b      	adds	r3, r3, r2
 8005920:	633b      	str	r3, [r7, #48]	; 0x30
 8005922:	462b      	mov	r3, r5
 8005924:	460a      	mov	r2, r1
 8005926:	eb42 0303 	adc.w	r3, r2, r3
 800592a:	637b      	str	r3, [r7, #52]	; 0x34
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005938:	4629      	mov	r1, r5
 800593a:	024b      	lsls	r3, r1, #9
 800593c:	4621      	mov	r1, r4
 800593e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005942:	4621      	mov	r1, r4
 8005944:	024a      	lsls	r2, r1, #9
 8005946:	4610      	mov	r0, r2
 8005948:	4619      	mov	r1, r3
 800594a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800594e:	2200      	movs	r2, #0
 8005950:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005954:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005958:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800595c:	f7fb f9b4 	bl	8000cc8 <__aeabi_uldivmod>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4613      	mov	r3, r2
 8005966:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800596a:	e067      	b.n	8005a3c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800596c:	4b75      	ldr	r3, [pc, #468]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x354>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	099b      	lsrs	r3, r3, #6
 8005972:	2200      	movs	r2, #0
 8005974:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005978:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800597c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005984:	67bb      	str	r3, [r7, #120]	; 0x78
 8005986:	2300      	movs	r3, #0
 8005988:	67fb      	str	r3, [r7, #124]	; 0x7c
 800598a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800598e:	4622      	mov	r2, r4
 8005990:	462b      	mov	r3, r5
 8005992:	f04f 0000 	mov.w	r0, #0
 8005996:	f04f 0100 	mov.w	r1, #0
 800599a:	0159      	lsls	r1, r3, #5
 800599c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059a0:	0150      	lsls	r0, r2, #5
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	4621      	mov	r1, r4
 80059a8:	1a51      	subs	r1, r2, r1
 80059aa:	62b9      	str	r1, [r7, #40]	; 0x28
 80059ac:	4629      	mov	r1, r5
 80059ae:	eb63 0301 	sbc.w	r3, r3, r1
 80059b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80059c0:	4649      	mov	r1, r9
 80059c2:	018b      	lsls	r3, r1, #6
 80059c4:	4641      	mov	r1, r8
 80059c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059ca:	4641      	mov	r1, r8
 80059cc:	018a      	lsls	r2, r1, #6
 80059ce:	4641      	mov	r1, r8
 80059d0:	ebb2 0a01 	subs.w	sl, r2, r1
 80059d4:	4649      	mov	r1, r9
 80059d6:	eb63 0b01 	sbc.w	fp, r3, r1
 80059da:	f04f 0200 	mov.w	r2, #0
 80059de:	f04f 0300 	mov.w	r3, #0
 80059e2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059e6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059ee:	4692      	mov	sl, r2
 80059f0:	469b      	mov	fp, r3
 80059f2:	4623      	mov	r3, r4
 80059f4:	eb1a 0303 	adds.w	r3, sl, r3
 80059f8:	623b      	str	r3, [r7, #32]
 80059fa:	462b      	mov	r3, r5
 80059fc:	eb4b 0303 	adc.w	r3, fp, r3
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
 8005a02:	f04f 0200 	mov.w	r2, #0
 8005a06:	f04f 0300 	mov.w	r3, #0
 8005a0a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005a0e:	4629      	mov	r1, r5
 8005a10:	028b      	lsls	r3, r1, #10
 8005a12:	4621      	mov	r1, r4
 8005a14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a18:	4621      	mov	r1, r4
 8005a1a:	028a      	lsls	r2, r1, #10
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	4619      	mov	r1, r3
 8005a20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a24:	2200      	movs	r2, #0
 8005a26:	673b      	str	r3, [r7, #112]	; 0x70
 8005a28:	677a      	str	r2, [r7, #116]	; 0x74
 8005a2a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005a2e:	f7fb f94b 	bl	8000cc8 <__aeabi_uldivmod>
 8005a32:	4602      	mov	r2, r0
 8005a34:	460b      	mov	r3, r1
 8005a36:	4613      	mov	r3, r2
 8005a38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a3c:	4b41      	ldr	r3, [pc, #260]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	0c1b      	lsrs	r3, r3, #16
 8005a42:	f003 0303 	and.w	r3, r3, #3
 8005a46:	3301      	adds	r3, #1
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005a4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005a5e:	e0eb      	b.n	8005c38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a60:	4b38      	ldr	r3, [pc, #224]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a6c:	4b35      	ldr	r3, [pc, #212]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d06b      	beq.n	8005b50 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a78:	4b32      	ldr	r3, [pc, #200]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	099b      	lsrs	r3, r3, #6
 8005a7e:	2200      	movs	r2, #0
 8005a80:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a8a:	663b      	str	r3, [r7, #96]	; 0x60
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	667b      	str	r3, [r7, #100]	; 0x64
 8005a90:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005a94:	4622      	mov	r2, r4
 8005a96:	462b      	mov	r3, r5
 8005a98:	f04f 0000 	mov.w	r0, #0
 8005a9c:	f04f 0100 	mov.w	r1, #0
 8005aa0:	0159      	lsls	r1, r3, #5
 8005aa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005aa6:	0150      	lsls	r0, r2, #5
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	460b      	mov	r3, r1
 8005aac:	4621      	mov	r1, r4
 8005aae:	1a51      	subs	r1, r2, r1
 8005ab0:	61b9      	str	r1, [r7, #24]
 8005ab2:	4629      	mov	r1, r5
 8005ab4:	eb63 0301 	sbc.w	r3, r3, r1
 8005ab8:	61fb      	str	r3, [r7, #28]
 8005aba:	f04f 0200 	mov.w	r2, #0
 8005abe:	f04f 0300 	mov.w	r3, #0
 8005ac2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005ac6:	4659      	mov	r1, fp
 8005ac8:	018b      	lsls	r3, r1, #6
 8005aca:	4651      	mov	r1, sl
 8005acc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ad0:	4651      	mov	r1, sl
 8005ad2:	018a      	lsls	r2, r1, #6
 8005ad4:	4651      	mov	r1, sl
 8005ad6:	ebb2 0801 	subs.w	r8, r2, r1
 8005ada:	4659      	mov	r1, fp
 8005adc:	eb63 0901 	sbc.w	r9, r3, r1
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	f04f 0300 	mov.w	r3, #0
 8005ae8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005aec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005af0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005af4:	4690      	mov	r8, r2
 8005af6:	4699      	mov	r9, r3
 8005af8:	4623      	mov	r3, r4
 8005afa:	eb18 0303 	adds.w	r3, r8, r3
 8005afe:	613b      	str	r3, [r7, #16]
 8005b00:	462b      	mov	r3, r5
 8005b02:	eb49 0303 	adc.w	r3, r9, r3
 8005b06:	617b      	str	r3, [r7, #20]
 8005b08:	f04f 0200 	mov.w	r2, #0
 8005b0c:	f04f 0300 	mov.w	r3, #0
 8005b10:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005b14:	4629      	mov	r1, r5
 8005b16:	024b      	lsls	r3, r1, #9
 8005b18:	4621      	mov	r1, r4
 8005b1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b1e:	4621      	mov	r1, r4
 8005b20:	024a      	lsls	r2, r1, #9
 8005b22:	4610      	mov	r0, r2
 8005b24:	4619      	mov	r1, r3
 8005b26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b2e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005b30:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b34:	f7fb f8c8 	bl	8000cc8 <__aeabi_uldivmod>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b42:	e065      	b.n	8005c10 <HAL_RCC_GetSysClockFreq+0x420>
 8005b44:	40023800 	.word	0x40023800
 8005b48:	00f42400 	.word	0x00f42400
 8005b4c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b50:	4b3d      	ldr	r3, [pc, #244]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x458>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	099b      	lsrs	r3, r3, #6
 8005b56:	2200      	movs	r2, #0
 8005b58:	4618      	mov	r0, r3
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b60:	653b      	str	r3, [r7, #80]	; 0x50
 8005b62:	2300      	movs	r3, #0
 8005b64:	657b      	str	r3, [r7, #84]	; 0x54
 8005b66:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005b6a:	4642      	mov	r2, r8
 8005b6c:	464b      	mov	r3, r9
 8005b6e:	f04f 0000 	mov.w	r0, #0
 8005b72:	f04f 0100 	mov.w	r1, #0
 8005b76:	0159      	lsls	r1, r3, #5
 8005b78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b7c:	0150      	lsls	r0, r2, #5
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4641      	mov	r1, r8
 8005b84:	1a51      	subs	r1, r2, r1
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	4649      	mov	r1, r9
 8005b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	f04f 0300 	mov.w	r3, #0
 8005b98:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005b9c:	4659      	mov	r1, fp
 8005b9e:	018b      	lsls	r3, r1, #6
 8005ba0:	4651      	mov	r1, sl
 8005ba2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ba6:	4651      	mov	r1, sl
 8005ba8:	018a      	lsls	r2, r1, #6
 8005baa:	4651      	mov	r1, sl
 8005bac:	1a54      	subs	r4, r2, r1
 8005bae:	4659      	mov	r1, fp
 8005bb0:	eb63 0501 	sbc.w	r5, r3, r1
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	f04f 0300 	mov.w	r3, #0
 8005bbc:	00eb      	lsls	r3, r5, #3
 8005bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bc2:	00e2      	lsls	r2, r4, #3
 8005bc4:	4614      	mov	r4, r2
 8005bc6:	461d      	mov	r5, r3
 8005bc8:	4643      	mov	r3, r8
 8005bca:	18e3      	adds	r3, r4, r3
 8005bcc:	603b      	str	r3, [r7, #0]
 8005bce:	464b      	mov	r3, r9
 8005bd0:	eb45 0303 	adc.w	r3, r5, r3
 8005bd4:	607b      	str	r3, [r7, #4]
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	f04f 0300 	mov.w	r3, #0
 8005bde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005be2:	4629      	mov	r1, r5
 8005be4:	028b      	lsls	r3, r1, #10
 8005be6:	4621      	mov	r1, r4
 8005be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bec:	4621      	mov	r1, r4
 8005bee:	028a      	lsls	r2, r1, #10
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bfc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005bfe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c02:	f7fb f861 	bl	8000cc8 <__aeabi_uldivmod>
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005c10:	4b0d      	ldr	r3, [pc, #52]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x458>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	0f1b      	lsrs	r3, r3, #28
 8005c16:	f003 0307 	and.w	r3, r3, #7
 8005c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005c1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005c2e:	e003      	b.n	8005c38 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c30:	4b06      	ldr	r3, [pc, #24]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x45c>)
 8005c32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005c36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	37b8      	adds	r7, #184	; 0xb8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c46:	bf00      	nop
 8005c48:	40023800 	.word	0x40023800
 8005c4c:	00f42400 	.word	0x00f42400

08005c50 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e28d      	b.n	800617e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 8083 	beq.w	8005d76 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c70:	4b94      	ldr	r3, [pc, #592]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 030c 	and.w	r3, r3, #12
 8005c78:	2b04      	cmp	r3, #4
 8005c7a:	d019      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c7c:	4b91      	ldr	r3, [pc, #580]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c84:	2b08      	cmp	r3, #8
 8005c86:	d106      	bne.n	8005c96 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c88:	4b8e      	ldr	r3, [pc, #568]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c94:	d00c      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c96:	4b8b      	ldr	r3, [pc, #556]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005c9e:	2b0c      	cmp	r3, #12
 8005ca0:	d112      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ca2:	4b88      	ldr	r3, [pc, #544]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005caa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cae:	d10b      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cb0:	4b84      	ldr	r3, [pc, #528]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d05b      	beq.n	8005d74 <HAL_RCC_OscConfig+0x124>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d157      	bne.n	8005d74 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e25a      	b.n	800617e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cd0:	d106      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x90>
 8005cd2:	4b7c      	ldr	r3, [pc, #496]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a7b      	ldr	r2, [pc, #492]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cdc:	6013      	str	r3, [r2, #0]
 8005cde:	e01d      	b.n	8005d1c <HAL_RCC_OscConfig+0xcc>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ce8:	d10c      	bne.n	8005d04 <HAL_RCC_OscConfig+0xb4>
 8005cea:	4b76      	ldr	r3, [pc, #472]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a75      	ldr	r2, [pc, #468]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	4b73      	ldr	r3, [pc, #460]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a72      	ldr	r2, [pc, #456]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	e00b      	b.n	8005d1c <HAL_RCC_OscConfig+0xcc>
 8005d04:	4b6f      	ldr	r3, [pc, #444]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a6e      	ldr	r2, [pc, #440]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	4b6c      	ldr	r3, [pc, #432]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a6b      	ldr	r2, [pc, #428]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d013      	beq.n	8005d4c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d24:	f7fd ffe8 	bl	8003cf8 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d2c:	f7fd ffe4 	bl	8003cf8 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b64      	cmp	r3, #100	; 0x64
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e21f      	b.n	800617e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d3e:	4b61      	ldr	r3, [pc, #388]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0f0      	beq.n	8005d2c <HAL_RCC_OscConfig+0xdc>
 8005d4a:	e014      	b.n	8005d76 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d4c:	f7fd ffd4 	bl	8003cf8 <HAL_GetTick>
 8005d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d52:	e008      	b.n	8005d66 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d54:	f7fd ffd0 	bl	8003cf8 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b64      	cmp	r3, #100	; 0x64
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e20b      	b.n	800617e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d66:	4b57      	ldr	r3, [pc, #348]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1f0      	bne.n	8005d54 <HAL_RCC_OscConfig+0x104>
 8005d72:	e000      	b.n	8005d76 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d06f      	beq.n	8005e62 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d82:	4b50      	ldr	r3, [pc, #320]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 030c 	and.w	r3, r3, #12
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d017      	beq.n	8005dbe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d8e:	4b4d      	ldr	r3, [pc, #308]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d96:	2b08      	cmp	r3, #8
 8005d98:	d105      	bne.n	8005da6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005d9a:	4b4a      	ldr	r3, [pc, #296]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00b      	beq.n	8005dbe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005da6:	4b47      	ldr	r3, [pc, #284]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005dae:	2b0c      	cmp	r3, #12
 8005db0:	d11c      	bne.n	8005dec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005db2:	4b44      	ldr	r3, [pc, #272]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d116      	bne.n	8005dec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dbe:	4b41      	ldr	r3, [pc, #260]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d005      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x186>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d001      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e1d3      	b.n	800617e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dd6:	4b3b      	ldr	r3, [pc, #236]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	4937      	ldr	r1, [pc, #220]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dea:	e03a      	b.n	8005e62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d020      	beq.n	8005e36 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005df4:	4b34      	ldr	r3, [pc, #208]	; (8005ec8 <HAL_RCC_OscConfig+0x278>)
 8005df6:	2201      	movs	r2, #1
 8005df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dfa:	f7fd ff7d 	bl	8003cf8 <HAL_GetTick>
 8005dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e00:	e008      	b.n	8005e14 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e02:	f7fd ff79 	bl	8003cf8 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d901      	bls.n	8005e14 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e1b4      	b.n	800617e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e14:	4b2b      	ldr	r3, [pc, #172]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0f0      	beq.n	8005e02 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e20:	4b28      	ldr	r3, [pc, #160]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	4925      	ldr	r1, [pc, #148]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	600b      	str	r3, [r1, #0]
 8005e34:	e015      	b.n	8005e62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e36:	4b24      	ldr	r3, [pc, #144]	; (8005ec8 <HAL_RCC_OscConfig+0x278>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e3c:	f7fd ff5c 	bl	8003cf8 <HAL_GetTick>
 8005e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e42:	e008      	b.n	8005e56 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e44:	f7fd ff58 	bl	8003cf8 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e193      	b.n	800617e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e56:	4b1b      	ldr	r3, [pc, #108]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1f0      	bne.n	8005e44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d036      	beq.n	8005edc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d016      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e76:	4b15      	ldr	r3, [pc, #84]	; (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005e78:	2201      	movs	r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e7c:	f7fd ff3c 	bl	8003cf8 <HAL_GetTick>
 8005e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e82:	e008      	b.n	8005e96 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e84:	f7fd ff38 	bl	8003cf8 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e173      	b.n	800617e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e96:	4b0b      	ldr	r3, [pc, #44]	; (8005ec4 <HAL_RCC_OscConfig+0x274>)
 8005e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0f0      	beq.n	8005e84 <HAL_RCC_OscConfig+0x234>
 8005ea2:	e01b      	b.n	8005edc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ea4:	4b09      	ldr	r3, [pc, #36]	; (8005ecc <HAL_RCC_OscConfig+0x27c>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eaa:	f7fd ff25 	bl	8003cf8 <HAL_GetTick>
 8005eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eb0:	e00e      	b.n	8005ed0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eb2:	f7fd ff21 	bl	8003cf8 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d907      	bls.n	8005ed0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e15c      	b.n	800617e <HAL_RCC_OscConfig+0x52e>
 8005ec4:	40023800 	.word	0x40023800
 8005ec8:	42470000 	.word	0x42470000
 8005ecc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ed0:	4b8a      	ldr	r3, [pc, #552]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 8005ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1ea      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 8097 	beq.w	8006018 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eea:	2300      	movs	r3, #0
 8005eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eee:	4b83      	ldr	r3, [pc, #524]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10f      	bne.n	8005f1a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005efa:	2300      	movs	r3, #0
 8005efc:	60bb      	str	r3, [r7, #8]
 8005efe:	4b7f      	ldr	r3, [pc, #508]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	4a7e      	ldr	r2, [pc, #504]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 8005f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f08:	6413      	str	r3, [r2, #64]	; 0x40
 8005f0a:	4b7c      	ldr	r3, [pc, #496]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f12:	60bb      	str	r3, [r7, #8]
 8005f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f16:	2301      	movs	r3, #1
 8005f18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f1a:	4b79      	ldr	r3, [pc, #484]	; (8006100 <HAL_RCC_OscConfig+0x4b0>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d118      	bne.n	8005f58 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f26:	4b76      	ldr	r3, [pc, #472]	; (8006100 <HAL_RCC_OscConfig+0x4b0>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a75      	ldr	r2, [pc, #468]	; (8006100 <HAL_RCC_OscConfig+0x4b0>)
 8005f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f32:	f7fd fee1 	bl	8003cf8 <HAL_GetTick>
 8005f36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f38:	e008      	b.n	8005f4c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f3a:	f7fd fedd 	bl	8003cf8 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e118      	b.n	800617e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f4c:	4b6c      	ldr	r3, [pc, #432]	; (8006100 <HAL_RCC_OscConfig+0x4b0>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d0f0      	beq.n	8005f3a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d106      	bne.n	8005f6e <HAL_RCC_OscConfig+0x31e>
 8005f60:	4b66      	ldr	r3, [pc, #408]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 8005f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f64:	4a65      	ldr	r2, [pc, #404]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 8005f66:	f043 0301 	orr.w	r3, r3, #1
 8005f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f6c:	e01c      	b.n	8005fa8 <HAL_RCC_OscConfig+0x358>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	2b05      	cmp	r3, #5
 8005f74:	d10c      	bne.n	8005f90 <HAL_RCC_OscConfig+0x340>
 8005f76:	4b61      	ldr	r3, [pc, #388]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 8005f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7a:	4a60      	ldr	r2, [pc, #384]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 8005f7c:	f043 0304 	orr.w	r3, r3, #4
 8005f80:	6713      	str	r3, [r2, #112]	; 0x70
 8005f82:	4b5e      	ldr	r3, [pc, #376]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 8005f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f86:	4a5d      	ldr	r2, [pc, #372]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 8005f88:	f043 0301 	orr.w	r3, r3, #1
 8005f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f8e:	e00b      	b.n	8005fa8 <HAL_RCC_OscConfig+0x358>
 8005f90:	4b5a      	ldr	r3, [pc, #360]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 8005f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f94:	4a59      	ldr	r2, [pc, #356]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 8005f96:	f023 0301 	bic.w	r3, r3, #1
 8005f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f9c:	4b57      	ldr	r3, [pc, #348]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 8005f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa0:	4a56      	ldr	r2, [pc, #344]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 8005fa2:	f023 0304 	bic.w	r3, r3, #4
 8005fa6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d015      	beq.n	8005fdc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb0:	f7fd fea2 	bl	8003cf8 <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fb6:	e00a      	b.n	8005fce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fb8:	f7fd fe9e 	bl	8003cf8 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e0d7      	b.n	800617e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fce:	4b4b      	ldr	r3, [pc, #300]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 8005fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0ee      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x368>
 8005fda:	e014      	b.n	8006006 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fdc:	f7fd fe8c 	bl	8003cf8 <HAL_GetTick>
 8005fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fe2:	e00a      	b.n	8005ffa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fe4:	f7fd fe88 	bl	8003cf8 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e0c1      	b.n	800617e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ffa:	4b40      	ldr	r3, [pc, #256]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1ee      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006006:	7dfb      	ldrb	r3, [r7, #23]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d105      	bne.n	8006018 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800600c:	4b3b      	ldr	r3, [pc, #236]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	4a3a      	ldr	r2, [pc, #232]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 8006012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006016:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 80ad 	beq.w	800617c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006022:	4b36      	ldr	r3, [pc, #216]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 030c 	and.w	r3, r3, #12
 800602a:	2b08      	cmp	r3, #8
 800602c:	d060      	beq.n	80060f0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	2b02      	cmp	r3, #2
 8006034:	d145      	bne.n	80060c2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006036:	4b33      	ldr	r3, [pc, #204]	; (8006104 <HAL_RCC_OscConfig+0x4b4>)
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603c:	f7fd fe5c 	bl	8003cf8 <HAL_GetTick>
 8006040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006042:	e008      	b.n	8006056 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006044:	f7fd fe58 	bl	8003cf8 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e093      	b.n	800617e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006056:	4b29      	ldr	r3, [pc, #164]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1f0      	bne.n	8006044 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69da      	ldr	r2, [r3, #28]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	431a      	orrs	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	019b      	lsls	r3, r3, #6
 8006072:	431a      	orrs	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006078:	085b      	lsrs	r3, r3, #1
 800607a:	3b01      	subs	r3, #1
 800607c:	041b      	lsls	r3, r3, #16
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	061b      	lsls	r3, r3, #24
 8006086:	431a      	orrs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608c:	071b      	lsls	r3, r3, #28
 800608e:	491b      	ldr	r1, [pc, #108]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 8006090:	4313      	orrs	r3, r2
 8006092:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006094:	4b1b      	ldr	r3, [pc, #108]	; (8006104 <HAL_RCC_OscConfig+0x4b4>)
 8006096:	2201      	movs	r2, #1
 8006098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609a:	f7fd fe2d 	bl	8003cf8 <HAL_GetTick>
 800609e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060a0:	e008      	b.n	80060b4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060a2:	f7fd fe29 	bl	8003cf8 <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e064      	b.n	800617e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060b4:	4b11      	ldr	r3, [pc, #68]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d0f0      	beq.n	80060a2 <HAL_RCC_OscConfig+0x452>
 80060c0:	e05c      	b.n	800617c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060c2:	4b10      	ldr	r3, [pc, #64]	; (8006104 <HAL_RCC_OscConfig+0x4b4>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c8:	f7fd fe16 	bl	8003cf8 <HAL_GetTick>
 80060cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ce:	e008      	b.n	80060e2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060d0:	f7fd fe12 	bl	8003cf8 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d901      	bls.n	80060e2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e04d      	b.n	800617e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060e2:	4b06      	ldr	r3, [pc, #24]	; (80060fc <HAL_RCC_OscConfig+0x4ac>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1f0      	bne.n	80060d0 <HAL_RCC_OscConfig+0x480>
 80060ee:	e045      	b.n	800617c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d107      	bne.n	8006108 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e040      	b.n	800617e <HAL_RCC_OscConfig+0x52e>
 80060fc:	40023800 	.word	0x40023800
 8006100:	40007000 	.word	0x40007000
 8006104:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006108:	4b1f      	ldr	r3, [pc, #124]	; (8006188 <HAL_RCC_OscConfig+0x538>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d030      	beq.n	8006178 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006120:	429a      	cmp	r2, r3
 8006122:	d129      	bne.n	8006178 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800612e:	429a      	cmp	r2, r3
 8006130:	d122      	bne.n	8006178 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006138:	4013      	ands	r3, r2
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800613e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006140:	4293      	cmp	r3, r2
 8006142:	d119      	bne.n	8006178 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614e:	085b      	lsrs	r3, r3, #1
 8006150:	3b01      	subs	r3, #1
 8006152:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006154:	429a      	cmp	r2, r3
 8006156:	d10f      	bne.n	8006178 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006162:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006164:	429a      	cmp	r2, r3
 8006166:	d107      	bne.n	8006178 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006174:	429a      	cmp	r2, r3
 8006176:	d001      	beq.n	800617c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e000      	b.n	800617e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	40023800 	.word	0x40023800

0800618c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e03f      	b.n	800621e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d106      	bne.n	80061b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7fd fb8e 	bl	80038d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2224      	movs	r2, #36	; 0x24
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 fd19 	bl	8006c08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	691a      	ldr	r2, [r3, #16]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	695a      	ldr	r2, [r3, #20]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006204:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2220      	movs	r2, #32
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2220      	movs	r2, #32
 8006218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006226:	b480      	push	{r7}
 8006228:	b085      	sub	sp, #20
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	4613      	mov	r3, r2
 8006232:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b20      	cmp	r3, #32
 800623e:	d130      	bne.n	80062a2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <HAL_UART_Transmit_IT+0x26>
 8006246:	88fb      	ldrh	r3, [r7, #6]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e029      	b.n	80062a4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006256:	2b01      	cmp	r3, #1
 8006258:	d101      	bne.n	800625e <HAL_UART_Transmit_IT+0x38>
 800625a:	2302      	movs	r3, #2
 800625c:	e022      	b.n	80062a4 <HAL_UART_Transmit_IT+0x7e>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	88fa      	ldrh	r2, [r7, #6]
 8006270:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	88fa      	ldrh	r2, [r7, #6]
 8006276:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2221      	movs	r2, #33	; 0x21
 8006282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800629c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	e000      	b.n	80062a4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80062a2:	2302      	movs	r3, #2
  }
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	4613      	mov	r3, r2
 80062bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b20      	cmp	r3, #32
 80062c8:	d11d      	bne.n	8006306 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d002      	beq.n	80062d6 <HAL_UART_Receive_IT+0x26>
 80062d0:	88fb      	ldrh	r3, [r7, #6]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e016      	b.n	8006308 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d101      	bne.n	80062e8 <HAL_UART_Receive_IT+0x38>
 80062e4:	2302      	movs	r3, #2
 80062e6:	e00f      	b.n	8006308 <HAL_UART_Receive_IT+0x58>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80062f6:	88fb      	ldrh	r3, [r7, #6]
 80062f8:	461a      	mov	r2, r3
 80062fa:	68b9      	ldr	r1, [r7, #8]
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 faab 	bl	8006858 <UART_Start_Receive_IT>
 8006302:	4603      	mov	r3, r0
 8006304:	e000      	b.n	8006308 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006306:	2302      	movs	r3, #2
  }
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b0ba      	sub	sp, #232	; 0xe8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006336:	2300      	movs	r3, #0
 8006338:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800633c:	2300      	movs	r3, #0
 800633e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006346:	f003 030f 	and.w	r3, r3, #15
 800634a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800634e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10f      	bne.n	8006376 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800635a:	f003 0320 	and.w	r3, r3, #32
 800635e:	2b00      	cmp	r3, #0
 8006360:	d009      	beq.n	8006376 <HAL_UART_IRQHandler+0x66>
 8006362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fb8f 	bl	8006a92 <UART_Receive_IT>
      return;
 8006374:	e256      	b.n	8006824 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006376:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 80de 	beq.w	800653c <HAL_UART_IRQHandler+0x22c>
 8006380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d106      	bne.n	800639a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800638c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006390:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 80d1 	beq.w	800653c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800639a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00b      	beq.n	80063be <HAL_UART_IRQHandler+0xae>
 80063a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d005      	beq.n	80063be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	f043 0201 	orr.w	r2, r3, #1
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c2:	f003 0304 	and.w	r3, r3, #4
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00b      	beq.n	80063e2 <HAL_UART_IRQHandler+0xd2>
 80063ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d005      	beq.n	80063e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063da:	f043 0202 	orr.w	r2, r3, #2
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00b      	beq.n	8006406 <HAL_UART_IRQHandler+0xf6>
 80063ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d005      	beq.n	8006406 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fe:	f043 0204 	orr.w	r2, r3, #4
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	2b00      	cmp	r3, #0
 8006410:	d011      	beq.n	8006436 <HAL_UART_IRQHandler+0x126>
 8006412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006416:	f003 0320 	and.w	r3, r3, #32
 800641a:	2b00      	cmp	r3, #0
 800641c:	d105      	bne.n	800642a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800641e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d005      	beq.n	8006436 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	f043 0208 	orr.w	r2, r3, #8
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 81ed 	beq.w	800681a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006444:	f003 0320 	and.w	r3, r3, #32
 8006448:	2b00      	cmp	r3, #0
 800644a:	d008      	beq.n	800645e <HAL_UART_IRQHandler+0x14e>
 800644c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006450:	f003 0320 	and.w	r3, r3, #32
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fb1a 	bl	8006a92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006468:	2b40      	cmp	r3, #64	; 0x40
 800646a:	bf0c      	ite	eq
 800646c:	2301      	moveq	r3, #1
 800646e:	2300      	movne	r3, #0
 8006470:	b2db      	uxtb	r3, r3
 8006472:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	f003 0308 	and.w	r3, r3, #8
 800647e:	2b00      	cmp	r3, #0
 8006480:	d103      	bne.n	800648a <HAL_UART_IRQHandler+0x17a>
 8006482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006486:	2b00      	cmp	r3, #0
 8006488:	d04f      	beq.n	800652a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa22 	bl	80068d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649a:	2b40      	cmp	r3, #64	; 0x40
 800649c:	d141      	bne.n	8006522 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3314      	adds	r3, #20
 80064a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80064b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3314      	adds	r3, #20
 80064c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1d9      	bne.n	800649e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d013      	beq.n	800651a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f6:	4a7d      	ldr	r2, [pc, #500]	; (80066ec <HAL_UART_IRQHandler+0x3dc>)
 80064f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fe fbf2 	bl	8004ce8 <HAL_DMA_Abort_IT>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d016      	beq.n	8006538 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006514:	4610      	mov	r0, r2
 8006516:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006518:	e00e      	b.n	8006538 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f986 	bl	800682c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006520:	e00a      	b.n	8006538 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f982 	bl	800682c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006528:	e006      	b.n	8006538 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f97e 	bl	800682c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006536:	e170      	b.n	800681a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006538:	bf00      	nop
    return;
 800653a:	e16e      	b.n	800681a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006540:	2b01      	cmp	r3, #1
 8006542:	f040 814a 	bne.w	80067da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800654a:	f003 0310 	and.w	r3, r3, #16
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 8143 	beq.w	80067da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006558:	f003 0310 	and.w	r3, r3, #16
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 813c 	beq.w	80067da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006562:	2300      	movs	r3, #0
 8006564:	60bb      	str	r3, [r7, #8]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	60bb      	str	r3, [r7, #8]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	60bb      	str	r3, [r7, #8]
 8006576:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006582:	2b40      	cmp	r3, #64	; 0x40
 8006584:	f040 80b4 	bne.w	80066f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006594:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 8140 	beq.w	800681e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065a6:	429a      	cmp	r2, r3
 80065a8:	f080 8139 	bcs.w	800681e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065be:	f000 8088 	beq.w	80066d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	330c      	adds	r3, #12
 80065c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065d0:	e853 3f00 	ldrex	r3, [r3]
 80065d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	330c      	adds	r3, #12
 80065ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80065ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80065fe:	e841 2300 	strex	r3, r2, [r1]
 8006602:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006606:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1d9      	bne.n	80065c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3314      	adds	r3, #20
 8006614:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006618:	e853 3f00 	ldrex	r3, [r3]
 800661c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800661e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006620:	f023 0301 	bic.w	r3, r3, #1
 8006624:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3314      	adds	r3, #20
 800662e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006632:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006636:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800663a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800663e:	e841 2300 	strex	r3, r2, [r1]
 8006642:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006644:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1e1      	bne.n	800660e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3314      	adds	r3, #20
 8006650:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006652:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800665a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800665c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006660:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	3314      	adds	r3, #20
 800666a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800666e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006670:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006672:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006674:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006676:	e841 2300 	strex	r3, r2, [r1]
 800667a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800667c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1e3      	bne.n	800664a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2220      	movs	r2, #32
 8006686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	330c      	adds	r3, #12
 8006696:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800669a:	e853 3f00 	ldrex	r3, [r3]
 800669e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a2:	f023 0310 	bic.w	r3, r3, #16
 80066a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	330c      	adds	r3, #12
 80066b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80066b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80066b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066bc:	e841 2300 	strex	r3, r2, [r1]
 80066c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1e3      	bne.n	8006690 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fe fa9b 	bl	8004c08 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066da:	b29b      	uxth	r3, r3
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	b29b      	uxth	r3, r3
 80066e0:	4619      	mov	r1, r3
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f8ac 	bl	8006840 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80066e8:	e099      	b.n	800681e <HAL_UART_IRQHandler+0x50e>
 80066ea:	bf00      	nop
 80066ec:	0800699b 	.word	0x0800699b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006704:	b29b      	uxth	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 808b 	beq.w	8006822 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800670c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 8086 	beq.w	8006822 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	330c      	adds	r3, #12
 800671c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006720:	e853 3f00 	ldrex	r3, [r3]
 8006724:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006728:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800672c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	330c      	adds	r3, #12
 8006736:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800673a:	647a      	str	r2, [r7, #68]	; 0x44
 800673c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006740:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006742:	e841 2300 	strex	r3, r2, [r1]
 8006746:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1e3      	bne.n	8006716 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3314      	adds	r3, #20
 8006754:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006758:	e853 3f00 	ldrex	r3, [r3]
 800675c:	623b      	str	r3, [r7, #32]
   return(result);
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	f023 0301 	bic.w	r3, r3, #1
 8006764:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	3314      	adds	r3, #20
 800676e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006772:	633a      	str	r2, [r7, #48]	; 0x30
 8006774:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006776:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1e3      	bne.n	800674e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2220      	movs	r2, #32
 800678a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	330c      	adds	r3, #12
 800679a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	e853 3f00 	ldrex	r3, [r3]
 80067a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0310 	bic.w	r3, r3, #16
 80067aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	330c      	adds	r3, #12
 80067b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80067b8:	61fa      	str	r2, [r7, #28]
 80067ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	69b9      	ldr	r1, [r7, #24]
 80067be:	69fa      	ldr	r2, [r7, #28]
 80067c0:	e841 2300 	strex	r3, r2, [r1]
 80067c4:	617b      	str	r3, [r7, #20]
   return(result);
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1e3      	bne.n	8006794 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067d0:	4619      	mov	r1, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f834 	bl	8006840 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067d8:	e023      	b.n	8006822 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d009      	beq.n	80067fa <HAL_UART_IRQHandler+0x4ea>
 80067e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f8e5 	bl	80069c2 <UART_Transmit_IT>
    return;
 80067f8:	e014      	b.n	8006824 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00e      	beq.n	8006824 <HAL_UART_IRQHandler+0x514>
 8006806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800680a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680e:	2b00      	cmp	r3, #0
 8006810:	d008      	beq.n	8006824 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f925 	bl	8006a62 <UART_EndTransmit_IT>
    return;
 8006818:	e004      	b.n	8006824 <HAL_UART_IRQHandler+0x514>
    return;
 800681a:	bf00      	nop
 800681c:	e002      	b.n	8006824 <HAL_UART_IRQHandler+0x514>
      return;
 800681e:	bf00      	nop
 8006820:	e000      	b.n	8006824 <HAL_UART_IRQHandler+0x514>
      return;
 8006822:	bf00      	nop
  }
}
 8006824:	37e8      	adds	r7, #232	; 0xe8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop

0800682c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	460b      	mov	r3, r1
 800684a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	4613      	mov	r3, r2
 8006864:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	88fa      	ldrh	r2, [r7, #6]
 8006870:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	88fa      	ldrh	r2, [r7, #6]
 8006876:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2222      	movs	r2, #34	; 0x22
 8006882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d007      	beq.n	80068a6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68da      	ldr	r2, [r3, #12]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068a4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	695a      	ldr	r2, [r3, #20]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f042 0201 	orr.w	r2, r2, #1
 80068b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68da      	ldr	r2, [r3, #12]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f042 0220 	orr.w	r2, r2, #32
 80068c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b095      	sub	sp, #84	; 0x54
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	330c      	adds	r3, #12
 80068e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e6:	e853 3f00 	ldrex	r3, [r3]
 80068ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	330c      	adds	r3, #12
 80068fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068fc:	643a      	str	r2, [r7, #64]	; 0x40
 80068fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006900:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006902:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006904:	e841 2300 	strex	r3, r2, [r1]
 8006908:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800690a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1e5      	bne.n	80068dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3314      	adds	r3, #20
 8006916:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	e853 3f00 	ldrex	r3, [r3]
 800691e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	f023 0301 	bic.w	r3, r3, #1
 8006926:	64bb      	str	r3, [r7, #72]	; 0x48
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3314      	adds	r3, #20
 800692e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006930:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006932:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006938:	e841 2300 	strex	r3, r2, [r1]
 800693c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1e5      	bne.n	8006910 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006948:	2b01      	cmp	r3, #1
 800694a:	d119      	bne.n	8006980 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	330c      	adds	r3, #12
 8006952:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	e853 3f00 	ldrex	r3, [r3]
 800695a:	60bb      	str	r3, [r7, #8]
   return(result);
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f023 0310 	bic.w	r3, r3, #16
 8006962:	647b      	str	r3, [r7, #68]	; 0x44
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	330c      	adds	r3, #12
 800696a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800696c:	61ba      	str	r2, [r7, #24]
 800696e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	6979      	ldr	r1, [r7, #20]
 8006972:	69ba      	ldr	r2, [r7, #24]
 8006974:	e841 2300 	strex	r3, r2, [r1]
 8006978:	613b      	str	r3, [r7, #16]
   return(result);
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e5      	bne.n	800694c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2220      	movs	r2, #32
 8006984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800698e:	bf00      	nop
 8006990:	3754      	adds	r7, #84	; 0x54
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b084      	sub	sp, #16
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f7ff ff39 	bl	800682c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069ba:	bf00      	nop
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b085      	sub	sp, #20
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b21      	cmp	r3, #33	; 0x21
 80069d4:	d13e      	bne.n	8006a54 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069de:	d114      	bne.n	8006a0a <UART_Transmit_IT+0x48>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d110      	bne.n	8006a0a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	461a      	mov	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	1c9a      	adds	r2, r3, #2
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	621a      	str	r2, [r3, #32]
 8006a08:	e008      	b.n	8006a1c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	1c59      	adds	r1, r3, #1
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	6211      	str	r1, [r2, #32]
 8006a14:	781a      	ldrb	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	3b01      	subs	r3, #1
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	4619      	mov	r1, r3
 8006a2a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10f      	bne.n	8006a50 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a3e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68da      	ldr	r2, [r3, #12]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a4e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	e000      	b.n	8006a56 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a54:	2302      	movs	r3, #2
  }
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b082      	sub	sp, #8
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68da      	ldr	r2, [r3, #12]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f7fa fc04 	bl	8001290 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b08c      	sub	sp, #48	; 0x30
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b22      	cmp	r3, #34	; 0x22
 8006aa4:	f040 80ab 	bne.w	8006bfe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab0:	d117      	bne.n	8006ae2 <UART_Receive_IT+0x50>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d113      	bne.n	8006ae2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ada:	1c9a      	adds	r2, r3, #2
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	629a      	str	r2, [r3, #40]	; 0x28
 8006ae0:	e026      	b.n	8006b30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af4:	d007      	beq.n	8006b06 <UART_Receive_IT+0x74>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10a      	bne.n	8006b14 <UART_Receive_IT+0x82>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d106      	bne.n	8006b14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b10:	701a      	strb	r2, [r3, #0]
 8006b12:	e008      	b.n	8006b26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2a:	1c5a      	adds	r2, r3, #1
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	3b01      	subs	r3, #1
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d15a      	bne.n	8006bfa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 0220 	bic.w	r2, r2, #32
 8006b52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	695a      	ldr	r2, [r3, #20]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 0201 	bic.w	r2, r2, #1
 8006b72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d135      	bne.n	8006bf0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	330c      	adds	r3, #12
 8006b90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	613b      	str	r3, [r7, #16]
   return(result);
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f023 0310 	bic.w	r3, r3, #16
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	330c      	adds	r3, #12
 8006ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006baa:	623a      	str	r2, [r7, #32]
 8006bac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bae:	69f9      	ldr	r1, [r7, #28]
 8006bb0:	6a3a      	ldr	r2, [r7, #32]
 8006bb2:	e841 2300 	strex	r3, r2, [r1]
 8006bb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1e5      	bne.n	8006b8a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0310 	and.w	r3, r3, #16
 8006bc8:	2b10      	cmp	r3, #16
 8006bca:	d10a      	bne.n	8006be2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bcc:	2300      	movs	r3, #0
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	60fb      	str	r3, [r7, #12]
 8006be0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7ff fe29 	bl	8006840 <HAL_UARTEx_RxEventCallback>
 8006bee:	e002      	b.n	8006bf6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7fa fb75 	bl	80012e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	e002      	b.n	8006c00 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	e000      	b.n	8006c00 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006bfe:	2302      	movs	r3, #2
  }
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3730      	adds	r7, #48	; 0x30
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c0c:	b0c0      	sub	sp, #256	; 0x100
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c24:	68d9      	ldr	r1, [r3, #12]
 8006c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	ea40 0301 	orr.w	r3, r0, r1
 8006c30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	431a      	orrs	r2, r3
 8006c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c60:	f021 010c 	bic.w	r1, r1, #12
 8006c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c6e:	430b      	orrs	r3, r1
 8006c70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c82:	6999      	ldr	r1, [r3, #24]
 8006c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	ea40 0301 	orr.w	r3, r0, r1
 8006c8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	4b8f      	ldr	r3, [pc, #572]	; (8006ed4 <UART_SetConfig+0x2cc>)
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d005      	beq.n	8006ca8 <UART_SetConfig+0xa0>
 8006c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	4b8d      	ldr	r3, [pc, #564]	; (8006ed8 <UART_SetConfig+0x2d0>)
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d104      	bne.n	8006cb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ca8:	f7fe fd8e 	bl	80057c8 <HAL_RCC_GetPCLK2Freq>
 8006cac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006cb0:	e003      	b.n	8006cba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cb2:	f7fe fd75 	bl	80057a0 <HAL_RCC_GetPCLK1Freq>
 8006cb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cbe:	69db      	ldr	r3, [r3, #28]
 8006cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cc4:	f040 810c 	bne.w	8006ee0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006cd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006cd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006cda:	4622      	mov	r2, r4
 8006cdc:	462b      	mov	r3, r5
 8006cde:	1891      	adds	r1, r2, r2
 8006ce0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ce2:	415b      	adcs	r3, r3
 8006ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ce6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006cea:	4621      	mov	r1, r4
 8006cec:	eb12 0801 	adds.w	r8, r2, r1
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	eb43 0901 	adc.w	r9, r3, r1
 8006cf6:	f04f 0200 	mov.w	r2, #0
 8006cfa:	f04f 0300 	mov.w	r3, #0
 8006cfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d0a:	4690      	mov	r8, r2
 8006d0c:	4699      	mov	r9, r3
 8006d0e:	4623      	mov	r3, r4
 8006d10:	eb18 0303 	adds.w	r3, r8, r3
 8006d14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006d18:	462b      	mov	r3, r5
 8006d1a:	eb49 0303 	adc.w	r3, r9, r3
 8006d1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006d32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006d36:	460b      	mov	r3, r1
 8006d38:	18db      	adds	r3, r3, r3
 8006d3a:	653b      	str	r3, [r7, #80]	; 0x50
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	eb42 0303 	adc.w	r3, r2, r3
 8006d42:	657b      	str	r3, [r7, #84]	; 0x54
 8006d44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006d4c:	f7f9 ffbc 	bl	8000cc8 <__aeabi_uldivmod>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	4b61      	ldr	r3, [pc, #388]	; (8006edc <UART_SetConfig+0x2d4>)
 8006d56:	fba3 2302 	umull	r2, r3, r3, r2
 8006d5a:	095b      	lsrs	r3, r3, #5
 8006d5c:	011c      	lsls	r4, r3, #4
 8006d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d62:	2200      	movs	r2, #0
 8006d64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d70:	4642      	mov	r2, r8
 8006d72:	464b      	mov	r3, r9
 8006d74:	1891      	adds	r1, r2, r2
 8006d76:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d78:	415b      	adcs	r3, r3
 8006d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d80:	4641      	mov	r1, r8
 8006d82:	eb12 0a01 	adds.w	sl, r2, r1
 8006d86:	4649      	mov	r1, r9
 8006d88:	eb43 0b01 	adc.w	fp, r3, r1
 8006d8c:	f04f 0200 	mov.w	r2, #0
 8006d90:	f04f 0300 	mov.w	r3, #0
 8006d94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006da0:	4692      	mov	sl, r2
 8006da2:	469b      	mov	fp, r3
 8006da4:	4643      	mov	r3, r8
 8006da6:	eb1a 0303 	adds.w	r3, sl, r3
 8006daa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006dae:	464b      	mov	r3, r9
 8006db0:	eb4b 0303 	adc.w	r3, fp, r3
 8006db4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006dc4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006dc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	18db      	adds	r3, r3, r3
 8006dd0:	643b      	str	r3, [r7, #64]	; 0x40
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	eb42 0303 	adc.w	r3, r2, r3
 8006dd8:	647b      	str	r3, [r7, #68]	; 0x44
 8006dda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006dde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006de2:	f7f9 ff71 	bl	8000cc8 <__aeabi_uldivmod>
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	4611      	mov	r1, r2
 8006dec:	4b3b      	ldr	r3, [pc, #236]	; (8006edc <UART_SetConfig+0x2d4>)
 8006dee:	fba3 2301 	umull	r2, r3, r3, r1
 8006df2:	095b      	lsrs	r3, r3, #5
 8006df4:	2264      	movs	r2, #100	; 0x64
 8006df6:	fb02 f303 	mul.w	r3, r2, r3
 8006dfa:	1acb      	subs	r3, r1, r3
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006e02:	4b36      	ldr	r3, [pc, #216]	; (8006edc <UART_SetConfig+0x2d4>)
 8006e04:	fba3 2302 	umull	r2, r3, r3, r2
 8006e08:	095b      	lsrs	r3, r3, #5
 8006e0a:	005b      	lsls	r3, r3, #1
 8006e0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e10:	441c      	add	r4, r3
 8006e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006e20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006e24:	4642      	mov	r2, r8
 8006e26:	464b      	mov	r3, r9
 8006e28:	1891      	adds	r1, r2, r2
 8006e2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e2c:	415b      	adcs	r3, r3
 8006e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e34:	4641      	mov	r1, r8
 8006e36:	1851      	adds	r1, r2, r1
 8006e38:	6339      	str	r1, [r7, #48]	; 0x30
 8006e3a:	4649      	mov	r1, r9
 8006e3c:	414b      	adcs	r3, r1
 8006e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e40:	f04f 0200 	mov.w	r2, #0
 8006e44:	f04f 0300 	mov.w	r3, #0
 8006e48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006e4c:	4659      	mov	r1, fp
 8006e4e:	00cb      	lsls	r3, r1, #3
 8006e50:	4651      	mov	r1, sl
 8006e52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e56:	4651      	mov	r1, sl
 8006e58:	00ca      	lsls	r2, r1, #3
 8006e5a:	4610      	mov	r0, r2
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	4603      	mov	r3, r0
 8006e60:	4642      	mov	r2, r8
 8006e62:	189b      	adds	r3, r3, r2
 8006e64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e68:	464b      	mov	r3, r9
 8006e6a:	460a      	mov	r2, r1
 8006e6c:	eb42 0303 	adc.w	r3, r2, r3
 8006e70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e88:	460b      	mov	r3, r1
 8006e8a:	18db      	adds	r3, r3, r3
 8006e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e8e:	4613      	mov	r3, r2
 8006e90:	eb42 0303 	adc.w	r3, r2, r3
 8006e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e9e:	f7f9 ff13 	bl	8000cc8 <__aeabi_uldivmod>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	4b0d      	ldr	r3, [pc, #52]	; (8006edc <UART_SetConfig+0x2d4>)
 8006ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8006eac:	095b      	lsrs	r3, r3, #5
 8006eae:	2164      	movs	r1, #100	; 0x64
 8006eb0:	fb01 f303 	mul.w	r3, r1, r3
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	00db      	lsls	r3, r3, #3
 8006eb8:	3332      	adds	r3, #50	; 0x32
 8006eba:	4a08      	ldr	r2, [pc, #32]	; (8006edc <UART_SetConfig+0x2d4>)
 8006ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec0:	095b      	lsrs	r3, r3, #5
 8006ec2:	f003 0207 	and.w	r2, r3, #7
 8006ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4422      	add	r2, r4
 8006ece:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ed0:	e106      	b.n	80070e0 <UART_SetConfig+0x4d8>
 8006ed2:	bf00      	nop
 8006ed4:	40011000 	.word	0x40011000
 8006ed8:	40011400 	.word	0x40011400
 8006edc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006eea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006eee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ef2:	4642      	mov	r2, r8
 8006ef4:	464b      	mov	r3, r9
 8006ef6:	1891      	adds	r1, r2, r2
 8006ef8:	6239      	str	r1, [r7, #32]
 8006efa:	415b      	adcs	r3, r3
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
 8006efe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f02:	4641      	mov	r1, r8
 8006f04:	1854      	adds	r4, r2, r1
 8006f06:	4649      	mov	r1, r9
 8006f08:	eb43 0501 	adc.w	r5, r3, r1
 8006f0c:	f04f 0200 	mov.w	r2, #0
 8006f10:	f04f 0300 	mov.w	r3, #0
 8006f14:	00eb      	lsls	r3, r5, #3
 8006f16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f1a:	00e2      	lsls	r2, r4, #3
 8006f1c:	4614      	mov	r4, r2
 8006f1e:	461d      	mov	r5, r3
 8006f20:	4643      	mov	r3, r8
 8006f22:	18e3      	adds	r3, r4, r3
 8006f24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f28:	464b      	mov	r3, r9
 8006f2a:	eb45 0303 	adc.w	r3, r5, r3
 8006f2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006f3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f42:	f04f 0200 	mov.w	r2, #0
 8006f46:	f04f 0300 	mov.w	r3, #0
 8006f4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006f4e:	4629      	mov	r1, r5
 8006f50:	008b      	lsls	r3, r1, #2
 8006f52:	4621      	mov	r1, r4
 8006f54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f58:	4621      	mov	r1, r4
 8006f5a:	008a      	lsls	r2, r1, #2
 8006f5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f60:	f7f9 feb2 	bl	8000cc8 <__aeabi_uldivmod>
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	4b60      	ldr	r3, [pc, #384]	; (80070ec <UART_SetConfig+0x4e4>)
 8006f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f6e:	095b      	lsrs	r3, r3, #5
 8006f70:	011c      	lsls	r4, r3, #4
 8006f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f76:	2200      	movs	r2, #0
 8006f78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f84:	4642      	mov	r2, r8
 8006f86:	464b      	mov	r3, r9
 8006f88:	1891      	adds	r1, r2, r2
 8006f8a:	61b9      	str	r1, [r7, #24]
 8006f8c:	415b      	adcs	r3, r3
 8006f8e:	61fb      	str	r3, [r7, #28]
 8006f90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f94:	4641      	mov	r1, r8
 8006f96:	1851      	adds	r1, r2, r1
 8006f98:	6139      	str	r1, [r7, #16]
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	414b      	adcs	r3, r1
 8006f9e:	617b      	str	r3, [r7, #20]
 8006fa0:	f04f 0200 	mov.w	r2, #0
 8006fa4:	f04f 0300 	mov.w	r3, #0
 8006fa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fac:	4659      	mov	r1, fp
 8006fae:	00cb      	lsls	r3, r1, #3
 8006fb0:	4651      	mov	r1, sl
 8006fb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fb6:	4651      	mov	r1, sl
 8006fb8:	00ca      	lsls	r2, r1, #3
 8006fba:	4610      	mov	r0, r2
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	4642      	mov	r2, r8
 8006fc2:	189b      	adds	r3, r3, r2
 8006fc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fc8:	464b      	mov	r3, r9
 8006fca:	460a      	mov	r2, r1
 8006fcc:	eb42 0303 	adc.w	r3, r2, r3
 8006fd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fde:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006fe0:	f04f 0200 	mov.w	r2, #0
 8006fe4:	f04f 0300 	mov.w	r3, #0
 8006fe8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006fec:	4649      	mov	r1, r9
 8006fee:	008b      	lsls	r3, r1, #2
 8006ff0:	4641      	mov	r1, r8
 8006ff2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ff6:	4641      	mov	r1, r8
 8006ff8:	008a      	lsls	r2, r1, #2
 8006ffa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006ffe:	f7f9 fe63 	bl	8000cc8 <__aeabi_uldivmod>
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
 8007006:	4611      	mov	r1, r2
 8007008:	4b38      	ldr	r3, [pc, #224]	; (80070ec <UART_SetConfig+0x4e4>)
 800700a:	fba3 2301 	umull	r2, r3, r3, r1
 800700e:	095b      	lsrs	r3, r3, #5
 8007010:	2264      	movs	r2, #100	; 0x64
 8007012:	fb02 f303 	mul.w	r3, r2, r3
 8007016:	1acb      	subs	r3, r1, r3
 8007018:	011b      	lsls	r3, r3, #4
 800701a:	3332      	adds	r3, #50	; 0x32
 800701c:	4a33      	ldr	r2, [pc, #204]	; (80070ec <UART_SetConfig+0x4e4>)
 800701e:	fba2 2303 	umull	r2, r3, r2, r3
 8007022:	095b      	lsrs	r3, r3, #5
 8007024:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007028:	441c      	add	r4, r3
 800702a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800702e:	2200      	movs	r2, #0
 8007030:	673b      	str	r3, [r7, #112]	; 0x70
 8007032:	677a      	str	r2, [r7, #116]	; 0x74
 8007034:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007038:	4642      	mov	r2, r8
 800703a:	464b      	mov	r3, r9
 800703c:	1891      	adds	r1, r2, r2
 800703e:	60b9      	str	r1, [r7, #8]
 8007040:	415b      	adcs	r3, r3
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007048:	4641      	mov	r1, r8
 800704a:	1851      	adds	r1, r2, r1
 800704c:	6039      	str	r1, [r7, #0]
 800704e:	4649      	mov	r1, r9
 8007050:	414b      	adcs	r3, r1
 8007052:	607b      	str	r3, [r7, #4]
 8007054:	f04f 0200 	mov.w	r2, #0
 8007058:	f04f 0300 	mov.w	r3, #0
 800705c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007060:	4659      	mov	r1, fp
 8007062:	00cb      	lsls	r3, r1, #3
 8007064:	4651      	mov	r1, sl
 8007066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800706a:	4651      	mov	r1, sl
 800706c:	00ca      	lsls	r2, r1, #3
 800706e:	4610      	mov	r0, r2
 8007070:	4619      	mov	r1, r3
 8007072:	4603      	mov	r3, r0
 8007074:	4642      	mov	r2, r8
 8007076:	189b      	adds	r3, r3, r2
 8007078:	66bb      	str	r3, [r7, #104]	; 0x68
 800707a:	464b      	mov	r3, r9
 800707c:	460a      	mov	r2, r1
 800707e:	eb42 0303 	adc.w	r3, r2, r3
 8007082:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	663b      	str	r3, [r7, #96]	; 0x60
 800708e:	667a      	str	r2, [r7, #100]	; 0x64
 8007090:	f04f 0200 	mov.w	r2, #0
 8007094:	f04f 0300 	mov.w	r3, #0
 8007098:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800709c:	4649      	mov	r1, r9
 800709e:	008b      	lsls	r3, r1, #2
 80070a0:	4641      	mov	r1, r8
 80070a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070a6:	4641      	mov	r1, r8
 80070a8:	008a      	lsls	r2, r1, #2
 80070aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80070ae:	f7f9 fe0b 	bl	8000cc8 <__aeabi_uldivmod>
 80070b2:	4602      	mov	r2, r0
 80070b4:	460b      	mov	r3, r1
 80070b6:	4b0d      	ldr	r3, [pc, #52]	; (80070ec <UART_SetConfig+0x4e4>)
 80070b8:	fba3 1302 	umull	r1, r3, r3, r2
 80070bc:	095b      	lsrs	r3, r3, #5
 80070be:	2164      	movs	r1, #100	; 0x64
 80070c0:	fb01 f303 	mul.w	r3, r1, r3
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	011b      	lsls	r3, r3, #4
 80070c8:	3332      	adds	r3, #50	; 0x32
 80070ca:	4a08      	ldr	r2, [pc, #32]	; (80070ec <UART_SetConfig+0x4e4>)
 80070cc:	fba2 2303 	umull	r2, r3, r2, r3
 80070d0:	095b      	lsrs	r3, r3, #5
 80070d2:	f003 020f 	and.w	r2, r3, #15
 80070d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4422      	add	r2, r4
 80070de:	609a      	str	r2, [r3, #8]
}
 80070e0:	bf00      	nop
 80070e2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80070e6:	46bd      	mov	sp, r7
 80070e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070ec:	51eb851f 	.word	0x51eb851f

080070f0 <_ZNSaIcEC1Ev>:
 80070f0:	4770      	bx	lr

080070f2 <_ZNSaIcEC1ERKS_>:
 80070f2:	4770      	bx	lr

080070f4 <_ZNSaIcED1Ev>:
 80070f4:	4770      	bx	lr

080070f6 <_ZSt17__throw_bad_allocv>:
 80070f6:	b508      	push	{r3, lr}
 80070f8:	f000 fd2e 	bl	8007b58 <abort>

080070fc <_ZSt19__throw_logic_errorPKc>:
 80070fc:	b508      	push	{r3, lr}
 80070fe:	f000 fd2b 	bl	8007b58 <abort>

08007102 <_ZSt24__throw_invalid_argumentPKc>:
 8007102:	b508      	push	{r3, lr}
 8007104:	f000 fd28 	bl	8007b58 <abort>

08007108 <_ZSt20__throw_length_errorPKc>:
 8007108:	b508      	push	{r3, lr}
 800710a:	f000 fd25 	bl	8007b58 <abort>

0800710e <_ZSt20__throw_out_of_rangePKc>:
 800710e:	b508      	push	{r3, lr}
 8007110:	f000 fd22 	bl	8007b58 <abort>

08007114 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8007114:	b40f      	push	{r0, r1, r2, r3}
 8007116:	b580      	push	{r7, lr}
 8007118:	b084      	sub	sp, #16
 800711a:	af00      	add	r7, sp, #0
 800711c:	f107 0418 	add.w	r4, r7, #24
 8007120:	f854 2b04 	ldr.w	r2, [r4], #4
 8007124:	607a      	str	r2, [r7, #4]
 8007126:	4610      	mov	r0, r2
 8007128:	f7f9 f8c2 	bl	80002b0 <strlen>
 800712c:	f200 2307 	addw	r3, r0, #519	; 0x207
 8007130:	f023 0307 	bic.w	r3, r3, #7
 8007134:	ebad 0d03 	sub.w	sp, sp, r3
 8007138:	f500 7100 	add.w	r1, r0, #512	; 0x200
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	60fc      	str	r4, [r7, #12]
 8007140:	4623      	mov	r3, r4
 8007142:	4668      	mov	r0, sp
 8007144:	f000 f854 	bl	80071f0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8007148:	f000 fd06 	bl	8007b58 <abort>

0800714c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 800714c:	b580      	push	{r7, lr}
 800714e:	b09c      	sub	sp, #112	; 0x70
 8007150:	4606      	mov	r6, r0
 8007152:	af00      	add	r7, sp, #0
 8007154:	460c      	mov	r4, r1
 8007156:	1ba4      	subs	r4, r4, r6
 8007158:	490e      	ldr	r1, [pc, #56]	; (8007194 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 800715a:	2269      	movs	r2, #105	; 0x69
 800715c:	1d38      	adds	r0, r7, #4
 800715e:	f002 fcf4 	bl	8009b4a <memcpy>
 8007162:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8007166:	f023 0307 	bic.w	r3, r3, #7
 800716a:	ebad 0d03 	sub.w	sp, sp, r3
 800716e:	466d      	mov	r5, sp
 8007170:	2268      	movs	r2, #104	; 0x68
 8007172:	1d39      	adds	r1, r7, #4
 8007174:	4628      	mov	r0, r5
 8007176:	f002 fce8 	bl	8009b4a <memcpy>
 800717a:	4622      	mov	r2, r4
 800717c:	4631      	mov	r1, r6
 800717e:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8007182:	442c      	add	r4, r5
 8007184:	f002 fce1 	bl	8009b4a <memcpy>
 8007188:	2300      	movs	r3, #0
 800718a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800718e:	4628      	mov	r0, r5
 8007190:	f7ff ffb4 	bl	80070fc <_ZSt19__throw_logic_errorPKc>
 8007194:	0800c54c 	.word	0x0800c54c

08007198 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8007198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800719c:	af00      	add	r7, sp, #0
 800719e:	b084      	sub	sp, #16
 80071a0:	466d      	mov	r5, sp
 80071a2:	f105 040c 	add.w	r4, r5, #12
 80071a6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80071ec <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 80071aa:	4623      	mov	r3, r4
 80071ac:	f04f 0c0a 	mov.w	ip, #10
 80071b0:	fbb2 f6fc 	udiv	r6, r2, ip
 80071b4:	fb0c 2e16 	mls	lr, ip, r6, r2
 80071b8:	f818 e00e 	ldrb.w	lr, [r8, lr]
 80071bc:	f803 ed01 	strb.w	lr, [r3, #-1]!
 80071c0:	4696      	mov	lr, r2
 80071c2:	f1be 0f09 	cmp.w	lr, #9
 80071c6:	4632      	mov	r2, r6
 80071c8:	d8f2      	bhi.n	80071b0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 80071ca:	1ae4      	subs	r4, r4, r3
 80071cc:	428c      	cmp	r4, r1
 80071ce:	d809      	bhi.n	80071e4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 80071d0:	f1c4 010c 	rsb	r1, r4, #12
 80071d4:	4622      	mov	r2, r4
 80071d6:	4429      	add	r1, r5
 80071d8:	f002 fcb7 	bl	8009b4a <memcpy>
 80071dc:	4620      	mov	r0, r4
 80071de:	46bd      	mov	sp, r7
 80071e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e4:	f04f 34ff 	mov.w	r4, #4294967295
 80071e8:	e7f8      	b.n	80071dc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 80071ea:	bf00      	nop
 80071ec:	0800c5b5 	.word	0x0800c5b5

080071f0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80071f0:	3901      	subs	r1, #1
 80071f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071f6:	4607      	mov	r7, r0
 80071f8:	4615      	mov	r5, r2
 80071fa:	eb00 0801 	add.w	r8, r0, r1
 80071fe:	4604      	mov	r4, r0
 8007200:	782a      	ldrb	r2, [r5, #0]
 8007202:	b392      	cbz	r2, 800726a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 8007204:	4544      	cmp	r4, r8
 8007206:	d216      	bcs.n	8007236 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x46>
 8007208:	2a25      	cmp	r2, #37	; 0x25
 800720a:	d107      	bne.n	800721c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800720c:	786a      	ldrb	r2, [r5, #1]
 800720e:	2a73      	cmp	r2, #115	; 0x73
 8007210:	d009      	beq.n	8007226 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8007212:	2a7a      	cmp	r2, #122	; 0x7a
 8007214:	d016      	beq.n	8007244 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x54>
 8007216:	2a25      	cmp	r2, #37	; 0x25
 8007218:	d100      	bne.n	800721c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800721a:	3501      	adds	r5, #1
 800721c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8007220:	f804 2b01 	strb.w	r2, [r4], #1
 8007224:	e7ec      	b.n	8007200 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8007226:	f853 2b04 	ldr.w	r2, [r3], #4
 800722a:	3a01      	subs	r2, #1
 800722c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8007230:	b1c9      	cbz	r1, 8007266 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8007232:	4544      	cmp	r4, r8
 8007234:	d103      	bne.n	800723e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4e>
 8007236:	4621      	mov	r1, r4
 8007238:	4638      	mov	r0, r7
 800723a:	f7ff ff87 	bl	800714c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 800723e:	f804 1b01 	strb.w	r1, [r4], #1
 8007242:	e7f3      	b.n	800722c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8007244:	78aa      	ldrb	r2, [r5, #2]
 8007246:	2a75      	cmp	r2, #117	; 0x75
 8007248:	d1e8      	bne.n	800721c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 800724a:	461e      	mov	r6, r3
 800724c:	eba8 0104 	sub.w	r1, r8, r4
 8007250:	f856 2b04 	ldr.w	r2, [r6], #4
 8007254:	4620      	mov	r0, r4
 8007256:	f7ff ff9f 	bl	8007198 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 800725a:	2800      	cmp	r0, #0
 800725c:	ddeb      	ble.n	8007236 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x46>
 800725e:	4404      	add	r4, r0
 8007260:	3503      	adds	r5, #3
 8007262:	4633      	mov	r3, r6
 8007264:	e7cc      	b.n	8007200 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8007266:	3502      	adds	r5, #2
 8007268:	e7ca      	b.n	8007200 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 800726a:	7022      	strb	r2, [r4, #0]
 800726c:	1be0      	subs	r0, r4, r7
 800726e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007272 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8007272:	b10a      	cbz	r2, 8007278 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8007274:	f002 bc69 	b.w	8009b4a <memcpy>
 8007278:	4770      	bx	lr

0800727a <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 800727a:	b10a      	cbz	r2, 8007280 <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 800727c:	f002 bb55 	b.w	800992a <memcmp>
 8007280:	4610      	mov	r0, r2
 8007282:	4770      	bx	lr

08007284 <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
 8007284:	4613      	mov	r3, r2
 8007286:	460a      	mov	r2, r1
 8007288:	b111      	cbz	r1, 8007290 <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
 800728a:	7819      	ldrb	r1, [r3, #0]
 800728c:	f7f8 bfc0 	b.w	8000210 <memchr>
 8007290:	4608      	mov	r0, r1
 8007292:	4770      	bx	lr

08007294 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8007294:	b508      	push	{r3, lr}
 8007296:	680b      	ldr	r3, [r1, #0]
 8007298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800729c:	d302      	bcc.n	80072a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800729e:	480d      	ldr	r0, [pc, #52]	; (80072d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80072a0:	f7ff ff32 	bl	8007108 <_ZSt20__throw_length_errorPKc>
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d90b      	bls.n	80072c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80072a8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80072ac:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80072b0:	d206      	bcs.n	80072c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80072b2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80072b6:	bf2a      	itet	cs
 80072b8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 80072bc:	6008      	strcc	r0, [r1, #0]
 80072be:	600b      	strcs	r3, [r1, #0]
 80072c0:	6808      	ldr	r0, [r1, #0]
 80072c2:	3001      	adds	r0, #1
 80072c4:	d501      	bpl.n	80072ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80072c6:	f7ff ff16 	bl	80070f6 <_ZSt17__throw_bad_allocv>
 80072ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80072ce:	f000 bc29 	b.w	8007b24 <_Znwj>
 80072d2:	bf00      	nop
 80072d4:	0800c5c0 	.word	0x0800c5c0

080072d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80072d8:	f850 3b08 	ldr.w	r3, [r0], #8
 80072dc:	4283      	cmp	r3, r0
 80072de:	d002      	beq.n	80072e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 bc1d 	b.w	8007b20 <_ZdlPv>
 80072e6:	4770      	bx	lr

080072e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 80072e8:	b508      	push	{r3, lr}
 80072ea:	4603      	mov	r3, r0
 80072ec:	4608      	mov	r0, r1
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	4298      	cmp	r0, r3
 80072f2:	4611      	mov	r1, r2
 80072f4:	d903      	bls.n	80072fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 80072f6:	4602      	mov	r2, r0
 80072f8:	4801      	ldr	r0, [pc, #4]	; (8007300 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 80072fa:	f7ff ff0b 	bl	8007114 <_ZSt24__throw_out_of_range_fmtPKcz>
 80072fe:	bd08      	pop	{r3, pc}
 8007300:	0800c5d8 	.word	0x0800c5d8

08007304 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8007304:	6840      	ldr	r0, [r0, #4]
 8007306:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800730a:	3901      	subs	r1, #1
 800730c:	1a09      	subs	r1, r1, r0
 800730e:	4291      	cmp	r1, r2
 8007310:	b508      	push	{r3, lr}
 8007312:	d202      	bcs.n	800731a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8007314:	4618      	mov	r0, r3
 8007316:	f7ff fef7 	bl	8007108 <_ZSt20__throw_length_errorPKc>
 800731a:	bd08      	pop	{r3, pc}

0800731c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800731c:	6803      	ldr	r3, [r0, #0]
 800731e:	428b      	cmp	r3, r1
 8007320:	d806      	bhi.n	8007330 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8007322:	6842      	ldr	r2, [r0, #4]
 8007324:	4413      	add	r3, r2
 8007326:	4299      	cmp	r1, r3
 8007328:	bf94      	ite	ls
 800732a:	2000      	movls	r0, #0
 800732c:	2001      	movhi	r0, #1
 800732e:	4770      	bx	lr
 8007330:	2001      	movs	r0, #1
 8007332:	4770      	bx	lr

08007334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8007334:	2a01      	cmp	r2, #1
 8007336:	b410      	push	{r4}
 8007338:	d104      	bne.n	8007344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800733a:	780a      	ldrb	r2, [r1, #0]
 800733c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007340:	7002      	strb	r2, [r0, #0]
 8007342:	4770      	bx	lr
 8007344:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007348:	f7ff bf93 	b.w	8007272 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800734c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800734c:	2a01      	cmp	r2, #1
 800734e:	b430      	push	{r4, r5}
 8007350:	d103      	bne.n	800735a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8007352:	780b      	ldrb	r3, [r1, #0]
 8007354:	7003      	strb	r3, [r0, #0]
 8007356:	bc30      	pop	{r4, r5}
 8007358:	4770      	bx	lr
 800735a:	2a00      	cmp	r2, #0
 800735c:	d0fb      	beq.n	8007356 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800735e:	bc30      	pop	{r4, r5}
 8007360:	f002 baf3 	b.w	800994a <memmove>

08007364 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 8007364:	460b      	mov	r3, r1
 8007366:	2b01      	cmp	r3, #1
 8007368:	b410      	push	{r4}
 800736a:	4611      	mov	r1, r2
 800736c:	4604      	mov	r4, r0
 800736e:	d103      	bne.n	8007378 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8007370:	7022      	strb	r2, [r4, #0]
 8007372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	2b00      	cmp	r3, #0
 800737a:	d0fa      	beq.n	8007372 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 800737c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007380:	461a      	mov	r2, r3
 8007382:	f002 bafc 	b.w	800997e <memset>

08007386 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 8007386:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007388:	290f      	cmp	r1, #15
 800738a:	4604      	mov	r4, r0
 800738c:	9101      	str	r1, [sp, #4]
 800738e:	4615      	mov	r5, r2
 8007390:	d906      	bls.n	80073a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 8007392:	2200      	movs	r2, #0
 8007394:	a901      	add	r1, sp, #4
 8007396:	f7ff ff7d 	bl	8007294 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800739a:	9b01      	ldr	r3, [sp, #4]
 800739c:	6020      	str	r0, [r4, #0]
 800739e:	60a3      	str	r3, [r4, #8]
 80073a0:	9901      	ldr	r1, [sp, #4]
 80073a2:	b119      	cbz	r1, 80073ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 80073a4:	6820      	ldr	r0, [r4, #0]
 80073a6:	462a      	mov	r2, r5
 80073a8:	f7ff ffdc 	bl	8007364 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 80073ac:	9b01      	ldr	r3, [sp, #4]
 80073ae:	6822      	ldr	r2, [r4, #0]
 80073b0:	6063      	str	r3, [r4, #4]
 80073b2:	2100      	movs	r1, #0
 80073b4:	54d1      	strb	r1, [r2, r3]
 80073b6:	b003      	add	sp, #12
 80073b8:	bd30      	pop	{r4, r5, pc}

080073ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80073ba:	b508      	push	{r3, lr}
 80073bc:	1a52      	subs	r2, r2, r1
 80073be:	f7ff ffb9 	bl	8007334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80073c2:	bd08      	pop	{r3, pc}

080073c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80073c4:	b508      	push	{r3, lr}
 80073c6:	1a52      	subs	r2, r2, r1
 80073c8:	f7ff ffb4 	bl	8007334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80073cc:	bd08      	pop	{r3, pc}

080073ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80073ce:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80073d2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80073d4:	461f      	mov	r7, r3
 80073d6:	6843      	ldr	r3, [r0, #4]
 80073d8:	eb01 0802 	add.w	r8, r1, r2
 80073dc:	1ab2      	subs	r2, r6, r2
 80073de:	441a      	add	r2, r3
 80073e0:	eba3 0908 	sub.w	r9, r3, r8
 80073e4:	4603      	mov	r3, r0
 80073e6:	9201      	str	r2, [sp, #4]
 80073e8:	f853 2b08 	ldr.w	r2, [r3], #8
 80073ec:	429a      	cmp	r2, r3
 80073ee:	bf18      	it	ne
 80073f0:	6882      	ldrne	r2, [r0, #8]
 80073f2:	460d      	mov	r5, r1
 80073f4:	bf08      	it	eq
 80073f6:	220f      	moveq	r2, #15
 80073f8:	a901      	add	r1, sp, #4
 80073fa:	4604      	mov	r4, r0
 80073fc:	f7ff ff4a 	bl	8007294 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007400:	4682      	mov	sl, r0
 8007402:	b11d      	cbz	r5, 800740c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8007404:	6821      	ldr	r1, [r4, #0]
 8007406:	462a      	mov	r2, r5
 8007408:	f7ff ff94 	bl	8007334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800740c:	b137      	cbz	r7, 800741c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800740e:	b12e      	cbz	r6, 800741c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8007410:	4632      	mov	r2, r6
 8007412:	4639      	mov	r1, r7
 8007414:	eb0a 0005 	add.w	r0, sl, r5
 8007418:	f7ff ff8c 	bl	8007334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800741c:	f1b9 0f00 	cmp.w	r9, #0
 8007420:	d007      	beq.n	8007432 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8007422:	6821      	ldr	r1, [r4, #0]
 8007424:	4435      	add	r5, r6
 8007426:	464a      	mov	r2, r9
 8007428:	4441      	add	r1, r8
 800742a:	eb0a 0005 	add.w	r0, sl, r5
 800742e:	f7ff ff81 	bl	8007334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007432:	4620      	mov	r0, r4
 8007434:	f7ff ff50 	bl	80072d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8007438:	9b01      	ldr	r3, [sp, #4]
 800743a:	f8c4 a000 	str.w	sl, [r4]
 800743e:	60a3      	str	r3, [r4, #8]
 8007440:	b002      	add	sp, #8
 8007442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007446 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
 8007446:	b538      	push	{r3, r4, r5, lr}
 8007448:	4604      	mov	r4, r0
 800744a:	4615      	mov	r5, r2
 800744c:	4608      	mov	r0, r1
 800744e:	4411      	add	r1, r2
 8007450:	6862      	ldr	r2, [r4, #4]
 8007452:	1a52      	subs	r2, r2, r1
 8007454:	d005      	beq.n	8007462 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 8007456:	b125      	cbz	r5, 8007462 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 8007458:	6823      	ldr	r3, [r4, #0]
 800745a:	4419      	add	r1, r3
 800745c:	4418      	add	r0, r3
 800745e:	f7ff ff75 	bl	800734c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8007462:	6863      	ldr	r3, [r4, #4]
 8007464:	6822      	ldr	r2, [r4, #0]
 8007466:	1b5b      	subs	r3, r3, r5
 8007468:	2100      	movs	r1, #0
 800746a:	6063      	str	r3, [r4, #4]
 800746c:	54d1      	strb	r1, [r2, r3]
 800746e:	bd38      	pop	{r3, r4, r5, pc}

08007470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8007470:	f100 0208 	add.w	r2, r0, #8
 8007474:	6002      	str	r2, [r0, #0]
 8007476:	2200      	movs	r2, #0
 8007478:	6042      	str	r2, [r0, #4]
 800747a:	7202      	strb	r2, [r0, #8]
 800747c:	4770      	bx	lr

0800747e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>:
 800747e:	f100 0208 	add.w	r2, r0, #8
 8007482:	6002      	str	r2, [r0, #0]
 8007484:	2200      	movs	r2, #0
 8007486:	6042      	str	r2, [r0, #4]
 8007488:	7202      	strb	r2, [r0, #8]
 800748a:	4770      	bx	lr

0800748c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EjcRKS3_>:
 800748c:	b510      	push	{r4, lr}
 800748e:	f100 0308 	add.w	r3, r0, #8
 8007492:	4604      	mov	r4, r0
 8007494:	6003      	str	r3, [r0, #0]
 8007496:	f7ff ff76 	bl	8007386 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 800749a:	4620      	mov	r0, r4
 800749c:	bd10      	pop	{r4, pc}

0800749e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800749e:	b570      	push	{r4, r5, r6, lr}
 80074a0:	4604      	mov	r4, r0
 80074a2:	460e      	mov	r6, r1
 80074a4:	3008      	adds	r0, #8
 80074a6:	6020      	str	r0, [r4, #0]
 80074a8:	f856 3b08 	ldr.w	r3, [r6], #8
 80074ac:	429e      	cmp	r6, r3
 80074ae:	460d      	mov	r5, r1
 80074b0:	d10b      	bne.n	80074ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x2c>
 80074b2:	2210      	movs	r2, #16
 80074b4:	4631      	mov	r1, r6
 80074b6:	f7ff fedc 	bl	8007272 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 80074ba:	686b      	ldr	r3, [r5, #4]
 80074bc:	6063      	str	r3, [r4, #4]
 80074be:	2300      	movs	r3, #0
 80074c0:	602e      	str	r6, [r5, #0]
 80074c2:	606b      	str	r3, [r5, #4]
 80074c4:	722b      	strb	r3, [r5, #8]
 80074c6:	4620      	mov	r0, r4
 80074c8:	bd70      	pop	{r4, r5, r6, pc}
 80074ca:	6023      	str	r3, [r4, #0]
 80074cc:	688b      	ldr	r3, [r1, #8]
 80074ce:	60a3      	str	r3, [r4, #8]
 80074d0:	e7f3      	b.n	80074ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x1c>

080074d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80074d2:	b510      	push	{r4, lr}
 80074d4:	4604      	mov	r4, r0
 80074d6:	f7ff feff 	bl	80072d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80074da:	4620      	mov	r0, r4
 80074dc:	bd10      	pop	{r4, pc}

080074de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 80074de:	b570      	push	{r4, r5, r6, lr}
 80074e0:	460c      	mov	r4, r1
 80074e2:	f851 3b08 	ldr.w	r3, [r1], #8
 80074e6:	4299      	cmp	r1, r3
 80074e8:	4605      	mov	r5, r0
 80074ea:	6800      	ldr	r0, [r0, #0]
 80074ec:	d110      	bne.n	8007510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x32>
 80074ee:	42a5      	cmp	r5, r4
 80074f0:	d008      	beq.n	8007504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 80074f2:	6862      	ldr	r2, [r4, #4]
 80074f4:	b10a      	cbz	r2, 80074fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x1c>
 80074f6:	f7ff ff1d 	bl	8007334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80074fa:	6863      	ldr	r3, [r4, #4]
 80074fc:	682a      	ldr	r2, [r5, #0]
 80074fe:	606b      	str	r3, [r5, #4]
 8007500:	2100      	movs	r1, #0
 8007502:	54d1      	strb	r1, [r2, r3]
 8007504:	6822      	ldr	r2, [r4, #0]
 8007506:	2300      	movs	r3, #0
 8007508:	6063      	str	r3, [r4, #4]
 800750a:	7013      	strb	r3, [r2, #0]
 800750c:	4628      	mov	r0, r5
 800750e:	bd70      	pop	{r4, r5, r6, pc}
 8007510:	602b      	str	r3, [r5, #0]
 8007512:	f105 0608 	add.w	r6, r5, #8
 8007516:	6863      	ldr	r3, [r4, #4]
 8007518:	606b      	str	r3, [r5, #4]
 800751a:	42b0      	cmp	r0, r6
 800751c:	68a3      	ldr	r3, [r4, #8]
 800751e:	bf18      	it	ne
 8007520:	68aa      	ldrne	r2, [r5, #8]
 8007522:	60ab      	str	r3, [r5, #8]
 8007524:	bf08      	it	eq
 8007526:	2000      	moveq	r0, #0
 8007528:	b110      	cbz	r0, 8007530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x52>
 800752a:	6020      	str	r0, [r4, #0]
 800752c:	60a2      	str	r2, [r4, #8]
 800752e:	e7e9      	b.n	8007504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 8007530:	6021      	str	r1, [r4, #0]
 8007532:	e7e7      	b.n	8007504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>

08007534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
 8007534:	6800      	ldr	r0, [r0, #0]
 8007536:	4770      	bx	lr

08007538 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
 8007538:	6800      	ldr	r0, [r0, #0]
 800753a:	4770      	bx	lr

0800753c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>:
 800753c:	e9d0 2000 	ldrd	r2, r0, [r0]
 8007540:	4410      	add	r0, r2
 8007542:	4770      	bx	lr

08007544 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>:
 8007544:	e9d0 2000 	ldrd	r2, r0, [r0]
 8007548:	4410      	add	r0, r2
 800754a:	4770      	bx	lr

0800754c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800754c:	6840      	ldr	r0, [r0, #4]
 800754e:	4770      	bx	lr

08007550 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 8007550:	6840      	ldr	r0, [r0, #4]
 8007552:	4770      	bx	lr

08007554 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8007554:	4603      	mov	r3, r0
 8007556:	f853 2b08 	ldr.w	r2, [r3], #8
 800755a:	429a      	cmp	r2, r3
 800755c:	bf14      	ite	ne
 800755e:	6880      	ldrne	r0, [r0, #8]
 8007560:	200f      	moveq	r0, #15
 8007562:	4770      	bx	lr

08007564 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 8007564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007566:	4603      	mov	r3, r0
 8007568:	9101      	str	r1, [sp, #4]
 800756a:	f853 2b08 	ldr.w	r2, [r3], #8
 800756e:	429a      	cmp	r2, r3
 8007570:	bf18      	it	ne
 8007572:	6882      	ldrne	r2, [r0, #8]
 8007574:	9b01      	ldr	r3, [sp, #4]
 8007576:	bf08      	it	eq
 8007578:	220f      	moveq	r2, #15
 800757a:	4293      	cmp	r3, r2
 800757c:	4604      	mov	r4, r0
 800757e:	d90e      	bls.n	800759e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x3a>
 8007580:	a901      	add	r1, sp, #4
 8007582:	f7ff fe87 	bl	8007294 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007586:	6862      	ldr	r2, [r4, #4]
 8007588:	6821      	ldr	r1, [r4, #0]
 800758a:	3201      	adds	r2, #1
 800758c:	4605      	mov	r5, r0
 800758e:	f7ff fed1 	bl	8007334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007592:	4620      	mov	r0, r4
 8007594:	f7ff fea0 	bl	80072d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8007598:	9b01      	ldr	r3, [sp, #4]
 800759a:	6025      	str	r5, [r4, #0]
 800759c:	60a3      	str	r3, [r4, #8]
 800759e:	b003      	add	sp, #12
 80075a0:	bd30      	pop	{r4, r5, pc}

080075a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5clearEv>:
 80075a2:	6802      	ldr	r2, [r0, #0]
 80075a4:	2300      	movs	r3, #0
 80075a6:	6043      	str	r3, [r0, #4]
 80075a8:	7013      	strb	r3, [r2, #0]
 80075aa:	4770      	bx	lr

080075ac <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 80075ac:	6800      	ldr	r0, [r0, #0]
 80075ae:	4408      	add	r0, r1
 80075b0:	4770      	bx	lr

080075b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 80075b2:	6800      	ldr	r0, [r0, #0]
 80075b4:	4408      	add	r0, r1
 80075b6:	4770      	bx	lr

080075b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 80075b8:	4603      	mov	r3, r0
 80075ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075bc:	f853 2b08 	ldr.w	r2, [r3], #8
 80075c0:	6846      	ldr	r6, [r0, #4]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	bf18      	it	ne
 80075c6:	6883      	ldrne	r3, [r0, #8]
 80075c8:	f106 0501 	add.w	r5, r6, #1
 80075cc:	bf08      	it	eq
 80075ce:	230f      	moveq	r3, #15
 80075d0:	429d      	cmp	r5, r3
 80075d2:	4604      	mov	r4, r0
 80075d4:	460f      	mov	r7, r1
 80075d6:	d906      	bls.n	80075e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 80075d8:	2301      	movs	r3, #1
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	2300      	movs	r3, #0
 80075de:	461a      	mov	r2, r3
 80075e0:	4631      	mov	r1, r6
 80075e2:	f7ff fef4 	bl	80073ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	559f      	strb	r7, [r3, r6]
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	6065      	str	r5, [r4, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	555a      	strb	r2, [r3, r5]
 80075f2:	b003      	add	sp, #12
 80075f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080075f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj>:
 80075f8:	b570      	push	{r4, r5, r6, lr}
 80075fa:	4616      	mov	r6, r2
 80075fc:	4a0c      	ldr	r2, [pc, #48]	; (8007630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x38>)
 80075fe:	4604      	mov	r4, r0
 8007600:	460d      	mov	r5, r1
 8007602:	f7ff fe71 	bl	80072e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8007606:	1c73      	adds	r3, r6, #1
 8007608:	d105      	bne.n	8007616 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1e>
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	6065      	str	r5, [r4, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	555a      	strb	r2, [r3, r5]
 8007612:	4620      	mov	r0, r4
 8007614:	bd70      	pop	{r4, r5, r6, pc}
 8007616:	2e00      	cmp	r6, #0
 8007618:	d0fb      	beq.n	8007612 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1a>
 800761a:	6862      	ldr	r2, [r4, #4]
 800761c:	1b52      	subs	r2, r2, r5
 800761e:	42b2      	cmp	r2, r6
 8007620:	bf28      	it	cs
 8007622:	4632      	movcs	r2, r6
 8007624:	4629      	mov	r1, r5
 8007626:	4620      	mov	r0, r4
 8007628:	f7ff ff0d 	bl	8007446 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
 800762c:	e7f1      	b.n	8007612 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5eraseEjj+0x1a>
 800762e:	bf00      	nop
 8007630:	0800c60f 	.word	0x0800c60f

08007634 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 8007634:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007638:	4616      	mov	r6, r2
 800763a:	461d      	mov	r5, r3
 800763c:	4604      	mov	r4, r0
 800763e:	4b1c      	ldr	r3, [pc, #112]	; (80076b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x7c>)
 8007640:	462a      	mov	r2, r5
 8007642:	460f      	mov	r7, r1
 8007644:	4631      	mov	r1, r6
 8007646:	f7ff fe5d 	bl	8007304 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800764a:	4623      	mov	r3, r4
 800764c:	6862      	ldr	r2, [r4, #4]
 800764e:	f853 0b08 	ldr.w	r0, [r3], #8
 8007652:	4298      	cmp	r0, r3
 8007654:	bf18      	it	ne
 8007656:	68a3      	ldrne	r3, [r4, #8]
 8007658:	eba5 0806 	sub.w	r8, r5, r6
 800765c:	4490      	add	r8, r2
 800765e:	bf08      	it	eq
 8007660:	230f      	moveq	r3, #15
 8007662:	4543      	cmp	r3, r8
 8007664:	d31b      	bcc.n	800769e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x6a>
 8007666:	19f3      	adds	r3, r6, r7
 8007668:	1ad2      	subs	r2, r2, r3
 800766a:	d006      	beq.n	800767a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 800766c:	42ae      	cmp	r6, r5
 800766e:	d004      	beq.n	800767a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 8007670:	4438      	add	r0, r7
 8007672:	1981      	adds	r1, r0, r6
 8007674:	4428      	add	r0, r5
 8007676:	f7ff fe69 	bl	800734c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800767a:	b135      	cbz	r5, 800768a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x56>
 800767c:	6820      	ldr	r0, [r4, #0]
 800767e:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8007682:	4629      	mov	r1, r5
 8007684:	4438      	add	r0, r7
 8007686:	f7ff fe6d 	bl	8007364 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	f8c4 8004 	str.w	r8, [r4, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	4620      	mov	r0, r4
 8007694:	f803 2008 	strb.w	r2, [r3, r8]
 8007698:	b002      	add	sp, #8
 800769a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800769e:	9500      	str	r5, [sp, #0]
 80076a0:	2300      	movs	r3, #0
 80076a2:	4632      	mov	r2, r6
 80076a4:	4639      	mov	r1, r7
 80076a6:	4620      	mov	r0, r4
 80076a8:	f7ff fe91 	bl	80073ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80076ac:	e7e5      	b.n	800767a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 80076ae:	bf00      	nop
 80076b0:	0800c623 	.word	0x0800c623

080076b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 80076b4:	b507      	push	{r0, r1, r2, lr}
 80076b6:	9200      	str	r2, [sp, #0]
 80076b8:	460b      	mov	r3, r1
 80076ba:	2200      	movs	r2, #0
 80076bc:	6841      	ldr	r1, [r0, #4]
 80076be:	f7ff ffb9 	bl	8007634 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 80076c2:	b003      	add	sp, #12
 80076c4:	f85d fb04 	ldr.w	pc, [sp], #4

080076c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80076c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076ce:	4614      	mov	r4, r2
 80076d0:	4680      	mov	r8, r0
 80076d2:	462a      	mov	r2, r5
 80076d4:	4689      	mov	r9, r1
 80076d6:	461f      	mov	r7, r3
 80076d8:	4621      	mov	r1, r4
 80076da:	4b39      	ldr	r3, [pc, #228]	; (80077c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 80076dc:	f7ff fe12 	bl	8007304 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80076e0:	4642      	mov	r2, r8
 80076e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80076e6:	f852 6b08 	ldr.w	r6, [r2], #8
 80076ea:	4296      	cmp	r6, r2
 80076ec:	bf18      	it	ne
 80076ee:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 80076f2:	eba5 0b04 	sub.w	fp, r5, r4
 80076f6:	eb03 0a0b 	add.w	sl, r3, fp
 80076fa:	bf08      	it	eq
 80076fc:	220f      	moveq	r2, #15
 80076fe:	4552      	cmp	r2, sl
 8007700:	d351      	bcc.n	80077a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 8007702:	444e      	add	r6, r9
 8007704:	4639      	mov	r1, r7
 8007706:	44a1      	add	r9, r4
 8007708:	4640      	mov	r0, r8
 800770a:	eba3 0909 	sub.w	r9, r3, r9
 800770e:	f7ff fe05 	bl	800731c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 8007712:	b180      	cbz	r0, 8007736 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 8007714:	f1b9 0f00 	cmp.w	r9, #0
 8007718:	d006      	beq.n	8007728 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800771a:	42ac      	cmp	r4, r5
 800771c:	d004      	beq.n	8007728 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 800771e:	464a      	mov	r2, r9
 8007720:	1931      	adds	r1, r6, r4
 8007722:	1970      	adds	r0, r6, r5
 8007724:	f7ff fe12 	bl	800734c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8007728:	b315      	cbz	r5, 8007770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800772a:	462a      	mov	r2, r5
 800772c:	4639      	mov	r1, r7
 800772e:	4630      	mov	r0, r6
 8007730:	f7ff fe00 	bl	8007334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007734:	e01c      	b.n	8007770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8007736:	b135      	cbz	r5, 8007746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8007738:	42ac      	cmp	r4, r5
 800773a:	d33c      	bcc.n	80077b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 800773c:	462a      	mov	r2, r5
 800773e:	4639      	mov	r1, r7
 8007740:	4630      	mov	r0, r6
 8007742:	f7ff fe03 	bl	800734c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8007746:	f1b9 0f00 	cmp.w	r9, #0
 800774a:	d011      	beq.n	8007770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800774c:	42ac      	cmp	r4, r5
 800774e:	d00f      	beq.n	8007770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8007750:	464a      	mov	r2, r9
 8007752:	1931      	adds	r1, r6, r4
 8007754:	1970      	adds	r0, r6, r5
 8007756:	f7ff fdf9 	bl	800734c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800775a:	42ac      	cmp	r4, r5
 800775c:	d208      	bcs.n	8007770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 800775e:	4434      	add	r4, r6
 8007760:	197b      	adds	r3, r7, r5
 8007762:	429c      	cmp	r4, r3
 8007764:	d30f      	bcc.n	8007786 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 8007766:	462a      	mov	r2, r5
 8007768:	4639      	mov	r1, r7
 800776a:	4630      	mov	r0, r6
 800776c:	f7ff fdee 	bl	800734c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8007770:	f8d8 3000 	ldr.w	r3, [r8]
 8007774:	f8c8 a004 	str.w	sl, [r8, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	4640      	mov	r0, r8
 800777c:	f803 200a 	strb.w	r2, [r3, sl]
 8007780:	b003      	add	sp, #12
 8007782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007786:	42bc      	cmp	r4, r7
 8007788:	d803      	bhi.n	8007792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 800778a:	462a      	mov	r2, r5
 800778c:	eb07 010b 	add.w	r1, r7, fp
 8007790:	e7cd      	b.n	800772e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8007792:	1be4      	subs	r4, r4, r7
 8007794:	4622      	mov	r2, r4
 8007796:	4639      	mov	r1, r7
 8007798:	4630      	mov	r0, r6
 800779a:	f7ff fdd7 	bl	800734c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800779e:	1b2a      	subs	r2, r5, r4
 80077a0:	1971      	adds	r1, r6, r5
 80077a2:	1930      	adds	r0, r6, r4
 80077a4:	e7c4      	b.n	8007730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 80077a6:	9500      	str	r5, [sp, #0]
 80077a8:	463b      	mov	r3, r7
 80077aa:	4622      	mov	r2, r4
 80077ac:	4649      	mov	r1, r9
 80077ae:	4640      	mov	r0, r8
 80077b0:	f7ff fe0d 	bl	80073ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80077b4:	e7dc      	b.n	8007770 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80077b6:	f1b9 0f00 	cmp.w	r9, #0
 80077ba:	d0d0      	beq.n	800775e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 80077bc:	e7c8      	b.n	8007750 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 80077be:	bf00      	nop
 80077c0:	0800c656 	.word	0x0800c656

080077c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 80077c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077c6:	4604      	mov	r4, r0
 80077c8:	4608      	mov	r0, r1
 80077ca:	9103      	str	r1, [sp, #12]
 80077cc:	f7f8 fd70 	bl	80002b0 <strlen>
 80077d0:	9b03      	ldr	r3, [sp, #12]
 80077d2:	9000      	str	r0, [sp, #0]
 80077d4:	6862      	ldr	r2, [r4, #4]
 80077d6:	2100      	movs	r1, #0
 80077d8:	4620      	mov	r0, r4
 80077da:	f7ff ff75 	bl	80076c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80077de:	b004      	add	sp, #16
 80077e0:	bd10      	pop	{r4, pc}

080077e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 80077e2:	b508      	push	{r3, lr}
 80077e4:	f7ff ffee 	bl	80077c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 80077e8:	bd08      	pop	{r3, pc}
	...

080077ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 80077ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80077ee:	4604      	mov	r4, r0
 80077f0:	4615      	mov	r5, r2
 80077f2:	4a09      	ldr	r2, [pc, #36]	; (8007818 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 80077f4:	9303      	str	r3, [sp, #12]
 80077f6:	460e      	mov	r6, r1
 80077f8:	f7ff fd76 	bl	80072e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80077fc:	6862      	ldr	r2, [r4, #4]
 80077fe:	9b03      	ldr	r3, [sp, #12]
 8007800:	1b92      	subs	r2, r2, r6
 8007802:	4601      	mov	r1, r0
 8007804:	42aa      	cmp	r2, r5
 8007806:	9808      	ldr	r0, [sp, #32]
 8007808:	9000      	str	r0, [sp, #0]
 800780a:	bf28      	it	cs
 800780c:	462a      	movcs	r2, r5
 800780e:	4620      	mov	r0, r4
 8007810:	f7ff ff5a 	bl	80076c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8007814:	b004      	add	sp, #16
 8007816:	bd70      	pop	{r4, r5, r6, pc}
 8007818:	0800c640 	.word	0x0800c640

0800781c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjRKS4_>:
 800781c:	b507      	push	{r0, r1, r2, lr}
 800781e:	6853      	ldr	r3, [r2, #4]
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	6813      	ldr	r3, [r2, #0]
 8007824:	2200      	movs	r2, #0
 8007826:	f7ff ffe1 	bl	80077ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 800782a:	b003      	add	sp, #12
 800782c:	f85d fb04 	ldr.w	pc, [sp], #4

08007830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 8007830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007832:	4604      	mov	r4, r0
 8007834:	4610      	mov	r0, r2
 8007836:	9103      	str	r1, [sp, #12]
 8007838:	9202      	str	r2, [sp, #8]
 800783a:	f7f8 fd39 	bl	80002b0 <strlen>
 800783e:	9b02      	ldr	r3, [sp, #8]
 8007840:	9000      	str	r0, [sp, #0]
 8007842:	9903      	ldr	r1, [sp, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	4620      	mov	r0, r4
 8007848:	f7ff ffd0 	bl	80077ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 800784c:	b004      	add	sp, #16
 800784e:	bd10      	pop	{r4, pc}

08007850 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjRKS4_>:
 8007850:	b513      	push	{r0, r1, r4, lr}
 8007852:	685c      	ldr	r4, [r3, #4]
 8007854:	9400      	str	r4, [sp, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f7ff ffc8 	bl	80077ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 800785c:	b002      	add	sp, #8
 800785e:	bd10      	pop	{r4, pc}

08007860 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8007860:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007862:	4604      	mov	r4, r0
 8007864:	4623      	mov	r3, r4
 8007866:	6840      	ldr	r0, [r0, #4]
 8007868:	f853 6b08 	ldr.w	r6, [r3], #8
 800786c:	429e      	cmp	r6, r3
 800786e:	bf18      	it	ne
 8007870:	68a3      	ldrne	r3, [r4, #8]
 8007872:	eb00 0502 	add.w	r5, r0, r2
 8007876:	bf08      	it	eq
 8007878:	230f      	moveq	r3, #15
 800787a:	429d      	cmp	r5, r3
 800787c:	d80a      	bhi.n	8007894 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 800787e:	b112      	cbz	r2, 8007886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8007880:	4430      	add	r0, r6
 8007882:	f7ff fd57 	bl	8007334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	6065      	str	r5, [r4, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	4620      	mov	r0, r4
 800788e:	555a      	strb	r2, [r3, r5]
 8007890:	b002      	add	sp, #8
 8007892:	bd70      	pop	{r4, r5, r6, pc}
 8007894:	9200      	str	r2, [sp, #0]
 8007896:	460b      	mov	r3, r1
 8007898:	2200      	movs	r2, #0
 800789a:	4601      	mov	r1, r0
 800789c:	4620      	mov	r0, r4
 800789e:	f7ff fd96 	bl	80073ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80078a2:	e7f0      	b.n	8007886 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

080078a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 80078a4:	b508      	push	{r3, lr}
 80078a6:	e9d1 1200 	ldrd	r1, r2, [r1]
 80078aa:	f7ff ffd9 	bl	8007860 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80078ae:	bd08      	pop	{r3, pc}

080078b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 80078b0:	b570      	push	{r4, r5, r6, lr}
 80078b2:	4b06      	ldr	r3, [pc, #24]	; (80078cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 80078b4:	4604      	mov	r4, r0
 80078b6:	460d      	mov	r5, r1
 80078b8:	4616      	mov	r6, r2
 80078ba:	2100      	movs	r1, #0
 80078bc:	f7ff fd22 	bl	8007304 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80078c0:	4632      	mov	r2, r6
 80078c2:	4629      	mov	r1, r5
 80078c4:	4620      	mov	r0, r4
 80078c6:	f7ff ffcb 	bl	8007860 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80078ca:	bd70      	pop	{r4, r5, r6, pc}
 80078cc:	0800c66f 	.word	0x0800c66f

080078d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 80078d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078d2:	4604      	mov	r4, r0
 80078d4:	4608      	mov	r0, r1
 80078d6:	460d      	mov	r5, r1
 80078d8:	f7f8 fcea 	bl	80002b0 <strlen>
 80078dc:	4b06      	ldr	r3, [pc, #24]	; (80078f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 80078de:	9001      	str	r0, [sp, #4]
 80078e0:	4602      	mov	r2, r0
 80078e2:	2100      	movs	r1, #0
 80078e4:	4620      	mov	r0, r4
 80078e6:	f7ff fd0d 	bl	8007304 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80078ea:	9a01      	ldr	r2, [sp, #4]
 80078ec:	4629      	mov	r1, r5
 80078ee:	4620      	mov	r0, r4
 80078f0:	f7ff ffb6 	bl	8007860 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 80078f4:	b003      	add	sp, #12
 80078f6:	bd30      	pop	{r4, r5, pc}
 80078f8:	0800c66f 	.word	0x0800c66f

080078fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80078fc:	6800      	ldr	r0, [r0, #0]
 80078fe:	4770      	bx	lr

08007900 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>:
 8007900:	4770      	bx	lr

08007902 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
 8007902:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007906:	460e      	mov	r6, r1
 8007908:	461d      	mov	r5, r3
 800790a:	6841      	ldr	r1, [r0, #4]
 800790c:	b93b      	cbnz	r3, 800791e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x1c>
 800790e:	4291      	cmp	r1, r2
 8007910:	d201      	bcs.n	8007916 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x14>
 8007912:	f04f 32ff 	mov.w	r2, #4294967295
 8007916:	4610      	mov	r0, r2
 8007918:	b003      	add	sp, #12
 800791a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800791e:	4291      	cmp	r1, r2
 8007920:	d9f7      	bls.n	8007912 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 8007922:	f8d0 8000 	ldr.w	r8, [r0]
 8007926:	7833      	ldrb	r3, [r6, #0]
 8007928:	f88d 3007 	strb.w	r3, [sp, #7]
 800792c:	eb08 0701 	add.w	r7, r8, r1
 8007930:	eb08 0002 	add.w	r0, r8, r2
 8007934:	1a89      	subs	r1, r1, r2
 8007936:	f1c5 0901 	rsb	r9, r5, #1
 800793a:	42a9      	cmp	r1, r5
 800793c:	d3e9      	bcc.n	8007912 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 800793e:	f10d 0207 	add.w	r2, sp, #7
 8007942:	4449      	add	r1, r9
 8007944:	f7ff fc9e 	bl	8007284 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 8007948:	4604      	mov	r4, r0
 800794a:	2800      	cmp	r0, #0
 800794c:	d0e1      	beq.n	8007912 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x10>
 800794e:	462a      	mov	r2, r5
 8007950:	4631      	mov	r1, r6
 8007952:	f7ff fc92 	bl	800727a <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 8007956:	b910      	cbnz	r0, 800795e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x5c>
 8007958:	eba4 0208 	sub.w	r2, r4, r8
 800795c:	e7db      	b.n	8007916 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x14>
 800795e:	1c60      	adds	r0, r4, #1
 8007960:	1a39      	subs	r1, r7, r0
 8007962:	e7ea      	b.n	800793a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x38>

08007964 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>:
 8007964:	b508      	push	{r3, lr}
 8007966:	e9d1 1300 	ldrd	r1, r3, [r1]
 800796a:	f7ff ffca 	bl	8007902 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
 800796e:	bd08      	pop	{r3, pc}

08007970 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>:
 8007970:	b513      	push	{r0, r1, r4, lr}
 8007972:	f88d 1007 	strb.w	r1, [sp, #7]
 8007976:	6841      	ldr	r1, [r0, #4]
 8007978:	428a      	cmp	r2, r1
 800797a:	4613      	mov	r3, r2
 800797c:	d20a      	bcs.n	8007994 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 800797e:	6804      	ldr	r4, [r0, #0]
 8007980:	f10d 0207 	add.w	r2, sp, #7
 8007984:	1ac9      	subs	r1, r1, r3
 8007986:	18e0      	adds	r0, r4, r3
 8007988:	f7ff fc7c 	bl	8007284 <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 800798c:	b110      	cbz	r0, 8007994 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x24>
 800798e:	1b00      	subs	r0, r0, r4
 8007990:	b002      	add	sp, #8
 8007992:	bd10      	pop	{r4, pc}
 8007994:	f04f 30ff 	mov.w	r0, #4294967295
 8007998:	e7fa      	b.n	8007990 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x20>

0800799a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17find_first_not_ofEcj>:
 800799a:	b510      	push	{r4, lr}
 800799c:	6843      	ldr	r3, [r0, #4]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d303      	bcc.n	80079aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17find_first_not_ofEcj+0x10>
 80079a2:	f04f 32ff 	mov.w	r2, #4294967295
 80079a6:	4610      	mov	r0, r2
 80079a8:	bd10      	pop	{r4, pc}
 80079aa:	6804      	ldr	r4, [r0, #0]
 80079ac:	5ca4      	ldrb	r4, [r4, r2]
 80079ae:	428c      	cmp	r4, r1
 80079b0:	d1f9      	bne.n	80079a6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17find_first_not_ofEcj+0xc>
 80079b2:	3201      	adds	r2, #1
 80079b4:	e7f3      	b.n	800799e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE17find_first_not_ofEcj+0x4>

080079b6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16find_last_not_ofEcj>:
 80079b6:	6843      	ldr	r3, [r0, #4]
 80079b8:	b15b      	cbz	r3, 80079d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16find_last_not_ofEcj+0x1c>
 80079ba:	3b01      	subs	r3, #1
 80079bc:	429a      	cmp	r2, r3
 80079be:	bf28      	it	cs
 80079c0:	461a      	movcs	r2, r3
 80079c2:	6803      	ldr	r3, [r0, #0]
 80079c4:	5c98      	ldrb	r0, [r3, r2]
 80079c6:	4288      	cmp	r0, r1
 80079c8:	d101      	bne.n	80079ce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16find_last_not_ofEcj+0x18>
 80079ca:	3a01      	subs	r2, #1
 80079cc:	d2fa      	bcs.n	80079c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16find_last_not_ofEcj+0xe>
 80079ce:	4610      	mov	r0, r2
 80079d0:	4770      	bx	lr
 80079d2:	f04f 32ff 	mov.w	r2, #4294967295
 80079d6:	e7fa      	b.n	80079ce <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16find_last_not_ofEcj+0x18>

080079d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 80079d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079da:	4604      	mov	r4, r0
 80079dc:	4616      	mov	r6, r2
 80079de:	460d      	mov	r5, r1
 80079e0:	b919      	cbnz	r1, 80079ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80079e2:	b112      	cbz	r2, 80079ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80079e4:	480d      	ldr	r0, [pc, #52]	; (8007a1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 80079e6:	f7ff fb89 	bl	80070fc <_ZSt19__throw_logic_errorPKc>
 80079ea:	1b73      	subs	r3, r6, r5
 80079ec:	2b0f      	cmp	r3, #15
 80079ee:	9301      	str	r3, [sp, #4]
 80079f0:	d907      	bls.n	8007a02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 80079f2:	2200      	movs	r2, #0
 80079f4:	a901      	add	r1, sp, #4
 80079f6:	4620      	mov	r0, r4
 80079f8:	f7ff fc4c 	bl	8007294 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80079fc:	9b01      	ldr	r3, [sp, #4]
 80079fe:	6020      	str	r0, [r4, #0]
 8007a00:	60a3      	str	r3, [r4, #8]
 8007a02:	4632      	mov	r2, r6
 8007a04:	4629      	mov	r1, r5
 8007a06:	6820      	ldr	r0, [r4, #0]
 8007a08:	f7ff fcd7 	bl	80073ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8007a0c:	9b01      	ldr	r3, [sp, #4]
 8007a0e:	6822      	ldr	r2, [r4, #0]
 8007a10:	6063      	str	r3, [r4, #4]
 8007a12:	2100      	movs	r1, #0
 8007a14:	54d1      	strb	r1, [r2, r3]
 8007a16:	b002      	add	sp, #8
 8007a18:	bd70      	pop	{r4, r5, r6, pc}
 8007a1a:	bf00      	nop
 8007a1c:	0800c684 	.word	0x0800c684

08007a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8007a20:	b538      	push	{r3, r4, r5, lr}
 8007a22:	f100 0308 	add.w	r3, r0, #8
 8007a26:	6003      	str	r3, [r0, #0]
 8007a28:	e9d1 5200 	ldrd	r5, r2, [r1]
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	f04f 0300 	mov.w	r3, #0
 8007a32:	442a      	add	r2, r5
 8007a34:	4629      	mov	r1, r5
 8007a36:	f7ff ffcf 	bl	80079d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	bd38      	pop	{r3, r4, r5, pc}
	...

08007a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8007a40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a42:	4604      	mov	r4, r0
 8007a44:	4616      	mov	r6, r2
 8007a46:	460d      	mov	r5, r1
 8007a48:	b919      	cbnz	r1, 8007a52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8007a4a:	b112      	cbz	r2, 8007a52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8007a4c:	480d      	ldr	r0, [pc, #52]	; (8007a84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8007a4e:	f7ff fb55 	bl	80070fc <_ZSt19__throw_logic_errorPKc>
 8007a52:	1b73      	subs	r3, r6, r5
 8007a54:	2b0f      	cmp	r3, #15
 8007a56:	9301      	str	r3, [sp, #4]
 8007a58:	d907      	bls.n	8007a6a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	a901      	add	r1, sp, #4
 8007a5e:	4620      	mov	r0, r4
 8007a60:	f7ff fc18 	bl	8007294 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8007a64:	9b01      	ldr	r3, [sp, #4]
 8007a66:	6020      	str	r0, [r4, #0]
 8007a68:	60a3      	str	r3, [r4, #8]
 8007a6a:	4632      	mov	r2, r6
 8007a6c:	4629      	mov	r1, r5
 8007a6e:	6820      	ldr	r0, [r4, #0]
 8007a70:	f7ff fca8 	bl	80073c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8007a74:	9b01      	ldr	r3, [sp, #4]
 8007a76:	6822      	ldr	r2, [r4, #0]
 8007a78:	6063      	str	r3, [r4, #4]
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	54d1      	strb	r1, [r2, r3]
 8007a7e:	b002      	add	sp, #8
 8007a80:	bd70      	pop	{r4, r5, r6, pc}
 8007a82:	bf00      	nop
 8007a84:	0800c684 	.word	0x0800c684

08007a88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	f100 0308 	add.w	r3, r0, #8
 8007a8e:	4604      	mov	r4, r0
 8007a90:	6003      	str	r3, [r0, #0]
 8007a92:	460d      	mov	r5, r1
 8007a94:	b159      	cbz	r1, 8007aae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8007a96:	4608      	mov	r0, r1
 8007a98:	f7f8 fc0a 	bl	80002b0 <strlen>
 8007a9c:	182a      	adds	r2, r5, r0
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f04f 0300 	mov.w	r3, #0
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	f7ff ffcb 	bl	8007a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8007aaa:	4620      	mov	r0, r4
 8007aac:	bd38      	pop	{r3, r4, r5, pc}
 8007aae:	2201      	movs	r2, #1
 8007ab0:	e7f5      	b.n	8007a9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>
	...

08007ab4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 8007ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab8:	460d      	mov	r5, r1
 8007aba:	4617      	mov	r7, r2
 8007abc:	4698      	mov	r8, r3
 8007abe:	f100 0308 	add.w	r3, r0, #8
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	6003      	str	r3, [r0, #0]
 8007ac6:	4639      	mov	r1, r7
 8007ac8:	4a0a      	ldr	r2, [pc, #40]	; (8007af4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x40>)
 8007aca:	4628      	mov	r0, r5
 8007acc:	f7ff fc0c 	bl	80072e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8007ad0:	682e      	ldr	r6, [r5, #0]
 8007ad2:	686a      	ldr	r2, [r5, #4]
 8007ad4:	1831      	adds	r1, r6, r0
 8007ad6:	1bd2      	subs	r2, r2, r7
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f04f 0300 	mov.w	r3, #0
 8007ade:	4542      	cmp	r2, r8
 8007ae0:	bf94      	ite	ls
 8007ae2:	188a      	addls	r2, r1, r2
 8007ae4:	eb01 0208 	addhi.w	r2, r1, r8
 8007ae8:	f7ff ffaa 	bl	8007a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8007aec:	4620      	mov	r0, r4
 8007aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007af2:	bf00      	nop
 8007af4:	0800c6ae 	.word	0x0800c6ae

08007af8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 8007af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007afa:	460d      	mov	r5, r1
 8007afc:	4604      	mov	r4, r0
 8007afe:	4611      	mov	r1, r2
 8007b00:	4628      	mov	r0, r5
 8007b02:	4a06      	ldr	r2, [pc, #24]	; (8007b1c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 8007b04:	9301      	str	r3, [sp, #4]
 8007b06:	f7ff fbef 	bl	80072e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 8007b0a:	9b01      	ldr	r3, [sp, #4]
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	4629      	mov	r1, r5
 8007b10:	4620      	mov	r0, r4
 8007b12:	f7ff ffcf 	bl	8007ab4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 8007b16:	4620      	mov	r0, r4
 8007b18:	b003      	add	sp, #12
 8007b1a:	bd30      	pop	{r4, r5, pc}
 8007b1c:	0800c6c9 	.word	0x0800c6c9

08007b20 <_ZdlPv>:
 8007b20:	f000 b82a 	b.w	8007b78 <free>

08007b24 <_Znwj>:
 8007b24:	2801      	cmp	r0, #1
 8007b26:	bf38      	it	cc
 8007b28:	2001      	movcc	r0, #1
 8007b2a:	b510      	push	{r4, lr}
 8007b2c:	4604      	mov	r4, r0
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f000 f81a 	bl	8007b68 <malloc>
 8007b34:	b100      	cbz	r0, 8007b38 <_Znwj+0x14>
 8007b36:	bd10      	pop	{r4, pc}
 8007b38:	f000 f806 	bl	8007b48 <_ZSt15get_new_handlerv>
 8007b3c:	b908      	cbnz	r0, 8007b42 <_Znwj+0x1e>
 8007b3e:	f000 f80b 	bl	8007b58 <abort>
 8007b42:	4780      	blx	r0
 8007b44:	e7f3      	b.n	8007b2e <_Znwj+0xa>
	...

08007b48 <_ZSt15get_new_handlerv>:
 8007b48:	4b02      	ldr	r3, [pc, #8]	; (8007b54 <_ZSt15get_new_handlerv+0xc>)
 8007b4a:	6818      	ldr	r0, [r3, #0]
 8007b4c:	f3bf 8f5b 	dmb	ish
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	20002b64 	.word	0x20002b64

08007b58 <abort>:
 8007b58:	b508      	push	{r3, lr}
 8007b5a:	2006      	movs	r0, #6
 8007b5c:	f001 ff52 	bl	8009a04 <raise>
 8007b60:	2001      	movs	r0, #1
 8007b62:	f7fb ff79 	bl	8003a58 <_exit>
	...

08007b68 <malloc>:
 8007b68:	4b02      	ldr	r3, [pc, #8]	; (8007b74 <malloc+0xc>)
 8007b6a:	4601      	mov	r1, r0
 8007b6c:	6818      	ldr	r0, [r3, #0]
 8007b6e:	f000 b82b 	b.w	8007bc8 <_malloc_r>
 8007b72:	bf00      	nop
 8007b74:	200001ec 	.word	0x200001ec

08007b78 <free>:
 8007b78:	4b02      	ldr	r3, [pc, #8]	; (8007b84 <free+0xc>)
 8007b7a:	4601      	mov	r1, r0
 8007b7c:	6818      	ldr	r0, [r3, #0]
 8007b7e:	f002 be7d 	b.w	800a87c <_free_r>
 8007b82:	bf00      	nop
 8007b84:	200001ec 	.word	0x200001ec

08007b88 <sbrk_aligned>:
 8007b88:	b570      	push	{r4, r5, r6, lr}
 8007b8a:	4e0e      	ldr	r6, [pc, #56]	; (8007bc4 <sbrk_aligned+0x3c>)
 8007b8c:	460c      	mov	r4, r1
 8007b8e:	6831      	ldr	r1, [r6, #0]
 8007b90:	4605      	mov	r5, r0
 8007b92:	b911      	cbnz	r1, 8007b9a <sbrk_aligned+0x12>
 8007b94:	f001 ff8a 	bl	8009aac <_sbrk_r>
 8007b98:	6030      	str	r0, [r6, #0]
 8007b9a:	4621      	mov	r1, r4
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	f001 ff85 	bl	8009aac <_sbrk_r>
 8007ba2:	1c43      	adds	r3, r0, #1
 8007ba4:	d00a      	beq.n	8007bbc <sbrk_aligned+0x34>
 8007ba6:	1cc4      	adds	r4, r0, #3
 8007ba8:	f024 0403 	bic.w	r4, r4, #3
 8007bac:	42a0      	cmp	r0, r4
 8007bae:	d007      	beq.n	8007bc0 <sbrk_aligned+0x38>
 8007bb0:	1a21      	subs	r1, r4, r0
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	f001 ff7a 	bl	8009aac <_sbrk_r>
 8007bb8:	3001      	adds	r0, #1
 8007bba:	d101      	bne.n	8007bc0 <sbrk_aligned+0x38>
 8007bbc:	f04f 34ff 	mov.w	r4, #4294967295
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	bd70      	pop	{r4, r5, r6, pc}
 8007bc4:	20002b6c 	.word	0x20002b6c

08007bc8 <_malloc_r>:
 8007bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bcc:	1ccd      	adds	r5, r1, #3
 8007bce:	f025 0503 	bic.w	r5, r5, #3
 8007bd2:	3508      	adds	r5, #8
 8007bd4:	2d0c      	cmp	r5, #12
 8007bd6:	bf38      	it	cc
 8007bd8:	250c      	movcc	r5, #12
 8007bda:	2d00      	cmp	r5, #0
 8007bdc:	4607      	mov	r7, r0
 8007bde:	db01      	blt.n	8007be4 <_malloc_r+0x1c>
 8007be0:	42a9      	cmp	r1, r5
 8007be2:	d905      	bls.n	8007bf0 <_malloc_r+0x28>
 8007be4:	230c      	movs	r3, #12
 8007be6:	603b      	str	r3, [r7, #0]
 8007be8:	2600      	movs	r6, #0
 8007bea:	4630      	mov	r0, r6
 8007bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bf0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007cc4 <_malloc_r+0xfc>
 8007bf4:	f000 f868 	bl	8007cc8 <__malloc_lock>
 8007bf8:	f8d8 3000 	ldr.w	r3, [r8]
 8007bfc:	461c      	mov	r4, r3
 8007bfe:	bb5c      	cbnz	r4, 8007c58 <_malloc_r+0x90>
 8007c00:	4629      	mov	r1, r5
 8007c02:	4638      	mov	r0, r7
 8007c04:	f7ff ffc0 	bl	8007b88 <sbrk_aligned>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	4604      	mov	r4, r0
 8007c0c:	d155      	bne.n	8007cba <_malloc_r+0xf2>
 8007c0e:	f8d8 4000 	ldr.w	r4, [r8]
 8007c12:	4626      	mov	r6, r4
 8007c14:	2e00      	cmp	r6, #0
 8007c16:	d145      	bne.n	8007ca4 <_malloc_r+0xdc>
 8007c18:	2c00      	cmp	r4, #0
 8007c1a:	d048      	beq.n	8007cae <_malloc_r+0xe6>
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	4631      	mov	r1, r6
 8007c20:	4638      	mov	r0, r7
 8007c22:	eb04 0903 	add.w	r9, r4, r3
 8007c26:	f001 ff41 	bl	8009aac <_sbrk_r>
 8007c2a:	4581      	cmp	r9, r0
 8007c2c:	d13f      	bne.n	8007cae <_malloc_r+0xe6>
 8007c2e:	6821      	ldr	r1, [r4, #0]
 8007c30:	1a6d      	subs	r5, r5, r1
 8007c32:	4629      	mov	r1, r5
 8007c34:	4638      	mov	r0, r7
 8007c36:	f7ff ffa7 	bl	8007b88 <sbrk_aligned>
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	d037      	beq.n	8007cae <_malloc_r+0xe6>
 8007c3e:	6823      	ldr	r3, [r4, #0]
 8007c40:	442b      	add	r3, r5
 8007c42:	6023      	str	r3, [r4, #0]
 8007c44:	f8d8 3000 	ldr.w	r3, [r8]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d038      	beq.n	8007cbe <_malloc_r+0xf6>
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	42a2      	cmp	r2, r4
 8007c50:	d12b      	bne.n	8007caa <_malloc_r+0xe2>
 8007c52:	2200      	movs	r2, #0
 8007c54:	605a      	str	r2, [r3, #4]
 8007c56:	e00f      	b.n	8007c78 <_malloc_r+0xb0>
 8007c58:	6822      	ldr	r2, [r4, #0]
 8007c5a:	1b52      	subs	r2, r2, r5
 8007c5c:	d41f      	bmi.n	8007c9e <_malloc_r+0xd6>
 8007c5e:	2a0b      	cmp	r2, #11
 8007c60:	d917      	bls.n	8007c92 <_malloc_r+0xca>
 8007c62:	1961      	adds	r1, r4, r5
 8007c64:	42a3      	cmp	r3, r4
 8007c66:	6025      	str	r5, [r4, #0]
 8007c68:	bf18      	it	ne
 8007c6a:	6059      	strne	r1, [r3, #4]
 8007c6c:	6863      	ldr	r3, [r4, #4]
 8007c6e:	bf08      	it	eq
 8007c70:	f8c8 1000 	streq.w	r1, [r8]
 8007c74:	5162      	str	r2, [r4, r5]
 8007c76:	604b      	str	r3, [r1, #4]
 8007c78:	4638      	mov	r0, r7
 8007c7a:	f104 060b 	add.w	r6, r4, #11
 8007c7e:	f000 f829 	bl	8007cd4 <__malloc_unlock>
 8007c82:	f026 0607 	bic.w	r6, r6, #7
 8007c86:	1d23      	adds	r3, r4, #4
 8007c88:	1af2      	subs	r2, r6, r3
 8007c8a:	d0ae      	beq.n	8007bea <_malloc_r+0x22>
 8007c8c:	1b9b      	subs	r3, r3, r6
 8007c8e:	50a3      	str	r3, [r4, r2]
 8007c90:	e7ab      	b.n	8007bea <_malloc_r+0x22>
 8007c92:	42a3      	cmp	r3, r4
 8007c94:	6862      	ldr	r2, [r4, #4]
 8007c96:	d1dd      	bne.n	8007c54 <_malloc_r+0x8c>
 8007c98:	f8c8 2000 	str.w	r2, [r8]
 8007c9c:	e7ec      	b.n	8007c78 <_malloc_r+0xb0>
 8007c9e:	4623      	mov	r3, r4
 8007ca0:	6864      	ldr	r4, [r4, #4]
 8007ca2:	e7ac      	b.n	8007bfe <_malloc_r+0x36>
 8007ca4:	4634      	mov	r4, r6
 8007ca6:	6876      	ldr	r6, [r6, #4]
 8007ca8:	e7b4      	b.n	8007c14 <_malloc_r+0x4c>
 8007caa:	4613      	mov	r3, r2
 8007cac:	e7cc      	b.n	8007c48 <_malloc_r+0x80>
 8007cae:	230c      	movs	r3, #12
 8007cb0:	603b      	str	r3, [r7, #0]
 8007cb2:	4638      	mov	r0, r7
 8007cb4:	f000 f80e 	bl	8007cd4 <__malloc_unlock>
 8007cb8:	e797      	b.n	8007bea <_malloc_r+0x22>
 8007cba:	6025      	str	r5, [r4, #0]
 8007cbc:	e7dc      	b.n	8007c78 <_malloc_r+0xb0>
 8007cbe:	605b      	str	r3, [r3, #4]
 8007cc0:	deff      	udf	#255	; 0xff
 8007cc2:	bf00      	nop
 8007cc4:	20002b68 	.word	0x20002b68

08007cc8 <__malloc_lock>:
 8007cc8:	4801      	ldr	r0, [pc, #4]	; (8007cd0 <__malloc_lock+0x8>)
 8007cca:	f001 bf3c 	b.w	8009b46 <__retarget_lock_acquire_recursive>
 8007cce:	bf00      	nop
 8007cd0:	20002cb0 	.word	0x20002cb0

08007cd4 <__malloc_unlock>:
 8007cd4:	4801      	ldr	r0, [pc, #4]	; (8007cdc <__malloc_unlock+0x8>)
 8007cd6:	f001 bf37 	b.w	8009b48 <__retarget_lock_release_recursive>
 8007cda:	bf00      	nop
 8007cdc:	20002cb0 	.word	0x20002cb0

08007ce0 <sulp>:
 8007ce0:	b570      	push	{r4, r5, r6, lr}
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	460d      	mov	r5, r1
 8007ce6:	ec45 4b10 	vmov	d0, r4, r5
 8007cea:	4616      	mov	r6, r2
 8007cec:	f003 fce8 	bl	800b6c0 <__ulp>
 8007cf0:	ec51 0b10 	vmov	r0, r1, d0
 8007cf4:	b17e      	cbz	r6, 8007d16 <sulp+0x36>
 8007cf6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007cfa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	dd09      	ble.n	8007d16 <sulp+0x36>
 8007d02:	051b      	lsls	r3, r3, #20
 8007d04:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007d08:	2400      	movs	r4, #0
 8007d0a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007d0e:	4622      	mov	r2, r4
 8007d10:	462b      	mov	r3, r5
 8007d12:	f7f8 fc91 	bl	8000638 <__aeabi_dmul>
 8007d16:	bd70      	pop	{r4, r5, r6, pc}

08007d18 <_strtod_l>:
 8007d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1c:	ed2d 8b02 	vpush	{d8}
 8007d20:	b09b      	sub	sp, #108	; 0x6c
 8007d22:	4604      	mov	r4, r0
 8007d24:	9213      	str	r2, [sp, #76]	; 0x4c
 8007d26:	2200      	movs	r2, #0
 8007d28:	9216      	str	r2, [sp, #88]	; 0x58
 8007d2a:	460d      	mov	r5, r1
 8007d2c:	f04f 0800 	mov.w	r8, #0
 8007d30:	f04f 0900 	mov.w	r9, #0
 8007d34:	460a      	mov	r2, r1
 8007d36:	9215      	str	r2, [sp, #84]	; 0x54
 8007d38:	7811      	ldrb	r1, [r2, #0]
 8007d3a:	292b      	cmp	r1, #43	; 0x2b
 8007d3c:	d04c      	beq.n	8007dd8 <_strtod_l+0xc0>
 8007d3e:	d83a      	bhi.n	8007db6 <_strtod_l+0x9e>
 8007d40:	290d      	cmp	r1, #13
 8007d42:	d834      	bhi.n	8007dae <_strtod_l+0x96>
 8007d44:	2908      	cmp	r1, #8
 8007d46:	d834      	bhi.n	8007db2 <_strtod_l+0x9a>
 8007d48:	2900      	cmp	r1, #0
 8007d4a:	d03d      	beq.n	8007dc8 <_strtod_l+0xb0>
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	920a      	str	r2, [sp, #40]	; 0x28
 8007d50:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007d52:	7832      	ldrb	r2, [r6, #0]
 8007d54:	2a30      	cmp	r2, #48	; 0x30
 8007d56:	f040 80b4 	bne.w	8007ec2 <_strtod_l+0x1aa>
 8007d5a:	7872      	ldrb	r2, [r6, #1]
 8007d5c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007d60:	2a58      	cmp	r2, #88	; 0x58
 8007d62:	d170      	bne.n	8007e46 <_strtod_l+0x12e>
 8007d64:	9302      	str	r3, [sp, #8]
 8007d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d68:	9301      	str	r3, [sp, #4]
 8007d6a:	ab16      	add	r3, sp, #88	; 0x58
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	4a8e      	ldr	r2, [pc, #568]	; (8007fa8 <_strtod_l+0x290>)
 8007d70:	ab17      	add	r3, sp, #92	; 0x5c
 8007d72:	a915      	add	r1, sp, #84	; 0x54
 8007d74:	4620      	mov	r0, r4
 8007d76:	f002 fe35 	bl	800a9e4 <__gethex>
 8007d7a:	f010 070f 	ands.w	r7, r0, #15
 8007d7e:	4605      	mov	r5, r0
 8007d80:	d005      	beq.n	8007d8e <_strtod_l+0x76>
 8007d82:	2f06      	cmp	r7, #6
 8007d84:	d12a      	bne.n	8007ddc <_strtod_l+0xc4>
 8007d86:	3601      	adds	r6, #1
 8007d88:	2300      	movs	r3, #0
 8007d8a:	9615      	str	r6, [sp, #84]	; 0x54
 8007d8c:	930a      	str	r3, [sp, #40]	; 0x28
 8007d8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f040 857f 	bne.w	8008894 <_strtod_l+0xb7c>
 8007d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d98:	b1db      	cbz	r3, 8007dd2 <_strtod_l+0xba>
 8007d9a:	4642      	mov	r2, r8
 8007d9c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007da0:	ec43 2b10 	vmov	d0, r2, r3
 8007da4:	b01b      	add	sp, #108	; 0x6c
 8007da6:	ecbd 8b02 	vpop	{d8}
 8007daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dae:	2920      	cmp	r1, #32
 8007db0:	d1cc      	bne.n	8007d4c <_strtod_l+0x34>
 8007db2:	3201      	adds	r2, #1
 8007db4:	e7bf      	b.n	8007d36 <_strtod_l+0x1e>
 8007db6:	292d      	cmp	r1, #45	; 0x2d
 8007db8:	d1c8      	bne.n	8007d4c <_strtod_l+0x34>
 8007dba:	2101      	movs	r1, #1
 8007dbc:	910a      	str	r1, [sp, #40]	; 0x28
 8007dbe:	1c51      	adds	r1, r2, #1
 8007dc0:	9115      	str	r1, [sp, #84]	; 0x54
 8007dc2:	7852      	ldrb	r2, [r2, #1]
 8007dc4:	2a00      	cmp	r2, #0
 8007dc6:	d1c3      	bne.n	8007d50 <_strtod_l+0x38>
 8007dc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007dca:	9515      	str	r5, [sp, #84]	; 0x54
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f040 855f 	bne.w	8008890 <_strtod_l+0xb78>
 8007dd2:	4642      	mov	r2, r8
 8007dd4:	464b      	mov	r3, r9
 8007dd6:	e7e3      	b.n	8007da0 <_strtod_l+0x88>
 8007dd8:	2100      	movs	r1, #0
 8007dda:	e7ef      	b.n	8007dbc <_strtod_l+0xa4>
 8007ddc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007dde:	b13a      	cbz	r2, 8007df0 <_strtod_l+0xd8>
 8007de0:	2135      	movs	r1, #53	; 0x35
 8007de2:	a818      	add	r0, sp, #96	; 0x60
 8007de4:	f003 fd69 	bl	800b8ba <__copybits>
 8007de8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007dea:	4620      	mov	r0, r4
 8007dec:	f003 f93c 	bl	800b068 <_Bfree>
 8007df0:	3f01      	subs	r7, #1
 8007df2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007df4:	2f04      	cmp	r7, #4
 8007df6:	d806      	bhi.n	8007e06 <_strtod_l+0xee>
 8007df8:	e8df f007 	tbb	[pc, r7]
 8007dfc:	201d0314 	.word	0x201d0314
 8007e00:	14          	.byte	0x14
 8007e01:	00          	.byte	0x00
 8007e02:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007e06:	05e9      	lsls	r1, r5, #23
 8007e08:	bf48      	it	mi
 8007e0a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007e0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e12:	0d1b      	lsrs	r3, r3, #20
 8007e14:	051b      	lsls	r3, r3, #20
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1b9      	bne.n	8007d8e <_strtod_l+0x76>
 8007e1a:	f001 fe69 	bl	8009af0 <__errno>
 8007e1e:	2322      	movs	r3, #34	; 0x22
 8007e20:	6003      	str	r3, [r0, #0]
 8007e22:	e7b4      	b.n	8007d8e <_strtod_l+0x76>
 8007e24:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007e28:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007e2c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007e30:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007e34:	e7e7      	b.n	8007e06 <_strtod_l+0xee>
 8007e36:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007fb0 <_strtod_l+0x298>
 8007e3a:	e7e4      	b.n	8007e06 <_strtod_l+0xee>
 8007e3c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007e40:	f04f 38ff 	mov.w	r8, #4294967295
 8007e44:	e7df      	b.n	8007e06 <_strtod_l+0xee>
 8007e46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e48:	1c5a      	adds	r2, r3, #1
 8007e4a:	9215      	str	r2, [sp, #84]	; 0x54
 8007e4c:	785b      	ldrb	r3, [r3, #1]
 8007e4e:	2b30      	cmp	r3, #48	; 0x30
 8007e50:	d0f9      	beq.n	8007e46 <_strtod_l+0x12e>
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d09b      	beq.n	8007d8e <_strtod_l+0x76>
 8007e56:	2301      	movs	r3, #1
 8007e58:	f04f 0a00 	mov.w	sl, #0
 8007e5c:	9304      	str	r3, [sp, #16]
 8007e5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e60:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e62:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007e66:	46d3      	mov	fp, sl
 8007e68:	220a      	movs	r2, #10
 8007e6a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007e6c:	7806      	ldrb	r6, [r0, #0]
 8007e6e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007e72:	b2d9      	uxtb	r1, r3
 8007e74:	2909      	cmp	r1, #9
 8007e76:	d926      	bls.n	8007ec6 <_strtod_l+0x1ae>
 8007e78:	494c      	ldr	r1, [pc, #304]	; (8007fac <_strtod_l+0x294>)
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f001 fd87 	bl	800998e <strncmp>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	d030      	beq.n	8007ee6 <_strtod_l+0x1ce>
 8007e84:	2000      	movs	r0, #0
 8007e86:	4632      	mov	r2, r6
 8007e88:	9005      	str	r0, [sp, #20]
 8007e8a:	465e      	mov	r6, fp
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2a65      	cmp	r2, #101	; 0x65
 8007e90:	d001      	beq.n	8007e96 <_strtod_l+0x17e>
 8007e92:	2a45      	cmp	r2, #69	; 0x45
 8007e94:	d113      	bne.n	8007ebe <_strtod_l+0x1a6>
 8007e96:	b91e      	cbnz	r6, 8007ea0 <_strtod_l+0x188>
 8007e98:	9a04      	ldr	r2, [sp, #16]
 8007e9a:	4302      	orrs	r2, r0
 8007e9c:	d094      	beq.n	8007dc8 <_strtod_l+0xb0>
 8007e9e:	2600      	movs	r6, #0
 8007ea0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007ea2:	1c6a      	adds	r2, r5, #1
 8007ea4:	9215      	str	r2, [sp, #84]	; 0x54
 8007ea6:	786a      	ldrb	r2, [r5, #1]
 8007ea8:	2a2b      	cmp	r2, #43	; 0x2b
 8007eaa:	d074      	beq.n	8007f96 <_strtod_l+0x27e>
 8007eac:	2a2d      	cmp	r2, #45	; 0x2d
 8007eae:	d078      	beq.n	8007fa2 <_strtod_l+0x28a>
 8007eb0:	f04f 0c00 	mov.w	ip, #0
 8007eb4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007eb8:	2909      	cmp	r1, #9
 8007eba:	d97f      	bls.n	8007fbc <_strtod_l+0x2a4>
 8007ebc:	9515      	str	r5, [sp, #84]	; 0x54
 8007ebe:	2700      	movs	r7, #0
 8007ec0:	e09e      	b.n	8008000 <_strtod_l+0x2e8>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	e7c8      	b.n	8007e58 <_strtod_l+0x140>
 8007ec6:	f1bb 0f08 	cmp.w	fp, #8
 8007eca:	bfd8      	it	le
 8007ecc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007ece:	f100 0001 	add.w	r0, r0, #1
 8007ed2:	bfda      	itte	le
 8007ed4:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ed8:	9309      	strle	r3, [sp, #36]	; 0x24
 8007eda:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007ede:	f10b 0b01 	add.w	fp, fp, #1
 8007ee2:	9015      	str	r0, [sp, #84]	; 0x54
 8007ee4:	e7c1      	b.n	8007e6a <_strtod_l+0x152>
 8007ee6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ee8:	1c5a      	adds	r2, r3, #1
 8007eea:	9215      	str	r2, [sp, #84]	; 0x54
 8007eec:	785a      	ldrb	r2, [r3, #1]
 8007eee:	f1bb 0f00 	cmp.w	fp, #0
 8007ef2:	d037      	beq.n	8007f64 <_strtod_l+0x24c>
 8007ef4:	9005      	str	r0, [sp, #20]
 8007ef6:	465e      	mov	r6, fp
 8007ef8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007efc:	2b09      	cmp	r3, #9
 8007efe:	d912      	bls.n	8007f26 <_strtod_l+0x20e>
 8007f00:	2301      	movs	r3, #1
 8007f02:	e7c4      	b.n	8007e8e <_strtod_l+0x176>
 8007f04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	9215      	str	r2, [sp, #84]	; 0x54
 8007f0a:	785a      	ldrb	r2, [r3, #1]
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	2a30      	cmp	r2, #48	; 0x30
 8007f10:	d0f8      	beq.n	8007f04 <_strtod_l+0x1ec>
 8007f12:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007f16:	2b08      	cmp	r3, #8
 8007f18:	f200 84c1 	bhi.w	800889e <_strtod_l+0xb86>
 8007f1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f1e:	9005      	str	r0, [sp, #20]
 8007f20:	2000      	movs	r0, #0
 8007f22:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f24:	4606      	mov	r6, r0
 8007f26:	3a30      	subs	r2, #48	; 0x30
 8007f28:	f100 0301 	add.w	r3, r0, #1
 8007f2c:	d014      	beq.n	8007f58 <_strtod_l+0x240>
 8007f2e:	9905      	ldr	r1, [sp, #20]
 8007f30:	4419      	add	r1, r3
 8007f32:	9105      	str	r1, [sp, #20]
 8007f34:	4633      	mov	r3, r6
 8007f36:	eb00 0c06 	add.w	ip, r0, r6
 8007f3a:	210a      	movs	r1, #10
 8007f3c:	4563      	cmp	r3, ip
 8007f3e:	d113      	bne.n	8007f68 <_strtod_l+0x250>
 8007f40:	1833      	adds	r3, r6, r0
 8007f42:	2b08      	cmp	r3, #8
 8007f44:	f106 0601 	add.w	r6, r6, #1
 8007f48:	4406      	add	r6, r0
 8007f4a:	dc1a      	bgt.n	8007f82 <_strtod_l+0x26a>
 8007f4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f4e:	230a      	movs	r3, #10
 8007f50:	fb03 2301 	mla	r3, r3, r1, r2
 8007f54:	9309      	str	r3, [sp, #36]	; 0x24
 8007f56:	2300      	movs	r3, #0
 8007f58:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007f5a:	1c51      	adds	r1, r2, #1
 8007f5c:	9115      	str	r1, [sp, #84]	; 0x54
 8007f5e:	7852      	ldrb	r2, [r2, #1]
 8007f60:	4618      	mov	r0, r3
 8007f62:	e7c9      	b.n	8007ef8 <_strtod_l+0x1e0>
 8007f64:	4658      	mov	r0, fp
 8007f66:	e7d2      	b.n	8007f0e <_strtod_l+0x1f6>
 8007f68:	2b08      	cmp	r3, #8
 8007f6a:	f103 0301 	add.w	r3, r3, #1
 8007f6e:	dc03      	bgt.n	8007f78 <_strtod_l+0x260>
 8007f70:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007f72:	434f      	muls	r7, r1
 8007f74:	9709      	str	r7, [sp, #36]	; 0x24
 8007f76:	e7e1      	b.n	8007f3c <_strtod_l+0x224>
 8007f78:	2b10      	cmp	r3, #16
 8007f7a:	bfd8      	it	le
 8007f7c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007f80:	e7dc      	b.n	8007f3c <_strtod_l+0x224>
 8007f82:	2e10      	cmp	r6, #16
 8007f84:	bfdc      	itt	le
 8007f86:	230a      	movle	r3, #10
 8007f88:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007f8c:	e7e3      	b.n	8007f56 <_strtod_l+0x23e>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	9305      	str	r3, [sp, #20]
 8007f92:	2301      	movs	r3, #1
 8007f94:	e780      	b.n	8007e98 <_strtod_l+0x180>
 8007f96:	f04f 0c00 	mov.w	ip, #0
 8007f9a:	1caa      	adds	r2, r5, #2
 8007f9c:	9215      	str	r2, [sp, #84]	; 0x54
 8007f9e:	78aa      	ldrb	r2, [r5, #2]
 8007fa0:	e788      	b.n	8007eb4 <_strtod_l+0x19c>
 8007fa2:	f04f 0c01 	mov.w	ip, #1
 8007fa6:	e7f8      	b.n	8007f9a <_strtod_l+0x282>
 8007fa8:	0800c6e0 	.word	0x0800c6e0
 8007fac:	0800c6de 	.word	0x0800c6de
 8007fb0:	7ff00000 	.word	0x7ff00000
 8007fb4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007fb6:	1c51      	adds	r1, r2, #1
 8007fb8:	9115      	str	r1, [sp, #84]	; 0x54
 8007fba:	7852      	ldrb	r2, [r2, #1]
 8007fbc:	2a30      	cmp	r2, #48	; 0x30
 8007fbe:	d0f9      	beq.n	8007fb4 <_strtod_l+0x29c>
 8007fc0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007fc4:	2908      	cmp	r1, #8
 8007fc6:	f63f af7a 	bhi.w	8007ebe <_strtod_l+0x1a6>
 8007fca:	3a30      	subs	r2, #48	; 0x30
 8007fcc:	9208      	str	r2, [sp, #32]
 8007fce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007fd0:	920c      	str	r2, [sp, #48]	; 0x30
 8007fd2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007fd4:	1c57      	adds	r7, r2, #1
 8007fd6:	9715      	str	r7, [sp, #84]	; 0x54
 8007fd8:	7852      	ldrb	r2, [r2, #1]
 8007fda:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007fde:	f1be 0f09 	cmp.w	lr, #9
 8007fe2:	d938      	bls.n	8008056 <_strtod_l+0x33e>
 8007fe4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007fe6:	1a7f      	subs	r7, r7, r1
 8007fe8:	2f08      	cmp	r7, #8
 8007fea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007fee:	dc03      	bgt.n	8007ff8 <_strtod_l+0x2e0>
 8007ff0:	9908      	ldr	r1, [sp, #32]
 8007ff2:	428f      	cmp	r7, r1
 8007ff4:	bfa8      	it	ge
 8007ff6:	460f      	movge	r7, r1
 8007ff8:	f1bc 0f00 	cmp.w	ip, #0
 8007ffc:	d000      	beq.n	8008000 <_strtod_l+0x2e8>
 8007ffe:	427f      	negs	r7, r7
 8008000:	2e00      	cmp	r6, #0
 8008002:	d14f      	bne.n	80080a4 <_strtod_l+0x38c>
 8008004:	9904      	ldr	r1, [sp, #16]
 8008006:	4301      	orrs	r1, r0
 8008008:	f47f aec1 	bne.w	8007d8e <_strtod_l+0x76>
 800800c:	2b00      	cmp	r3, #0
 800800e:	f47f aedb 	bne.w	8007dc8 <_strtod_l+0xb0>
 8008012:	2a69      	cmp	r2, #105	; 0x69
 8008014:	d029      	beq.n	800806a <_strtod_l+0x352>
 8008016:	dc26      	bgt.n	8008066 <_strtod_l+0x34e>
 8008018:	2a49      	cmp	r2, #73	; 0x49
 800801a:	d026      	beq.n	800806a <_strtod_l+0x352>
 800801c:	2a4e      	cmp	r2, #78	; 0x4e
 800801e:	f47f aed3 	bne.w	8007dc8 <_strtod_l+0xb0>
 8008022:	499b      	ldr	r1, [pc, #620]	; (8008290 <_strtod_l+0x578>)
 8008024:	a815      	add	r0, sp, #84	; 0x54
 8008026:	f002 ff1d 	bl	800ae64 <__match>
 800802a:	2800      	cmp	r0, #0
 800802c:	f43f aecc 	beq.w	8007dc8 <_strtod_l+0xb0>
 8008030:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	2b28      	cmp	r3, #40	; 0x28
 8008036:	d12f      	bne.n	8008098 <_strtod_l+0x380>
 8008038:	4996      	ldr	r1, [pc, #600]	; (8008294 <_strtod_l+0x57c>)
 800803a:	aa18      	add	r2, sp, #96	; 0x60
 800803c:	a815      	add	r0, sp, #84	; 0x54
 800803e:	f002 ff25 	bl	800ae8c <__hexnan>
 8008042:	2805      	cmp	r0, #5
 8008044:	d128      	bne.n	8008098 <_strtod_l+0x380>
 8008046:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008048:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800804c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008050:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008054:	e69b      	b.n	8007d8e <_strtod_l+0x76>
 8008056:	9f08      	ldr	r7, [sp, #32]
 8008058:	210a      	movs	r1, #10
 800805a:	fb01 2107 	mla	r1, r1, r7, r2
 800805e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008062:	9208      	str	r2, [sp, #32]
 8008064:	e7b5      	b.n	8007fd2 <_strtod_l+0x2ba>
 8008066:	2a6e      	cmp	r2, #110	; 0x6e
 8008068:	e7d9      	b.n	800801e <_strtod_l+0x306>
 800806a:	498b      	ldr	r1, [pc, #556]	; (8008298 <_strtod_l+0x580>)
 800806c:	a815      	add	r0, sp, #84	; 0x54
 800806e:	f002 fef9 	bl	800ae64 <__match>
 8008072:	2800      	cmp	r0, #0
 8008074:	f43f aea8 	beq.w	8007dc8 <_strtod_l+0xb0>
 8008078:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800807a:	4988      	ldr	r1, [pc, #544]	; (800829c <_strtod_l+0x584>)
 800807c:	3b01      	subs	r3, #1
 800807e:	a815      	add	r0, sp, #84	; 0x54
 8008080:	9315      	str	r3, [sp, #84]	; 0x54
 8008082:	f002 feef 	bl	800ae64 <__match>
 8008086:	b910      	cbnz	r0, 800808e <_strtod_l+0x376>
 8008088:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800808a:	3301      	adds	r3, #1
 800808c:	9315      	str	r3, [sp, #84]	; 0x54
 800808e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80082ac <_strtod_l+0x594>
 8008092:	f04f 0800 	mov.w	r8, #0
 8008096:	e67a      	b.n	8007d8e <_strtod_l+0x76>
 8008098:	4881      	ldr	r0, [pc, #516]	; (80082a0 <_strtod_l+0x588>)
 800809a:	f001 fd65 	bl	8009b68 <nan>
 800809e:	ec59 8b10 	vmov	r8, r9, d0
 80080a2:	e674      	b.n	8007d8e <_strtod_l+0x76>
 80080a4:	9b05      	ldr	r3, [sp, #20]
 80080a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080a8:	1afb      	subs	r3, r7, r3
 80080aa:	f1bb 0f00 	cmp.w	fp, #0
 80080ae:	bf08      	it	eq
 80080b0:	46b3      	moveq	fp, r6
 80080b2:	2e10      	cmp	r6, #16
 80080b4:	9308      	str	r3, [sp, #32]
 80080b6:	4635      	mov	r5, r6
 80080b8:	bfa8      	it	ge
 80080ba:	2510      	movge	r5, #16
 80080bc:	f7f8 fa42 	bl	8000544 <__aeabi_ui2d>
 80080c0:	2e09      	cmp	r6, #9
 80080c2:	4680      	mov	r8, r0
 80080c4:	4689      	mov	r9, r1
 80080c6:	dd13      	ble.n	80080f0 <_strtod_l+0x3d8>
 80080c8:	4b76      	ldr	r3, [pc, #472]	; (80082a4 <_strtod_l+0x58c>)
 80080ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80080ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80080d2:	f7f8 fab1 	bl	8000638 <__aeabi_dmul>
 80080d6:	4680      	mov	r8, r0
 80080d8:	4650      	mov	r0, sl
 80080da:	4689      	mov	r9, r1
 80080dc:	f7f8 fa32 	bl	8000544 <__aeabi_ui2d>
 80080e0:	4602      	mov	r2, r0
 80080e2:	460b      	mov	r3, r1
 80080e4:	4640      	mov	r0, r8
 80080e6:	4649      	mov	r1, r9
 80080e8:	f7f8 f8f0 	bl	80002cc <__adddf3>
 80080ec:	4680      	mov	r8, r0
 80080ee:	4689      	mov	r9, r1
 80080f0:	2e0f      	cmp	r6, #15
 80080f2:	dc38      	bgt.n	8008166 <_strtod_l+0x44e>
 80080f4:	9b08      	ldr	r3, [sp, #32]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f43f ae49 	beq.w	8007d8e <_strtod_l+0x76>
 80080fc:	dd24      	ble.n	8008148 <_strtod_l+0x430>
 80080fe:	2b16      	cmp	r3, #22
 8008100:	dc0b      	bgt.n	800811a <_strtod_l+0x402>
 8008102:	4968      	ldr	r1, [pc, #416]	; (80082a4 <_strtod_l+0x58c>)
 8008104:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800810c:	4642      	mov	r2, r8
 800810e:	464b      	mov	r3, r9
 8008110:	f7f8 fa92 	bl	8000638 <__aeabi_dmul>
 8008114:	4680      	mov	r8, r0
 8008116:	4689      	mov	r9, r1
 8008118:	e639      	b.n	8007d8e <_strtod_l+0x76>
 800811a:	9a08      	ldr	r2, [sp, #32]
 800811c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008120:	4293      	cmp	r3, r2
 8008122:	db20      	blt.n	8008166 <_strtod_l+0x44e>
 8008124:	4c5f      	ldr	r4, [pc, #380]	; (80082a4 <_strtod_l+0x58c>)
 8008126:	f1c6 060f 	rsb	r6, r6, #15
 800812a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800812e:	4642      	mov	r2, r8
 8008130:	464b      	mov	r3, r9
 8008132:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008136:	f7f8 fa7f 	bl	8000638 <__aeabi_dmul>
 800813a:	9b08      	ldr	r3, [sp, #32]
 800813c:	1b9e      	subs	r6, r3, r6
 800813e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008142:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008146:	e7e3      	b.n	8008110 <_strtod_l+0x3f8>
 8008148:	9b08      	ldr	r3, [sp, #32]
 800814a:	3316      	adds	r3, #22
 800814c:	db0b      	blt.n	8008166 <_strtod_l+0x44e>
 800814e:	9b05      	ldr	r3, [sp, #20]
 8008150:	1bdf      	subs	r7, r3, r7
 8008152:	4b54      	ldr	r3, [pc, #336]	; (80082a4 <_strtod_l+0x58c>)
 8008154:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800815c:	4640      	mov	r0, r8
 800815e:	4649      	mov	r1, r9
 8008160:	f7f8 fb94 	bl	800088c <__aeabi_ddiv>
 8008164:	e7d6      	b.n	8008114 <_strtod_l+0x3fc>
 8008166:	9b08      	ldr	r3, [sp, #32]
 8008168:	1b75      	subs	r5, r6, r5
 800816a:	441d      	add	r5, r3
 800816c:	2d00      	cmp	r5, #0
 800816e:	dd70      	ble.n	8008252 <_strtod_l+0x53a>
 8008170:	f015 030f 	ands.w	r3, r5, #15
 8008174:	d00a      	beq.n	800818c <_strtod_l+0x474>
 8008176:	494b      	ldr	r1, [pc, #300]	; (80082a4 <_strtod_l+0x58c>)
 8008178:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800817c:	4642      	mov	r2, r8
 800817e:	464b      	mov	r3, r9
 8008180:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008184:	f7f8 fa58 	bl	8000638 <__aeabi_dmul>
 8008188:	4680      	mov	r8, r0
 800818a:	4689      	mov	r9, r1
 800818c:	f035 050f 	bics.w	r5, r5, #15
 8008190:	d04d      	beq.n	800822e <_strtod_l+0x516>
 8008192:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008196:	dd22      	ble.n	80081de <_strtod_l+0x4c6>
 8008198:	2500      	movs	r5, #0
 800819a:	46ab      	mov	fp, r5
 800819c:	9509      	str	r5, [sp, #36]	; 0x24
 800819e:	9505      	str	r5, [sp, #20]
 80081a0:	2322      	movs	r3, #34	; 0x22
 80081a2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80082ac <_strtod_l+0x594>
 80081a6:	6023      	str	r3, [r4, #0]
 80081a8:	f04f 0800 	mov.w	r8, #0
 80081ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f43f aded 	beq.w	8007d8e <_strtod_l+0x76>
 80081b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80081b6:	4620      	mov	r0, r4
 80081b8:	f002 ff56 	bl	800b068 <_Bfree>
 80081bc:	9905      	ldr	r1, [sp, #20]
 80081be:	4620      	mov	r0, r4
 80081c0:	f002 ff52 	bl	800b068 <_Bfree>
 80081c4:	4659      	mov	r1, fp
 80081c6:	4620      	mov	r0, r4
 80081c8:	f002 ff4e 	bl	800b068 <_Bfree>
 80081cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081ce:	4620      	mov	r0, r4
 80081d0:	f002 ff4a 	bl	800b068 <_Bfree>
 80081d4:	4629      	mov	r1, r5
 80081d6:	4620      	mov	r0, r4
 80081d8:	f002 ff46 	bl	800b068 <_Bfree>
 80081dc:	e5d7      	b.n	8007d8e <_strtod_l+0x76>
 80081de:	4b32      	ldr	r3, [pc, #200]	; (80082a8 <_strtod_l+0x590>)
 80081e0:	9304      	str	r3, [sp, #16]
 80081e2:	2300      	movs	r3, #0
 80081e4:	112d      	asrs	r5, r5, #4
 80081e6:	4640      	mov	r0, r8
 80081e8:	4649      	mov	r1, r9
 80081ea:	469a      	mov	sl, r3
 80081ec:	2d01      	cmp	r5, #1
 80081ee:	dc21      	bgt.n	8008234 <_strtod_l+0x51c>
 80081f0:	b10b      	cbz	r3, 80081f6 <_strtod_l+0x4de>
 80081f2:	4680      	mov	r8, r0
 80081f4:	4689      	mov	r9, r1
 80081f6:	492c      	ldr	r1, [pc, #176]	; (80082a8 <_strtod_l+0x590>)
 80081f8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80081fc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008200:	4642      	mov	r2, r8
 8008202:	464b      	mov	r3, r9
 8008204:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008208:	f7f8 fa16 	bl	8000638 <__aeabi_dmul>
 800820c:	4b27      	ldr	r3, [pc, #156]	; (80082ac <_strtod_l+0x594>)
 800820e:	460a      	mov	r2, r1
 8008210:	400b      	ands	r3, r1
 8008212:	4927      	ldr	r1, [pc, #156]	; (80082b0 <_strtod_l+0x598>)
 8008214:	428b      	cmp	r3, r1
 8008216:	4680      	mov	r8, r0
 8008218:	d8be      	bhi.n	8008198 <_strtod_l+0x480>
 800821a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800821e:	428b      	cmp	r3, r1
 8008220:	bf86      	itte	hi
 8008222:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80082b4 <_strtod_l+0x59c>
 8008226:	f04f 38ff 	movhi.w	r8, #4294967295
 800822a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800822e:	2300      	movs	r3, #0
 8008230:	9304      	str	r3, [sp, #16]
 8008232:	e07b      	b.n	800832c <_strtod_l+0x614>
 8008234:	07ea      	lsls	r2, r5, #31
 8008236:	d505      	bpl.n	8008244 <_strtod_l+0x52c>
 8008238:	9b04      	ldr	r3, [sp, #16]
 800823a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823e:	f7f8 f9fb 	bl	8000638 <__aeabi_dmul>
 8008242:	2301      	movs	r3, #1
 8008244:	9a04      	ldr	r2, [sp, #16]
 8008246:	3208      	adds	r2, #8
 8008248:	f10a 0a01 	add.w	sl, sl, #1
 800824c:	106d      	asrs	r5, r5, #1
 800824e:	9204      	str	r2, [sp, #16]
 8008250:	e7cc      	b.n	80081ec <_strtod_l+0x4d4>
 8008252:	d0ec      	beq.n	800822e <_strtod_l+0x516>
 8008254:	426d      	negs	r5, r5
 8008256:	f015 020f 	ands.w	r2, r5, #15
 800825a:	d00a      	beq.n	8008272 <_strtod_l+0x55a>
 800825c:	4b11      	ldr	r3, [pc, #68]	; (80082a4 <_strtod_l+0x58c>)
 800825e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008262:	4640      	mov	r0, r8
 8008264:	4649      	mov	r1, r9
 8008266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826a:	f7f8 fb0f 	bl	800088c <__aeabi_ddiv>
 800826e:	4680      	mov	r8, r0
 8008270:	4689      	mov	r9, r1
 8008272:	112d      	asrs	r5, r5, #4
 8008274:	d0db      	beq.n	800822e <_strtod_l+0x516>
 8008276:	2d1f      	cmp	r5, #31
 8008278:	dd1e      	ble.n	80082b8 <_strtod_l+0x5a0>
 800827a:	2500      	movs	r5, #0
 800827c:	46ab      	mov	fp, r5
 800827e:	9509      	str	r5, [sp, #36]	; 0x24
 8008280:	9505      	str	r5, [sp, #20]
 8008282:	2322      	movs	r3, #34	; 0x22
 8008284:	f04f 0800 	mov.w	r8, #0
 8008288:	f04f 0900 	mov.w	r9, #0
 800828c:	6023      	str	r3, [r4, #0]
 800828e:	e78d      	b.n	80081ac <_strtod_l+0x494>
 8008290:	0800c83e 	.word	0x0800c83e
 8008294:	0800c6f4 	.word	0x0800c6f4
 8008298:	0800c836 	.word	0x0800c836
 800829c:	0800c870 	.word	0x0800c870
 80082a0:	0800cb00 	.word	0x0800cb00
 80082a4:	0800c9e0 	.word	0x0800c9e0
 80082a8:	0800c9b8 	.word	0x0800c9b8
 80082ac:	7ff00000 	.word	0x7ff00000
 80082b0:	7ca00000 	.word	0x7ca00000
 80082b4:	7fefffff 	.word	0x7fefffff
 80082b8:	f015 0310 	ands.w	r3, r5, #16
 80082bc:	bf18      	it	ne
 80082be:	236a      	movne	r3, #106	; 0x6a
 80082c0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008664 <_strtod_l+0x94c>
 80082c4:	9304      	str	r3, [sp, #16]
 80082c6:	4640      	mov	r0, r8
 80082c8:	4649      	mov	r1, r9
 80082ca:	2300      	movs	r3, #0
 80082cc:	07ea      	lsls	r2, r5, #31
 80082ce:	d504      	bpl.n	80082da <_strtod_l+0x5c2>
 80082d0:	e9da 2300 	ldrd	r2, r3, [sl]
 80082d4:	f7f8 f9b0 	bl	8000638 <__aeabi_dmul>
 80082d8:	2301      	movs	r3, #1
 80082da:	106d      	asrs	r5, r5, #1
 80082dc:	f10a 0a08 	add.w	sl, sl, #8
 80082e0:	d1f4      	bne.n	80082cc <_strtod_l+0x5b4>
 80082e2:	b10b      	cbz	r3, 80082e8 <_strtod_l+0x5d0>
 80082e4:	4680      	mov	r8, r0
 80082e6:	4689      	mov	r9, r1
 80082e8:	9b04      	ldr	r3, [sp, #16]
 80082ea:	b1bb      	cbz	r3, 800831c <_strtod_l+0x604>
 80082ec:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80082f0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	4649      	mov	r1, r9
 80082f8:	dd10      	ble.n	800831c <_strtod_l+0x604>
 80082fa:	2b1f      	cmp	r3, #31
 80082fc:	f340 811e 	ble.w	800853c <_strtod_l+0x824>
 8008300:	2b34      	cmp	r3, #52	; 0x34
 8008302:	bfde      	ittt	le
 8008304:	f04f 33ff 	movle.w	r3, #4294967295
 8008308:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800830c:	4093      	lslle	r3, r2
 800830e:	f04f 0800 	mov.w	r8, #0
 8008312:	bfcc      	ite	gt
 8008314:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008318:	ea03 0901 	andle.w	r9, r3, r1
 800831c:	2200      	movs	r2, #0
 800831e:	2300      	movs	r3, #0
 8008320:	4640      	mov	r0, r8
 8008322:	4649      	mov	r1, r9
 8008324:	f7f8 fbf0 	bl	8000b08 <__aeabi_dcmpeq>
 8008328:	2800      	cmp	r0, #0
 800832a:	d1a6      	bne.n	800827a <_strtod_l+0x562>
 800832c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008332:	4633      	mov	r3, r6
 8008334:	465a      	mov	r2, fp
 8008336:	4620      	mov	r0, r4
 8008338:	f002 fefe 	bl	800b138 <__s2b>
 800833c:	9009      	str	r0, [sp, #36]	; 0x24
 800833e:	2800      	cmp	r0, #0
 8008340:	f43f af2a 	beq.w	8008198 <_strtod_l+0x480>
 8008344:	9a08      	ldr	r2, [sp, #32]
 8008346:	9b05      	ldr	r3, [sp, #20]
 8008348:	2a00      	cmp	r2, #0
 800834a:	eba3 0307 	sub.w	r3, r3, r7
 800834e:	bfa8      	it	ge
 8008350:	2300      	movge	r3, #0
 8008352:	930c      	str	r3, [sp, #48]	; 0x30
 8008354:	2500      	movs	r5, #0
 8008356:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800835a:	9312      	str	r3, [sp, #72]	; 0x48
 800835c:	46ab      	mov	fp, r5
 800835e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008360:	4620      	mov	r0, r4
 8008362:	6859      	ldr	r1, [r3, #4]
 8008364:	f002 fe40 	bl	800afe8 <_Balloc>
 8008368:	9005      	str	r0, [sp, #20]
 800836a:	2800      	cmp	r0, #0
 800836c:	f43f af18 	beq.w	80081a0 <_strtod_l+0x488>
 8008370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008372:	691a      	ldr	r2, [r3, #16]
 8008374:	3202      	adds	r2, #2
 8008376:	f103 010c 	add.w	r1, r3, #12
 800837a:	0092      	lsls	r2, r2, #2
 800837c:	300c      	adds	r0, #12
 800837e:	f001 fbe4 	bl	8009b4a <memcpy>
 8008382:	ec49 8b10 	vmov	d0, r8, r9
 8008386:	aa18      	add	r2, sp, #96	; 0x60
 8008388:	a917      	add	r1, sp, #92	; 0x5c
 800838a:	4620      	mov	r0, r4
 800838c:	f003 fa08 	bl	800b7a0 <__d2b>
 8008390:	ec49 8b18 	vmov	d8, r8, r9
 8008394:	9016      	str	r0, [sp, #88]	; 0x58
 8008396:	2800      	cmp	r0, #0
 8008398:	f43f af02 	beq.w	80081a0 <_strtod_l+0x488>
 800839c:	2101      	movs	r1, #1
 800839e:	4620      	mov	r0, r4
 80083a0:	f002 ff62 	bl	800b268 <__i2b>
 80083a4:	4683      	mov	fp, r0
 80083a6:	2800      	cmp	r0, #0
 80083a8:	f43f aefa 	beq.w	80081a0 <_strtod_l+0x488>
 80083ac:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80083ae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80083b0:	2e00      	cmp	r6, #0
 80083b2:	bfab      	itete	ge
 80083b4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80083b6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80083b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80083ba:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80083be:	bfac      	ite	ge
 80083c0:	eb06 0a03 	addge.w	sl, r6, r3
 80083c4:	1b9f      	sublt	r7, r3, r6
 80083c6:	9b04      	ldr	r3, [sp, #16]
 80083c8:	1af6      	subs	r6, r6, r3
 80083ca:	4416      	add	r6, r2
 80083cc:	4ba0      	ldr	r3, [pc, #640]	; (8008650 <_strtod_l+0x938>)
 80083ce:	3e01      	subs	r6, #1
 80083d0:	429e      	cmp	r6, r3
 80083d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80083d6:	f280 80c4 	bge.w	8008562 <_strtod_l+0x84a>
 80083da:	1b9b      	subs	r3, r3, r6
 80083dc:	2b1f      	cmp	r3, #31
 80083de:	eba2 0203 	sub.w	r2, r2, r3
 80083e2:	f04f 0101 	mov.w	r1, #1
 80083e6:	f300 80b0 	bgt.w	800854a <_strtod_l+0x832>
 80083ea:	fa01 f303 	lsl.w	r3, r1, r3
 80083ee:	930e      	str	r3, [sp, #56]	; 0x38
 80083f0:	2300      	movs	r3, #0
 80083f2:	930d      	str	r3, [sp, #52]	; 0x34
 80083f4:	eb0a 0602 	add.w	r6, sl, r2
 80083f8:	9b04      	ldr	r3, [sp, #16]
 80083fa:	45b2      	cmp	sl, r6
 80083fc:	4417      	add	r7, r2
 80083fe:	441f      	add	r7, r3
 8008400:	4653      	mov	r3, sl
 8008402:	bfa8      	it	ge
 8008404:	4633      	movge	r3, r6
 8008406:	42bb      	cmp	r3, r7
 8008408:	bfa8      	it	ge
 800840a:	463b      	movge	r3, r7
 800840c:	2b00      	cmp	r3, #0
 800840e:	bfc2      	ittt	gt
 8008410:	1af6      	subgt	r6, r6, r3
 8008412:	1aff      	subgt	r7, r7, r3
 8008414:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800841a:	2b00      	cmp	r3, #0
 800841c:	dd17      	ble.n	800844e <_strtod_l+0x736>
 800841e:	4659      	mov	r1, fp
 8008420:	461a      	mov	r2, r3
 8008422:	4620      	mov	r0, r4
 8008424:	f002 ffe0 	bl	800b3e8 <__pow5mult>
 8008428:	4683      	mov	fp, r0
 800842a:	2800      	cmp	r0, #0
 800842c:	f43f aeb8 	beq.w	80081a0 <_strtod_l+0x488>
 8008430:	4601      	mov	r1, r0
 8008432:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008434:	4620      	mov	r0, r4
 8008436:	f002 ff2d 	bl	800b294 <__multiply>
 800843a:	900b      	str	r0, [sp, #44]	; 0x2c
 800843c:	2800      	cmp	r0, #0
 800843e:	f43f aeaf 	beq.w	80081a0 <_strtod_l+0x488>
 8008442:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008444:	4620      	mov	r0, r4
 8008446:	f002 fe0f 	bl	800b068 <_Bfree>
 800844a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800844c:	9316      	str	r3, [sp, #88]	; 0x58
 800844e:	2e00      	cmp	r6, #0
 8008450:	f300 808c 	bgt.w	800856c <_strtod_l+0x854>
 8008454:	9b08      	ldr	r3, [sp, #32]
 8008456:	2b00      	cmp	r3, #0
 8008458:	dd08      	ble.n	800846c <_strtod_l+0x754>
 800845a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800845c:	9905      	ldr	r1, [sp, #20]
 800845e:	4620      	mov	r0, r4
 8008460:	f002 ffc2 	bl	800b3e8 <__pow5mult>
 8008464:	9005      	str	r0, [sp, #20]
 8008466:	2800      	cmp	r0, #0
 8008468:	f43f ae9a 	beq.w	80081a0 <_strtod_l+0x488>
 800846c:	2f00      	cmp	r7, #0
 800846e:	dd08      	ble.n	8008482 <_strtod_l+0x76a>
 8008470:	9905      	ldr	r1, [sp, #20]
 8008472:	463a      	mov	r2, r7
 8008474:	4620      	mov	r0, r4
 8008476:	f003 f811 	bl	800b49c <__lshift>
 800847a:	9005      	str	r0, [sp, #20]
 800847c:	2800      	cmp	r0, #0
 800847e:	f43f ae8f 	beq.w	80081a0 <_strtod_l+0x488>
 8008482:	f1ba 0f00 	cmp.w	sl, #0
 8008486:	dd08      	ble.n	800849a <_strtod_l+0x782>
 8008488:	4659      	mov	r1, fp
 800848a:	4652      	mov	r2, sl
 800848c:	4620      	mov	r0, r4
 800848e:	f003 f805 	bl	800b49c <__lshift>
 8008492:	4683      	mov	fp, r0
 8008494:	2800      	cmp	r0, #0
 8008496:	f43f ae83 	beq.w	80081a0 <_strtod_l+0x488>
 800849a:	9a05      	ldr	r2, [sp, #20]
 800849c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800849e:	4620      	mov	r0, r4
 80084a0:	f003 f884 	bl	800b5ac <__mdiff>
 80084a4:	4605      	mov	r5, r0
 80084a6:	2800      	cmp	r0, #0
 80084a8:	f43f ae7a 	beq.w	80081a0 <_strtod_l+0x488>
 80084ac:	68c3      	ldr	r3, [r0, #12]
 80084ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80084b0:	2300      	movs	r3, #0
 80084b2:	60c3      	str	r3, [r0, #12]
 80084b4:	4659      	mov	r1, fp
 80084b6:	f003 f85d 	bl	800b574 <__mcmp>
 80084ba:	2800      	cmp	r0, #0
 80084bc:	da60      	bge.n	8008580 <_strtod_l+0x868>
 80084be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084c0:	ea53 0308 	orrs.w	r3, r3, r8
 80084c4:	f040 8084 	bne.w	80085d0 <_strtod_l+0x8b8>
 80084c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d17f      	bne.n	80085d0 <_strtod_l+0x8b8>
 80084d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80084d4:	0d1b      	lsrs	r3, r3, #20
 80084d6:	051b      	lsls	r3, r3, #20
 80084d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80084dc:	d978      	bls.n	80085d0 <_strtod_l+0x8b8>
 80084de:	696b      	ldr	r3, [r5, #20]
 80084e0:	b913      	cbnz	r3, 80084e8 <_strtod_l+0x7d0>
 80084e2:	692b      	ldr	r3, [r5, #16]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	dd73      	ble.n	80085d0 <_strtod_l+0x8b8>
 80084e8:	4629      	mov	r1, r5
 80084ea:	2201      	movs	r2, #1
 80084ec:	4620      	mov	r0, r4
 80084ee:	f002 ffd5 	bl	800b49c <__lshift>
 80084f2:	4659      	mov	r1, fp
 80084f4:	4605      	mov	r5, r0
 80084f6:	f003 f83d 	bl	800b574 <__mcmp>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	dd68      	ble.n	80085d0 <_strtod_l+0x8b8>
 80084fe:	9904      	ldr	r1, [sp, #16]
 8008500:	4a54      	ldr	r2, [pc, #336]	; (8008654 <_strtod_l+0x93c>)
 8008502:	464b      	mov	r3, r9
 8008504:	2900      	cmp	r1, #0
 8008506:	f000 8084 	beq.w	8008612 <_strtod_l+0x8fa>
 800850a:	ea02 0109 	and.w	r1, r2, r9
 800850e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008512:	dc7e      	bgt.n	8008612 <_strtod_l+0x8fa>
 8008514:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008518:	f77f aeb3 	ble.w	8008282 <_strtod_l+0x56a>
 800851c:	4b4e      	ldr	r3, [pc, #312]	; (8008658 <_strtod_l+0x940>)
 800851e:	4640      	mov	r0, r8
 8008520:	4649      	mov	r1, r9
 8008522:	2200      	movs	r2, #0
 8008524:	f7f8 f888 	bl	8000638 <__aeabi_dmul>
 8008528:	4b4a      	ldr	r3, [pc, #296]	; (8008654 <_strtod_l+0x93c>)
 800852a:	400b      	ands	r3, r1
 800852c:	4680      	mov	r8, r0
 800852e:	4689      	mov	r9, r1
 8008530:	2b00      	cmp	r3, #0
 8008532:	f47f ae3f 	bne.w	80081b4 <_strtod_l+0x49c>
 8008536:	2322      	movs	r3, #34	; 0x22
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	e63b      	b.n	80081b4 <_strtod_l+0x49c>
 800853c:	f04f 32ff 	mov.w	r2, #4294967295
 8008540:	fa02 f303 	lsl.w	r3, r2, r3
 8008544:	ea03 0808 	and.w	r8, r3, r8
 8008548:	e6e8      	b.n	800831c <_strtod_l+0x604>
 800854a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800854e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008552:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008556:	36e2      	adds	r6, #226	; 0xe2
 8008558:	fa01 f306 	lsl.w	r3, r1, r6
 800855c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008560:	e748      	b.n	80083f4 <_strtod_l+0x6dc>
 8008562:	2100      	movs	r1, #0
 8008564:	2301      	movs	r3, #1
 8008566:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800856a:	e743      	b.n	80083f4 <_strtod_l+0x6dc>
 800856c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800856e:	4632      	mov	r2, r6
 8008570:	4620      	mov	r0, r4
 8008572:	f002 ff93 	bl	800b49c <__lshift>
 8008576:	9016      	str	r0, [sp, #88]	; 0x58
 8008578:	2800      	cmp	r0, #0
 800857a:	f47f af6b 	bne.w	8008454 <_strtod_l+0x73c>
 800857e:	e60f      	b.n	80081a0 <_strtod_l+0x488>
 8008580:	46ca      	mov	sl, r9
 8008582:	d171      	bne.n	8008668 <_strtod_l+0x950>
 8008584:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008586:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800858a:	b352      	cbz	r2, 80085e2 <_strtod_l+0x8ca>
 800858c:	4a33      	ldr	r2, [pc, #204]	; (800865c <_strtod_l+0x944>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d12a      	bne.n	80085e8 <_strtod_l+0x8d0>
 8008592:	9b04      	ldr	r3, [sp, #16]
 8008594:	4641      	mov	r1, r8
 8008596:	b1fb      	cbz	r3, 80085d8 <_strtod_l+0x8c0>
 8008598:	4b2e      	ldr	r3, [pc, #184]	; (8008654 <_strtod_l+0x93c>)
 800859a:	ea09 0303 	and.w	r3, r9, r3
 800859e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80085a2:	f04f 32ff 	mov.w	r2, #4294967295
 80085a6:	d81a      	bhi.n	80085de <_strtod_l+0x8c6>
 80085a8:	0d1b      	lsrs	r3, r3, #20
 80085aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80085ae:	fa02 f303 	lsl.w	r3, r2, r3
 80085b2:	4299      	cmp	r1, r3
 80085b4:	d118      	bne.n	80085e8 <_strtod_l+0x8d0>
 80085b6:	4b2a      	ldr	r3, [pc, #168]	; (8008660 <_strtod_l+0x948>)
 80085b8:	459a      	cmp	sl, r3
 80085ba:	d102      	bne.n	80085c2 <_strtod_l+0x8aa>
 80085bc:	3101      	adds	r1, #1
 80085be:	f43f adef 	beq.w	80081a0 <_strtod_l+0x488>
 80085c2:	4b24      	ldr	r3, [pc, #144]	; (8008654 <_strtod_l+0x93c>)
 80085c4:	ea0a 0303 	and.w	r3, sl, r3
 80085c8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80085cc:	f04f 0800 	mov.w	r8, #0
 80085d0:	9b04      	ldr	r3, [sp, #16]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1a2      	bne.n	800851c <_strtod_l+0x804>
 80085d6:	e5ed      	b.n	80081b4 <_strtod_l+0x49c>
 80085d8:	f04f 33ff 	mov.w	r3, #4294967295
 80085dc:	e7e9      	b.n	80085b2 <_strtod_l+0x89a>
 80085de:	4613      	mov	r3, r2
 80085e0:	e7e7      	b.n	80085b2 <_strtod_l+0x89a>
 80085e2:	ea53 0308 	orrs.w	r3, r3, r8
 80085e6:	d08a      	beq.n	80084fe <_strtod_l+0x7e6>
 80085e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085ea:	b1e3      	cbz	r3, 8008626 <_strtod_l+0x90e>
 80085ec:	ea13 0f0a 	tst.w	r3, sl
 80085f0:	d0ee      	beq.n	80085d0 <_strtod_l+0x8b8>
 80085f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085f4:	9a04      	ldr	r2, [sp, #16]
 80085f6:	4640      	mov	r0, r8
 80085f8:	4649      	mov	r1, r9
 80085fa:	b1c3      	cbz	r3, 800862e <_strtod_l+0x916>
 80085fc:	f7ff fb70 	bl	8007ce0 <sulp>
 8008600:	4602      	mov	r2, r0
 8008602:	460b      	mov	r3, r1
 8008604:	ec51 0b18 	vmov	r0, r1, d8
 8008608:	f7f7 fe60 	bl	80002cc <__adddf3>
 800860c:	4680      	mov	r8, r0
 800860e:	4689      	mov	r9, r1
 8008610:	e7de      	b.n	80085d0 <_strtod_l+0x8b8>
 8008612:	4013      	ands	r3, r2
 8008614:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008618:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800861c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008620:	f04f 38ff 	mov.w	r8, #4294967295
 8008624:	e7d4      	b.n	80085d0 <_strtod_l+0x8b8>
 8008626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008628:	ea13 0f08 	tst.w	r3, r8
 800862c:	e7e0      	b.n	80085f0 <_strtod_l+0x8d8>
 800862e:	f7ff fb57 	bl	8007ce0 <sulp>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	ec51 0b18 	vmov	r0, r1, d8
 800863a:	f7f7 fe45 	bl	80002c8 <__aeabi_dsub>
 800863e:	2200      	movs	r2, #0
 8008640:	2300      	movs	r3, #0
 8008642:	4680      	mov	r8, r0
 8008644:	4689      	mov	r9, r1
 8008646:	f7f8 fa5f 	bl	8000b08 <__aeabi_dcmpeq>
 800864a:	2800      	cmp	r0, #0
 800864c:	d0c0      	beq.n	80085d0 <_strtod_l+0x8b8>
 800864e:	e618      	b.n	8008282 <_strtod_l+0x56a>
 8008650:	fffffc02 	.word	0xfffffc02
 8008654:	7ff00000 	.word	0x7ff00000
 8008658:	39500000 	.word	0x39500000
 800865c:	000fffff 	.word	0x000fffff
 8008660:	7fefffff 	.word	0x7fefffff
 8008664:	0800c708 	.word	0x0800c708
 8008668:	4659      	mov	r1, fp
 800866a:	4628      	mov	r0, r5
 800866c:	f003 f8f2 	bl	800b854 <__ratio>
 8008670:	ec57 6b10 	vmov	r6, r7, d0
 8008674:	ee10 0a10 	vmov	r0, s0
 8008678:	2200      	movs	r2, #0
 800867a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800867e:	4639      	mov	r1, r7
 8008680:	f7f8 fa56 	bl	8000b30 <__aeabi_dcmple>
 8008684:	2800      	cmp	r0, #0
 8008686:	d071      	beq.n	800876c <_strtod_l+0xa54>
 8008688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800868a:	2b00      	cmp	r3, #0
 800868c:	d17c      	bne.n	8008788 <_strtod_l+0xa70>
 800868e:	f1b8 0f00 	cmp.w	r8, #0
 8008692:	d15a      	bne.n	800874a <_strtod_l+0xa32>
 8008694:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008698:	2b00      	cmp	r3, #0
 800869a:	d15d      	bne.n	8008758 <_strtod_l+0xa40>
 800869c:	4b90      	ldr	r3, [pc, #576]	; (80088e0 <_strtod_l+0xbc8>)
 800869e:	2200      	movs	r2, #0
 80086a0:	4630      	mov	r0, r6
 80086a2:	4639      	mov	r1, r7
 80086a4:	f7f8 fa3a 	bl	8000b1c <__aeabi_dcmplt>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	d15c      	bne.n	8008766 <_strtod_l+0xa4e>
 80086ac:	4630      	mov	r0, r6
 80086ae:	4639      	mov	r1, r7
 80086b0:	4b8c      	ldr	r3, [pc, #560]	; (80088e4 <_strtod_l+0xbcc>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	f7f7 ffc0 	bl	8000638 <__aeabi_dmul>
 80086b8:	4606      	mov	r6, r0
 80086ba:	460f      	mov	r7, r1
 80086bc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80086c0:	9606      	str	r6, [sp, #24]
 80086c2:	9307      	str	r3, [sp, #28]
 80086c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80086cc:	4b86      	ldr	r3, [pc, #536]	; (80088e8 <_strtod_l+0xbd0>)
 80086ce:	ea0a 0303 	and.w	r3, sl, r3
 80086d2:	930d      	str	r3, [sp, #52]	; 0x34
 80086d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086d6:	4b85      	ldr	r3, [pc, #532]	; (80088ec <_strtod_l+0xbd4>)
 80086d8:	429a      	cmp	r2, r3
 80086da:	f040 8090 	bne.w	80087fe <_strtod_l+0xae6>
 80086de:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80086e2:	ec49 8b10 	vmov	d0, r8, r9
 80086e6:	f002 ffeb 	bl	800b6c0 <__ulp>
 80086ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086ee:	ec51 0b10 	vmov	r0, r1, d0
 80086f2:	f7f7 ffa1 	bl	8000638 <__aeabi_dmul>
 80086f6:	4642      	mov	r2, r8
 80086f8:	464b      	mov	r3, r9
 80086fa:	f7f7 fde7 	bl	80002cc <__adddf3>
 80086fe:	460b      	mov	r3, r1
 8008700:	4979      	ldr	r1, [pc, #484]	; (80088e8 <_strtod_l+0xbd0>)
 8008702:	4a7b      	ldr	r2, [pc, #492]	; (80088f0 <_strtod_l+0xbd8>)
 8008704:	4019      	ands	r1, r3
 8008706:	4291      	cmp	r1, r2
 8008708:	4680      	mov	r8, r0
 800870a:	d944      	bls.n	8008796 <_strtod_l+0xa7e>
 800870c:	ee18 2a90 	vmov	r2, s17
 8008710:	4b78      	ldr	r3, [pc, #480]	; (80088f4 <_strtod_l+0xbdc>)
 8008712:	429a      	cmp	r2, r3
 8008714:	d104      	bne.n	8008720 <_strtod_l+0xa08>
 8008716:	ee18 3a10 	vmov	r3, s16
 800871a:	3301      	adds	r3, #1
 800871c:	f43f ad40 	beq.w	80081a0 <_strtod_l+0x488>
 8008720:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80088f4 <_strtod_l+0xbdc>
 8008724:	f04f 38ff 	mov.w	r8, #4294967295
 8008728:	9916      	ldr	r1, [sp, #88]	; 0x58
 800872a:	4620      	mov	r0, r4
 800872c:	f002 fc9c 	bl	800b068 <_Bfree>
 8008730:	9905      	ldr	r1, [sp, #20]
 8008732:	4620      	mov	r0, r4
 8008734:	f002 fc98 	bl	800b068 <_Bfree>
 8008738:	4659      	mov	r1, fp
 800873a:	4620      	mov	r0, r4
 800873c:	f002 fc94 	bl	800b068 <_Bfree>
 8008740:	4629      	mov	r1, r5
 8008742:	4620      	mov	r0, r4
 8008744:	f002 fc90 	bl	800b068 <_Bfree>
 8008748:	e609      	b.n	800835e <_strtod_l+0x646>
 800874a:	f1b8 0f01 	cmp.w	r8, #1
 800874e:	d103      	bne.n	8008758 <_strtod_l+0xa40>
 8008750:	f1b9 0f00 	cmp.w	r9, #0
 8008754:	f43f ad95 	beq.w	8008282 <_strtod_l+0x56a>
 8008758:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80088b0 <_strtod_l+0xb98>
 800875c:	4f60      	ldr	r7, [pc, #384]	; (80088e0 <_strtod_l+0xbc8>)
 800875e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008762:	2600      	movs	r6, #0
 8008764:	e7ae      	b.n	80086c4 <_strtod_l+0x9ac>
 8008766:	4f5f      	ldr	r7, [pc, #380]	; (80088e4 <_strtod_l+0xbcc>)
 8008768:	2600      	movs	r6, #0
 800876a:	e7a7      	b.n	80086bc <_strtod_l+0x9a4>
 800876c:	4b5d      	ldr	r3, [pc, #372]	; (80088e4 <_strtod_l+0xbcc>)
 800876e:	4630      	mov	r0, r6
 8008770:	4639      	mov	r1, r7
 8008772:	2200      	movs	r2, #0
 8008774:	f7f7 ff60 	bl	8000638 <__aeabi_dmul>
 8008778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800877a:	4606      	mov	r6, r0
 800877c:	460f      	mov	r7, r1
 800877e:	2b00      	cmp	r3, #0
 8008780:	d09c      	beq.n	80086bc <_strtod_l+0x9a4>
 8008782:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008786:	e79d      	b.n	80086c4 <_strtod_l+0x9ac>
 8008788:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80088b8 <_strtod_l+0xba0>
 800878c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008790:	ec57 6b17 	vmov	r6, r7, d7
 8008794:	e796      	b.n	80086c4 <_strtod_l+0x9ac>
 8008796:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800879a:	9b04      	ldr	r3, [sp, #16]
 800879c:	46ca      	mov	sl, r9
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1c2      	bne.n	8008728 <_strtod_l+0xa10>
 80087a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087a8:	0d1b      	lsrs	r3, r3, #20
 80087aa:	051b      	lsls	r3, r3, #20
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d1bb      	bne.n	8008728 <_strtod_l+0xa10>
 80087b0:	4630      	mov	r0, r6
 80087b2:	4639      	mov	r1, r7
 80087b4:	f7f8 faa0 	bl	8000cf8 <__aeabi_d2lz>
 80087b8:	f7f7 ff10 	bl	80005dc <__aeabi_l2d>
 80087bc:	4602      	mov	r2, r0
 80087be:	460b      	mov	r3, r1
 80087c0:	4630      	mov	r0, r6
 80087c2:	4639      	mov	r1, r7
 80087c4:	f7f7 fd80 	bl	80002c8 <__aeabi_dsub>
 80087c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087ce:	ea43 0308 	orr.w	r3, r3, r8
 80087d2:	4313      	orrs	r3, r2
 80087d4:	4606      	mov	r6, r0
 80087d6:	460f      	mov	r7, r1
 80087d8:	d054      	beq.n	8008884 <_strtod_l+0xb6c>
 80087da:	a339      	add	r3, pc, #228	; (adr r3, 80088c0 <_strtod_l+0xba8>)
 80087dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e0:	f7f8 f99c 	bl	8000b1c <__aeabi_dcmplt>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	f47f ace5 	bne.w	80081b4 <_strtod_l+0x49c>
 80087ea:	a337      	add	r3, pc, #220	; (adr r3, 80088c8 <_strtod_l+0xbb0>)
 80087ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f0:	4630      	mov	r0, r6
 80087f2:	4639      	mov	r1, r7
 80087f4:	f7f8 f9b0 	bl	8000b58 <__aeabi_dcmpgt>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	d095      	beq.n	8008728 <_strtod_l+0xa10>
 80087fc:	e4da      	b.n	80081b4 <_strtod_l+0x49c>
 80087fe:	9b04      	ldr	r3, [sp, #16]
 8008800:	b333      	cbz	r3, 8008850 <_strtod_l+0xb38>
 8008802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008804:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008808:	d822      	bhi.n	8008850 <_strtod_l+0xb38>
 800880a:	a331      	add	r3, pc, #196	; (adr r3, 80088d0 <_strtod_l+0xbb8>)
 800880c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008810:	4630      	mov	r0, r6
 8008812:	4639      	mov	r1, r7
 8008814:	f7f8 f98c 	bl	8000b30 <__aeabi_dcmple>
 8008818:	b1a0      	cbz	r0, 8008844 <_strtod_l+0xb2c>
 800881a:	4639      	mov	r1, r7
 800881c:	4630      	mov	r0, r6
 800881e:	f7f8 f9e3 	bl	8000be8 <__aeabi_d2uiz>
 8008822:	2801      	cmp	r0, #1
 8008824:	bf38      	it	cc
 8008826:	2001      	movcc	r0, #1
 8008828:	f7f7 fe8c 	bl	8000544 <__aeabi_ui2d>
 800882c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800882e:	4606      	mov	r6, r0
 8008830:	460f      	mov	r7, r1
 8008832:	bb23      	cbnz	r3, 800887e <_strtod_l+0xb66>
 8008834:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008838:	9010      	str	r0, [sp, #64]	; 0x40
 800883a:	9311      	str	r3, [sp, #68]	; 0x44
 800883c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008840:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008844:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008846:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008848:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800884c:	1a9b      	subs	r3, r3, r2
 800884e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008850:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008854:	eeb0 0a48 	vmov.f32	s0, s16
 8008858:	eef0 0a68 	vmov.f32	s1, s17
 800885c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008860:	f002 ff2e 	bl	800b6c0 <__ulp>
 8008864:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008868:	ec53 2b10 	vmov	r2, r3, d0
 800886c:	f7f7 fee4 	bl	8000638 <__aeabi_dmul>
 8008870:	ec53 2b18 	vmov	r2, r3, d8
 8008874:	f7f7 fd2a 	bl	80002cc <__adddf3>
 8008878:	4680      	mov	r8, r0
 800887a:	4689      	mov	r9, r1
 800887c:	e78d      	b.n	800879a <_strtod_l+0xa82>
 800887e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008882:	e7db      	b.n	800883c <_strtod_l+0xb24>
 8008884:	a314      	add	r3, pc, #80	; (adr r3, 80088d8 <_strtod_l+0xbc0>)
 8008886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888a:	f7f8 f947 	bl	8000b1c <__aeabi_dcmplt>
 800888e:	e7b3      	b.n	80087f8 <_strtod_l+0xae0>
 8008890:	2300      	movs	r3, #0
 8008892:	930a      	str	r3, [sp, #40]	; 0x28
 8008894:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008896:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008898:	6013      	str	r3, [r2, #0]
 800889a:	f7ff ba7c 	b.w	8007d96 <_strtod_l+0x7e>
 800889e:	2a65      	cmp	r2, #101	; 0x65
 80088a0:	f43f ab75 	beq.w	8007f8e <_strtod_l+0x276>
 80088a4:	2a45      	cmp	r2, #69	; 0x45
 80088a6:	f43f ab72 	beq.w	8007f8e <_strtod_l+0x276>
 80088aa:	2301      	movs	r3, #1
 80088ac:	f7ff bbaa 	b.w	8008004 <_strtod_l+0x2ec>
 80088b0:	00000000 	.word	0x00000000
 80088b4:	bff00000 	.word	0xbff00000
 80088b8:	00000000 	.word	0x00000000
 80088bc:	3ff00000 	.word	0x3ff00000
 80088c0:	94a03595 	.word	0x94a03595
 80088c4:	3fdfffff 	.word	0x3fdfffff
 80088c8:	35afe535 	.word	0x35afe535
 80088cc:	3fe00000 	.word	0x3fe00000
 80088d0:	ffc00000 	.word	0xffc00000
 80088d4:	41dfffff 	.word	0x41dfffff
 80088d8:	94a03595 	.word	0x94a03595
 80088dc:	3fcfffff 	.word	0x3fcfffff
 80088e0:	3ff00000 	.word	0x3ff00000
 80088e4:	3fe00000 	.word	0x3fe00000
 80088e8:	7ff00000 	.word	0x7ff00000
 80088ec:	7fe00000 	.word	0x7fe00000
 80088f0:	7c9fffff 	.word	0x7c9fffff
 80088f4:	7fefffff 	.word	0x7fefffff

080088f8 <strtof>:
 80088f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088fc:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80089c0 <strtof+0xc8>
 8008900:	4b2a      	ldr	r3, [pc, #168]	; (80089ac <strtof+0xb4>)
 8008902:	460a      	mov	r2, r1
 8008904:	ed2d 8b02 	vpush	{d8}
 8008908:	4601      	mov	r1, r0
 800890a:	f8d8 0000 	ldr.w	r0, [r8]
 800890e:	f7ff fa03 	bl	8007d18 <_strtod_l>
 8008912:	ec55 4b10 	vmov	r4, r5, d0
 8008916:	ee10 2a10 	vmov	r2, s0
 800891a:	ee10 0a10 	vmov	r0, s0
 800891e:	462b      	mov	r3, r5
 8008920:	4629      	mov	r1, r5
 8008922:	f7f8 f923 	bl	8000b6c <__aeabi_dcmpun>
 8008926:	b190      	cbz	r0, 800894e <strtof+0x56>
 8008928:	2d00      	cmp	r5, #0
 800892a:	4821      	ldr	r0, [pc, #132]	; (80089b0 <strtof+0xb8>)
 800892c:	da09      	bge.n	8008942 <strtof+0x4a>
 800892e:	f001 f923 	bl	8009b78 <nanf>
 8008932:	eeb1 8a40 	vneg.f32	s16, s0
 8008936:	eeb0 0a48 	vmov.f32	s0, s16
 800893a:	ecbd 8b02 	vpop	{d8}
 800893e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008942:	ecbd 8b02 	vpop	{d8}
 8008946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800894a:	f001 b915 	b.w	8009b78 <nanf>
 800894e:	4620      	mov	r0, r4
 8008950:	4629      	mov	r1, r5
 8008952:	f7f8 f969 	bl	8000c28 <__aeabi_d2f>
 8008956:	ee08 0a10 	vmov	s16, r0
 800895a:	eddf 7a16 	vldr	s15, [pc, #88]	; 80089b4 <strtof+0xbc>
 800895e:	eeb0 7ac8 	vabs.f32	s14, s16
 8008962:	eeb4 7a67 	vcmp.f32	s14, s15
 8008966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800896a:	dd11      	ble.n	8008990 <strtof+0x98>
 800896c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8008970:	4b11      	ldr	r3, [pc, #68]	; (80089b8 <strtof+0xc0>)
 8008972:	f04f 32ff 	mov.w	r2, #4294967295
 8008976:	4620      	mov	r0, r4
 8008978:	4639      	mov	r1, r7
 800897a:	f7f8 f8f7 	bl	8000b6c <__aeabi_dcmpun>
 800897e:	b980      	cbnz	r0, 80089a2 <strtof+0xaa>
 8008980:	4b0d      	ldr	r3, [pc, #52]	; (80089b8 <strtof+0xc0>)
 8008982:	f04f 32ff 	mov.w	r2, #4294967295
 8008986:	4620      	mov	r0, r4
 8008988:	4639      	mov	r1, r7
 800898a:	f7f8 f8d1 	bl	8000b30 <__aeabi_dcmple>
 800898e:	b940      	cbnz	r0, 80089a2 <strtof+0xaa>
 8008990:	ee18 3a10 	vmov	r3, s16
 8008994:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008998:	d1cd      	bne.n	8008936 <strtof+0x3e>
 800899a:	4b08      	ldr	r3, [pc, #32]	; (80089bc <strtof+0xc4>)
 800899c:	402b      	ands	r3, r5
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0c9      	beq.n	8008936 <strtof+0x3e>
 80089a2:	f8d8 3000 	ldr.w	r3, [r8]
 80089a6:	2222      	movs	r2, #34	; 0x22
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	e7c4      	b.n	8008936 <strtof+0x3e>
 80089ac:	20000034 	.word	0x20000034
 80089b0:	0800cb00 	.word	0x0800cb00
 80089b4:	7f7fffff 	.word	0x7f7fffff
 80089b8:	7fefffff 	.word	0x7fefffff
 80089bc:	7ff00000 	.word	0x7ff00000
 80089c0:	200001ec 	.word	0x200001ec

080089c4 <_strtol_l.constprop.0>:
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089ca:	d001      	beq.n	80089d0 <_strtol_l.constprop.0+0xc>
 80089cc:	2b24      	cmp	r3, #36	; 0x24
 80089ce:	d906      	bls.n	80089de <_strtol_l.constprop.0+0x1a>
 80089d0:	f001 f88e 	bl	8009af0 <__errno>
 80089d4:	2316      	movs	r3, #22
 80089d6:	6003      	str	r3, [r0, #0]
 80089d8:	2000      	movs	r0, #0
 80089da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008ac4 <_strtol_l.constprop.0+0x100>
 80089e2:	460d      	mov	r5, r1
 80089e4:	462e      	mov	r6, r5
 80089e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089ea:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80089ee:	f017 0708 	ands.w	r7, r7, #8
 80089f2:	d1f7      	bne.n	80089e4 <_strtol_l.constprop.0+0x20>
 80089f4:	2c2d      	cmp	r4, #45	; 0x2d
 80089f6:	d132      	bne.n	8008a5e <_strtol_l.constprop.0+0x9a>
 80089f8:	782c      	ldrb	r4, [r5, #0]
 80089fa:	2701      	movs	r7, #1
 80089fc:	1cb5      	adds	r5, r6, #2
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d05b      	beq.n	8008aba <_strtol_l.constprop.0+0xf6>
 8008a02:	2b10      	cmp	r3, #16
 8008a04:	d109      	bne.n	8008a1a <_strtol_l.constprop.0+0x56>
 8008a06:	2c30      	cmp	r4, #48	; 0x30
 8008a08:	d107      	bne.n	8008a1a <_strtol_l.constprop.0+0x56>
 8008a0a:	782c      	ldrb	r4, [r5, #0]
 8008a0c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008a10:	2c58      	cmp	r4, #88	; 0x58
 8008a12:	d14d      	bne.n	8008ab0 <_strtol_l.constprop.0+0xec>
 8008a14:	786c      	ldrb	r4, [r5, #1]
 8008a16:	2310      	movs	r3, #16
 8008a18:	3502      	adds	r5, #2
 8008a1a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008a1e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a22:	f04f 0e00 	mov.w	lr, #0
 8008a26:	fbb8 f9f3 	udiv	r9, r8, r3
 8008a2a:	4676      	mov	r6, lr
 8008a2c:	fb03 8a19 	mls	sl, r3, r9, r8
 8008a30:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008a34:	f1bc 0f09 	cmp.w	ip, #9
 8008a38:	d816      	bhi.n	8008a68 <_strtol_l.constprop.0+0xa4>
 8008a3a:	4664      	mov	r4, ip
 8008a3c:	42a3      	cmp	r3, r4
 8008a3e:	dd24      	ble.n	8008a8a <_strtol_l.constprop.0+0xc6>
 8008a40:	f1be 3fff 	cmp.w	lr, #4294967295
 8008a44:	d008      	beq.n	8008a58 <_strtol_l.constprop.0+0x94>
 8008a46:	45b1      	cmp	r9, r6
 8008a48:	d31c      	bcc.n	8008a84 <_strtol_l.constprop.0+0xc0>
 8008a4a:	d101      	bne.n	8008a50 <_strtol_l.constprop.0+0x8c>
 8008a4c:	45a2      	cmp	sl, r4
 8008a4e:	db19      	blt.n	8008a84 <_strtol_l.constprop.0+0xc0>
 8008a50:	fb06 4603 	mla	r6, r6, r3, r4
 8008a54:	f04f 0e01 	mov.w	lr, #1
 8008a58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a5c:	e7e8      	b.n	8008a30 <_strtol_l.constprop.0+0x6c>
 8008a5e:	2c2b      	cmp	r4, #43	; 0x2b
 8008a60:	bf04      	itt	eq
 8008a62:	782c      	ldrbeq	r4, [r5, #0]
 8008a64:	1cb5      	addeq	r5, r6, #2
 8008a66:	e7ca      	b.n	80089fe <_strtol_l.constprop.0+0x3a>
 8008a68:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008a6c:	f1bc 0f19 	cmp.w	ip, #25
 8008a70:	d801      	bhi.n	8008a76 <_strtol_l.constprop.0+0xb2>
 8008a72:	3c37      	subs	r4, #55	; 0x37
 8008a74:	e7e2      	b.n	8008a3c <_strtol_l.constprop.0+0x78>
 8008a76:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008a7a:	f1bc 0f19 	cmp.w	ip, #25
 8008a7e:	d804      	bhi.n	8008a8a <_strtol_l.constprop.0+0xc6>
 8008a80:	3c57      	subs	r4, #87	; 0x57
 8008a82:	e7db      	b.n	8008a3c <_strtol_l.constprop.0+0x78>
 8008a84:	f04f 3eff 	mov.w	lr, #4294967295
 8008a88:	e7e6      	b.n	8008a58 <_strtol_l.constprop.0+0x94>
 8008a8a:	f1be 3fff 	cmp.w	lr, #4294967295
 8008a8e:	d105      	bne.n	8008a9c <_strtol_l.constprop.0+0xd8>
 8008a90:	2322      	movs	r3, #34	; 0x22
 8008a92:	6003      	str	r3, [r0, #0]
 8008a94:	4646      	mov	r6, r8
 8008a96:	b942      	cbnz	r2, 8008aaa <_strtol_l.constprop.0+0xe6>
 8008a98:	4630      	mov	r0, r6
 8008a9a:	e79e      	b.n	80089da <_strtol_l.constprop.0+0x16>
 8008a9c:	b107      	cbz	r7, 8008aa0 <_strtol_l.constprop.0+0xdc>
 8008a9e:	4276      	negs	r6, r6
 8008aa0:	2a00      	cmp	r2, #0
 8008aa2:	d0f9      	beq.n	8008a98 <_strtol_l.constprop.0+0xd4>
 8008aa4:	f1be 0f00 	cmp.w	lr, #0
 8008aa8:	d000      	beq.n	8008aac <_strtol_l.constprop.0+0xe8>
 8008aaa:	1e69      	subs	r1, r5, #1
 8008aac:	6011      	str	r1, [r2, #0]
 8008aae:	e7f3      	b.n	8008a98 <_strtol_l.constprop.0+0xd4>
 8008ab0:	2430      	movs	r4, #48	; 0x30
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1b1      	bne.n	8008a1a <_strtol_l.constprop.0+0x56>
 8008ab6:	2308      	movs	r3, #8
 8008ab8:	e7af      	b.n	8008a1a <_strtol_l.constprop.0+0x56>
 8008aba:	2c30      	cmp	r4, #48	; 0x30
 8008abc:	d0a5      	beq.n	8008a0a <_strtol_l.constprop.0+0x46>
 8008abe:	230a      	movs	r3, #10
 8008ac0:	e7ab      	b.n	8008a1a <_strtol_l.constprop.0+0x56>
 8008ac2:	bf00      	nop
 8008ac4:	0800c731 	.word	0x0800c731

08008ac8 <strtol>:
 8008ac8:	4613      	mov	r3, r2
 8008aca:	460a      	mov	r2, r1
 8008acc:	4601      	mov	r1, r0
 8008ace:	4802      	ldr	r0, [pc, #8]	; (8008ad8 <strtol+0x10>)
 8008ad0:	6800      	ldr	r0, [r0, #0]
 8008ad2:	f7ff bf77 	b.w	80089c4 <_strtol_l.constprop.0>
 8008ad6:	bf00      	nop
 8008ad8:	200001ec 	.word	0x200001ec

08008adc <swapfunc>:
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	b510      	push	{r4, lr}
 8008ae0:	d00a      	beq.n	8008af8 <swapfunc+0x1c>
 8008ae2:	0892      	lsrs	r2, r2, #2
 8008ae4:	3a01      	subs	r2, #1
 8008ae6:	6803      	ldr	r3, [r0, #0]
 8008ae8:	680c      	ldr	r4, [r1, #0]
 8008aea:	f840 4b04 	str.w	r4, [r0], #4
 8008aee:	2a00      	cmp	r2, #0
 8008af0:	f841 3b04 	str.w	r3, [r1], #4
 8008af4:	dcf6      	bgt.n	8008ae4 <swapfunc+0x8>
 8008af6:	bd10      	pop	{r4, pc}
 8008af8:	4402      	add	r2, r0
 8008afa:	780c      	ldrb	r4, [r1, #0]
 8008afc:	7803      	ldrb	r3, [r0, #0]
 8008afe:	f800 4b01 	strb.w	r4, [r0], #1
 8008b02:	f801 3b01 	strb.w	r3, [r1], #1
 8008b06:	1a13      	subs	r3, r2, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	dcf6      	bgt.n	8008afa <swapfunc+0x1e>
 8008b0c:	e7f3      	b.n	8008af6 <swapfunc+0x1a>

08008b0e <med3.constprop.0>:
 8008b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b10:	460c      	mov	r4, r1
 8008b12:	4615      	mov	r5, r2
 8008b14:	4607      	mov	r7, r0
 8008b16:	461e      	mov	r6, r3
 8008b18:	4798      	blx	r3
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	4620      	mov	r0, r4
 8008b20:	da0a      	bge.n	8008b38 <med3.constprop.0+0x2a>
 8008b22:	47b0      	blx	r6
 8008b24:	2800      	cmp	r0, #0
 8008b26:	db05      	blt.n	8008b34 <med3.constprop.0+0x26>
 8008b28:	4629      	mov	r1, r5
 8008b2a:	4638      	mov	r0, r7
 8008b2c:	47b0      	blx	r6
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	db0a      	blt.n	8008b48 <med3.constprop.0+0x3a>
 8008b32:	463c      	mov	r4, r7
 8008b34:	4620      	mov	r0, r4
 8008b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b38:	47b0      	blx	r6
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	dcfa      	bgt.n	8008b34 <med3.constprop.0+0x26>
 8008b3e:	4629      	mov	r1, r5
 8008b40:	4638      	mov	r0, r7
 8008b42:	47b0      	blx	r6
 8008b44:	2800      	cmp	r0, #0
 8008b46:	dbf4      	blt.n	8008b32 <med3.constprop.0+0x24>
 8008b48:	462c      	mov	r4, r5
 8008b4a:	e7f3      	b.n	8008b34 <med3.constprop.0+0x26>

08008b4c <qsort>:
 8008b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b50:	469a      	mov	sl, r3
 8008b52:	ea40 0302 	orr.w	r3, r0, r2
 8008b56:	079b      	lsls	r3, r3, #30
 8008b58:	b097      	sub	sp, #92	; 0x5c
 8008b5a:	4606      	mov	r6, r0
 8008b5c:	4614      	mov	r4, r2
 8008b5e:	d11a      	bne.n	8008b96 <qsort+0x4a>
 8008b60:	f1b2 0804 	subs.w	r8, r2, #4
 8008b64:	bf18      	it	ne
 8008b66:	f04f 0801 	movne.w	r8, #1
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	9302      	str	r3, [sp, #8]
 8008b6e:	1933      	adds	r3, r6, r4
 8008b70:	fb04 f701 	mul.w	r7, r4, r1
 8008b74:	9301      	str	r3, [sp, #4]
 8008b76:	2906      	cmp	r1, #6
 8008b78:	eb06 0307 	add.w	r3, r6, r7
 8008b7c:	9303      	str	r3, [sp, #12]
 8008b7e:	d82a      	bhi.n	8008bd6 <qsort+0x8a>
 8008b80:	9b01      	ldr	r3, [sp, #4]
 8008b82:	9a03      	ldr	r2, [sp, #12]
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d310      	bcc.n	8008baa <qsort+0x5e>
 8008b88:	9b02      	ldr	r3, [sp, #8]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f040 811e 	bne.w	8008dcc <qsort+0x280>
 8008b90:	b017      	add	sp, #92	; 0x5c
 8008b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b96:	f04f 0802 	mov.w	r8, #2
 8008b9a:	e7e6      	b.n	8008b6a <qsort+0x1e>
 8008b9c:	4643      	mov	r3, r8
 8008b9e:	4622      	mov	r2, r4
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	f7ff ff9a 	bl	8008adc <swapfunc>
 8008ba8:	e00e      	b.n	8008bc8 <qsort+0x7c>
 8008baa:	9d01      	ldr	r5, [sp, #4]
 8008bac:	e00d      	b.n	8008bca <qsort+0x7e>
 8008bae:	1b2f      	subs	r7, r5, r4
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	4638      	mov	r0, r7
 8008bb4:	47d0      	blx	sl
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	dd09      	ble.n	8008bce <qsort+0x82>
 8008bba:	f1b8 0f00 	cmp.w	r8, #0
 8008bbe:	d1ed      	bne.n	8008b9c <qsort+0x50>
 8008bc0:	682b      	ldr	r3, [r5, #0]
 8008bc2:	683a      	ldr	r2, [r7, #0]
 8008bc4:	602a      	str	r2, [r5, #0]
 8008bc6:	603b      	str	r3, [r7, #0]
 8008bc8:	463d      	mov	r5, r7
 8008bca:	42ae      	cmp	r6, r5
 8008bcc:	d3ef      	bcc.n	8008bae <qsort+0x62>
 8008bce:	9b01      	ldr	r3, [sp, #4]
 8008bd0:	4423      	add	r3, r4
 8008bd2:	9301      	str	r3, [sp, #4]
 8008bd4:	e7d4      	b.n	8008b80 <qsort+0x34>
 8008bd6:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8008bda:	1b3f      	subs	r7, r7, r4
 8008bdc:	2907      	cmp	r1, #7
 8008bde:	fb04 6909 	mla	r9, r4, r9, r6
 8008be2:	4437      	add	r7, r6
 8008be4:	d021      	beq.n	8008c2a <qsort+0xde>
 8008be6:	2928      	cmp	r1, #40	; 0x28
 8008be8:	d944      	bls.n	8008c74 <qsort+0x128>
 8008bea:	08cd      	lsrs	r5, r1, #3
 8008bec:	4365      	muls	r5, r4
 8008bee:	4653      	mov	r3, sl
 8008bf0:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8008bf4:	1971      	adds	r1, r6, r5
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	f7ff ff89 	bl	8008b0e <med3.constprop.0>
 8008bfc:	4649      	mov	r1, r9
 8008bfe:	eb09 0205 	add.w	r2, r9, r5
 8008c02:	4653      	mov	r3, sl
 8008c04:	4683      	mov	fp, r0
 8008c06:	1b48      	subs	r0, r1, r5
 8008c08:	f7ff ff81 	bl	8008b0e <med3.constprop.0>
 8008c0c:	463a      	mov	r2, r7
 8008c0e:	4681      	mov	r9, r0
 8008c10:	4653      	mov	r3, sl
 8008c12:	1b79      	subs	r1, r7, r5
 8008c14:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8008c18:	f7ff ff79 	bl	8008b0e <med3.constprop.0>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	4649      	mov	r1, r9
 8008c20:	4653      	mov	r3, sl
 8008c22:	4658      	mov	r0, fp
 8008c24:	f7ff ff73 	bl	8008b0e <med3.constprop.0>
 8008c28:	4681      	mov	r9, r0
 8008c2a:	f1b8 0f00 	cmp.w	r8, #0
 8008c2e:	d124      	bne.n	8008c7a <qsort+0x12e>
 8008c30:	6833      	ldr	r3, [r6, #0]
 8008c32:	f8d9 2000 	ldr.w	r2, [r9]
 8008c36:	6032      	str	r2, [r6, #0]
 8008c38:	f8c9 3000 	str.w	r3, [r9]
 8008c3c:	eb06 0b04 	add.w	fp, r6, r4
 8008c40:	46b9      	mov	r9, r7
 8008c42:	465d      	mov	r5, fp
 8008c44:	2300      	movs	r3, #0
 8008c46:	45bb      	cmp	fp, r7
 8008c48:	d835      	bhi.n	8008cb6 <qsort+0x16a>
 8008c4a:	4631      	mov	r1, r6
 8008c4c:	4658      	mov	r0, fp
 8008c4e:	9304      	str	r3, [sp, #16]
 8008c50:	47d0      	blx	sl
 8008c52:	2800      	cmp	r0, #0
 8008c54:	9b04      	ldr	r3, [sp, #16]
 8008c56:	dc3e      	bgt.n	8008cd6 <qsort+0x18a>
 8008c58:	d10a      	bne.n	8008c70 <qsort+0x124>
 8008c5a:	f1b8 0f00 	cmp.w	r8, #0
 8008c5e:	d113      	bne.n	8008c88 <qsort+0x13c>
 8008c60:	682b      	ldr	r3, [r5, #0]
 8008c62:	f8db 2000 	ldr.w	r2, [fp]
 8008c66:	602a      	str	r2, [r5, #0]
 8008c68:	f8cb 3000 	str.w	r3, [fp]
 8008c6c:	4425      	add	r5, r4
 8008c6e:	2301      	movs	r3, #1
 8008c70:	44a3      	add	fp, r4
 8008c72:	e7e8      	b.n	8008c46 <qsort+0xfa>
 8008c74:	463a      	mov	r2, r7
 8008c76:	46b3      	mov	fp, r6
 8008c78:	e7d1      	b.n	8008c1e <qsort+0xd2>
 8008c7a:	4643      	mov	r3, r8
 8008c7c:	4622      	mov	r2, r4
 8008c7e:	4649      	mov	r1, r9
 8008c80:	4630      	mov	r0, r6
 8008c82:	f7ff ff2b 	bl	8008adc <swapfunc>
 8008c86:	e7d9      	b.n	8008c3c <qsort+0xf0>
 8008c88:	4643      	mov	r3, r8
 8008c8a:	4622      	mov	r2, r4
 8008c8c:	4659      	mov	r1, fp
 8008c8e:	4628      	mov	r0, r5
 8008c90:	f7ff ff24 	bl	8008adc <swapfunc>
 8008c94:	e7ea      	b.n	8008c6c <qsort+0x120>
 8008c96:	d10b      	bne.n	8008cb0 <qsort+0x164>
 8008c98:	f1b8 0f00 	cmp.w	r8, #0
 8008c9c:	d114      	bne.n	8008cc8 <qsort+0x17c>
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	f8d9 2000 	ldr.w	r2, [r9]
 8008ca4:	603a      	str	r2, [r7, #0]
 8008ca6:	f8c9 3000 	str.w	r3, [r9]
 8008caa:	eba9 0904 	sub.w	r9, r9, r4
 8008cae:	2301      	movs	r3, #1
 8008cb0:	9f04      	ldr	r7, [sp, #16]
 8008cb2:	45bb      	cmp	fp, r7
 8008cb4:	d90f      	bls.n	8008cd6 <qsort+0x18a>
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d143      	bne.n	8008d42 <qsort+0x1f6>
 8008cba:	9b01      	ldr	r3, [sp, #4]
 8008cbc:	9a03      	ldr	r2, [sp, #12]
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	f4bf af62 	bcs.w	8008b88 <qsort+0x3c>
 8008cc4:	9d01      	ldr	r5, [sp, #4]
 8008cc6:	e036      	b.n	8008d36 <qsort+0x1ea>
 8008cc8:	4643      	mov	r3, r8
 8008cca:	4622      	mov	r2, r4
 8008ccc:	4649      	mov	r1, r9
 8008cce:	4638      	mov	r0, r7
 8008cd0:	f7ff ff04 	bl	8008adc <swapfunc>
 8008cd4:	e7e9      	b.n	8008caa <qsort+0x15e>
 8008cd6:	4631      	mov	r1, r6
 8008cd8:	4638      	mov	r0, r7
 8008cda:	9305      	str	r3, [sp, #20]
 8008cdc:	47d0      	blx	sl
 8008cde:	1b3b      	subs	r3, r7, r4
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	9304      	str	r3, [sp, #16]
 8008ce4:	9b05      	ldr	r3, [sp, #20]
 8008ce6:	dad6      	bge.n	8008c96 <qsort+0x14a>
 8008ce8:	f1b8 0f00 	cmp.w	r8, #0
 8008cec:	d006      	beq.n	8008cfc <qsort+0x1b0>
 8008cee:	4643      	mov	r3, r8
 8008cf0:	4622      	mov	r2, r4
 8008cf2:	4639      	mov	r1, r7
 8008cf4:	4658      	mov	r0, fp
 8008cf6:	f7ff fef1 	bl	8008adc <swapfunc>
 8008cfa:	e005      	b.n	8008d08 <qsort+0x1bc>
 8008cfc:	f8db 3000 	ldr.w	r3, [fp]
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	f8cb 2000 	str.w	r2, [fp]
 8008d06:	603b      	str	r3, [r7, #0]
 8008d08:	9f04      	ldr	r7, [sp, #16]
 8008d0a:	e7b0      	b.n	8008c6e <qsort+0x122>
 8008d0c:	4643      	mov	r3, r8
 8008d0e:	4622      	mov	r2, r4
 8008d10:	4639      	mov	r1, r7
 8008d12:	4628      	mov	r0, r5
 8008d14:	f7ff fee2 	bl	8008adc <swapfunc>
 8008d18:	e00c      	b.n	8008d34 <qsort+0x1e8>
 8008d1a:	1b2f      	subs	r7, r5, r4
 8008d1c:	4629      	mov	r1, r5
 8008d1e:	4638      	mov	r0, r7
 8008d20:	47d0      	blx	sl
 8008d22:	2800      	cmp	r0, #0
 8008d24:	dd09      	ble.n	8008d3a <qsort+0x1ee>
 8008d26:	f1b8 0f00 	cmp.w	r8, #0
 8008d2a:	d1ef      	bne.n	8008d0c <qsort+0x1c0>
 8008d2c:	682b      	ldr	r3, [r5, #0]
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	602a      	str	r2, [r5, #0]
 8008d32:	603b      	str	r3, [r7, #0]
 8008d34:	463d      	mov	r5, r7
 8008d36:	42ae      	cmp	r6, r5
 8008d38:	d3ef      	bcc.n	8008d1a <qsort+0x1ce>
 8008d3a:	9b01      	ldr	r3, [sp, #4]
 8008d3c:	4423      	add	r3, r4
 8008d3e:	9301      	str	r3, [sp, #4]
 8008d40:	e7bb      	b.n	8008cba <qsort+0x16e>
 8008d42:	ebab 0305 	sub.w	r3, fp, r5
 8008d46:	1baa      	subs	r2, r5, r6
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	bfa8      	it	ge
 8008d4c:	461a      	movge	r2, r3
 8008d4e:	9301      	str	r3, [sp, #4]
 8008d50:	b12a      	cbz	r2, 8008d5e <qsort+0x212>
 8008d52:	4643      	mov	r3, r8
 8008d54:	ebab 0102 	sub.w	r1, fp, r2
 8008d58:	4630      	mov	r0, r6
 8008d5a:	f7ff febf 	bl	8008adc <swapfunc>
 8008d5e:	9b03      	ldr	r3, [sp, #12]
 8008d60:	eba3 0209 	sub.w	r2, r3, r9
 8008d64:	eba9 0707 	sub.w	r7, r9, r7
 8008d68:	1b12      	subs	r2, r2, r4
 8008d6a:	42ba      	cmp	r2, r7
 8008d6c:	bf28      	it	cs
 8008d6e:	463a      	movcs	r2, r7
 8008d70:	b12a      	cbz	r2, 8008d7e <qsort+0x232>
 8008d72:	9903      	ldr	r1, [sp, #12]
 8008d74:	4643      	mov	r3, r8
 8008d76:	1a89      	subs	r1, r1, r2
 8008d78:	4658      	mov	r0, fp
 8008d7a:	f7ff feaf 	bl	8008adc <swapfunc>
 8008d7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008d82:	9b03      	ldr	r3, [sp, #12]
 8008d84:	454f      	cmp	r7, r9
 8008d86:	eba3 0007 	sub.w	r0, r3, r7
 8008d8a:	d904      	bls.n	8008d96 <qsort+0x24a>
 8008d8c:	4633      	mov	r3, r6
 8008d8e:	46b9      	mov	r9, r7
 8008d90:	9f01      	ldr	r7, [sp, #4]
 8008d92:	4606      	mov	r6, r0
 8008d94:	4618      	mov	r0, r3
 8008d96:	42a7      	cmp	r7, r4
 8008d98:	d921      	bls.n	8008dde <qsort+0x292>
 8008d9a:	fbb7 f1f4 	udiv	r1, r7, r4
 8008d9e:	9b02      	ldr	r3, [sp, #8]
 8008da0:	2b07      	cmp	r3, #7
 8008da2:	d80d      	bhi.n	8008dc0 <qsort+0x274>
 8008da4:	aa16      	add	r2, sp, #88	; 0x58
 8008da6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008daa:	fbb9 f2f4 	udiv	r2, r9, r4
 8008dae:	f843 6c40 	str.w	r6, [r3, #-64]
 8008db2:	f843 2c3c 	str.w	r2, [r3, #-60]
 8008db6:	9b02      	ldr	r3, [sp, #8]
 8008db8:	3301      	adds	r3, #1
 8008dba:	9302      	str	r3, [sp, #8]
 8008dbc:	4606      	mov	r6, r0
 8008dbe:	e6d6      	b.n	8008b6e <qsort+0x22>
 8008dc0:	4653      	mov	r3, sl
 8008dc2:	4622      	mov	r2, r4
 8008dc4:	f7ff fec2 	bl	8008b4c <qsort>
 8008dc8:	45a1      	cmp	r9, r4
 8008dca:	d80b      	bhi.n	8008de4 <qsort+0x298>
 8008dcc:	9b02      	ldr	r3, [sp, #8]
 8008dce:	aa16      	add	r2, sp, #88	; 0x58
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	9302      	str	r3, [sp, #8]
 8008dd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008dd8:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8008ddc:	e7ee      	b.n	8008dbc <qsort+0x270>
 8008dde:	45a1      	cmp	r9, r4
 8008de0:	f67f aed2 	bls.w	8008b88 <qsort+0x3c>
 8008de4:	fbb9 f1f4 	udiv	r1, r9, r4
 8008de8:	4630      	mov	r0, r6
 8008dea:	e7e7      	b.n	8008dbc <qsort+0x270>

08008dec <__cvt>:
 8008dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008df0:	ec55 4b10 	vmov	r4, r5, d0
 8008df4:	2d00      	cmp	r5, #0
 8008df6:	460e      	mov	r6, r1
 8008df8:	4619      	mov	r1, r3
 8008dfa:	462b      	mov	r3, r5
 8008dfc:	bfbb      	ittet	lt
 8008dfe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008e02:	461d      	movlt	r5, r3
 8008e04:	2300      	movge	r3, #0
 8008e06:	232d      	movlt	r3, #45	; 0x2d
 8008e08:	700b      	strb	r3, [r1, #0]
 8008e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008e10:	4691      	mov	r9, r2
 8008e12:	f023 0820 	bic.w	r8, r3, #32
 8008e16:	bfbc      	itt	lt
 8008e18:	4622      	movlt	r2, r4
 8008e1a:	4614      	movlt	r4, r2
 8008e1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e20:	d005      	beq.n	8008e2e <__cvt+0x42>
 8008e22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008e26:	d100      	bne.n	8008e2a <__cvt+0x3e>
 8008e28:	3601      	adds	r6, #1
 8008e2a:	2102      	movs	r1, #2
 8008e2c:	e000      	b.n	8008e30 <__cvt+0x44>
 8008e2e:	2103      	movs	r1, #3
 8008e30:	ab03      	add	r3, sp, #12
 8008e32:	9301      	str	r3, [sp, #4]
 8008e34:	ab02      	add	r3, sp, #8
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	ec45 4b10 	vmov	d0, r4, r5
 8008e3c:	4653      	mov	r3, sl
 8008e3e:	4632      	mov	r2, r6
 8008e40:	f000 ff2a 	bl	8009c98 <_dtoa_r>
 8008e44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008e48:	4607      	mov	r7, r0
 8008e4a:	d102      	bne.n	8008e52 <__cvt+0x66>
 8008e4c:	f019 0f01 	tst.w	r9, #1
 8008e50:	d022      	beq.n	8008e98 <__cvt+0xac>
 8008e52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e56:	eb07 0906 	add.w	r9, r7, r6
 8008e5a:	d110      	bne.n	8008e7e <__cvt+0x92>
 8008e5c:	783b      	ldrb	r3, [r7, #0]
 8008e5e:	2b30      	cmp	r3, #48	; 0x30
 8008e60:	d10a      	bne.n	8008e78 <__cvt+0x8c>
 8008e62:	2200      	movs	r2, #0
 8008e64:	2300      	movs	r3, #0
 8008e66:	4620      	mov	r0, r4
 8008e68:	4629      	mov	r1, r5
 8008e6a:	f7f7 fe4d 	bl	8000b08 <__aeabi_dcmpeq>
 8008e6e:	b918      	cbnz	r0, 8008e78 <__cvt+0x8c>
 8008e70:	f1c6 0601 	rsb	r6, r6, #1
 8008e74:	f8ca 6000 	str.w	r6, [sl]
 8008e78:	f8da 3000 	ldr.w	r3, [sl]
 8008e7c:	4499      	add	r9, r3
 8008e7e:	2200      	movs	r2, #0
 8008e80:	2300      	movs	r3, #0
 8008e82:	4620      	mov	r0, r4
 8008e84:	4629      	mov	r1, r5
 8008e86:	f7f7 fe3f 	bl	8000b08 <__aeabi_dcmpeq>
 8008e8a:	b108      	cbz	r0, 8008e90 <__cvt+0xa4>
 8008e8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e90:	2230      	movs	r2, #48	; 0x30
 8008e92:	9b03      	ldr	r3, [sp, #12]
 8008e94:	454b      	cmp	r3, r9
 8008e96:	d307      	bcc.n	8008ea8 <__cvt+0xbc>
 8008e98:	9b03      	ldr	r3, [sp, #12]
 8008e9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e9c:	1bdb      	subs	r3, r3, r7
 8008e9e:	4638      	mov	r0, r7
 8008ea0:	6013      	str	r3, [r2, #0]
 8008ea2:	b004      	add	sp, #16
 8008ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea8:	1c59      	adds	r1, r3, #1
 8008eaa:	9103      	str	r1, [sp, #12]
 8008eac:	701a      	strb	r2, [r3, #0]
 8008eae:	e7f0      	b.n	8008e92 <__cvt+0xa6>

08008eb0 <__exponent>:
 8008eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2900      	cmp	r1, #0
 8008eb6:	bfb8      	it	lt
 8008eb8:	4249      	neglt	r1, r1
 8008eba:	f803 2b02 	strb.w	r2, [r3], #2
 8008ebe:	bfb4      	ite	lt
 8008ec0:	222d      	movlt	r2, #45	; 0x2d
 8008ec2:	222b      	movge	r2, #43	; 0x2b
 8008ec4:	2909      	cmp	r1, #9
 8008ec6:	7042      	strb	r2, [r0, #1]
 8008ec8:	dd2a      	ble.n	8008f20 <__exponent+0x70>
 8008eca:	f10d 0207 	add.w	r2, sp, #7
 8008ece:	4617      	mov	r7, r2
 8008ed0:	260a      	movs	r6, #10
 8008ed2:	4694      	mov	ip, r2
 8008ed4:	fb91 f5f6 	sdiv	r5, r1, r6
 8008ed8:	fb06 1415 	mls	r4, r6, r5, r1
 8008edc:	3430      	adds	r4, #48	; 0x30
 8008ede:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	2c63      	cmp	r4, #99	; 0x63
 8008ee6:	f102 32ff 	add.w	r2, r2, #4294967295
 8008eea:	4629      	mov	r1, r5
 8008eec:	dcf1      	bgt.n	8008ed2 <__exponent+0x22>
 8008eee:	3130      	adds	r1, #48	; 0x30
 8008ef0:	f1ac 0402 	sub.w	r4, ip, #2
 8008ef4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008ef8:	1c41      	adds	r1, r0, #1
 8008efa:	4622      	mov	r2, r4
 8008efc:	42ba      	cmp	r2, r7
 8008efe:	d30a      	bcc.n	8008f16 <__exponent+0x66>
 8008f00:	f10d 0209 	add.w	r2, sp, #9
 8008f04:	eba2 020c 	sub.w	r2, r2, ip
 8008f08:	42bc      	cmp	r4, r7
 8008f0a:	bf88      	it	hi
 8008f0c:	2200      	movhi	r2, #0
 8008f0e:	4413      	add	r3, r2
 8008f10:	1a18      	subs	r0, r3, r0
 8008f12:	b003      	add	sp, #12
 8008f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f16:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008f1a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008f1e:	e7ed      	b.n	8008efc <__exponent+0x4c>
 8008f20:	2330      	movs	r3, #48	; 0x30
 8008f22:	3130      	adds	r1, #48	; 0x30
 8008f24:	7083      	strb	r3, [r0, #2]
 8008f26:	70c1      	strb	r1, [r0, #3]
 8008f28:	1d03      	adds	r3, r0, #4
 8008f2a:	e7f1      	b.n	8008f10 <__exponent+0x60>

08008f2c <_printf_float>:
 8008f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f30:	ed2d 8b02 	vpush	{d8}
 8008f34:	b08d      	sub	sp, #52	; 0x34
 8008f36:	460c      	mov	r4, r1
 8008f38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008f3c:	4616      	mov	r6, r2
 8008f3e:	461f      	mov	r7, r3
 8008f40:	4605      	mov	r5, r0
 8008f42:	f000 fd67 	bl	8009a14 <_localeconv_r>
 8008f46:	f8d0 a000 	ldr.w	sl, [r0]
 8008f4a:	4650      	mov	r0, sl
 8008f4c:	f7f7 f9b0 	bl	80002b0 <strlen>
 8008f50:	2300      	movs	r3, #0
 8008f52:	930a      	str	r3, [sp, #40]	; 0x28
 8008f54:	6823      	ldr	r3, [r4, #0]
 8008f56:	9305      	str	r3, [sp, #20]
 8008f58:	f8d8 3000 	ldr.w	r3, [r8]
 8008f5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008f60:	3307      	adds	r3, #7
 8008f62:	f023 0307 	bic.w	r3, r3, #7
 8008f66:	f103 0208 	add.w	r2, r3, #8
 8008f6a:	f8c8 2000 	str.w	r2, [r8]
 8008f6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f76:	9307      	str	r3, [sp, #28]
 8008f78:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f7c:	ee08 0a10 	vmov	s16, r0
 8008f80:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008f84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f88:	4b9e      	ldr	r3, [pc, #632]	; (8009204 <_printf_float+0x2d8>)
 8008f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f8e:	f7f7 fded 	bl	8000b6c <__aeabi_dcmpun>
 8008f92:	bb88      	cbnz	r0, 8008ff8 <_printf_float+0xcc>
 8008f94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f98:	4b9a      	ldr	r3, [pc, #616]	; (8009204 <_printf_float+0x2d8>)
 8008f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f9e:	f7f7 fdc7 	bl	8000b30 <__aeabi_dcmple>
 8008fa2:	bb48      	cbnz	r0, 8008ff8 <_printf_float+0xcc>
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	4640      	mov	r0, r8
 8008faa:	4649      	mov	r1, r9
 8008fac:	f7f7 fdb6 	bl	8000b1c <__aeabi_dcmplt>
 8008fb0:	b110      	cbz	r0, 8008fb8 <_printf_float+0x8c>
 8008fb2:	232d      	movs	r3, #45	; 0x2d
 8008fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fb8:	4a93      	ldr	r2, [pc, #588]	; (8009208 <_printf_float+0x2dc>)
 8008fba:	4b94      	ldr	r3, [pc, #592]	; (800920c <_printf_float+0x2e0>)
 8008fbc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008fc0:	bf94      	ite	ls
 8008fc2:	4690      	movls	r8, r2
 8008fc4:	4698      	movhi	r8, r3
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	6123      	str	r3, [r4, #16]
 8008fca:	9b05      	ldr	r3, [sp, #20]
 8008fcc:	f023 0304 	bic.w	r3, r3, #4
 8008fd0:	6023      	str	r3, [r4, #0]
 8008fd2:	f04f 0900 	mov.w	r9, #0
 8008fd6:	9700      	str	r7, [sp, #0]
 8008fd8:	4633      	mov	r3, r6
 8008fda:	aa0b      	add	r2, sp, #44	; 0x2c
 8008fdc:	4621      	mov	r1, r4
 8008fde:	4628      	mov	r0, r5
 8008fe0:	f000 f9da 	bl	8009398 <_printf_common>
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	f040 8090 	bne.w	800910a <_printf_float+0x1de>
 8008fea:	f04f 30ff 	mov.w	r0, #4294967295
 8008fee:	b00d      	add	sp, #52	; 0x34
 8008ff0:	ecbd 8b02 	vpop	{d8}
 8008ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff8:	4642      	mov	r2, r8
 8008ffa:	464b      	mov	r3, r9
 8008ffc:	4640      	mov	r0, r8
 8008ffe:	4649      	mov	r1, r9
 8009000:	f7f7 fdb4 	bl	8000b6c <__aeabi_dcmpun>
 8009004:	b140      	cbz	r0, 8009018 <_printf_float+0xec>
 8009006:	464b      	mov	r3, r9
 8009008:	2b00      	cmp	r3, #0
 800900a:	bfbc      	itt	lt
 800900c:	232d      	movlt	r3, #45	; 0x2d
 800900e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009012:	4a7f      	ldr	r2, [pc, #508]	; (8009210 <_printf_float+0x2e4>)
 8009014:	4b7f      	ldr	r3, [pc, #508]	; (8009214 <_printf_float+0x2e8>)
 8009016:	e7d1      	b.n	8008fbc <_printf_float+0x90>
 8009018:	6863      	ldr	r3, [r4, #4]
 800901a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800901e:	9206      	str	r2, [sp, #24]
 8009020:	1c5a      	adds	r2, r3, #1
 8009022:	d13f      	bne.n	80090a4 <_printf_float+0x178>
 8009024:	2306      	movs	r3, #6
 8009026:	6063      	str	r3, [r4, #4]
 8009028:	9b05      	ldr	r3, [sp, #20]
 800902a:	6861      	ldr	r1, [r4, #4]
 800902c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009030:	2300      	movs	r3, #0
 8009032:	9303      	str	r3, [sp, #12]
 8009034:	ab0a      	add	r3, sp, #40	; 0x28
 8009036:	e9cd b301 	strd	fp, r3, [sp, #4]
 800903a:	ab09      	add	r3, sp, #36	; 0x24
 800903c:	ec49 8b10 	vmov	d0, r8, r9
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	6022      	str	r2, [r4, #0]
 8009044:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009048:	4628      	mov	r0, r5
 800904a:	f7ff fecf 	bl	8008dec <__cvt>
 800904e:	9b06      	ldr	r3, [sp, #24]
 8009050:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009052:	2b47      	cmp	r3, #71	; 0x47
 8009054:	4680      	mov	r8, r0
 8009056:	d108      	bne.n	800906a <_printf_float+0x13e>
 8009058:	1cc8      	adds	r0, r1, #3
 800905a:	db02      	blt.n	8009062 <_printf_float+0x136>
 800905c:	6863      	ldr	r3, [r4, #4]
 800905e:	4299      	cmp	r1, r3
 8009060:	dd41      	ble.n	80090e6 <_printf_float+0x1ba>
 8009062:	f1ab 0302 	sub.w	r3, fp, #2
 8009066:	fa5f fb83 	uxtb.w	fp, r3
 800906a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800906e:	d820      	bhi.n	80090b2 <_printf_float+0x186>
 8009070:	3901      	subs	r1, #1
 8009072:	465a      	mov	r2, fp
 8009074:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009078:	9109      	str	r1, [sp, #36]	; 0x24
 800907a:	f7ff ff19 	bl	8008eb0 <__exponent>
 800907e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009080:	1813      	adds	r3, r2, r0
 8009082:	2a01      	cmp	r2, #1
 8009084:	4681      	mov	r9, r0
 8009086:	6123      	str	r3, [r4, #16]
 8009088:	dc02      	bgt.n	8009090 <_printf_float+0x164>
 800908a:	6822      	ldr	r2, [r4, #0]
 800908c:	07d2      	lsls	r2, r2, #31
 800908e:	d501      	bpl.n	8009094 <_printf_float+0x168>
 8009090:	3301      	adds	r3, #1
 8009092:	6123      	str	r3, [r4, #16]
 8009094:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009098:	2b00      	cmp	r3, #0
 800909a:	d09c      	beq.n	8008fd6 <_printf_float+0xaa>
 800909c:	232d      	movs	r3, #45	; 0x2d
 800909e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090a2:	e798      	b.n	8008fd6 <_printf_float+0xaa>
 80090a4:	9a06      	ldr	r2, [sp, #24]
 80090a6:	2a47      	cmp	r2, #71	; 0x47
 80090a8:	d1be      	bne.n	8009028 <_printf_float+0xfc>
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1bc      	bne.n	8009028 <_printf_float+0xfc>
 80090ae:	2301      	movs	r3, #1
 80090b0:	e7b9      	b.n	8009026 <_printf_float+0xfa>
 80090b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80090b6:	d118      	bne.n	80090ea <_printf_float+0x1be>
 80090b8:	2900      	cmp	r1, #0
 80090ba:	6863      	ldr	r3, [r4, #4]
 80090bc:	dd0b      	ble.n	80090d6 <_printf_float+0x1aa>
 80090be:	6121      	str	r1, [r4, #16]
 80090c0:	b913      	cbnz	r3, 80090c8 <_printf_float+0x19c>
 80090c2:	6822      	ldr	r2, [r4, #0]
 80090c4:	07d0      	lsls	r0, r2, #31
 80090c6:	d502      	bpl.n	80090ce <_printf_float+0x1a2>
 80090c8:	3301      	adds	r3, #1
 80090ca:	440b      	add	r3, r1
 80090cc:	6123      	str	r3, [r4, #16]
 80090ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80090d0:	f04f 0900 	mov.w	r9, #0
 80090d4:	e7de      	b.n	8009094 <_printf_float+0x168>
 80090d6:	b913      	cbnz	r3, 80090de <_printf_float+0x1b2>
 80090d8:	6822      	ldr	r2, [r4, #0]
 80090da:	07d2      	lsls	r2, r2, #31
 80090dc:	d501      	bpl.n	80090e2 <_printf_float+0x1b6>
 80090de:	3302      	adds	r3, #2
 80090e0:	e7f4      	b.n	80090cc <_printf_float+0x1a0>
 80090e2:	2301      	movs	r3, #1
 80090e4:	e7f2      	b.n	80090cc <_printf_float+0x1a0>
 80090e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80090ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090ec:	4299      	cmp	r1, r3
 80090ee:	db05      	blt.n	80090fc <_printf_float+0x1d0>
 80090f0:	6823      	ldr	r3, [r4, #0]
 80090f2:	6121      	str	r1, [r4, #16]
 80090f4:	07d8      	lsls	r0, r3, #31
 80090f6:	d5ea      	bpl.n	80090ce <_printf_float+0x1a2>
 80090f8:	1c4b      	adds	r3, r1, #1
 80090fa:	e7e7      	b.n	80090cc <_printf_float+0x1a0>
 80090fc:	2900      	cmp	r1, #0
 80090fe:	bfd4      	ite	le
 8009100:	f1c1 0202 	rsble	r2, r1, #2
 8009104:	2201      	movgt	r2, #1
 8009106:	4413      	add	r3, r2
 8009108:	e7e0      	b.n	80090cc <_printf_float+0x1a0>
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	055a      	lsls	r2, r3, #21
 800910e:	d407      	bmi.n	8009120 <_printf_float+0x1f4>
 8009110:	6923      	ldr	r3, [r4, #16]
 8009112:	4642      	mov	r2, r8
 8009114:	4631      	mov	r1, r6
 8009116:	4628      	mov	r0, r5
 8009118:	47b8      	blx	r7
 800911a:	3001      	adds	r0, #1
 800911c:	d12c      	bne.n	8009178 <_printf_float+0x24c>
 800911e:	e764      	b.n	8008fea <_printf_float+0xbe>
 8009120:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009124:	f240 80e0 	bls.w	80092e8 <_printf_float+0x3bc>
 8009128:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800912c:	2200      	movs	r2, #0
 800912e:	2300      	movs	r3, #0
 8009130:	f7f7 fcea 	bl	8000b08 <__aeabi_dcmpeq>
 8009134:	2800      	cmp	r0, #0
 8009136:	d034      	beq.n	80091a2 <_printf_float+0x276>
 8009138:	4a37      	ldr	r2, [pc, #220]	; (8009218 <_printf_float+0x2ec>)
 800913a:	2301      	movs	r3, #1
 800913c:	4631      	mov	r1, r6
 800913e:	4628      	mov	r0, r5
 8009140:	47b8      	blx	r7
 8009142:	3001      	adds	r0, #1
 8009144:	f43f af51 	beq.w	8008fea <_printf_float+0xbe>
 8009148:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800914c:	429a      	cmp	r2, r3
 800914e:	db02      	blt.n	8009156 <_printf_float+0x22a>
 8009150:	6823      	ldr	r3, [r4, #0]
 8009152:	07d8      	lsls	r0, r3, #31
 8009154:	d510      	bpl.n	8009178 <_printf_float+0x24c>
 8009156:	ee18 3a10 	vmov	r3, s16
 800915a:	4652      	mov	r2, sl
 800915c:	4631      	mov	r1, r6
 800915e:	4628      	mov	r0, r5
 8009160:	47b8      	blx	r7
 8009162:	3001      	adds	r0, #1
 8009164:	f43f af41 	beq.w	8008fea <_printf_float+0xbe>
 8009168:	f04f 0800 	mov.w	r8, #0
 800916c:	f104 091a 	add.w	r9, r4, #26
 8009170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009172:	3b01      	subs	r3, #1
 8009174:	4543      	cmp	r3, r8
 8009176:	dc09      	bgt.n	800918c <_printf_float+0x260>
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	079b      	lsls	r3, r3, #30
 800917c:	f100 8107 	bmi.w	800938e <_printf_float+0x462>
 8009180:	68e0      	ldr	r0, [r4, #12]
 8009182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009184:	4298      	cmp	r0, r3
 8009186:	bfb8      	it	lt
 8009188:	4618      	movlt	r0, r3
 800918a:	e730      	b.n	8008fee <_printf_float+0xc2>
 800918c:	2301      	movs	r3, #1
 800918e:	464a      	mov	r2, r9
 8009190:	4631      	mov	r1, r6
 8009192:	4628      	mov	r0, r5
 8009194:	47b8      	blx	r7
 8009196:	3001      	adds	r0, #1
 8009198:	f43f af27 	beq.w	8008fea <_printf_float+0xbe>
 800919c:	f108 0801 	add.w	r8, r8, #1
 80091a0:	e7e6      	b.n	8009170 <_printf_float+0x244>
 80091a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	dc39      	bgt.n	800921c <_printf_float+0x2f0>
 80091a8:	4a1b      	ldr	r2, [pc, #108]	; (8009218 <_printf_float+0x2ec>)
 80091aa:	2301      	movs	r3, #1
 80091ac:	4631      	mov	r1, r6
 80091ae:	4628      	mov	r0, r5
 80091b0:	47b8      	blx	r7
 80091b2:	3001      	adds	r0, #1
 80091b4:	f43f af19 	beq.w	8008fea <_printf_float+0xbe>
 80091b8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80091bc:	4313      	orrs	r3, r2
 80091be:	d102      	bne.n	80091c6 <_printf_float+0x29a>
 80091c0:	6823      	ldr	r3, [r4, #0]
 80091c2:	07d9      	lsls	r1, r3, #31
 80091c4:	d5d8      	bpl.n	8009178 <_printf_float+0x24c>
 80091c6:	ee18 3a10 	vmov	r3, s16
 80091ca:	4652      	mov	r2, sl
 80091cc:	4631      	mov	r1, r6
 80091ce:	4628      	mov	r0, r5
 80091d0:	47b8      	blx	r7
 80091d2:	3001      	adds	r0, #1
 80091d4:	f43f af09 	beq.w	8008fea <_printf_float+0xbe>
 80091d8:	f04f 0900 	mov.w	r9, #0
 80091dc:	f104 0a1a 	add.w	sl, r4, #26
 80091e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091e2:	425b      	negs	r3, r3
 80091e4:	454b      	cmp	r3, r9
 80091e6:	dc01      	bgt.n	80091ec <_printf_float+0x2c0>
 80091e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ea:	e792      	b.n	8009112 <_printf_float+0x1e6>
 80091ec:	2301      	movs	r3, #1
 80091ee:	4652      	mov	r2, sl
 80091f0:	4631      	mov	r1, r6
 80091f2:	4628      	mov	r0, r5
 80091f4:	47b8      	blx	r7
 80091f6:	3001      	adds	r0, #1
 80091f8:	f43f aef7 	beq.w	8008fea <_printf_float+0xbe>
 80091fc:	f109 0901 	add.w	r9, r9, #1
 8009200:	e7ee      	b.n	80091e0 <_printf_float+0x2b4>
 8009202:	bf00      	nop
 8009204:	7fefffff 	.word	0x7fefffff
 8009208:	0800c831 	.word	0x0800c831
 800920c:	0800c835 	.word	0x0800c835
 8009210:	0800c839 	.word	0x0800c839
 8009214:	0800c83d 	.word	0x0800c83d
 8009218:	0800c841 	.word	0x0800c841
 800921c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800921e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009220:	429a      	cmp	r2, r3
 8009222:	bfa8      	it	ge
 8009224:	461a      	movge	r2, r3
 8009226:	2a00      	cmp	r2, #0
 8009228:	4691      	mov	r9, r2
 800922a:	dc37      	bgt.n	800929c <_printf_float+0x370>
 800922c:	f04f 0b00 	mov.w	fp, #0
 8009230:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009234:	f104 021a 	add.w	r2, r4, #26
 8009238:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800923a:	9305      	str	r3, [sp, #20]
 800923c:	eba3 0309 	sub.w	r3, r3, r9
 8009240:	455b      	cmp	r3, fp
 8009242:	dc33      	bgt.n	80092ac <_printf_float+0x380>
 8009244:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009248:	429a      	cmp	r2, r3
 800924a:	db3b      	blt.n	80092c4 <_printf_float+0x398>
 800924c:	6823      	ldr	r3, [r4, #0]
 800924e:	07da      	lsls	r2, r3, #31
 8009250:	d438      	bmi.n	80092c4 <_printf_float+0x398>
 8009252:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009256:	eba2 0903 	sub.w	r9, r2, r3
 800925a:	9b05      	ldr	r3, [sp, #20]
 800925c:	1ad2      	subs	r2, r2, r3
 800925e:	4591      	cmp	r9, r2
 8009260:	bfa8      	it	ge
 8009262:	4691      	movge	r9, r2
 8009264:	f1b9 0f00 	cmp.w	r9, #0
 8009268:	dc35      	bgt.n	80092d6 <_printf_float+0x3aa>
 800926a:	f04f 0800 	mov.w	r8, #0
 800926e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009272:	f104 0a1a 	add.w	sl, r4, #26
 8009276:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800927a:	1a9b      	subs	r3, r3, r2
 800927c:	eba3 0309 	sub.w	r3, r3, r9
 8009280:	4543      	cmp	r3, r8
 8009282:	f77f af79 	ble.w	8009178 <_printf_float+0x24c>
 8009286:	2301      	movs	r3, #1
 8009288:	4652      	mov	r2, sl
 800928a:	4631      	mov	r1, r6
 800928c:	4628      	mov	r0, r5
 800928e:	47b8      	blx	r7
 8009290:	3001      	adds	r0, #1
 8009292:	f43f aeaa 	beq.w	8008fea <_printf_float+0xbe>
 8009296:	f108 0801 	add.w	r8, r8, #1
 800929a:	e7ec      	b.n	8009276 <_printf_float+0x34a>
 800929c:	4613      	mov	r3, r2
 800929e:	4631      	mov	r1, r6
 80092a0:	4642      	mov	r2, r8
 80092a2:	4628      	mov	r0, r5
 80092a4:	47b8      	blx	r7
 80092a6:	3001      	adds	r0, #1
 80092a8:	d1c0      	bne.n	800922c <_printf_float+0x300>
 80092aa:	e69e      	b.n	8008fea <_printf_float+0xbe>
 80092ac:	2301      	movs	r3, #1
 80092ae:	4631      	mov	r1, r6
 80092b0:	4628      	mov	r0, r5
 80092b2:	9205      	str	r2, [sp, #20]
 80092b4:	47b8      	blx	r7
 80092b6:	3001      	adds	r0, #1
 80092b8:	f43f ae97 	beq.w	8008fea <_printf_float+0xbe>
 80092bc:	9a05      	ldr	r2, [sp, #20]
 80092be:	f10b 0b01 	add.w	fp, fp, #1
 80092c2:	e7b9      	b.n	8009238 <_printf_float+0x30c>
 80092c4:	ee18 3a10 	vmov	r3, s16
 80092c8:	4652      	mov	r2, sl
 80092ca:	4631      	mov	r1, r6
 80092cc:	4628      	mov	r0, r5
 80092ce:	47b8      	blx	r7
 80092d0:	3001      	adds	r0, #1
 80092d2:	d1be      	bne.n	8009252 <_printf_float+0x326>
 80092d4:	e689      	b.n	8008fea <_printf_float+0xbe>
 80092d6:	9a05      	ldr	r2, [sp, #20]
 80092d8:	464b      	mov	r3, r9
 80092da:	4442      	add	r2, r8
 80092dc:	4631      	mov	r1, r6
 80092de:	4628      	mov	r0, r5
 80092e0:	47b8      	blx	r7
 80092e2:	3001      	adds	r0, #1
 80092e4:	d1c1      	bne.n	800926a <_printf_float+0x33e>
 80092e6:	e680      	b.n	8008fea <_printf_float+0xbe>
 80092e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092ea:	2a01      	cmp	r2, #1
 80092ec:	dc01      	bgt.n	80092f2 <_printf_float+0x3c6>
 80092ee:	07db      	lsls	r3, r3, #31
 80092f0:	d53a      	bpl.n	8009368 <_printf_float+0x43c>
 80092f2:	2301      	movs	r3, #1
 80092f4:	4642      	mov	r2, r8
 80092f6:	4631      	mov	r1, r6
 80092f8:	4628      	mov	r0, r5
 80092fa:	47b8      	blx	r7
 80092fc:	3001      	adds	r0, #1
 80092fe:	f43f ae74 	beq.w	8008fea <_printf_float+0xbe>
 8009302:	ee18 3a10 	vmov	r3, s16
 8009306:	4652      	mov	r2, sl
 8009308:	4631      	mov	r1, r6
 800930a:	4628      	mov	r0, r5
 800930c:	47b8      	blx	r7
 800930e:	3001      	adds	r0, #1
 8009310:	f43f ae6b 	beq.w	8008fea <_printf_float+0xbe>
 8009314:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009318:	2200      	movs	r2, #0
 800931a:	2300      	movs	r3, #0
 800931c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009320:	f7f7 fbf2 	bl	8000b08 <__aeabi_dcmpeq>
 8009324:	b9d8      	cbnz	r0, 800935e <_printf_float+0x432>
 8009326:	f10a 33ff 	add.w	r3, sl, #4294967295
 800932a:	f108 0201 	add.w	r2, r8, #1
 800932e:	4631      	mov	r1, r6
 8009330:	4628      	mov	r0, r5
 8009332:	47b8      	blx	r7
 8009334:	3001      	adds	r0, #1
 8009336:	d10e      	bne.n	8009356 <_printf_float+0x42a>
 8009338:	e657      	b.n	8008fea <_printf_float+0xbe>
 800933a:	2301      	movs	r3, #1
 800933c:	4652      	mov	r2, sl
 800933e:	4631      	mov	r1, r6
 8009340:	4628      	mov	r0, r5
 8009342:	47b8      	blx	r7
 8009344:	3001      	adds	r0, #1
 8009346:	f43f ae50 	beq.w	8008fea <_printf_float+0xbe>
 800934a:	f108 0801 	add.w	r8, r8, #1
 800934e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009350:	3b01      	subs	r3, #1
 8009352:	4543      	cmp	r3, r8
 8009354:	dcf1      	bgt.n	800933a <_printf_float+0x40e>
 8009356:	464b      	mov	r3, r9
 8009358:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800935c:	e6da      	b.n	8009114 <_printf_float+0x1e8>
 800935e:	f04f 0800 	mov.w	r8, #0
 8009362:	f104 0a1a 	add.w	sl, r4, #26
 8009366:	e7f2      	b.n	800934e <_printf_float+0x422>
 8009368:	2301      	movs	r3, #1
 800936a:	4642      	mov	r2, r8
 800936c:	e7df      	b.n	800932e <_printf_float+0x402>
 800936e:	2301      	movs	r3, #1
 8009370:	464a      	mov	r2, r9
 8009372:	4631      	mov	r1, r6
 8009374:	4628      	mov	r0, r5
 8009376:	47b8      	blx	r7
 8009378:	3001      	adds	r0, #1
 800937a:	f43f ae36 	beq.w	8008fea <_printf_float+0xbe>
 800937e:	f108 0801 	add.w	r8, r8, #1
 8009382:	68e3      	ldr	r3, [r4, #12]
 8009384:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009386:	1a5b      	subs	r3, r3, r1
 8009388:	4543      	cmp	r3, r8
 800938a:	dcf0      	bgt.n	800936e <_printf_float+0x442>
 800938c:	e6f8      	b.n	8009180 <_printf_float+0x254>
 800938e:	f04f 0800 	mov.w	r8, #0
 8009392:	f104 0919 	add.w	r9, r4, #25
 8009396:	e7f4      	b.n	8009382 <_printf_float+0x456>

08009398 <_printf_common>:
 8009398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800939c:	4616      	mov	r6, r2
 800939e:	4699      	mov	r9, r3
 80093a0:	688a      	ldr	r2, [r1, #8]
 80093a2:	690b      	ldr	r3, [r1, #16]
 80093a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093a8:	4293      	cmp	r3, r2
 80093aa:	bfb8      	it	lt
 80093ac:	4613      	movlt	r3, r2
 80093ae:	6033      	str	r3, [r6, #0]
 80093b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093b4:	4607      	mov	r7, r0
 80093b6:	460c      	mov	r4, r1
 80093b8:	b10a      	cbz	r2, 80093be <_printf_common+0x26>
 80093ba:	3301      	adds	r3, #1
 80093bc:	6033      	str	r3, [r6, #0]
 80093be:	6823      	ldr	r3, [r4, #0]
 80093c0:	0699      	lsls	r1, r3, #26
 80093c2:	bf42      	ittt	mi
 80093c4:	6833      	ldrmi	r3, [r6, #0]
 80093c6:	3302      	addmi	r3, #2
 80093c8:	6033      	strmi	r3, [r6, #0]
 80093ca:	6825      	ldr	r5, [r4, #0]
 80093cc:	f015 0506 	ands.w	r5, r5, #6
 80093d0:	d106      	bne.n	80093e0 <_printf_common+0x48>
 80093d2:	f104 0a19 	add.w	sl, r4, #25
 80093d6:	68e3      	ldr	r3, [r4, #12]
 80093d8:	6832      	ldr	r2, [r6, #0]
 80093da:	1a9b      	subs	r3, r3, r2
 80093dc:	42ab      	cmp	r3, r5
 80093de:	dc26      	bgt.n	800942e <_printf_common+0x96>
 80093e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093e4:	1e13      	subs	r3, r2, #0
 80093e6:	6822      	ldr	r2, [r4, #0]
 80093e8:	bf18      	it	ne
 80093ea:	2301      	movne	r3, #1
 80093ec:	0692      	lsls	r2, r2, #26
 80093ee:	d42b      	bmi.n	8009448 <_printf_common+0xb0>
 80093f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093f4:	4649      	mov	r1, r9
 80093f6:	4638      	mov	r0, r7
 80093f8:	47c0      	blx	r8
 80093fa:	3001      	adds	r0, #1
 80093fc:	d01e      	beq.n	800943c <_printf_common+0xa4>
 80093fe:	6823      	ldr	r3, [r4, #0]
 8009400:	6922      	ldr	r2, [r4, #16]
 8009402:	f003 0306 	and.w	r3, r3, #6
 8009406:	2b04      	cmp	r3, #4
 8009408:	bf02      	ittt	eq
 800940a:	68e5      	ldreq	r5, [r4, #12]
 800940c:	6833      	ldreq	r3, [r6, #0]
 800940e:	1aed      	subeq	r5, r5, r3
 8009410:	68a3      	ldr	r3, [r4, #8]
 8009412:	bf0c      	ite	eq
 8009414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009418:	2500      	movne	r5, #0
 800941a:	4293      	cmp	r3, r2
 800941c:	bfc4      	itt	gt
 800941e:	1a9b      	subgt	r3, r3, r2
 8009420:	18ed      	addgt	r5, r5, r3
 8009422:	2600      	movs	r6, #0
 8009424:	341a      	adds	r4, #26
 8009426:	42b5      	cmp	r5, r6
 8009428:	d11a      	bne.n	8009460 <_printf_common+0xc8>
 800942a:	2000      	movs	r0, #0
 800942c:	e008      	b.n	8009440 <_printf_common+0xa8>
 800942e:	2301      	movs	r3, #1
 8009430:	4652      	mov	r2, sl
 8009432:	4649      	mov	r1, r9
 8009434:	4638      	mov	r0, r7
 8009436:	47c0      	blx	r8
 8009438:	3001      	adds	r0, #1
 800943a:	d103      	bne.n	8009444 <_printf_common+0xac>
 800943c:	f04f 30ff 	mov.w	r0, #4294967295
 8009440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009444:	3501      	adds	r5, #1
 8009446:	e7c6      	b.n	80093d6 <_printf_common+0x3e>
 8009448:	18e1      	adds	r1, r4, r3
 800944a:	1c5a      	adds	r2, r3, #1
 800944c:	2030      	movs	r0, #48	; 0x30
 800944e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009452:	4422      	add	r2, r4
 8009454:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009458:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800945c:	3302      	adds	r3, #2
 800945e:	e7c7      	b.n	80093f0 <_printf_common+0x58>
 8009460:	2301      	movs	r3, #1
 8009462:	4622      	mov	r2, r4
 8009464:	4649      	mov	r1, r9
 8009466:	4638      	mov	r0, r7
 8009468:	47c0      	blx	r8
 800946a:	3001      	adds	r0, #1
 800946c:	d0e6      	beq.n	800943c <_printf_common+0xa4>
 800946e:	3601      	adds	r6, #1
 8009470:	e7d9      	b.n	8009426 <_printf_common+0x8e>
	...

08009474 <_printf_i>:
 8009474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009478:	7e0f      	ldrb	r7, [r1, #24]
 800947a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800947c:	2f78      	cmp	r7, #120	; 0x78
 800947e:	4691      	mov	r9, r2
 8009480:	4680      	mov	r8, r0
 8009482:	460c      	mov	r4, r1
 8009484:	469a      	mov	sl, r3
 8009486:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800948a:	d807      	bhi.n	800949c <_printf_i+0x28>
 800948c:	2f62      	cmp	r7, #98	; 0x62
 800948e:	d80a      	bhi.n	80094a6 <_printf_i+0x32>
 8009490:	2f00      	cmp	r7, #0
 8009492:	f000 80d4 	beq.w	800963e <_printf_i+0x1ca>
 8009496:	2f58      	cmp	r7, #88	; 0x58
 8009498:	f000 80c0 	beq.w	800961c <_printf_i+0x1a8>
 800949c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094a4:	e03a      	b.n	800951c <_printf_i+0xa8>
 80094a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094aa:	2b15      	cmp	r3, #21
 80094ac:	d8f6      	bhi.n	800949c <_printf_i+0x28>
 80094ae:	a101      	add	r1, pc, #4	; (adr r1, 80094b4 <_printf_i+0x40>)
 80094b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094b4:	0800950d 	.word	0x0800950d
 80094b8:	08009521 	.word	0x08009521
 80094bc:	0800949d 	.word	0x0800949d
 80094c0:	0800949d 	.word	0x0800949d
 80094c4:	0800949d 	.word	0x0800949d
 80094c8:	0800949d 	.word	0x0800949d
 80094cc:	08009521 	.word	0x08009521
 80094d0:	0800949d 	.word	0x0800949d
 80094d4:	0800949d 	.word	0x0800949d
 80094d8:	0800949d 	.word	0x0800949d
 80094dc:	0800949d 	.word	0x0800949d
 80094e0:	08009625 	.word	0x08009625
 80094e4:	0800954d 	.word	0x0800954d
 80094e8:	080095df 	.word	0x080095df
 80094ec:	0800949d 	.word	0x0800949d
 80094f0:	0800949d 	.word	0x0800949d
 80094f4:	08009647 	.word	0x08009647
 80094f8:	0800949d 	.word	0x0800949d
 80094fc:	0800954d 	.word	0x0800954d
 8009500:	0800949d 	.word	0x0800949d
 8009504:	0800949d 	.word	0x0800949d
 8009508:	080095e7 	.word	0x080095e7
 800950c:	682b      	ldr	r3, [r5, #0]
 800950e:	1d1a      	adds	r2, r3, #4
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	602a      	str	r2, [r5, #0]
 8009514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800951c:	2301      	movs	r3, #1
 800951e:	e09f      	b.n	8009660 <_printf_i+0x1ec>
 8009520:	6820      	ldr	r0, [r4, #0]
 8009522:	682b      	ldr	r3, [r5, #0]
 8009524:	0607      	lsls	r7, r0, #24
 8009526:	f103 0104 	add.w	r1, r3, #4
 800952a:	6029      	str	r1, [r5, #0]
 800952c:	d501      	bpl.n	8009532 <_printf_i+0xbe>
 800952e:	681e      	ldr	r6, [r3, #0]
 8009530:	e003      	b.n	800953a <_printf_i+0xc6>
 8009532:	0646      	lsls	r6, r0, #25
 8009534:	d5fb      	bpl.n	800952e <_printf_i+0xba>
 8009536:	f9b3 6000 	ldrsh.w	r6, [r3]
 800953a:	2e00      	cmp	r6, #0
 800953c:	da03      	bge.n	8009546 <_printf_i+0xd2>
 800953e:	232d      	movs	r3, #45	; 0x2d
 8009540:	4276      	negs	r6, r6
 8009542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009546:	485a      	ldr	r0, [pc, #360]	; (80096b0 <_printf_i+0x23c>)
 8009548:	230a      	movs	r3, #10
 800954a:	e012      	b.n	8009572 <_printf_i+0xfe>
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	6820      	ldr	r0, [r4, #0]
 8009550:	1d19      	adds	r1, r3, #4
 8009552:	6029      	str	r1, [r5, #0]
 8009554:	0605      	lsls	r5, r0, #24
 8009556:	d501      	bpl.n	800955c <_printf_i+0xe8>
 8009558:	681e      	ldr	r6, [r3, #0]
 800955a:	e002      	b.n	8009562 <_printf_i+0xee>
 800955c:	0641      	lsls	r1, r0, #25
 800955e:	d5fb      	bpl.n	8009558 <_printf_i+0xe4>
 8009560:	881e      	ldrh	r6, [r3, #0]
 8009562:	4853      	ldr	r0, [pc, #332]	; (80096b0 <_printf_i+0x23c>)
 8009564:	2f6f      	cmp	r7, #111	; 0x6f
 8009566:	bf0c      	ite	eq
 8009568:	2308      	moveq	r3, #8
 800956a:	230a      	movne	r3, #10
 800956c:	2100      	movs	r1, #0
 800956e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009572:	6865      	ldr	r5, [r4, #4]
 8009574:	60a5      	str	r5, [r4, #8]
 8009576:	2d00      	cmp	r5, #0
 8009578:	bfa2      	ittt	ge
 800957a:	6821      	ldrge	r1, [r4, #0]
 800957c:	f021 0104 	bicge.w	r1, r1, #4
 8009580:	6021      	strge	r1, [r4, #0]
 8009582:	b90e      	cbnz	r6, 8009588 <_printf_i+0x114>
 8009584:	2d00      	cmp	r5, #0
 8009586:	d04b      	beq.n	8009620 <_printf_i+0x1ac>
 8009588:	4615      	mov	r5, r2
 800958a:	fbb6 f1f3 	udiv	r1, r6, r3
 800958e:	fb03 6711 	mls	r7, r3, r1, r6
 8009592:	5dc7      	ldrb	r7, [r0, r7]
 8009594:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009598:	4637      	mov	r7, r6
 800959a:	42bb      	cmp	r3, r7
 800959c:	460e      	mov	r6, r1
 800959e:	d9f4      	bls.n	800958a <_printf_i+0x116>
 80095a0:	2b08      	cmp	r3, #8
 80095a2:	d10b      	bne.n	80095bc <_printf_i+0x148>
 80095a4:	6823      	ldr	r3, [r4, #0]
 80095a6:	07de      	lsls	r6, r3, #31
 80095a8:	d508      	bpl.n	80095bc <_printf_i+0x148>
 80095aa:	6923      	ldr	r3, [r4, #16]
 80095ac:	6861      	ldr	r1, [r4, #4]
 80095ae:	4299      	cmp	r1, r3
 80095b0:	bfde      	ittt	le
 80095b2:	2330      	movle	r3, #48	; 0x30
 80095b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80095bc:	1b52      	subs	r2, r2, r5
 80095be:	6122      	str	r2, [r4, #16]
 80095c0:	f8cd a000 	str.w	sl, [sp]
 80095c4:	464b      	mov	r3, r9
 80095c6:	aa03      	add	r2, sp, #12
 80095c8:	4621      	mov	r1, r4
 80095ca:	4640      	mov	r0, r8
 80095cc:	f7ff fee4 	bl	8009398 <_printf_common>
 80095d0:	3001      	adds	r0, #1
 80095d2:	d14a      	bne.n	800966a <_printf_i+0x1f6>
 80095d4:	f04f 30ff 	mov.w	r0, #4294967295
 80095d8:	b004      	add	sp, #16
 80095da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	f043 0320 	orr.w	r3, r3, #32
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	4833      	ldr	r0, [pc, #204]	; (80096b4 <_printf_i+0x240>)
 80095e8:	2778      	movs	r7, #120	; 0x78
 80095ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80095ee:	6823      	ldr	r3, [r4, #0]
 80095f0:	6829      	ldr	r1, [r5, #0]
 80095f2:	061f      	lsls	r7, r3, #24
 80095f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80095f8:	d402      	bmi.n	8009600 <_printf_i+0x18c>
 80095fa:	065f      	lsls	r7, r3, #25
 80095fc:	bf48      	it	mi
 80095fe:	b2b6      	uxthmi	r6, r6
 8009600:	07df      	lsls	r7, r3, #31
 8009602:	bf48      	it	mi
 8009604:	f043 0320 	orrmi.w	r3, r3, #32
 8009608:	6029      	str	r1, [r5, #0]
 800960a:	bf48      	it	mi
 800960c:	6023      	strmi	r3, [r4, #0]
 800960e:	b91e      	cbnz	r6, 8009618 <_printf_i+0x1a4>
 8009610:	6823      	ldr	r3, [r4, #0]
 8009612:	f023 0320 	bic.w	r3, r3, #32
 8009616:	6023      	str	r3, [r4, #0]
 8009618:	2310      	movs	r3, #16
 800961a:	e7a7      	b.n	800956c <_printf_i+0xf8>
 800961c:	4824      	ldr	r0, [pc, #144]	; (80096b0 <_printf_i+0x23c>)
 800961e:	e7e4      	b.n	80095ea <_printf_i+0x176>
 8009620:	4615      	mov	r5, r2
 8009622:	e7bd      	b.n	80095a0 <_printf_i+0x12c>
 8009624:	682b      	ldr	r3, [r5, #0]
 8009626:	6826      	ldr	r6, [r4, #0]
 8009628:	6961      	ldr	r1, [r4, #20]
 800962a:	1d18      	adds	r0, r3, #4
 800962c:	6028      	str	r0, [r5, #0]
 800962e:	0635      	lsls	r5, r6, #24
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	d501      	bpl.n	8009638 <_printf_i+0x1c4>
 8009634:	6019      	str	r1, [r3, #0]
 8009636:	e002      	b.n	800963e <_printf_i+0x1ca>
 8009638:	0670      	lsls	r0, r6, #25
 800963a:	d5fb      	bpl.n	8009634 <_printf_i+0x1c0>
 800963c:	8019      	strh	r1, [r3, #0]
 800963e:	2300      	movs	r3, #0
 8009640:	6123      	str	r3, [r4, #16]
 8009642:	4615      	mov	r5, r2
 8009644:	e7bc      	b.n	80095c0 <_printf_i+0x14c>
 8009646:	682b      	ldr	r3, [r5, #0]
 8009648:	1d1a      	adds	r2, r3, #4
 800964a:	602a      	str	r2, [r5, #0]
 800964c:	681d      	ldr	r5, [r3, #0]
 800964e:	6862      	ldr	r2, [r4, #4]
 8009650:	2100      	movs	r1, #0
 8009652:	4628      	mov	r0, r5
 8009654:	f7f6 fddc 	bl	8000210 <memchr>
 8009658:	b108      	cbz	r0, 800965e <_printf_i+0x1ea>
 800965a:	1b40      	subs	r0, r0, r5
 800965c:	6060      	str	r0, [r4, #4]
 800965e:	6863      	ldr	r3, [r4, #4]
 8009660:	6123      	str	r3, [r4, #16]
 8009662:	2300      	movs	r3, #0
 8009664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009668:	e7aa      	b.n	80095c0 <_printf_i+0x14c>
 800966a:	6923      	ldr	r3, [r4, #16]
 800966c:	462a      	mov	r2, r5
 800966e:	4649      	mov	r1, r9
 8009670:	4640      	mov	r0, r8
 8009672:	47d0      	blx	sl
 8009674:	3001      	adds	r0, #1
 8009676:	d0ad      	beq.n	80095d4 <_printf_i+0x160>
 8009678:	6823      	ldr	r3, [r4, #0]
 800967a:	079b      	lsls	r3, r3, #30
 800967c:	d413      	bmi.n	80096a6 <_printf_i+0x232>
 800967e:	68e0      	ldr	r0, [r4, #12]
 8009680:	9b03      	ldr	r3, [sp, #12]
 8009682:	4298      	cmp	r0, r3
 8009684:	bfb8      	it	lt
 8009686:	4618      	movlt	r0, r3
 8009688:	e7a6      	b.n	80095d8 <_printf_i+0x164>
 800968a:	2301      	movs	r3, #1
 800968c:	4632      	mov	r2, r6
 800968e:	4649      	mov	r1, r9
 8009690:	4640      	mov	r0, r8
 8009692:	47d0      	blx	sl
 8009694:	3001      	adds	r0, #1
 8009696:	d09d      	beq.n	80095d4 <_printf_i+0x160>
 8009698:	3501      	adds	r5, #1
 800969a:	68e3      	ldr	r3, [r4, #12]
 800969c:	9903      	ldr	r1, [sp, #12]
 800969e:	1a5b      	subs	r3, r3, r1
 80096a0:	42ab      	cmp	r3, r5
 80096a2:	dcf2      	bgt.n	800968a <_printf_i+0x216>
 80096a4:	e7eb      	b.n	800967e <_printf_i+0x20a>
 80096a6:	2500      	movs	r5, #0
 80096a8:	f104 0619 	add.w	r6, r4, #25
 80096ac:	e7f5      	b.n	800969a <_printf_i+0x226>
 80096ae:	bf00      	nop
 80096b0:	0800c843 	.word	0x0800c843
 80096b4:	0800c854 	.word	0x0800c854

080096b8 <std>:
 80096b8:	2300      	movs	r3, #0
 80096ba:	b510      	push	{r4, lr}
 80096bc:	4604      	mov	r4, r0
 80096be:	e9c0 3300 	strd	r3, r3, [r0]
 80096c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096c6:	6083      	str	r3, [r0, #8]
 80096c8:	8181      	strh	r1, [r0, #12]
 80096ca:	6643      	str	r3, [r0, #100]	; 0x64
 80096cc:	81c2      	strh	r2, [r0, #14]
 80096ce:	6183      	str	r3, [r0, #24]
 80096d0:	4619      	mov	r1, r3
 80096d2:	2208      	movs	r2, #8
 80096d4:	305c      	adds	r0, #92	; 0x5c
 80096d6:	f000 f952 	bl	800997e <memset>
 80096da:	4b0d      	ldr	r3, [pc, #52]	; (8009710 <std+0x58>)
 80096dc:	6263      	str	r3, [r4, #36]	; 0x24
 80096de:	4b0d      	ldr	r3, [pc, #52]	; (8009714 <std+0x5c>)
 80096e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80096e2:	4b0d      	ldr	r3, [pc, #52]	; (8009718 <std+0x60>)
 80096e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096e6:	4b0d      	ldr	r3, [pc, #52]	; (800971c <std+0x64>)
 80096e8:	6323      	str	r3, [r4, #48]	; 0x30
 80096ea:	4b0d      	ldr	r3, [pc, #52]	; (8009720 <std+0x68>)
 80096ec:	6224      	str	r4, [r4, #32]
 80096ee:	429c      	cmp	r4, r3
 80096f0:	d006      	beq.n	8009700 <std+0x48>
 80096f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80096f6:	4294      	cmp	r4, r2
 80096f8:	d002      	beq.n	8009700 <std+0x48>
 80096fa:	33d0      	adds	r3, #208	; 0xd0
 80096fc:	429c      	cmp	r4, r3
 80096fe:	d105      	bne.n	800970c <std+0x54>
 8009700:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009708:	f000 ba1c 	b.w	8009b44 <__retarget_lock_init_recursive>
 800970c:	bd10      	pop	{r4, pc}
 800970e:	bf00      	nop
 8009710:	080098a5 	.word	0x080098a5
 8009714:	080098c7 	.word	0x080098c7
 8009718:	080098ff 	.word	0x080098ff
 800971c:	08009923 	.word	0x08009923
 8009720:	20002b70 	.word	0x20002b70

08009724 <stdio_exit_handler>:
 8009724:	4a02      	ldr	r2, [pc, #8]	; (8009730 <stdio_exit_handler+0xc>)
 8009726:	4903      	ldr	r1, [pc, #12]	; (8009734 <stdio_exit_handler+0x10>)
 8009728:	4803      	ldr	r0, [pc, #12]	; (8009738 <stdio_exit_handler+0x14>)
 800972a:	f000 b869 	b.w	8009800 <_fwalk_sglue>
 800972e:	bf00      	nop
 8009730:	20000028 	.word	0x20000028
 8009734:	0800bd19 	.word	0x0800bd19
 8009738:	200001a0 	.word	0x200001a0

0800973c <cleanup_stdio>:
 800973c:	6841      	ldr	r1, [r0, #4]
 800973e:	4b0c      	ldr	r3, [pc, #48]	; (8009770 <cleanup_stdio+0x34>)
 8009740:	4299      	cmp	r1, r3
 8009742:	b510      	push	{r4, lr}
 8009744:	4604      	mov	r4, r0
 8009746:	d001      	beq.n	800974c <cleanup_stdio+0x10>
 8009748:	f002 fae6 	bl	800bd18 <_fflush_r>
 800974c:	68a1      	ldr	r1, [r4, #8]
 800974e:	4b09      	ldr	r3, [pc, #36]	; (8009774 <cleanup_stdio+0x38>)
 8009750:	4299      	cmp	r1, r3
 8009752:	d002      	beq.n	800975a <cleanup_stdio+0x1e>
 8009754:	4620      	mov	r0, r4
 8009756:	f002 fadf 	bl	800bd18 <_fflush_r>
 800975a:	68e1      	ldr	r1, [r4, #12]
 800975c:	4b06      	ldr	r3, [pc, #24]	; (8009778 <cleanup_stdio+0x3c>)
 800975e:	4299      	cmp	r1, r3
 8009760:	d004      	beq.n	800976c <cleanup_stdio+0x30>
 8009762:	4620      	mov	r0, r4
 8009764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009768:	f002 bad6 	b.w	800bd18 <_fflush_r>
 800976c:	bd10      	pop	{r4, pc}
 800976e:	bf00      	nop
 8009770:	20002b70 	.word	0x20002b70
 8009774:	20002bd8 	.word	0x20002bd8
 8009778:	20002c40 	.word	0x20002c40

0800977c <global_stdio_init.part.0>:
 800977c:	b510      	push	{r4, lr}
 800977e:	4b0b      	ldr	r3, [pc, #44]	; (80097ac <global_stdio_init.part.0+0x30>)
 8009780:	4c0b      	ldr	r4, [pc, #44]	; (80097b0 <global_stdio_init.part.0+0x34>)
 8009782:	4a0c      	ldr	r2, [pc, #48]	; (80097b4 <global_stdio_init.part.0+0x38>)
 8009784:	601a      	str	r2, [r3, #0]
 8009786:	4620      	mov	r0, r4
 8009788:	2200      	movs	r2, #0
 800978a:	2104      	movs	r1, #4
 800978c:	f7ff ff94 	bl	80096b8 <std>
 8009790:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009794:	2201      	movs	r2, #1
 8009796:	2109      	movs	r1, #9
 8009798:	f7ff ff8e 	bl	80096b8 <std>
 800979c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80097a0:	2202      	movs	r2, #2
 80097a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097a6:	2112      	movs	r1, #18
 80097a8:	f7ff bf86 	b.w	80096b8 <std>
 80097ac:	20002ca8 	.word	0x20002ca8
 80097b0:	20002b70 	.word	0x20002b70
 80097b4:	08009725 	.word	0x08009725

080097b8 <__sfp_lock_acquire>:
 80097b8:	4801      	ldr	r0, [pc, #4]	; (80097c0 <__sfp_lock_acquire+0x8>)
 80097ba:	f000 b9c4 	b.w	8009b46 <__retarget_lock_acquire_recursive>
 80097be:	bf00      	nop
 80097c0:	20002cb1 	.word	0x20002cb1

080097c4 <__sfp_lock_release>:
 80097c4:	4801      	ldr	r0, [pc, #4]	; (80097cc <__sfp_lock_release+0x8>)
 80097c6:	f000 b9bf 	b.w	8009b48 <__retarget_lock_release_recursive>
 80097ca:	bf00      	nop
 80097cc:	20002cb1 	.word	0x20002cb1

080097d0 <__sinit>:
 80097d0:	b510      	push	{r4, lr}
 80097d2:	4604      	mov	r4, r0
 80097d4:	f7ff fff0 	bl	80097b8 <__sfp_lock_acquire>
 80097d8:	6a23      	ldr	r3, [r4, #32]
 80097da:	b11b      	cbz	r3, 80097e4 <__sinit+0x14>
 80097dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097e0:	f7ff bff0 	b.w	80097c4 <__sfp_lock_release>
 80097e4:	4b04      	ldr	r3, [pc, #16]	; (80097f8 <__sinit+0x28>)
 80097e6:	6223      	str	r3, [r4, #32]
 80097e8:	4b04      	ldr	r3, [pc, #16]	; (80097fc <__sinit+0x2c>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d1f5      	bne.n	80097dc <__sinit+0xc>
 80097f0:	f7ff ffc4 	bl	800977c <global_stdio_init.part.0>
 80097f4:	e7f2      	b.n	80097dc <__sinit+0xc>
 80097f6:	bf00      	nop
 80097f8:	0800973d 	.word	0x0800973d
 80097fc:	20002ca8 	.word	0x20002ca8

08009800 <_fwalk_sglue>:
 8009800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009804:	4607      	mov	r7, r0
 8009806:	4688      	mov	r8, r1
 8009808:	4614      	mov	r4, r2
 800980a:	2600      	movs	r6, #0
 800980c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009810:	f1b9 0901 	subs.w	r9, r9, #1
 8009814:	d505      	bpl.n	8009822 <_fwalk_sglue+0x22>
 8009816:	6824      	ldr	r4, [r4, #0]
 8009818:	2c00      	cmp	r4, #0
 800981a:	d1f7      	bne.n	800980c <_fwalk_sglue+0xc>
 800981c:	4630      	mov	r0, r6
 800981e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009822:	89ab      	ldrh	r3, [r5, #12]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d907      	bls.n	8009838 <_fwalk_sglue+0x38>
 8009828:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800982c:	3301      	adds	r3, #1
 800982e:	d003      	beq.n	8009838 <_fwalk_sglue+0x38>
 8009830:	4629      	mov	r1, r5
 8009832:	4638      	mov	r0, r7
 8009834:	47c0      	blx	r8
 8009836:	4306      	orrs	r6, r0
 8009838:	3568      	adds	r5, #104	; 0x68
 800983a:	e7e9      	b.n	8009810 <_fwalk_sglue+0x10>

0800983c <sniprintf>:
 800983c:	b40c      	push	{r2, r3}
 800983e:	b530      	push	{r4, r5, lr}
 8009840:	4b17      	ldr	r3, [pc, #92]	; (80098a0 <sniprintf+0x64>)
 8009842:	1e0c      	subs	r4, r1, #0
 8009844:	681d      	ldr	r5, [r3, #0]
 8009846:	b09d      	sub	sp, #116	; 0x74
 8009848:	da08      	bge.n	800985c <sniprintf+0x20>
 800984a:	238b      	movs	r3, #139	; 0x8b
 800984c:	602b      	str	r3, [r5, #0]
 800984e:	f04f 30ff 	mov.w	r0, #4294967295
 8009852:	b01d      	add	sp, #116	; 0x74
 8009854:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009858:	b002      	add	sp, #8
 800985a:	4770      	bx	lr
 800985c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009860:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009864:	bf14      	ite	ne
 8009866:	f104 33ff 	addne.w	r3, r4, #4294967295
 800986a:	4623      	moveq	r3, r4
 800986c:	9304      	str	r3, [sp, #16]
 800986e:	9307      	str	r3, [sp, #28]
 8009870:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009874:	9002      	str	r0, [sp, #8]
 8009876:	9006      	str	r0, [sp, #24]
 8009878:	f8ad 3016 	strh.w	r3, [sp, #22]
 800987c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800987e:	ab21      	add	r3, sp, #132	; 0x84
 8009880:	a902      	add	r1, sp, #8
 8009882:	4628      	mov	r0, r5
 8009884:	9301      	str	r3, [sp, #4]
 8009886:	f002 f8c3 	bl	800ba10 <_svfiprintf_r>
 800988a:	1c43      	adds	r3, r0, #1
 800988c:	bfbc      	itt	lt
 800988e:	238b      	movlt	r3, #139	; 0x8b
 8009890:	602b      	strlt	r3, [r5, #0]
 8009892:	2c00      	cmp	r4, #0
 8009894:	d0dd      	beq.n	8009852 <sniprintf+0x16>
 8009896:	9b02      	ldr	r3, [sp, #8]
 8009898:	2200      	movs	r2, #0
 800989a:	701a      	strb	r2, [r3, #0]
 800989c:	e7d9      	b.n	8009852 <sniprintf+0x16>
 800989e:	bf00      	nop
 80098a0:	200001ec 	.word	0x200001ec

080098a4 <__sread>:
 80098a4:	b510      	push	{r4, lr}
 80098a6:	460c      	mov	r4, r1
 80098a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ac:	f000 f8d8 	bl	8009a60 <_read_r>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	bfab      	itete	ge
 80098b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098b6:	89a3      	ldrhlt	r3, [r4, #12]
 80098b8:	181b      	addge	r3, r3, r0
 80098ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098be:	bfac      	ite	ge
 80098c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80098c2:	81a3      	strhlt	r3, [r4, #12]
 80098c4:	bd10      	pop	{r4, pc}

080098c6 <__swrite>:
 80098c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ca:	461f      	mov	r7, r3
 80098cc:	898b      	ldrh	r3, [r1, #12]
 80098ce:	05db      	lsls	r3, r3, #23
 80098d0:	4605      	mov	r5, r0
 80098d2:	460c      	mov	r4, r1
 80098d4:	4616      	mov	r6, r2
 80098d6:	d505      	bpl.n	80098e4 <__swrite+0x1e>
 80098d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098dc:	2302      	movs	r3, #2
 80098de:	2200      	movs	r2, #0
 80098e0:	f000 f8ac 	bl	8009a3c <_lseek_r>
 80098e4:	89a3      	ldrh	r3, [r4, #12]
 80098e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098ee:	81a3      	strh	r3, [r4, #12]
 80098f0:	4632      	mov	r2, r6
 80098f2:	463b      	mov	r3, r7
 80098f4:	4628      	mov	r0, r5
 80098f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098fa:	f000 b8e7 	b.w	8009acc <_write_r>

080098fe <__sseek>:
 80098fe:	b510      	push	{r4, lr}
 8009900:	460c      	mov	r4, r1
 8009902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009906:	f000 f899 	bl	8009a3c <_lseek_r>
 800990a:	1c43      	adds	r3, r0, #1
 800990c:	89a3      	ldrh	r3, [r4, #12]
 800990e:	bf15      	itete	ne
 8009910:	6560      	strne	r0, [r4, #84]	; 0x54
 8009912:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009916:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800991a:	81a3      	strheq	r3, [r4, #12]
 800991c:	bf18      	it	ne
 800991e:	81a3      	strhne	r3, [r4, #12]
 8009920:	bd10      	pop	{r4, pc}

08009922 <__sclose>:
 8009922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009926:	f000 b879 	b.w	8009a1c <_close_r>

0800992a <memcmp>:
 800992a:	b510      	push	{r4, lr}
 800992c:	3901      	subs	r1, #1
 800992e:	4402      	add	r2, r0
 8009930:	4290      	cmp	r0, r2
 8009932:	d101      	bne.n	8009938 <memcmp+0xe>
 8009934:	2000      	movs	r0, #0
 8009936:	e005      	b.n	8009944 <memcmp+0x1a>
 8009938:	7803      	ldrb	r3, [r0, #0]
 800993a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800993e:	42a3      	cmp	r3, r4
 8009940:	d001      	beq.n	8009946 <memcmp+0x1c>
 8009942:	1b18      	subs	r0, r3, r4
 8009944:	bd10      	pop	{r4, pc}
 8009946:	3001      	adds	r0, #1
 8009948:	e7f2      	b.n	8009930 <memcmp+0x6>

0800994a <memmove>:
 800994a:	4288      	cmp	r0, r1
 800994c:	b510      	push	{r4, lr}
 800994e:	eb01 0402 	add.w	r4, r1, r2
 8009952:	d902      	bls.n	800995a <memmove+0x10>
 8009954:	4284      	cmp	r4, r0
 8009956:	4623      	mov	r3, r4
 8009958:	d807      	bhi.n	800996a <memmove+0x20>
 800995a:	1e43      	subs	r3, r0, #1
 800995c:	42a1      	cmp	r1, r4
 800995e:	d008      	beq.n	8009972 <memmove+0x28>
 8009960:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009964:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009968:	e7f8      	b.n	800995c <memmove+0x12>
 800996a:	4402      	add	r2, r0
 800996c:	4601      	mov	r1, r0
 800996e:	428a      	cmp	r2, r1
 8009970:	d100      	bne.n	8009974 <memmove+0x2a>
 8009972:	bd10      	pop	{r4, pc}
 8009974:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009978:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800997c:	e7f7      	b.n	800996e <memmove+0x24>

0800997e <memset>:
 800997e:	4402      	add	r2, r0
 8009980:	4603      	mov	r3, r0
 8009982:	4293      	cmp	r3, r2
 8009984:	d100      	bne.n	8009988 <memset+0xa>
 8009986:	4770      	bx	lr
 8009988:	f803 1b01 	strb.w	r1, [r3], #1
 800998c:	e7f9      	b.n	8009982 <memset+0x4>

0800998e <strncmp>:
 800998e:	b510      	push	{r4, lr}
 8009990:	b16a      	cbz	r2, 80099ae <strncmp+0x20>
 8009992:	3901      	subs	r1, #1
 8009994:	1884      	adds	r4, r0, r2
 8009996:	f810 2b01 	ldrb.w	r2, [r0], #1
 800999a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800999e:	429a      	cmp	r2, r3
 80099a0:	d103      	bne.n	80099aa <strncmp+0x1c>
 80099a2:	42a0      	cmp	r0, r4
 80099a4:	d001      	beq.n	80099aa <strncmp+0x1c>
 80099a6:	2a00      	cmp	r2, #0
 80099a8:	d1f5      	bne.n	8009996 <strncmp+0x8>
 80099aa:	1ad0      	subs	r0, r2, r3
 80099ac:	bd10      	pop	{r4, pc}
 80099ae:	4610      	mov	r0, r2
 80099b0:	e7fc      	b.n	80099ac <strncmp+0x1e>

080099b2 <_raise_r>:
 80099b2:	291f      	cmp	r1, #31
 80099b4:	b538      	push	{r3, r4, r5, lr}
 80099b6:	4604      	mov	r4, r0
 80099b8:	460d      	mov	r5, r1
 80099ba:	d904      	bls.n	80099c6 <_raise_r+0x14>
 80099bc:	2316      	movs	r3, #22
 80099be:	6003      	str	r3, [r0, #0]
 80099c0:	f04f 30ff 	mov.w	r0, #4294967295
 80099c4:	bd38      	pop	{r3, r4, r5, pc}
 80099c6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80099c8:	b112      	cbz	r2, 80099d0 <_raise_r+0x1e>
 80099ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099ce:	b94b      	cbnz	r3, 80099e4 <_raise_r+0x32>
 80099d0:	4620      	mov	r0, r4
 80099d2:	f000 f869 	bl	8009aa8 <_getpid_r>
 80099d6:	462a      	mov	r2, r5
 80099d8:	4601      	mov	r1, r0
 80099da:	4620      	mov	r0, r4
 80099dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099e0:	f000 b850 	b.w	8009a84 <_kill_r>
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d00a      	beq.n	80099fe <_raise_r+0x4c>
 80099e8:	1c59      	adds	r1, r3, #1
 80099ea:	d103      	bne.n	80099f4 <_raise_r+0x42>
 80099ec:	2316      	movs	r3, #22
 80099ee:	6003      	str	r3, [r0, #0]
 80099f0:	2001      	movs	r0, #1
 80099f2:	e7e7      	b.n	80099c4 <_raise_r+0x12>
 80099f4:	2400      	movs	r4, #0
 80099f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80099fa:	4628      	mov	r0, r5
 80099fc:	4798      	blx	r3
 80099fe:	2000      	movs	r0, #0
 8009a00:	e7e0      	b.n	80099c4 <_raise_r+0x12>
	...

08009a04 <raise>:
 8009a04:	4b02      	ldr	r3, [pc, #8]	; (8009a10 <raise+0xc>)
 8009a06:	4601      	mov	r1, r0
 8009a08:	6818      	ldr	r0, [r3, #0]
 8009a0a:	f7ff bfd2 	b.w	80099b2 <_raise_r>
 8009a0e:	bf00      	nop
 8009a10:	200001ec 	.word	0x200001ec

08009a14 <_localeconv_r>:
 8009a14:	4800      	ldr	r0, [pc, #0]	; (8009a18 <_localeconv_r+0x4>)
 8009a16:	4770      	bx	lr
 8009a18:	20000124 	.word	0x20000124

08009a1c <_close_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	4d06      	ldr	r5, [pc, #24]	; (8009a38 <_close_r+0x1c>)
 8009a20:	2300      	movs	r3, #0
 8009a22:	4604      	mov	r4, r0
 8009a24:	4608      	mov	r0, r1
 8009a26:	602b      	str	r3, [r5, #0]
 8009a28:	f7fa f859 	bl	8003ade <_close>
 8009a2c:	1c43      	adds	r3, r0, #1
 8009a2e:	d102      	bne.n	8009a36 <_close_r+0x1a>
 8009a30:	682b      	ldr	r3, [r5, #0]
 8009a32:	b103      	cbz	r3, 8009a36 <_close_r+0x1a>
 8009a34:	6023      	str	r3, [r4, #0]
 8009a36:	bd38      	pop	{r3, r4, r5, pc}
 8009a38:	20002cac 	.word	0x20002cac

08009a3c <_lseek_r>:
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	4d07      	ldr	r5, [pc, #28]	; (8009a5c <_lseek_r+0x20>)
 8009a40:	4604      	mov	r4, r0
 8009a42:	4608      	mov	r0, r1
 8009a44:	4611      	mov	r1, r2
 8009a46:	2200      	movs	r2, #0
 8009a48:	602a      	str	r2, [r5, #0]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f7fa f86e 	bl	8003b2c <_lseek>
 8009a50:	1c43      	adds	r3, r0, #1
 8009a52:	d102      	bne.n	8009a5a <_lseek_r+0x1e>
 8009a54:	682b      	ldr	r3, [r5, #0]
 8009a56:	b103      	cbz	r3, 8009a5a <_lseek_r+0x1e>
 8009a58:	6023      	str	r3, [r4, #0]
 8009a5a:	bd38      	pop	{r3, r4, r5, pc}
 8009a5c:	20002cac 	.word	0x20002cac

08009a60 <_read_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	4d07      	ldr	r5, [pc, #28]	; (8009a80 <_read_r+0x20>)
 8009a64:	4604      	mov	r4, r0
 8009a66:	4608      	mov	r0, r1
 8009a68:	4611      	mov	r1, r2
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	602a      	str	r2, [r5, #0]
 8009a6e:	461a      	mov	r2, r3
 8009a70:	f7f9 fffc 	bl	8003a6c <_read>
 8009a74:	1c43      	adds	r3, r0, #1
 8009a76:	d102      	bne.n	8009a7e <_read_r+0x1e>
 8009a78:	682b      	ldr	r3, [r5, #0]
 8009a7a:	b103      	cbz	r3, 8009a7e <_read_r+0x1e>
 8009a7c:	6023      	str	r3, [r4, #0]
 8009a7e:	bd38      	pop	{r3, r4, r5, pc}
 8009a80:	20002cac 	.word	0x20002cac

08009a84 <_kill_r>:
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	4d07      	ldr	r5, [pc, #28]	; (8009aa4 <_kill_r+0x20>)
 8009a88:	2300      	movs	r3, #0
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	4608      	mov	r0, r1
 8009a8e:	4611      	mov	r1, r2
 8009a90:	602b      	str	r3, [r5, #0]
 8009a92:	f7f9 ffd1 	bl	8003a38 <_kill>
 8009a96:	1c43      	adds	r3, r0, #1
 8009a98:	d102      	bne.n	8009aa0 <_kill_r+0x1c>
 8009a9a:	682b      	ldr	r3, [r5, #0]
 8009a9c:	b103      	cbz	r3, 8009aa0 <_kill_r+0x1c>
 8009a9e:	6023      	str	r3, [r4, #0]
 8009aa0:	bd38      	pop	{r3, r4, r5, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20002cac 	.word	0x20002cac

08009aa8 <_getpid_r>:
 8009aa8:	f7f9 bfbe 	b.w	8003a28 <_getpid>

08009aac <_sbrk_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	4d06      	ldr	r5, [pc, #24]	; (8009ac8 <_sbrk_r+0x1c>)
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	4608      	mov	r0, r1
 8009ab6:	602b      	str	r3, [r5, #0]
 8009ab8:	f7fa f846 	bl	8003b48 <_sbrk>
 8009abc:	1c43      	adds	r3, r0, #1
 8009abe:	d102      	bne.n	8009ac6 <_sbrk_r+0x1a>
 8009ac0:	682b      	ldr	r3, [r5, #0]
 8009ac2:	b103      	cbz	r3, 8009ac6 <_sbrk_r+0x1a>
 8009ac4:	6023      	str	r3, [r4, #0]
 8009ac6:	bd38      	pop	{r3, r4, r5, pc}
 8009ac8:	20002cac 	.word	0x20002cac

08009acc <_write_r>:
 8009acc:	b538      	push	{r3, r4, r5, lr}
 8009ace:	4d07      	ldr	r5, [pc, #28]	; (8009aec <_write_r+0x20>)
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	4608      	mov	r0, r1
 8009ad4:	4611      	mov	r1, r2
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	602a      	str	r2, [r5, #0]
 8009ada:	461a      	mov	r2, r3
 8009adc:	f7f9 ffe3 	bl	8003aa6 <_write>
 8009ae0:	1c43      	adds	r3, r0, #1
 8009ae2:	d102      	bne.n	8009aea <_write_r+0x1e>
 8009ae4:	682b      	ldr	r3, [r5, #0]
 8009ae6:	b103      	cbz	r3, 8009aea <_write_r+0x1e>
 8009ae8:	6023      	str	r3, [r4, #0]
 8009aea:	bd38      	pop	{r3, r4, r5, pc}
 8009aec:	20002cac 	.word	0x20002cac

08009af0 <__errno>:
 8009af0:	4b01      	ldr	r3, [pc, #4]	; (8009af8 <__errno+0x8>)
 8009af2:	6818      	ldr	r0, [r3, #0]
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	200001ec 	.word	0x200001ec

08009afc <__libc_init_array>:
 8009afc:	b570      	push	{r4, r5, r6, lr}
 8009afe:	4d0d      	ldr	r5, [pc, #52]	; (8009b34 <__libc_init_array+0x38>)
 8009b00:	4c0d      	ldr	r4, [pc, #52]	; (8009b38 <__libc_init_array+0x3c>)
 8009b02:	1b64      	subs	r4, r4, r5
 8009b04:	10a4      	asrs	r4, r4, #2
 8009b06:	2600      	movs	r6, #0
 8009b08:	42a6      	cmp	r6, r4
 8009b0a:	d109      	bne.n	8009b20 <__libc_init_array+0x24>
 8009b0c:	4d0b      	ldr	r5, [pc, #44]	; (8009b3c <__libc_init_array+0x40>)
 8009b0e:	4c0c      	ldr	r4, [pc, #48]	; (8009b40 <__libc_init_array+0x44>)
 8009b10:	f002 fc06 	bl	800c320 <_init>
 8009b14:	1b64      	subs	r4, r4, r5
 8009b16:	10a4      	asrs	r4, r4, #2
 8009b18:	2600      	movs	r6, #0
 8009b1a:	42a6      	cmp	r6, r4
 8009b1c:	d105      	bne.n	8009b2a <__libc_init_array+0x2e>
 8009b1e:	bd70      	pop	{r4, r5, r6, pc}
 8009b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b24:	4798      	blx	r3
 8009b26:	3601      	adds	r6, #1
 8009b28:	e7ee      	b.n	8009b08 <__libc_init_array+0xc>
 8009b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b2e:	4798      	blx	r3
 8009b30:	3601      	adds	r6, #1
 8009b32:	e7f2      	b.n	8009b1a <__libc_init_array+0x1e>
 8009b34:	0800cb0c 	.word	0x0800cb0c
 8009b38:	0800cb0c 	.word	0x0800cb0c
 8009b3c:	0800cb0c 	.word	0x0800cb0c
 8009b40:	0800cb14 	.word	0x0800cb14

08009b44 <__retarget_lock_init_recursive>:
 8009b44:	4770      	bx	lr

08009b46 <__retarget_lock_acquire_recursive>:
 8009b46:	4770      	bx	lr

08009b48 <__retarget_lock_release_recursive>:
 8009b48:	4770      	bx	lr

08009b4a <memcpy>:
 8009b4a:	440a      	add	r2, r1
 8009b4c:	4291      	cmp	r1, r2
 8009b4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b52:	d100      	bne.n	8009b56 <memcpy+0xc>
 8009b54:	4770      	bx	lr
 8009b56:	b510      	push	{r4, lr}
 8009b58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b60:	4291      	cmp	r1, r2
 8009b62:	d1f9      	bne.n	8009b58 <memcpy+0xe>
 8009b64:	bd10      	pop	{r4, pc}
	...

08009b68 <nan>:
 8009b68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009b70 <nan+0x8>
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	00000000 	.word	0x00000000
 8009b74:	7ff80000 	.word	0x7ff80000

08009b78 <nanf>:
 8009b78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009b80 <nanf+0x8>
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	7fc00000 	.word	0x7fc00000

08009b84 <quorem>:
 8009b84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b88:	6903      	ldr	r3, [r0, #16]
 8009b8a:	690c      	ldr	r4, [r1, #16]
 8009b8c:	42a3      	cmp	r3, r4
 8009b8e:	4607      	mov	r7, r0
 8009b90:	db7e      	blt.n	8009c90 <quorem+0x10c>
 8009b92:	3c01      	subs	r4, #1
 8009b94:	f101 0814 	add.w	r8, r1, #20
 8009b98:	f100 0514 	add.w	r5, r0, #20
 8009b9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ba0:	9301      	str	r3, [sp, #4]
 8009ba2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ba6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009baa:	3301      	adds	r3, #1
 8009bac:	429a      	cmp	r2, r3
 8009bae:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009bb2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009bb6:	fbb2 f6f3 	udiv	r6, r2, r3
 8009bba:	d331      	bcc.n	8009c20 <quorem+0x9c>
 8009bbc:	f04f 0e00 	mov.w	lr, #0
 8009bc0:	4640      	mov	r0, r8
 8009bc2:	46ac      	mov	ip, r5
 8009bc4:	46f2      	mov	sl, lr
 8009bc6:	f850 2b04 	ldr.w	r2, [r0], #4
 8009bca:	b293      	uxth	r3, r2
 8009bcc:	fb06 e303 	mla	r3, r6, r3, lr
 8009bd0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009bd4:	0c1a      	lsrs	r2, r3, #16
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	ebaa 0303 	sub.w	r3, sl, r3
 8009bdc:	f8dc a000 	ldr.w	sl, [ip]
 8009be0:	fa13 f38a 	uxtah	r3, r3, sl
 8009be4:	fb06 220e 	mla	r2, r6, lr, r2
 8009be8:	9300      	str	r3, [sp, #0]
 8009bea:	9b00      	ldr	r3, [sp, #0]
 8009bec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009bf0:	b292      	uxth	r2, r2
 8009bf2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009bf6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bfa:	f8bd 3000 	ldrh.w	r3, [sp]
 8009bfe:	4581      	cmp	r9, r0
 8009c00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c04:	f84c 3b04 	str.w	r3, [ip], #4
 8009c08:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009c0c:	d2db      	bcs.n	8009bc6 <quorem+0x42>
 8009c0e:	f855 300b 	ldr.w	r3, [r5, fp]
 8009c12:	b92b      	cbnz	r3, 8009c20 <quorem+0x9c>
 8009c14:	9b01      	ldr	r3, [sp, #4]
 8009c16:	3b04      	subs	r3, #4
 8009c18:	429d      	cmp	r5, r3
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	d32c      	bcc.n	8009c78 <quorem+0xf4>
 8009c1e:	613c      	str	r4, [r7, #16]
 8009c20:	4638      	mov	r0, r7
 8009c22:	f001 fca7 	bl	800b574 <__mcmp>
 8009c26:	2800      	cmp	r0, #0
 8009c28:	db22      	blt.n	8009c70 <quorem+0xec>
 8009c2a:	3601      	adds	r6, #1
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	2000      	movs	r0, #0
 8009c30:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c34:	f8d1 c000 	ldr.w	ip, [r1]
 8009c38:	b293      	uxth	r3, r2
 8009c3a:	1ac3      	subs	r3, r0, r3
 8009c3c:	0c12      	lsrs	r2, r2, #16
 8009c3e:	fa13 f38c 	uxtah	r3, r3, ip
 8009c42:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009c46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c50:	45c1      	cmp	r9, r8
 8009c52:	f841 3b04 	str.w	r3, [r1], #4
 8009c56:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009c5a:	d2e9      	bcs.n	8009c30 <quorem+0xac>
 8009c5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c64:	b922      	cbnz	r2, 8009c70 <quorem+0xec>
 8009c66:	3b04      	subs	r3, #4
 8009c68:	429d      	cmp	r5, r3
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	d30a      	bcc.n	8009c84 <quorem+0x100>
 8009c6e:	613c      	str	r4, [r7, #16]
 8009c70:	4630      	mov	r0, r6
 8009c72:	b003      	add	sp, #12
 8009c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c78:	6812      	ldr	r2, [r2, #0]
 8009c7a:	3b04      	subs	r3, #4
 8009c7c:	2a00      	cmp	r2, #0
 8009c7e:	d1ce      	bne.n	8009c1e <quorem+0x9a>
 8009c80:	3c01      	subs	r4, #1
 8009c82:	e7c9      	b.n	8009c18 <quorem+0x94>
 8009c84:	6812      	ldr	r2, [r2, #0]
 8009c86:	3b04      	subs	r3, #4
 8009c88:	2a00      	cmp	r2, #0
 8009c8a:	d1f0      	bne.n	8009c6e <quorem+0xea>
 8009c8c:	3c01      	subs	r4, #1
 8009c8e:	e7eb      	b.n	8009c68 <quorem+0xe4>
 8009c90:	2000      	movs	r0, #0
 8009c92:	e7ee      	b.n	8009c72 <quorem+0xee>
 8009c94:	0000      	movs	r0, r0
	...

08009c98 <_dtoa_r>:
 8009c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9c:	ed2d 8b04 	vpush	{d8-d9}
 8009ca0:	69c5      	ldr	r5, [r0, #28]
 8009ca2:	b093      	sub	sp, #76	; 0x4c
 8009ca4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009ca8:	ec57 6b10 	vmov	r6, r7, d0
 8009cac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009cb0:	9107      	str	r1, [sp, #28]
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	920a      	str	r2, [sp, #40]	; 0x28
 8009cb6:	930d      	str	r3, [sp, #52]	; 0x34
 8009cb8:	b975      	cbnz	r5, 8009cd8 <_dtoa_r+0x40>
 8009cba:	2010      	movs	r0, #16
 8009cbc:	f7fd ff54 	bl	8007b68 <malloc>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	61e0      	str	r0, [r4, #28]
 8009cc4:	b920      	cbnz	r0, 8009cd0 <_dtoa_r+0x38>
 8009cc6:	4bae      	ldr	r3, [pc, #696]	; (8009f80 <_dtoa_r+0x2e8>)
 8009cc8:	21ef      	movs	r1, #239	; 0xef
 8009cca:	48ae      	ldr	r0, [pc, #696]	; (8009f84 <_dtoa_r+0x2ec>)
 8009ccc:	f002 f84c 	bl	800bd68 <__assert_func>
 8009cd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009cd4:	6005      	str	r5, [r0, #0]
 8009cd6:	60c5      	str	r5, [r0, #12]
 8009cd8:	69e3      	ldr	r3, [r4, #28]
 8009cda:	6819      	ldr	r1, [r3, #0]
 8009cdc:	b151      	cbz	r1, 8009cf4 <_dtoa_r+0x5c>
 8009cde:	685a      	ldr	r2, [r3, #4]
 8009ce0:	604a      	str	r2, [r1, #4]
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	4093      	lsls	r3, r2
 8009ce6:	608b      	str	r3, [r1, #8]
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f001 f9bd 	bl	800b068 <_Bfree>
 8009cee:	69e3      	ldr	r3, [r4, #28]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	601a      	str	r2, [r3, #0]
 8009cf4:	1e3b      	subs	r3, r7, #0
 8009cf6:	bfbb      	ittet	lt
 8009cf8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009cfc:	9303      	strlt	r3, [sp, #12]
 8009cfe:	2300      	movge	r3, #0
 8009d00:	2201      	movlt	r2, #1
 8009d02:	bfac      	ite	ge
 8009d04:	f8c8 3000 	strge.w	r3, [r8]
 8009d08:	f8c8 2000 	strlt.w	r2, [r8]
 8009d0c:	4b9e      	ldr	r3, [pc, #632]	; (8009f88 <_dtoa_r+0x2f0>)
 8009d0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009d12:	ea33 0308 	bics.w	r3, r3, r8
 8009d16:	d11b      	bne.n	8009d50 <_dtoa_r+0xb8>
 8009d18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d1e:	6013      	str	r3, [r2, #0]
 8009d20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009d24:	4333      	orrs	r3, r6
 8009d26:	f000 8593 	beq.w	800a850 <_dtoa_r+0xbb8>
 8009d2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d2c:	b963      	cbnz	r3, 8009d48 <_dtoa_r+0xb0>
 8009d2e:	4b97      	ldr	r3, [pc, #604]	; (8009f8c <_dtoa_r+0x2f4>)
 8009d30:	e027      	b.n	8009d82 <_dtoa_r+0xea>
 8009d32:	4b97      	ldr	r3, [pc, #604]	; (8009f90 <_dtoa_r+0x2f8>)
 8009d34:	9300      	str	r3, [sp, #0]
 8009d36:	3308      	adds	r3, #8
 8009d38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d3a:	6013      	str	r3, [r2, #0]
 8009d3c:	9800      	ldr	r0, [sp, #0]
 8009d3e:	b013      	add	sp, #76	; 0x4c
 8009d40:	ecbd 8b04 	vpop	{d8-d9}
 8009d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d48:	4b90      	ldr	r3, [pc, #576]	; (8009f8c <_dtoa_r+0x2f4>)
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	3303      	adds	r3, #3
 8009d4e:	e7f3      	b.n	8009d38 <_dtoa_r+0xa0>
 8009d50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d54:	2200      	movs	r2, #0
 8009d56:	ec51 0b17 	vmov	r0, r1, d7
 8009d5a:	eeb0 8a47 	vmov.f32	s16, s14
 8009d5e:	eef0 8a67 	vmov.f32	s17, s15
 8009d62:	2300      	movs	r3, #0
 8009d64:	f7f6 fed0 	bl	8000b08 <__aeabi_dcmpeq>
 8009d68:	4681      	mov	r9, r0
 8009d6a:	b160      	cbz	r0, 8009d86 <_dtoa_r+0xee>
 8009d6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d6e:	2301      	movs	r3, #1
 8009d70:	6013      	str	r3, [r2, #0]
 8009d72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f000 8568 	beq.w	800a84a <_dtoa_r+0xbb2>
 8009d7a:	4b86      	ldr	r3, [pc, #536]	; (8009f94 <_dtoa_r+0x2fc>)
 8009d7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d7e:	6013      	str	r3, [r2, #0]
 8009d80:	3b01      	subs	r3, #1
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	e7da      	b.n	8009d3c <_dtoa_r+0xa4>
 8009d86:	aa10      	add	r2, sp, #64	; 0x40
 8009d88:	a911      	add	r1, sp, #68	; 0x44
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	eeb0 0a48 	vmov.f32	s0, s16
 8009d90:	eef0 0a68 	vmov.f32	s1, s17
 8009d94:	f001 fd04 	bl	800b7a0 <__d2b>
 8009d98:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009d9c:	4682      	mov	sl, r0
 8009d9e:	2d00      	cmp	r5, #0
 8009da0:	d07f      	beq.n	8009ea2 <_dtoa_r+0x20a>
 8009da2:	ee18 3a90 	vmov	r3, s17
 8009da6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009daa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009dae:	ec51 0b18 	vmov	r0, r1, d8
 8009db2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009db6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009dba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	4b75      	ldr	r3, [pc, #468]	; (8009f98 <_dtoa_r+0x300>)
 8009dc4:	f7f6 fa80 	bl	80002c8 <__aeabi_dsub>
 8009dc8:	a367      	add	r3, pc, #412	; (adr r3, 8009f68 <_dtoa_r+0x2d0>)
 8009dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dce:	f7f6 fc33 	bl	8000638 <__aeabi_dmul>
 8009dd2:	a367      	add	r3, pc, #412	; (adr r3, 8009f70 <_dtoa_r+0x2d8>)
 8009dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd8:	f7f6 fa78 	bl	80002cc <__adddf3>
 8009ddc:	4606      	mov	r6, r0
 8009dde:	4628      	mov	r0, r5
 8009de0:	460f      	mov	r7, r1
 8009de2:	f7f6 fbbf 	bl	8000564 <__aeabi_i2d>
 8009de6:	a364      	add	r3, pc, #400	; (adr r3, 8009f78 <_dtoa_r+0x2e0>)
 8009de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dec:	f7f6 fc24 	bl	8000638 <__aeabi_dmul>
 8009df0:	4602      	mov	r2, r0
 8009df2:	460b      	mov	r3, r1
 8009df4:	4630      	mov	r0, r6
 8009df6:	4639      	mov	r1, r7
 8009df8:	f7f6 fa68 	bl	80002cc <__adddf3>
 8009dfc:	4606      	mov	r6, r0
 8009dfe:	460f      	mov	r7, r1
 8009e00:	f7f6 feca 	bl	8000b98 <__aeabi_d2iz>
 8009e04:	2200      	movs	r2, #0
 8009e06:	4683      	mov	fp, r0
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	4639      	mov	r1, r7
 8009e0e:	f7f6 fe85 	bl	8000b1c <__aeabi_dcmplt>
 8009e12:	b148      	cbz	r0, 8009e28 <_dtoa_r+0x190>
 8009e14:	4658      	mov	r0, fp
 8009e16:	f7f6 fba5 	bl	8000564 <__aeabi_i2d>
 8009e1a:	4632      	mov	r2, r6
 8009e1c:	463b      	mov	r3, r7
 8009e1e:	f7f6 fe73 	bl	8000b08 <__aeabi_dcmpeq>
 8009e22:	b908      	cbnz	r0, 8009e28 <_dtoa_r+0x190>
 8009e24:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e28:	f1bb 0f16 	cmp.w	fp, #22
 8009e2c:	d857      	bhi.n	8009ede <_dtoa_r+0x246>
 8009e2e:	4b5b      	ldr	r3, [pc, #364]	; (8009f9c <_dtoa_r+0x304>)
 8009e30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	ec51 0b18 	vmov	r0, r1, d8
 8009e3c:	f7f6 fe6e 	bl	8000b1c <__aeabi_dcmplt>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d04e      	beq.n	8009ee2 <_dtoa_r+0x24a>
 8009e44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e48:	2300      	movs	r3, #0
 8009e4a:	930c      	str	r3, [sp, #48]	; 0x30
 8009e4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e4e:	1b5b      	subs	r3, r3, r5
 8009e50:	1e5a      	subs	r2, r3, #1
 8009e52:	bf45      	ittet	mi
 8009e54:	f1c3 0301 	rsbmi	r3, r3, #1
 8009e58:	9305      	strmi	r3, [sp, #20]
 8009e5a:	2300      	movpl	r3, #0
 8009e5c:	2300      	movmi	r3, #0
 8009e5e:	9206      	str	r2, [sp, #24]
 8009e60:	bf54      	ite	pl
 8009e62:	9305      	strpl	r3, [sp, #20]
 8009e64:	9306      	strmi	r3, [sp, #24]
 8009e66:	f1bb 0f00 	cmp.w	fp, #0
 8009e6a:	db3c      	blt.n	8009ee6 <_dtoa_r+0x24e>
 8009e6c:	9b06      	ldr	r3, [sp, #24]
 8009e6e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009e72:	445b      	add	r3, fp
 8009e74:	9306      	str	r3, [sp, #24]
 8009e76:	2300      	movs	r3, #0
 8009e78:	9308      	str	r3, [sp, #32]
 8009e7a:	9b07      	ldr	r3, [sp, #28]
 8009e7c:	2b09      	cmp	r3, #9
 8009e7e:	d868      	bhi.n	8009f52 <_dtoa_r+0x2ba>
 8009e80:	2b05      	cmp	r3, #5
 8009e82:	bfc4      	itt	gt
 8009e84:	3b04      	subgt	r3, #4
 8009e86:	9307      	strgt	r3, [sp, #28]
 8009e88:	9b07      	ldr	r3, [sp, #28]
 8009e8a:	f1a3 0302 	sub.w	r3, r3, #2
 8009e8e:	bfcc      	ite	gt
 8009e90:	2500      	movgt	r5, #0
 8009e92:	2501      	movle	r5, #1
 8009e94:	2b03      	cmp	r3, #3
 8009e96:	f200 8085 	bhi.w	8009fa4 <_dtoa_r+0x30c>
 8009e9a:	e8df f003 	tbb	[pc, r3]
 8009e9e:	3b2e      	.short	0x3b2e
 8009ea0:	5839      	.short	0x5839
 8009ea2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009ea6:	441d      	add	r5, r3
 8009ea8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009eac:	2b20      	cmp	r3, #32
 8009eae:	bfc1      	itttt	gt
 8009eb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009eb4:	fa08 f803 	lslgt.w	r8, r8, r3
 8009eb8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009ebc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009ec0:	bfd6      	itet	le
 8009ec2:	f1c3 0320 	rsble	r3, r3, #32
 8009ec6:	ea48 0003 	orrgt.w	r0, r8, r3
 8009eca:	fa06 f003 	lslle.w	r0, r6, r3
 8009ece:	f7f6 fb39 	bl	8000544 <__aeabi_ui2d>
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009ed8:	3d01      	subs	r5, #1
 8009eda:	920e      	str	r2, [sp, #56]	; 0x38
 8009edc:	e76f      	b.n	8009dbe <_dtoa_r+0x126>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e7b3      	b.n	8009e4a <_dtoa_r+0x1b2>
 8009ee2:	900c      	str	r0, [sp, #48]	; 0x30
 8009ee4:	e7b2      	b.n	8009e4c <_dtoa_r+0x1b4>
 8009ee6:	9b05      	ldr	r3, [sp, #20]
 8009ee8:	eba3 030b 	sub.w	r3, r3, fp
 8009eec:	9305      	str	r3, [sp, #20]
 8009eee:	f1cb 0300 	rsb	r3, fp, #0
 8009ef2:	9308      	str	r3, [sp, #32]
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ef8:	e7bf      	b.n	8009e7a <_dtoa_r+0x1e2>
 8009efa:	2300      	movs	r3, #0
 8009efc:	9309      	str	r3, [sp, #36]	; 0x24
 8009efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	dc52      	bgt.n	8009faa <_dtoa_r+0x312>
 8009f04:	2301      	movs	r3, #1
 8009f06:	9301      	str	r3, [sp, #4]
 8009f08:	9304      	str	r3, [sp, #16]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	920a      	str	r2, [sp, #40]	; 0x28
 8009f0e:	e00b      	b.n	8009f28 <_dtoa_r+0x290>
 8009f10:	2301      	movs	r3, #1
 8009f12:	e7f3      	b.n	8009efc <_dtoa_r+0x264>
 8009f14:	2300      	movs	r3, #0
 8009f16:	9309      	str	r3, [sp, #36]	; 0x24
 8009f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f1a:	445b      	add	r3, fp
 8009f1c:	9301      	str	r3, [sp, #4]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	9304      	str	r3, [sp, #16]
 8009f24:	bfb8      	it	lt
 8009f26:	2301      	movlt	r3, #1
 8009f28:	69e0      	ldr	r0, [r4, #28]
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	2204      	movs	r2, #4
 8009f2e:	f102 0614 	add.w	r6, r2, #20
 8009f32:	429e      	cmp	r6, r3
 8009f34:	d93d      	bls.n	8009fb2 <_dtoa_r+0x31a>
 8009f36:	6041      	str	r1, [r0, #4]
 8009f38:	4620      	mov	r0, r4
 8009f3a:	f001 f855 	bl	800afe8 <_Balloc>
 8009f3e:	9000      	str	r0, [sp, #0]
 8009f40:	2800      	cmp	r0, #0
 8009f42:	d139      	bne.n	8009fb8 <_dtoa_r+0x320>
 8009f44:	4b16      	ldr	r3, [pc, #88]	; (8009fa0 <_dtoa_r+0x308>)
 8009f46:	4602      	mov	r2, r0
 8009f48:	f240 11af 	movw	r1, #431	; 0x1af
 8009f4c:	e6bd      	b.n	8009cca <_dtoa_r+0x32>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e7e1      	b.n	8009f16 <_dtoa_r+0x27e>
 8009f52:	2501      	movs	r5, #1
 8009f54:	2300      	movs	r3, #0
 8009f56:	9307      	str	r3, [sp, #28]
 8009f58:	9509      	str	r5, [sp, #36]	; 0x24
 8009f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f5e:	9301      	str	r3, [sp, #4]
 8009f60:	9304      	str	r3, [sp, #16]
 8009f62:	2200      	movs	r2, #0
 8009f64:	2312      	movs	r3, #18
 8009f66:	e7d1      	b.n	8009f0c <_dtoa_r+0x274>
 8009f68:	636f4361 	.word	0x636f4361
 8009f6c:	3fd287a7 	.word	0x3fd287a7
 8009f70:	8b60c8b3 	.word	0x8b60c8b3
 8009f74:	3fc68a28 	.word	0x3fc68a28
 8009f78:	509f79fb 	.word	0x509f79fb
 8009f7c:	3fd34413 	.word	0x3fd34413
 8009f80:	0800c87a 	.word	0x0800c87a
 8009f84:	0800c891 	.word	0x0800c891
 8009f88:	7ff00000 	.word	0x7ff00000
 8009f8c:	0800c876 	.word	0x0800c876
 8009f90:	0800c86d 	.word	0x0800c86d
 8009f94:	0800c842 	.word	0x0800c842
 8009f98:	3ff80000 	.word	0x3ff80000
 8009f9c:	0800c9e0 	.word	0x0800c9e0
 8009fa0:	0800c8e9 	.word	0x0800c8e9
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8009fa8:	e7d7      	b.n	8009f5a <_dtoa_r+0x2c2>
 8009faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fac:	9301      	str	r3, [sp, #4]
 8009fae:	9304      	str	r3, [sp, #16]
 8009fb0:	e7ba      	b.n	8009f28 <_dtoa_r+0x290>
 8009fb2:	3101      	adds	r1, #1
 8009fb4:	0052      	lsls	r2, r2, #1
 8009fb6:	e7ba      	b.n	8009f2e <_dtoa_r+0x296>
 8009fb8:	69e3      	ldr	r3, [r4, #28]
 8009fba:	9a00      	ldr	r2, [sp, #0]
 8009fbc:	601a      	str	r2, [r3, #0]
 8009fbe:	9b04      	ldr	r3, [sp, #16]
 8009fc0:	2b0e      	cmp	r3, #14
 8009fc2:	f200 80a8 	bhi.w	800a116 <_dtoa_r+0x47e>
 8009fc6:	2d00      	cmp	r5, #0
 8009fc8:	f000 80a5 	beq.w	800a116 <_dtoa_r+0x47e>
 8009fcc:	f1bb 0f00 	cmp.w	fp, #0
 8009fd0:	dd38      	ble.n	800a044 <_dtoa_r+0x3ac>
 8009fd2:	4bc0      	ldr	r3, [pc, #768]	; (800a2d4 <_dtoa_r+0x63c>)
 8009fd4:	f00b 020f 	and.w	r2, fp, #15
 8009fd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fdc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009fe0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009fe4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009fe8:	d019      	beq.n	800a01e <_dtoa_r+0x386>
 8009fea:	4bbb      	ldr	r3, [pc, #748]	; (800a2d8 <_dtoa_r+0x640>)
 8009fec:	ec51 0b18 	vmov	r0, r1, d8
 8009ff0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ff4:	f7f6 fc4a 	bl	800088c <__aeabi_ddiv>
 8009ff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ffc:	f008 080f 	and.w	r8, r8, #15
 800a000:	2503      	movs	r5, #3
 800a002:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a2d8 <_dtoa_r+0x640>
 800a006:	f1b8 0f00 	cmp.w	r8, #0
 800a00a:	d10a      	bne.n	800a022 <_dtoa_r+0x38a>
 800a00c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a010:	4632      	mov	r2, r6
 800a012:	463b      	mov	r3, r7
 800a014:	f7f6 fc3a 	bl	800088c <__aeabi_ddiv>
 800a018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a01c:	e02b      	b.n	800a076 <_dtoa_r+0x3de>
 800a01e:	2502      	movs	r5, #2
 800a020:	e7ef      	b.n	800a002 <_dtoa_r+0x36a>
 800a022:	f018 0f01 	tst.w	r8, #1
 800a026:	d008      	beq.n	800a03a <_dtoa_r+0x3a2>
 800a028:	4630      	mov	r0, r6
 800a02a:	4639      	mov	r1, r7
 800a02c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a030:	f7f6 fb02 	bl	8000638 <__aeabi_dmul>
 800a034:	3501      	adds	r5, #1
 800a036:	4606      	mov	r6, r0
 800a038:	460f      	mov	r7, r1
 800a03a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a03e:	f109 0908 	add.w	r9, r9, #8
 800a042:	e7e0      	b.n	800a006 <_dtoa_r+0x36e>
 800a044:	f000 809f 	beq.w	800a186 <_dtoa_r+0x4ee>
 800a048:	f1cb 0600 	rsb	r6, fp, #0
 800a04c:	4ba1      	ldr	r3, [pc, #644]	; (800a2d4 <_dtoa_r+0x63c>)
 800a04e:	4fa2      	ldr	r7, [pc, #648]	; (800a2d8 <_dtoa_r+0x640>)
 800a050:	f006 020f 	and.w	r2, r6, #15
 800a054:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05c:	ec51 0b18 	vmov	r0, r1, d8
 800a060:	f7f6 faea 	bl	8000638 <__aeabi_dmul>
 800a064:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a068:	1136      	asrs	r6, r6, #4
 800a06a:	2300      	movs	r3, #0
 800a06c:	2502      	movs	r5, #2
 800a06e:	2e00      	cmp	r6, #0
 800a070:	d17e      	bne.n	800a170 <_dtoa_r+0x4d8>
 800a072:	2b00      	cmp	r3, #0
 800a074:	d1d0      	bne.n	800a018 <_dtoa_r+0x380>
 800a076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a078:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f000 8084 	beq.w	800a18a <_dtoa_r+0x4f2>
 800a082:	4b96      	ldr	r3, [pc, #600]	; (800a2dc <_dtoa_r+0x644>)
 800a084:	2200      	movs	r2, #0
 800a086:	4640      	mov	r0, r8
 800a088:	4649      	mov	r1, r9
 800a08a:	f7f6 fd47 	bl	8000b1c <__aeabi_dcmplt>
 800a08e:	2800      	cmp	r0, #0
 800a090:	d07b      	beq.n	800a18a <_dtoa_r+0x4f2>
 800a092:	9b04      	ldr	r3, [sp, #16]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d078      	beq.n	800a18a <_dtoa_r+0x4f2>
 800a098:	9b01      	ldr	r3, [sp, #4]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	dd39      	ble.n	800a112 <_dtoa_r+0x47a>
 800a09e:	4b90      	ldr	r3, [pc, #576]	; (800a2e0 <_dtoa_r+0x648>)
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	4640      	mov	r0, r8
 800a0a4:	4649      	mov	r1, r9
 800a0a6:	f7f6 fac7 	bl	8000638 <__aeabi_dmul>
 800a0aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0ae:	9e01      	ldr	r6, [sp, #4]
 800a0b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a0b4:	3501      	adds	r5, #1
 800a0b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	f7f6 fa52 	bl	8000564 <__aeabi_i2d>
 800a0c0:	4642      	mov	r2, r8
 800a0c2:	464b      	mov	r3, r9
 800a0c4:	f7f6 fab8 	bl	8000638 <__aeabi_dmul>
 800a0c8:	4b86      	ldr	r3, [pc, #536]	; (800a2e4 <_dtoa_r+0x64c>)
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f7f6 f8fe 	bl	80002cc <__adddf3>
 800a0d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a0d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0d8:	9303      	str	r3, [sp, #12]
 800a0da:	2e00      	cmp	r6, #0
 800a0dc:	d158      	bne.n	800a190 <_dtoa_r+0x4f8>
 800a0de:	4b82      	ldr	r3, [pc, #520]	; (800a2e8 <_dtoa_r+0x650>)
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	4640      	mov	r0, r8
 800a0e4:	4649      	mov	r1, r9
 800a0e6:	f7f6 f8ef 	bl	80002c8 <__aeabi_dsub>
 800a0ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0ee:	4680      	mov	r8, r0
 800a0f0:	4689      	mov	r9, r1
 800a0f2:	f7f6 fd31 	bl	8000b58 <__aeabi_dcmpgt>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	f040 8296 	bne.w	800a628 <_dtoa_r+0x990>
 800a0fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a100:	4640      	mov	r0, r8
 800a102:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a106:	4649      	mov	r1, r9
 800a108:	f7f6 fd08 	bl	8000b1c <__aeabi_dcmplt>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	f040 8289 	bne.w	800a624 <_dtoa_r+0x98c>
 800a112:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a118:	2b00      	cmp	r3, #0
 800a11a:	f2c0 814e 	blt.w	800a3ba <_dtoa_r+0x722>
 800a11e:	f1bb 0f0e 	cmp.w	fp, #14
 800a122:	f300 814a 	bgt.w	800a3ba <_dtoa_r+0x722>
 800a126:	4b6b      	ldr	r3, [pc, #428]	; (800a2d4 <_dtoa_r+0x63c>)
 800a128:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a12c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a132:	2b00      	cmp	r3, #0
 800a134:	f280 80dc 	bge.w	800a2f0 <_dtoa_r+0x658>
 800a138:	9b04      	ldr	r3, [sp, #16]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f300 80d8 	bgt.w	800a2f0 <_dtoa_r+0x658>
 800a140:	f040 826f 	bne.w	800a622 <_dtoa_r+0x98a>
 800a144:	4b68      	ldr	r3, [pc, #416]	; (800a2e8 <_dtoa_r+0x650>)
 800a146:	2200      	movs	r2, #0
 800a148:	4640      	mov	r0, r8
 800a14a:	4649      	mov	r1, r9
 800a14c:	f7f6 fa74 	bl	8000638 <__aeabi_dmul>
 800a150:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a154:	f7f6 fcf6 	bl	8000b44 <__aeabi_dcmpge>
 800a158:	9e04      	ldr	r6, [sp, #16]
 800a15a:	4637      	mov	r7, r6
 800a15c:	2800      	cmp	r0, #0
 800a15e:	f040 8245 	bne.w	800a5ec <_dtoa_r+0x954>
 800a162:	9d00      	ldr	r5, [sp, #0]
 800a164:	2331      	movs	r3, #49	; 0x31
 800a166:	f805 3b01 	strb.w	r3, [r5], #1
 800a16a:	f10b 0b01 	add.w	fp, fp, #1
 800a16e:	e241      	b.n	800a5f4 <_dtoa_r+0x95c>
 800a170:	07f2      	lsls	r2, r6, #31
 800a172:	d505      	bpl.n	800a180 <_dtoa_r+0x4e8>
 800a174:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a178:	f7f6 fa5e 	bl	8000638 <__aeabi_dmul>
 800a17c:	3501      	adds	r5, #1
 800a17e:	2301      	movs	r3, #1
 800a180:	1076      	asrs	r6, r6, #1
 800a182:	3708      	adds	r7, #8
 800a184:	e773      	b.n	800a06e <_dtoa_r+0x3d6>
 800a186:	2502      	movs	r5, #2
 800a188:	e775      	b.n	800a076 <_dtoa_r+0x3de>
 800a18a:	9e04      	ldr	r6, [sp, #16]
 800a18c:	465f      	mov	r7, fp
 800a18e:	e792      	b.n	800a0b6 <_dtoa_r+0x41e>
 800a190:	9900      	ldr	r1, [sp, #0]
 800a192:	4b50      	ldr	r3, [pc, #320]	; (800a2d4 <_dtoa_r+0x63c>)
 800a194:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a198:	4431      	add	r1, r6
 800a19a:	9102      	str	r1, [sp, #8]
 800a19c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a19e:	eeb0 9a47 	vmov.f32	s18, s14
 800a1a2:	eef0 9a67 	vmov.f32	s19, s15
 800a1a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a1aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a1ae:	2900      	cmp	r1, #0
 800a1b0:	d044      	beq.n	800a23c <_dtoa_r+0x5a4>
 800a1b2:	494e      	ldr	r1, [pc, #312]	; (800a2ec <_dtoa_r+0x654>)
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	f7f6 fb69 	bl	800088c <__aeabi_ddiv>
 800a1ba:	ec53 2b19 	vmov	r2, r3, d9
 800a1be:	f7f6 f883 	bl	80002c8 <__aeabi_dsub>
 800a1c2:	9d00      	ldr	r5, [sp, #0]
 800a1c4:	ec41 0b19 	vmov	d9, r0, r1
 800a1c8:	4649      	mov	r1, r9
 800a1ca:	4640      	mov	r0, r8
 800a1cc:	f7f6 fce4 	bl	8000b98 <__aeabi_d2iz>
 800a1d0:	4606      	mov	r6, r0
 800a1d2:	f7f6 f9c7 	bl	8000564 <__aeabi_i2d>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	460b      	mov	r3, r1
 800a1da:	4640      	mov	r0, r8
 800a1dc:	4649      	mov	r1, r9
 800a1de:	f7f6 f873 	bl	80002c8 <__aeabi_dsub>
 800a1e2:	3630      	adds	r6, #48	; 0x30
 800a1e4:	f805 6b01 	strb.w	r6, [r5], #1
 800a1e8:	ec53 2b19 	vmov	r2, r3, d9
 800a1ec:	4680      	mov	r8, r0
 800a1ee:	4689      	mov	r9, r1
 800a1f0:	f7f6 fc94 	bl	8000b1c <__aeabi_dcmplt>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	d164      	bne.n	800a2c2 <_dtoa_r+0x62a>
 800a1f8:	4642      	mov	r2, r8
 800a1fa:	464b      	mov	r3, r9
 800a1fc:	4937      	ldr	r1, [pc, #220]	; (800a2dc <_dtoa_r+0x644>)
 800a1fe:	2000      	movs	r0, #0
 800a200:	f7f6 f862 	bl	80002c8 <__aeabi_dsub>
 800a204:	ec53 2b19 	vmov	r2, r3, d9
 800a208:	f7f6 fc88 	bl	8000b1c <__aeabi_dcmplt>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	f040 80b6 	bne.w	800a37e <_dtoa_r+0x6e6>
 800a212:	9b02      	ldr	r3, [sp, #8]
 800a214:	429d      	cmp	r5, r3
 800a216:	f43f af7c 	beq.w	800a112 <_dtoa_r+0x47a>
 800a21a:	4b31      	ldr	r3, [pc, #196]	; (800a2e0 <_dtoa_r+0x648>)
 800a21c:	ec51 0b19 	vmov	r0, r1, d9
 800a220:	2200      	movs	r2, #0
 800a222:	f7f6 fa09 	bl	8000638 <__aeabi_dmul>
 800a226:	4b2e      	ldr	r3, [pc, #184]	; (800a2e0 <_dtoa_r+0x648>)
 800a228:	ec41 0b19 	vmov	d9, r0, r1
 800a22c:	2200      	movs	r2, #0
 800a22e:	4640      	mov	r0, r8
 800a230:	4649      	mov	r1, r9
 800a232:	f7f6 fa01 	bl	8000638 <__aeabi_dmul>
 800a236:	4680      	mov	r8, r0
 800a238:	4689      	mov	r9, r1
 800a23a:	e7c5      	b.n	800a1c8 <_dtoa_r+0x530>
 800a23c:	ec51 0b17 	vmov	r0, r1, d7
 800a240:	f7f6 f9fa 	bl	8000638 <__aeabi_dmul>
 800a244:	9b02      	ldr	r3, [sp, #8]
 800a246:	9d00      	ldr	r5, [sp, #0]
 800a248:	930f      	str	r3, [sp, #60]	; 0x3c
 800a24a:	ec41 0b19 	vmov	d9, r0, r1
 800a24e:	4649      	mov	r1, r9
 800a250:	4640      	mov	r0, r8
 800a252:	f7f6 fca1 	bl	8000b98 <__aeabi_d2iz>
 800a256:	4606      	mov	r6, r0
 800a258:	f7f6 f984 	bl	8000564 <__aeabi_i2d>
 800a25c:	3630      	adds	r6, #48	; 0x30
 800a25e:	4602      	mov	r2, r0
 800a260:	460b      	mov	r3, r1
 800a262:	4640      	mov	r0, r8
 800a264:	4649      	mov	r1, r9
 800a266:	f7f6 f82f 	bl	80002c8 <__aeabi_dsub>
 800a26a:	f805 6b01 	strb.w	r6, [r5], #1
 800a26e:	9b02      	ldr	r3, [sp, #8]
 800a270:	429d      	cmp	r5, r3
 800a272:	4680      	mov	r8, r0
 800a274:	4689      	mov	r9, r1
 800a276:	f04f 0200 	mov.w	r2, #0
 800a27a:	d124      	bne.n	800a2c6 <_dtoa_r+0x62e>
 800a27c:	4b1b      	ldr	r3, [pc, #108]	; (800a2ec <_dtoa_r+0x654>)
 800a27e:	ec51 0b19 	vmov	r0, r1, d9
 800a282:	f7f6 f823 	bl	80002cc <__adddf3>
 800a286:	4602      	mov	r2, r0
 800a288:	460b      	mov	r3, r1
 800a28a:	4640      	mov	r0, r8
 800a28c:	4649      	mov	r1, r9
 800a28e:	f7f6 fc63 	bl	8000b58 <__aeabi_dcmpgt>
 800a292:	2800      	cmp	r0, #0
 800a294:	d173      	bne.n	800a37e <_dtoa_r+0x6e6>
 800a296:	ec53 2b19 	vmov	r2, r3, d9
 800a29a:	4914      	ldr	r1, [pc, #80]	; (800a2ec <_dtoa_r+0x654>)
 800a29c:	2000      	movs	r0, #0
 800a29e:	f7f6 f813 	bl	80002c8 <__aeabi_dsub>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	4640      	mov	r0, r8
 800a2a8:	4649      	mov	r1, r9
 800a2aa:	f7f6 fc37 	bl	8000b1c <__aeabi_dcmplt>
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	f43f af2f 	beq.w	800a112 <_dtoa_r+0x47a>
 800a2b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a2b6:	1e6b      	subs	r3, r5, #1
 800a2b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a2be:	2b30      	cmp	r3, #48	; 0x30
 800a2c0:	d0f8      	beq.n	800a2b4 <_dtoa_r+0x61c>
 800a2c2:	46bb      	mov	fp, r7
 800a2c4:	e04a      	b.n	800a35c <_dtoa_r+0x6c4>
 800a2c6:	4b06      	ldr	r3, [pc, #24]	; (800a2e0 <_dtoa_r+0x648>)
 800a2c8:	f7f6 f9b6 	bl	8000638 <__aeabi_dmul>
 800a2cc:	4680      	mov	r8, r0
 800a2ce:	4689      	mov	r9, r1
 800a2d0:	e7bd      	b.n	800a24e <_dtoa_r+0x5b6>
 800a2d2:	bf00      	nop
 800a2d4:	0800c9e0 	.word	0x0800c9e0
 800a2d8:	0800c9b8 	.word	0x0800c9b8
 800a2dc:	3ff00000 	.word	0x3ff00000
 800a2e0:	40240000 	.word	0x40240000
 800a2e4:	401c0000 	.word	0x401c0000
 800a2e8:	40140000 	.word	0x40140000
 800a2ec:	3fe00000 	.word	0x3fe00000
 800a2f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a2f4:	9d00      	ldr	r5, [sp, #0]
 800a2f6:	4642      	mov	r2, r8
 800a2f8:	464b      	mov	r3, r9
 800a2fa:	4630      	mov	r0, r6
 800a2fc:	4639      	mov	r1, r7
 800a2fe:	f7f6 fac5 	bl	800088c <__aeabi_ddiv>
 800a302:	f7f6 fc49 	bl	8000b98 <__aeabi_d2iz>
 800a306:	9001      	str	r0, [sp, #4]
 800a308:	f7f6 f92c 	bl	8000564 <__aeabi_i2d>
 800a30c:	4642      	mov	r2, r8
 800a30e:	464b      	mov	r3, r9
 800a310:	f7f6 f992 	bl	8000638 <__aeabi_dmul>
 800a314:	4602      	mov	r2, r0
 800a316:	460b      	mov	r3, r1
 800a318:	4630      	mov	r0, r6
 800a31a:	4639      	mov	r1, r7
 800a31c:	f7f5 ffd4 	bl	80002c8 <__aeabi_dsub>
 800a320:	9e01      	ldr	r6, [sp, #4]
 800a322:	9f04      	ldr	r7, [sp, #16]
 800a324:	3630      	adds	r6, #48	; 0x30
 800a326:	f805 6b01 	strb.w	r6, [r5], #1
 800a32a:	9e00      	ldr	r6, [sp, #0]
 800a32c:	1bae      	subs	r6, r5, r6
 800a32e:	42b7      	cmp	r7, r6
 800a330:	4602      	mov	r2, r0
 800a332:	460b      	mov	r3, r1
 800a334:	d134      	bne.n	800a3a0 <_dtoa_r+0x708>
 800a336:	f7f5 ffc9 	bl	80002cc <__adddf3>
 800a33a:	4642      	mov	r2, r8
 800a33c:	464b      	mov	r3, r9
 800a33e:	4606      	mov	r6, r0
 800a340:	460f      	mov	r7, r1
 800a342:	f7f6 fc09 	bl	8000b58 <__aeabi_dcmpgt>
 800a346:	b9c8      	cbnz	r0, 800a37c <_dtoa_r+0x6e4>
 800a348:	4642      	mov	r2, r8
 800a34a:	464b      	mov	r3, r9
 800a34c:	4630      	mov	r0, r6
 800a34e:	4639      	mov	r1, r7
 800a350:	f7f6 fbda 	bl	8000b08 <__aeabi_dcmpeq>
 800a354:	b110      	cbz	r0, 800a35c <_dtoa_r+0x6c4>
 800a356:	9b01      	ldr	r3, [sp, #4]
 800a358:	07db      	lsls	r3, r3, #31
 800a35a:	d40f      	bmi.n	800a37c <_dtoa_r+0x6e4>
 800a35c:	4651      	mov	r1, sl
 800a35e:	4620      	mov	r0, r4
 800a360:	f000 fe82 	bl	800b068 <_Bfree>
 800a364:	2300      	movs	r3, #0
 800a366:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a368:	702b      	strb	r3, [r5, #0]
 800a36a:	f10b 0301 	add.w	r3, fp, #1
 800a36e:	6013      	str	r3, [r2, #0]
 800a370:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a372:	2b00      	cmp	r3, #0
 800a374:	f43f ace2 	beq.w	8009d3c <_dtoa_r+0xa4>
 800a378:	601d      	str	r5, [r3, #0]
 800a37a:	e4df      	b.n	8009d3c <_dtoa_r+0xa4>
 800a37c:	465f      	mov	r7, fp
 800a37e:	462b      	mov	r3, r5
 800a380:	461d      	mov	r5, r3
 800a382:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a386:	2a39      	cmp	r2, #57	; 0x39
 800a388:	d106      	bne.n	800a398 <_dtoa_r+0x700>
 800a38a:	9a00      	ldr	r2, [sp, #0]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d1f7      	bne.n	800a380 <_dtoa_r+0x6e8>
 800a390:	9900      	ldr	r1, [sp, #0]
 800a392:	2230      	movs	r2, #48	; 0x30
 800a394:	3701      	adds	r7, #1
 800a396:	700a      	strb	r2, [r1, #0]
 800a398:	781a      	ldrb	r2, [r3, #0]
 800a39a:	3201      	adds	r2, #1
 800a39c:	701a      	strb	r2, [r3, #0]
 800a39e:	e790      	b.n	800a2c2 <_dtoa_r+0x62a>
 800a3a0:	4ba3      	ldr	r3, [pc, #652]	; (800a630 <_dtoa_r+0x998>)
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f7f6 f948 	bl	8000638 <__aeabi_dmul>
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	4606      	mov	r6, r0
 800a3ae:	460f      	mov	r7, r1
 800a3b0:	f7f6 fbaa 	bl	8000b08 <__aeabi_dcmpeq>
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d09e      	beq.n	800a2f6 <_dtoa_r+0x65e>
 800a3b8:	e7d0      	b.n	800a35c <_dtoa_r+0x6c4>
 800a3ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3bc:	2a00      	cmp	r2, #0
 800a3be:	f000 80ca 	beq.w	800a556 <_dtoa_r+0x8be>
 800a3c2:	9a07      	ldr	r2, [sp, #28]
 800a3c4:	2a01      	cmp	r2, #1
 800a3c6:	f300 80ad 	bgt.w	800a524 <_dtoa_r+0x88c>
 800a3ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3cc:	2a00      	cmp	r2, #0
 800a3ce:	f000 80a5 	beq.w	800a51c <_dtoa_r+0x884>
 800a3d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a3d6:	9e08      	ldr	r6, [sp, #32]
 800a3d8:	9d05      	ldr	r5, [sp, #20]
 800a3da:	9a05      	ldr	r2, [sp, #20]
 800a3dc:	441a      	add	r2, r3
 800a3de:	9205      	str	r2, [sp, #20]
 800a3e0:	9a06      	ldr	r2, [sp, #24]
 800a3e2:	2101      	movs	r1, #1
 800a3e4:	441a      	add	r2, r3
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	9206      	str	r2, [sp, #24]
 800a3ea:	f000 ff3d 	bl	800b268 <__i2b>
 800a3ee:	4607      	mov	r7, r0
 800a3f0:	b165      	cbz	r5, 800a40c <_dtoa_r+0x774>
 800a3f2:	9b06      	ldr	r3, [sp, #24]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	dd09      	ble.n	800a40c <_dtoa_r+0x774>
 800a3f8:	42ab      	cmp	r3, r5
 800a3fa:	9a05      	ldr	r2, [sp, #20]
 800a3fc:	bfa8      	it	ge
 800a3fe:	462b      	movge	r3, r5
 800a400:	1ad2      	subs	r2, r2, r3
 800a402:	9205      	str	r2, [sp, #20]
 800a404:	9a06      	ldr	r2, [sp, #24]
 800a406:	1aed      	subs	r5, r5, r3
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	9306      	str	r3, [sp, #24]
 800a40c:	9b08      	ldr	r3, [sp, #32]
 800a40e:	b1f3      	cbz	r3, 800a44e <_dtoa_r+0x7b6>
 800a410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a412:	2b00      	cmp	r3, #0
 800a414:	f000 80a3 	beq.w	800a55e <_dtoa_r+0x8c6>
 800a418:	2e00      	cmp	r6, #0
 800a41a:	dd10      	ble.n	800a43e <_dtoa_r+0x7a6>
 800a41c:	4639      	mov	r1, r7
 800a41e:	4632      	mov	r2, r6
 800a420:	4620      	mov	r0, r4
 800a422:	f000 ffe1 	bl	800b3e8 <__pow5mult>
 800a426:	4652      	mov	r2, sl
 800a428:	4601      	mov	r1, r0
 800a42a:	4607      	mov	r7, r0
 800a42c:	4620      	mov	r0, r4
 800a42e:	f000 ff31 	bl	800b294 <__multiply>
 800a432:	4651      	mov	r1, sl
 800a434:	4680      	mov	r8, r0
 800a436:	4620      	mov	r0, r4
 800a438:	f000 fe16 	bl	800b068 <_Bfree>
 800a43c:	46c2      	mov	sl, r8
 800a43e:	9b08      	ldr	r3, [sp, #32]
 800a440:	1b9a      	subs	r2, r3, r6
 800a442:	d004      	beq.n	800a44e <_dtoa_r+0x7b6>
 800a444:	4651      	mov	r1, sl
 800a446:	4620      	mov	r0, r4
 800a448:	f000 ffce 	bl	800b3e8 <__pow5mult>
 800a44c:	4682      	mov	sl, r0
 800a44e:	2101      	movs	r1, #1
 800a450:	4620      	mov	r0, r4
 800a452:	f000 ff09 	bl	800b268 <__i2b>
 800a456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a458:	2b00      	cmp	r3, #0
 800a45a:	4606      	mov	r6, r0
 800a45c:	f340 8081 	ble.w	800a562 <_dtoa_r+0x8ca>
 800a460:	461a      	mov	r2, r3
 800a462:	4601      	mov	r1, r0
 800a464:	4620      	mov	r0, r4
 800a466:	f000 ffbf 	bl	800b3e8 <__pow5mult>
 800a46a:	9b07      	ldr	r3, [sp, #28]
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	4606      	mov	r6, r0
 800a470:	dd7a      	ble.n	800a568 <_dtoa_r+0x8d0>
 800a472:	f04f 0800 	mov.w	r8, #0
 800a476:	6933      	ldr	r3, [r6, #16]
 800a478:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a47c:	6918      	ldr	r0, [r3, #16]
 800a47e:	f000 fea5 	bl	800b1cc <__hi0bits>
 800a482:	f1c0 0020 	rsb	r0, r0, #32
 800a486:	9b06      	ldr	r3, [sp, #24]
 800a488:	4418      	add	r0, r3
 800a48a:	f010 001f 	ands.w	r0, r0, #31
 800a48e:	f000 8094 	beq.w	800a5ba <_dtoa_r+0x922>
 800a492:	f1c0 0320 	rsb	r3, r0, #32
 800a496:	2b04      	cmp	r3, #4
 800a498:	f340 8085 	ble.w	800a5a6 <_dtoa_r+0x90e>
 800a49c:	9b05      	ldr	r3, [sp, #20]
 800a49e:	f1c0 001c 	rsb	r0, r0, #28
 800a4a2:	4403      	add	r3, r0
 800a4a4:	9305      	str	r3, [sp, #20]
 800a4a6:	9b06      	ldr	r3, [sp, #24]
 800a4a8:	4403      	add	r3, r0
 800a4aa:	4405      	add	r5, r0
 800a4ac:	9306      	str	r3, [sp, #24]
 800a4ae:	9b05      	ldr	r3, [sp, #20]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	dd05      	ble.n	800a4c0 <_dtoa_r+0x828>
 800a4b4:	4651      	mov	r1, sl
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f000 ffef 	bl	800b49c <__lshift>
 800a4be:	4682      	mov	sl, r0
 800a4c0:	9b06      	ldr	r3, [sp, #24]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	dd05      	ble.n	800a4d2 <_dtoa_r+0x83a>
 800a4c6:	4631      	mov	r1, r6
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f000 ffe6 	bl	800b49c <__lshift>
 800a4d0:	4606      	mov	r6, r0
 800a4d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d072      	beq.n	800a5be <_dtoa_r+0x926>
 800a4d8:	4631      	mov	r1, r6
 800a4da:	4650      	mov	r0, sl
 800a4dc:	f001 f84a 	bl	800b574 <__mcmp>
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	da6c      	bge.n	800a5be <_dtoa_r+0x926>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	4651      	mov	r1, sl
 800a4e8:	220a      	movs	r2, #10
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f000 fdde 	bl	800b0ac <__multadd>
 800a4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a4f6:	4682      	mov	sl, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f000 81b0 	beq.w	800a85e <_dtoa_r+0xbc6>
 800a4fe:	2300      	movs	r3, #0
 800a500:	4639      	mov	r1, r7
 800a502:	220a      	movs	r2, #10
 800a504:	4620      	mov	r0, r4
 800a506:	f000 fdd1 	bl	800b0ac <__multadd>
 800a50a:	9b01      	ldr	r3, [sp, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	4607      	mov	r7, r0
 800a510:	f300 8096 	bgt.w	800a640 <_dtoa_r+0x9a8>
 800a514:	9b07      	ldr	r3, [sp, #28]
 800a516:	2b02      	cmp	r3, #2
 800a518:	dc59      	bgt.n	800a5ce <_dtoa_r+0x936>
 800a51a:	e091      	b.n	800a640 <_dtoa_r+0x9a8>
 800a51c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a51e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a522:	e758      	b.n	800a3d6 <_dtoa_r+0x73e>
 800a524:	9b04      	ldr	r3, [sp, #16]
 800a526:	1e5e      	subs	r6, r3, #1
 800a528:	9b08      	ldr	r3, [sp, #32]
 800a52a:	42b3      	cmp	r3, r6
 800a52c:	bfbf      	itttt	lt
 800a52e:	9b08      	ldrlt	r3, [sp, #32]
 800a530:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a532:	9608      	strlt	r6, [sp, #32]
 800a534:	1af3      	sublt	r3, r6, r3
 800a536:	bfb4      	ite	lt
 800a538:	18d2      	addlt	r2, r2, r3
 800a53a:	1b9e      	subge	r6, r3, r6
 800a53c:	9b04      	ldr	r3, [sp, #16]
 800a53e:	bfbc      	itt	lt
 800a540:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a542:	2600      	movlt	r6, #0
 800a544:	2b00      	cmp	r3, #0
 800a546:	bfb7      	itett	lt
 800a548:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a54c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a550:	1a9d      	sublt	r5, r3, r2
 800a552:	2300      	movlt	r3, #0
 800a554:	e741      	b.n	800a3da <_dtoa_r+0x742>
 800a556:	9e08      	ldr	r6, [sp, #32]
 800a558:	9d05      	ldr	r5, [sp, #20]
 800a55a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a55c:	e748      	b.n	800a3f0 <_dtoa_r+0x758>
 800a55e:	9a08      	ldr	r2, [sp, #32]
 800a560:	e770      	b.n	800a444 <_dtoa_r+0x7ac>
 800a562:	9b07      	ldr	r3, [sp, #28]
 800a564:	2b01      	cmp	r3, #1
 800a566:	dc19      	bgt.n	800a59c <_dtoa_r+0x904>
 800a568:	9b02      	ldr	r3, [sp, #8]
 800a56a:	b9bb      	cbnz	r3, 800a59c <_dtoa_r+0x904>
 800a56c:	9b03      	ldr	r3, [sp, #12]
 800a56e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a572:	b99b      	cbnz	r3, 800a59c <_dtoa_r+0x904>
 800a574:	9b03      	ldr	r3, [sp, #12]
 800a576:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a57a:	0d1b      	lsrs	r3, r3, #20
 800a57c:	051b      	lsls	r3, r3, #20
 800a57e:	b183      	cbz	r3, 800a5a2 <_dtoa_r+0x90a>
 800a580:	9b05      	ldr	r3, [sp, #20]
 800a582:	3301      	adds	r3, #1
 800a584:	9305      	str	r3, [sp, #20]
 800a586:	9b06      	ldr	r3, [sp, #24]
 800a588:	3301      	adds	r3, #1
 800a58a:	9306      	str	r3, [sp, #24]
 800a58c:	f04f 0801 	mov.w	r8, #1
 800a590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a592:	2b00      	cmp	r3, #0
 800a594:	f47f af6f 	bne.w	800a476 <_dtoa_r+0x7de>
 800a598:	2001      	movs	r0, #1
 800a59a:	e774      	b.n	800a486 <_dtoa_r+0x7ee>
 800a59c:	f04f 0800 	mov.w	r8, #0
 800a5a0:	e7f6      	b.n	800a590 <_dtoa_r+0x8f8>
 800a5a2:	4698      	mov	r8, r3
 800a5a4:	e7f4      	b.n	800a590 <_dtoa_r+0x8f8>
 800a5a6:	d082      	beq.n	800a4ae <_dtoa_r+0x816>
 800a5a8:	9a05      	ldr	r2, [sp, #20]
 800a5aa:	331c      	adds	r3, #28
 800a5ac:	441a      	add	r2, r3
 800a5ae:	9205      	str	r2, [sp, #20]
 800a5b0:	9a06      	ldr	r2, [sp, #24]
 800a5b2:	441a      	add	r2, r3
 800a5b4:	441d      	add	r5, r3
 800a5b6:	9206      	str	r2, [sp, #24]
 800a5b8:	e779      	b.n	800a4ae <_dtoa_r+0x816>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	e7f4      	b.n	800a5a8 <_dtoa_r+0x910>
 800a5be:	9b04      	ldr	r3, [sp, #16]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	dc37      	bgt.n	800a634 <_dtoa_r+0x99c>
 800a5c4:	9b07      	ldr	r3, [sp, #28]
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	dd34      	ble.n	800a634 <_dtoa_r+0x99c>
 800a5ca:	9b04      	ldr	r3, [sp, #16]
 800a5cc:	9301      	str	r3, [sp, #4]
 800a5ce:	9b01      	ldr	r3, [sp, #4]
 800a5d0:	b963      	cbnz	r3, 800a5ec <_dtoa_r+0x954>
 800a5d2:	4631      	mov	r1, r6
 800a5d4:	2205      	movs	r2, #5
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	f000 fd68 	bl	800b0ac <__multadd>
 800a5dc:	4601      	mov	r1, r0
 800a5de:	4606      	mov	r6, r0
 800a5e0:	4650      	mov	r0, sl
 800a5e2:	f000 ffc7 	bl	800b574 <__mcmp>
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	f73f adbb 	bgt.w	800a162 <_dtoa_r+0x4ca>
 800a5ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ee:	9d00      	ldr	r5, [sp, #0]
 800a5f0:	ea6f 0b03 	mvn.w	fp, r3
 800a5f4:	f04f 0800 	mov.w	r8, #0
 800a5f8:	4631      	mov	r1, r6
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f000 fd34 	bl	800b068 <_Bfree>
 800a600:	2f00      	cmp	r7, #0
 800a602:	f43f aeab 	beq.w	800a35c <_dtoa_r+0x6c4>
 800a606:	f1b8 0f00 	cmp.w	r8, #0
 800a60a:	d005      	beq.n	800a618 <_dtoa_r+0x980>
 800a60c:	45b8      	cmp	r8, r7
 800a60e:	d003      	beq.n	800a618 <_dtoa_r+0x980>
 800a610:	4641      	mov	r1, r8
 800a612:	4620      	mov	r0, r4
 800a614:	f000 fd28 	bl	800b068 <_Bfree>
 800a618:	4639      	mov	r1, r7
 800a61a:	4620      	mov	r0, r4
 800a61c:	f000 fd24 	bl	800b068 <_Bfree>
 800a620:	e69c      	b.n	800a35c <_dtoa_r+0x6c4>
 800a622:	2600      	movs	r6, #0
 800a624:	4637      	mov	r7, r6
 800a626:	e7e1      	b.n	800a5ec <_dtoa_r+0x954>
 800a628:	46bb      	mov	fp, r7
 800a62a:	4637      	mov	r7, r6
 800a62c:	e599      	b.n	800a162 <_dtoa_r+0x4ca>
 800a62e:	bf00      	nop
 800a630:	40240000 	.word	0x40240000
 800a634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a636:	2b00      	cmp	r3, #0
 800a638:	f000 80c8 	beq.w	800a7cc <_dtoa_r+0xb34>
 800a63c:	9b04      	ldr	r3, [sp, #16]
 800a63e:	9301      	str	r3, [sp, #4]
 800a640:	2d00      	cmp	r5, #0
 800a642:	dd05      	ble.n	800a650 <_dtoa_r+0x9b8>
 800a644:	4639      	mov	r1, r7
 800a646:	462a      	mov	r2, r5
 800a648:	4620      	mov	r0, r4
 800a64a:	f000 ff27 	bl	800b49c <__lshift>
 800a64e:	4607      	mov	r7, r0
 800a650:	f1b8 0f00 	cmp.w	r8, #0
 800a654:	d05b      	beq.n	800a70e <_dtoa_r+0xa76>
 800a656:	6879      	ldr	r1, [r7, #4]
 800a658:	4620      	mov	r0, r4
 800a65a:	f000 fcc5 	bl	800afe8 <_Balloc>
 800a65e:	4605      	mov	r5, r0
 800a660:	b928      	cbnz	r0, 800a66e <_dtoa_r+0x9d6>
 800a662:	4b83      	ldr	r3, [pc, #524]	; (800a870 <_dtoa_r+0xbd8>)
 800a664:	4602      	mov	r2, r0
 800a666:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a66a:	f7ff bb2e 	b.w	8009cca <_dtoa_r+0x32>
 800a66e:	693a      	ldr	r2, [r7, #16]
 800a670:	3202      	adds	r2, #2
 800a672:	0092      	lsls	r2, r2, #2
 800a674:	f107 010c 	add.w	r1, r7, #12
 800a678:	300c      	adds	r0, #12
 800a67a:	f7ff fa66 	bl	8009b4a <memcpy>
 800a67e:	2201      	movs	r2, #1
 800a680:	4629      	mov	r1, r5
 800a682:	4620      	mov	r0, r4
 800a684:	f000 ff0a 	bl	800b49c <__lshift>
 800a688:	9b00      	ldr	r3, [sp, #0]
 800a68a:	3301      	adds	r3, #1
 800a68c:	9304      	str	r3, [sp, #16]
 800a68e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a692:	4413      	add	r3, r2
 800a694:	9308      	str	r3, [sp, #32]
 800a696:	9b02      	ldr	r3, [sp, #8]
 800a698:	f003 0301 	and.w	r3, r3, #1
 800a69c:	46b8      	mov	r8, r7
 800a69e:	9306      	str	r3, [sp, #24]
 800a6a0:	4607      	mov	r7, r0
 800a6a2:	9b04      	ldr	r3, [sp, #16]
 800a6a4:	4631      	mov	r1, r6
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	4650      	mov	r0, sl
 800a6aa:	9301      	str	r3, [sp, #4]
 800a6ac:	f7ff fa6a 	bl	8009b84 <quorem>
 800a6b0:	4641      	mov	r1, r8
 800a6b2:	9002      	str	r0, [sp, #8]
 800a6b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a6b8:	4650      	mov	r0, sl
 800a6ba:	f000 ff5b 	bl	800b574 <__mcmp>
 800a6be:	463a      	mov	r2, r7
 800a6c0:	9005      	str	r0, [sp, #20]
 800a6c2:	4631      	mov	r1, r6
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f000 ff71 	bl	800b5ac <__mdiff>
 800a6ca:	68c2      	ldr	r2, [r0, #12]
 800a6cc:	4605      	mov	r5, r0
 800a6ce:	bb02      	cbnz	r2, 800a712 <_dtoa_r+0xa7a>
 800a6d0:	4601      	mov	r1, r0
 800a6d2:	4650      	mov	r0, sl
 800a6d4:	f000 ff4e 	bl	800b574 <__mcmp>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	4629      	mov	r1, r5
 800a6dc:	4620      	mov	r0, r4
 800a6de:	9209      	str	r2, [sp, #36]	; 0x24
 800a6e0:	f000 fcc2 	bl	800b068 <_Bfree>
 800a6e4:	9b07      	ldr	r3, [sp, #28]
 800a6e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6e8:	9d04      	ldr	r5, [sp, #16]
 800a6ea:	ea43 0102 	orr.w	r1, r3, r2
 800a6ee:	9b06      	ldr	r3, [sp, #24]
 800a6f0:	4319      	orrs	r1, r3
 800a6f2:	d110      	bne.n	800a716 <_dtoa_r+0xa7e>
 800a6f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a6f8:	d029      	beq.n	800a74e <_dtoa_r+0xab6>
 800a6fa:	9b05      	ldr	r3, [sp, #20]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	dd02      	ble.n	800a706 <_dtoa_r+0xa6e>
 800a700:	9b02      	ldr	r3, [sp, #8]
 800a702:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a706:	9b01      	ldr	r3, [sp, #4]
 800a708:	f883 9000 	strb.w	r9, [r3]
 800a70c:	e774      	b.n	800a5f8 <_dtoa_r+0x960>
 800a70e:	4638      	mov	r0, r7
 800a710:	e7ba      	b.n	800a688 <_dtoa_r+0x9f0>
 800a712:	2201      	movs	r2, #1
 800a714:	e7e1      	b.n	800a6da <_dtoa_r+0xa42>
 800a716:	9b05      	ldr	r3, [sp, #20]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	db04      	blt.n	800a726 <_dtoa_r+0xa8e>
 800a71c:	9907      	ldr	r1, [sp, #28]
 800a71e:	430b      	orrs	r3, r1
 800a720:	9906      	ldr	r1, [sp, #24]
 800a722:	430b      	orrs	r3, r1
 800a724:	d120      	bne.n	800a768 <_dtoa_r+0xad0>
 800a726:	2a00      	cmp	r2, #0
 800a728:	dded      	ble.n	800a706 <_dtoa_r+0xa6e>
 800a72a:	4651      	mov	r1, sl
 800a72c:	2201      	movs	r2, #1
 800a72e:	4620      	mov	r0, r4
 800a730:	f000 feb4 	bl	800b49c <__lshift>
 800a734:	4631      	mov	r1, r6
 800a736:	4682      	mov	sl, r0
 800a738:	f000 ff1c 	bl	800b574 <__mcmp>
 800a73c:	2800      	cmp	r0, #0
 800a73e:	dc03      	bgt.n	800a748 <_dtoa_r+0xab0>
 800a740:	d1e1      	bne.n	800a706 <_dtoa_r+0xa6e>
 800a742:	f019 0f01 	tst.w	r9, #1
 800a746:	d0de      	beq.n	800a706 <_dtoa_r+0xa6e>
 800a748:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a74c:	d1d8      	bne.n	800a700 <_dtoa_r+0xa68>
 800a74e:	9a01      	ldr	r2, [sp, #4]
 800a750:	2339      	movs	r3, #57	; 0x39
 800a752:	7013      	strb	r3, [r2, #0]
 800a754:	462b      	mov	r3, r5
 800a756:	461d      	mov	r5, r3
 800a758:	3b01      	subs	r3, #1
 800a75a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a75e:	2a39      	cmp	r2, #57	; 0x39
 800a760:	d06c      	beq.n	800a83c <_dtoa_r+0xba4>
 800a762:	3201      	adds	r2, #1
 800a764:	701a      	strb	r2, [r3, #0]
 800a766:	e747      	b.n	800a5f8 <_dtoa_r+0x960>
 800a768:	2a00      	cmp	r2, #0
 800a76a:	dd07      	ble.n	800a77c <_dtoa_r+0xae4>
 800a76c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a770:	d0ed      	beq.n	800a74e <_dtoa_r+0xab6>
 800a772:	9a01      	ldr	r2, [sp, #4]
 800a774:	f109 0301 	add.w	r3, r9, #1
 800a778:	7013      	strb	r3, [r2, #0]
 800a77a:	e73d      	b.n	800a5f8 <_dtoa_r+0x960>
 800a77c:	9b04      	ldr	r3, [sp, #16]
 800a77e:	9a08      	ldr	r2, [sp, #32]
 800a780:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a784:	4293      	cmp	r3, r2
 800a786:	d043      	beq.n	800a810 <_dtoa_r+0xb78>
 800a788:	4651      	mov	r1, sl
 800a78a:	2300      	movs	r3, #0
 800a78c:	220a      	movs	r2, #10
 800a78e:	4620      	mov	r0, r4
 800a790:	f000 fc8c 	bl	800b0ac <__multadd>
 800a794:	45b8      	cmp	r8, r7
 800a796:	4682      	mov	sl, r0
 800a798:	f04f 0300 	mov.w	r3, #0
 800a79c:	f04f 020a 	mov.w	r2, #10
 800a7a0:	4641      	mov	r1, r8
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	d107      	bne.n	800a7b6 <_dtoa_r+0xb1e>
 800a7a6:	f000 fc81 	bl	800b0ac <__multadd>
 800a7aa:	4680      	mov	r8, r0
 800a7ac:	4607      	mov	r7, r0
 800a7ae:	9b04      	ldr	r3, [sp, #16]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	9304      	str	r3, [sp, #16]
 800a7b4:	e775      	b.n	800a6a2 <_dtoa_r+0xa0a>
 800a7b6:	f000 fc79 	bl	800b0ac <__multadd>
 800a7ba:	4639      	mov	r1, r7
 800a7bc:	4680      	mov	r8, r0
 800a7be:	2300      	movs	r3, #0
 800a7c0:	220a      	movs	r2, #10
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f000 fc72 	bl	800b0ac <__multadd>
 800a7c8:	4607      	mov	r7, r0
 800a7ca:	e7f0      	b.n	800a7ae <_dtoa_r+0xb16>
 800a7cc:	9b04      	ldr	r3, [sp, #16]
 800a7ce:	9301      	str	r3, [sp, #4]
 800a7d0:	9d00      	ldr	r5, [sp, #0]
 800a7d2:	4631      	mov	r1, r6
 800a7d4:	4650      	mov	r0, sl
 800a7d6:	f7ff f9d5 	bl	8009b84 <quorem>
 800a7da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a7de:	9b00      	ldr	r3, [sp, #0]
 800a7e0:	f805 9b01 	strb.w	r9, [r5], #1
 800a7e4:	1aea      	subs	r2, r5, r3
 800a7e6:	9b01      	ldr	r3, [sp, #4]
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	dd07      	ble.n	800a7fc <_dtoa_r+0xb64>
 800a7ec:	4651      	mov	r1, sl
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	220a      	movs	r2, #10
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	f000 fc5a 	bl	800b0ac <__multadd>
 800a7f8:	4682      	mov	sl, r0
 800a7fa:	e7ea      	b.n	800a7d2 <_dtoa_r+0xb3a>
 800a7fc:	9b01      	ldr	r3, [sp, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	bfc8      	it	gt
 800a802:	461d      	movgt	r5, r3
 800a804:	9b00      	ldr	r3, [sp, #0]
 800a806:	bfd8      	it	le
 800a808:	2501      	movle	r5, #1
 800a80a:	441d      	add	r5, r3
 800a80c:	f04f 0800 	mov.w	r8, #0
 800a810:	4651      	mov	r1, sl
 800a812:	2201      	movs	r2, #1
 800a814:	4620      	mov	r0, r4
 800a816:	f000 fe41 	bl	800b49c <__lshift>
 800a81a:	4631      	mov	r1, r6
 800a81c:	4682      	mov	sl, r0
 800a81e:	f000 fea9 	bl	800b574 <__mcmp>
 800a822:	2800      	cmp	r0, #0
 800a824:	dc96      	bgt.n	800a754 <_dtoa_r+0xabc>
 800a826:	d102      	bne.n	800a82e <_dtoa_r+0xb96>
 800a828:	f019 0f01 	tst.w	r9, #1
 800a82c:	d192      	bne.n	800a754 <_dtoa_r+0xabc>
 800a82e:	462b      	mov	r3, r5
 800a830:	461d      	mov	r5, r3
 800a832:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a836:	2a30      	cmp	r2, #48	; 0x30
 800a838:	d0fa      	beq.n	800a830 <_dtoa_r+0xb98>
 800a83a:	e6dd      	b.n	800a5f8 <_dtoa_r+0x960>
 800a83c:	9a00      	ldr	r2, [sp, #0]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d189      	bne.n	800a756 <_dtoa_r+0xabe>
 800a842:	f10b 0b01 	add.w	fp, fp, #1
 800a846:	2331      	movs	r3, #49	; 0x31
 800a848:	e796      	b.n	800a778 <_dtoa_r+0xae0>
 800a84a:	4b0a      	ldr	r3, [pc, #40]	; (800a874 <_dtoa_r+0xbdc>)
 800a84c:	f7ff ba99 	b.w	8009d82 <_dtoa_r+0xea>
 800a850:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a852:	2b00      	cmp	r3, #0
 800a854:	f47f aa6d 	bne.w	8009d32 <_dtoa_r+0x9a>
 800a858:	4b07      	ldr	r3, [pc, #28]	; (800a878 <_dtoa_r+0xbe0>)
 800a85a:	f7ff ba92 	b.w	8009d82 <_dtoa_r+0xea>
 800a85e:	9b01      	ldr	r3, [sp, #4]
 800a860:	2b00      	cmp	r3, #0
 800a862:	dcb5      	bgt.n	800a7d0 <_dtoa_r+0xb38>
 800a864:	9b07      	ldr	r3, [sp, #28]
 800a866:	2b02      	cmp	r3, #2
 800a868:	f73f aeb1 	bgt.w	800a5ce <_dtoa_r+0x936>
 800a86c:	e7b0      	b.n	800a7d0 <_dtoa_r+0xb38>
 800a86e:	bf00      	nop
 800a870:	0800c8e9 	.word	0x0800c8e9
 800a874:	0800c841 	.word	0x0800c841
 800a878:	0800c86d 	.word	0x0800c86d

0800a87c <_free_r>:
 800a87c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a87e:	2900      	cmp	r1, #0
 800a880:	d044      	beq.n	800a90c <_free_r+0x90>
 800a882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a886:	9001      	str	r0, [sp, #4]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f1a1 0404 	sub.w	r4, r1, #4
 800a88e:	bfb8      	it	lt
 800a890:	18e4      	addlt	r4, r4, r3
 800a892:	f7fd fa19 	bl	8007cc8 <__malloc_lock>
 800a896:	4a1e      	ldr	r2, [pc, #120]	; (800a910 <_free_r+0x94>)
 800a898:	9801      	ldr	r0, [sp, #4]
 800a89a:	6813      	ldr	r3, [r2, #0]
 800a89c:	b933      	cbnz	r3, 800a8ac <_free_r+0x30>
 800a89e:	6063      	str	r3, [r4, #4]
 800a8a0:	6014      	str	r4, [r2, #0]
 800a8a2:	b003      	add	sp, #12
 800a8a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8a8:	f7fd ba14 	b.w	8007cd4 <__malloc_unlock>
 800a8ac:	42a3      	cmp	r3, r4
 800a8ae:	d908      	bls.n	800a8c2 <_free_r+0x46>
 800a8b0:	6825      	ldr	r5, [r4, #0]
 800a8b2:	1961      	adds	r1, r4, r5
 800a8b4:	428b      	cmp	r3, r1
 800a8b6:	bf01      	itttt	eq
 800a8b8:	6819      	ldreq	r1, [r3, #0]
 800a8ba:	685b      	ldreq	r3, [r3, #4]
 800a8bc:	1949      	addeq	r1, r1, r5
 800a8be:	6021      	streq	r1, [r4, #0]
 800a8c0:	e7ed      	b.n	800a89e <_free_r+0x22>
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	b10b      	cbz	r3, 800a8cc <_free_r+0x50>
 800a8c8:	42a3      	cmp	r3, r4
 800a8ca:	d9fa      	bls.n	800a8c2 <_free_r+0x46>
 800a8cc:	6811      	ldr	r1, [r2, #0]
 800a8ce:	1855      	adds	r5, r2, r1
 800a8d0:	42a5      	cmp	r5, r4
 800a8d2:	d10b      	bne.n	800a8ec <_free_r+0x70>
 800a8d4:	6824      	ldr	r4, [r4, #0]
 800a8d6:	4421      	add	r1, r4
 800a8d8:	1854      	adds	r4, r2, r1
 800a8da:	42a3      	cmp	r3, r4
 800a8dc:	6011      	str	r1, [r2, #0]
 800a8de:	d1e0      	bne.n	800a8a2 <_free_r+0x26>
 800a8e0:	681c      	ldr	r4, [r3, #0]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	6053      	str	r3, [r2, #4]
 800a8e6:	440c      	add	r4, r1
 800a8e8:	6014      	str	r4, [r2, #0]
 800a8ea:	e7da      	b.n	800a8a2 <_free_r+0x26>
 800a8ec:	d902      	bls.n	800a8f4 <_free_r+0x78>
 800a8ee:	230c      	movs	r3, #12
 800a8f0:	6003      	str	r3, [r0, #0]
 800a8f2:	e7d6      	b.n	800a8a2 <_free_r+0x26>
 800a8f4:	6825      	ldr	r5, [r4, #0]
 800a8f6:	1961      	adds	r1, r4, r5
 800a8f8:	428b      	cmp	r3, r1
 800a8fa:	bf04      	itt	eq
 800a8fc:	6819      	ldreq	r1, [r3, #0]
 800a8fe:	685b      	ldreq	r3, [r3, #4]
 800a900:	6063      	str	r3, [r4, #4]
 800a902:	bf04      	itt	eq
 800a904:	1949      	addeq	r1, r1, r5
 800a906:	6021      	streq	r1, [r4, #0]
 800a908:	6054      	str	r4, [r2, #4]
 800a90a:	e7ca      	b.n	800a8a2 <_free_r+0x26>
 800a90c:	b003      	add	sp, #12
 800a90e:	bd30      	pop	{r4, r5, pc}
 800a910:	20002b68 	.word	0x20002b68

0800a914 <rshift>:
 800a914:	6903      	ldr	r3, [r0, #16]
 800a916:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a91a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a91e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a922:	f100 0414 	add.w	r4, r0, #20
 800a926:	dd45      	ble.n	800a9b4 <rshift+0xa0>
 800a928:	f011 011f 	ands.w	r1, r1, #31
 800a92c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a930:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a934:	d10c      	bne.n	800a950 <rshift+0x3c>
 800a936:	f100 0710 	add.w	r7, r0, #16
 800a93a:	4629      	mov	r1, r5
 800a93c:	42b1      	cmp	r1, r6
 800a93e:	d334      	bcc.n	800a9aa <rshift+0x96>
 800a940:	1a9b      	subs	r3, r3, r2
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	1eea      	subs	r2, r5, #3
 800a946:	4296      	cmp	r6, r2
 800a948:	bf38      	it	cc
 800a94a:	2300      	movcc	r3, #0
 800a94c:	4423      	add	r3, r4
 800a94e:	e015      	b.n	800a97c <rshift+0x68>
 800a950:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a954:	f1c1 0820 	rsb	r8, r1, #32
 800a958:	40cf      	lsrs	r7, r1
 800a95a:	f105 0e04 	add.w	lr, r5, #4
 800a95e:	46a1      	mov	r9, r4
 800a960:	4576      	cmp	r6, lr
 800a962:	46f4      	mov	ip, lr
 800a964:	d815      	bhi.n	800a992 <rshift+0x7e>
 800a966:	1a9a      	subs	r2, r3, r2
 800a968:	0092      	lsls	r2, r2, #2
 800a96a:	3a04      	subs	r2, #4
 800a96c:	3501      	adds	r5, #1
 800a96e:	42ae      	cmp	r6, r5
 800a970:	bf38      	it	cc
 800a972:	2200      	movcc	r2, #0
 800a974:	18a3      	adds	r3, r4, r2
 800a976:	50a7      	str	r7, [r4, r2]
 800a978:	b107      	cbz	r7, 800a97c <rshift+0x68>
 800a97a:	3304      	adds	r3, #4
 800a97c:	1b1a      	subs	r2, r3, r4
 800a97e:	42a3      	cmp	r3, r4
 800a980:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a984:	bf08      	it	eq
 800a986:	2300      	moveq	r3, #0
 800a988:	6102      	str	r2, [r0, #16]
 800a98a:	bf08      	it	eq
 800a98c:	6143      	streq	r3, [r0, #20]
 800a98e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a992:	f8dc c000 	ldr.w	ip, [ip]
 800a996:	fa0c fc08 	lsl.w	ip, ip, r8
 800a99a:	ea4c 0707 	orr.w	r7, ip, r7
 800a99e:	f849 7b04 	str.w	r7, [r9], #4
 800a9a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a9a6:	40cf      	lsrs	r7, r1
 800a9a8:	e7da      	b.n	800a960 <rshift+0x4c>
 800a9aa:	f851 cb04 	ldr.w	ip, [r1], #4
 800a9ae:	f847 cf04 	str.w	ip, [r7, #4]!
 800a9b2:	e7c3      	b.n	800a93c <rshift+0x28>
 800a9b4:	4623      	mov	r3, r4
 800a9b6:	e7e1      	b.n	800a97c <rshift+0x68>

0800a9b8 <__hexdig_fun>:
 800a9b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a9bc:	2b09      	cmp	r3, #9
 800a9be:	d802      	bhi.n	800a9c6 <__hexdig_fun+0xe>
 800a9c0:	3820      	subs	r0, #32
 800a9c2:	b2c0      	uxtb	r0, r0
 800a9c4:	4770      	bx	lr
 800a9c6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a9ca:	2b05      	cmp	r3, #5
 800a9cc:	d801      	bhi.n	800a9d2 <__hexdig_fun+0x1a>
 800a9ce:	3847      	subs	r0, #71	; 0x47
 800a9d0:	e7f7      	b.n	800a9c2 <__hexdig_fun+0xa>
 800a9d2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a9d6:	2b05      	cmp	r3, #5
 800a9d8:	d801      	bhi.n	800a9de <__hexdig_fun+0x26>
 800a9da:	3827      	subs	r0, #39	; 0x27
 800a9dc:	e7f1      	b.n	800a9c2 <__hexdig_fun+0xa>
 800a9de:	2000      	movs	r0, #0
 800a9e0:	4770      	bx	lr
	...

0800a9e4 <__gethex>:
 800a9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e8:	4617      	mov	r7, r2
 800a9ea:	680a      	ldr	r2, [r1, #0]
 800a9ec:	b085      	sub	sp, #20
 800a9ee:	f102 0b02 	add.w	fp, r2, #2
 800a9f2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a9f6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a9fa:	4681      	mov	r9, r0
 800a9fc:	468a      	mov	sl, r1
 800a9fe:	9302      	str	r3, [sp, #8]
 800aa00:	32fe      	adds	r2, #254	; 0xfe
 800aa02:	eb02 030b 	add.w	r3, r2, fp
 800aa06:	46d8      	mov	r8, fp
 800aa08:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800aa0c:	9301      	str	r3, [sp, #4]
 800aa0e:	2830      	cmp	r0, #48	; 0x30
 800aa10:	d0f7      	beq.n	800aa02 <__gethex+0x1e>
 800aa12:	f7ff ffd1 	bl	800a9b8 <__hexdig_fun>
 800aa16:	4604      	mov	r4, r0
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	d138      	bne.n	800aa8e <__gethex+0xaa>
 800aa1c:	49a7      	ldr	r1, [pc, #668]	; (800acbc <__gethex+0x2d8>)
 800aa1e:	2201      	movs	r2, #1
 800aa20:	4640      	mov	r0, r8
 800aa22:	f7fe ffb4 	bl	800998e <strncmp>
 800aa26:	4606      	mov	r6, r0
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	d169      	bne.n	800ab00 <__gethex+0x11c>
 800aa2c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800aa30:	465d      	mov	r5, fp
 800aa32:	f7ff ffc1 	bl	800a9b8 <__hexdig_fun>
 800aa36:	2800      	cmp	r0, #0
 800aa38:	d064      	beq.n	800ab04 <__gethex+0x120>
 800aa3a:	465a      	mov	r2, fp
 800aa3c:	7810      	ldrb	r0, [r2, #0]
 800aa3e:	2830      	cmp	r0, #48	; 0x30
 800aa40:	4690      	mov	r8, r2
 800aa42:	f102 0201 	add.w	r2, r2, #1
 800aa46:	d0f9      	beq.n	800aa3c <__gethex+0x58>
 800aa48:	f7ff ffb6 	bl	800a9b8 <__hexdig_fun>
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	fab0 f480 	clz	r4, r0
 800aa52:	0964      	lsrs	r4, r4, #5
 800aa54:	465e      	mov	r6, fp
 800aa56:	9301      	str	r3, [sp, #4]
 800aa58:	4642      	mov	r2, r8
 800aa5a:	4615      	mov	r5, r2
 800aa5c:	3201      	adds	r2, #1
 800aa5e:	7828      	ldrb	r0, [r5, #0]
 800aa60:	f7ff ffaa 	bl	800a9b8 <__hexdig_fun>
 800aa64:	2800      	cmp	r0, #0
 800aa66:	d1f8      	bne.n	800aa5a <__gethex+0x76>
 800aa68:	4994      	ldr	r1, [pc, #592]	; (800acbc <__gethex+0x2d8>)
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	f7fe ff8e 	bl	800998e <strncmp>
 800aa72:	b978      	cbnz	r0, 800aa94 <__gethex+0xb0>
 800aa74:	b946      	cbnz	r6, 800aa88 <__gethex+0xa4>
 800aa76:	1c6e      	adds	r6, r5, #1
 800aa78:	4632      	mov	r2, r6
 800aa7a:	4615      	mov	r5, r2
 800aa7c:	3201      	adds	r2, #1
 800aa7e:	7828      	ldrb	r0, [r5, #0]
 800aa80:	f7ff ff9a 	bl	800a9b8 <__hexdig_fun>
 800aa84:	2800      	cmp	r0, #0
 800aa86:	d1f8      	bne.n	800aa7a <__gethex+0x96>
 800aa88:	1b73      	subs	r3, r6, r5
 800aa8a:	009e      	lsls	r6, r3, #2
 800aa8c:	e004      	b.n	800aa98 <__gethex+0xb4>
 800aa8e:	2400      	movs	r4, #0
 800aa90:	4626      	mov	r6, r4
 800aa92:	e7e1      	b.n	800aa58 <__gethex+0x74>
 800aa94:	2e00      	cmp	r6, #0
 800aa96:	d1f7      	bne.n	800aa88 <__gethex+0xa4>
 800aa98:	782b      	ldrb	r3, [r5, #0]
 800aa9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aa9e:	2b50      	cmp	r3, #80	; 0x50
 800aaa0:	d13d      	bne.n	800ab1e <__gethex+0x13a>
 800aaa2:	786b      	ldrb	r3, [r5, #1]
 800aaa4:	2b2b      	cmp	r3, #43	; 0x2b
 800aaa6:	d02f      	beq.n	800ab08 <__gethex+0x124>
 800aaa8:	2b2d      	cmp	r3, #45	; 0x2d
 800aaaa:	d031      	beq.n	800ab10 <__gethex+0x12c>
 800aaac:	1c69      	adds	r1, r5, #1
 800aaae:	f04f 0b00 	mov.w	fp, #0
 800aab2:	7808      	ldrb	r0, [r1, #0]
 800aab4:	f7ff ff80 	bl	800a9b8 <__hexdig_fun>
 800aab8:	1e42      	subs	r2, r0, #1
 800aaba:	b2d2      	uxtb	r2, r2
 800aabc:	2a18      	cmp	r2, #24
 800aabe:	d82e      	bhi.n	800ab1e <__gethex+0x13a>
 800aac0:	f1a0 0210 	sub.w	r2, r0, #16
 800aac4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aac8:	f7ff ff76 	bl	800a9b8 <__hexdig_fun>
 800aacc:	f100 3cff 	add.w	ip, r0, #4294967295
 800aad0:	fa5f fc8c 	uxtb.w	ip, ip
 800aad4:	f1bc 0f18 	cmp.w	ip, #24
 800aad8:	d91d      	bls.n	800ab16 <__gethex+0x132>
 800aada:	f1bb 0f00 	cmp.w	fp, #0
 800aade:	d000      	beq.n	800aae2 <__gethex+0xfe>
 800aae0:	4252      	negs	r2, r2
 800aae2:	4416      	add	r6, r2
 800aae4:	f8ca 1000 	str.w	r1, [sl]
 800aae8:	b1dc      	cbz	r4, 800ab22 <__gethex+0x13e>
 800aaea:	9b01      	ldr	r3, [sp, #4]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	bf14      	ite	ne
 800aaf0:	f04f 0800 	movne.w	r8, #0
 800aaf4:	f04f 0806 	moveq.w	r8, #6
 800aaf8:	4640      	mov	r0, r8
 800aafa:	b005      	add	sp, #20
 800aafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab00:	4645      	mov	r5, r8
 800ab02:	4626      	mov	r6, r4
 800ab04:	2401      	movs	r4, #1
 800ab06:	e7c7      	b.n	800aa98 <__gethex+0xb4>
 800ab08:	f04f 0b00 	mov.w	fp, #0
 800ab0c:	1ca9      	adds	r1, r5, #2
 800ab0e:	e7d0      	b.n	800aab2 <__gethex+0xce>
 800ab10:	f04f 0b01 	mov.w	fp, #1
 800ab14:	e7fa      	b.n	800ab0c <__gethex+0x128>
 800ab16:	230a      	movs	r3, #10
 800ab18:	fb03 0002 	mla	r0, r3, r2, r0
 800ab1c:	e7d0      	b.n	800aac0 <__gethex+0xdc>
 800ab1e:	4629      	mov	r1, r5
 800ab20:	e7e0      	b.n	800aae4 <__gethex+0x100>
 800ab22:	eba5 0308 	sub.w	r3, r5, r8
 800ab26:	3b01      	subs	r3, #1
 800ab28:	4621      	mov	r1, r4
 800ab2a:	2b07      	cmp	r3, #7
 800ab2c:	dc0a      	bgt.n	800ab44 <__gethex+0x160>
 800ab2e:	4648      	mov	r0, r9
 800ab30:	f000 fa5a 	bl	800afe8 <_Balloc>
 800ab34:	4604      	mov	r4, r0
 800ab36:	b940      	cbnz	r0, 800ab4a <__gethex+0x166>
 800ab38:	4b61      	ldr	r3, [pc, #388]	; (800acc0 <__gethex+0x2dc>)
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	21e4      	movs	r1, #228	; 0xe4
 800ab3e:	4861      	ldr	r0, [pc, #388]	; (800acc4 <__gethex+0x2e0>)
 800ab40:	f001 f912 	bl	800bd68 <__assert_func>
 800ab44:	3101      	adds	r1, #1
 800ab46:	105b      	asrs	r3, r3, #1
 800ab48:	e7ef      	b.n	800ab2a <__gethex+0x146>
 800ab4a:	f100 0a14 	add.w	sl, r0, #20
 800ab4e:	2300      	movs	r3, #0
 800ab50:	495a      	ldr	r1, [pc, #360]	; (800acbc <__gethex+0x2d8>)
 800ab52:	f8cd a004 	str.w	sl, [sp, #4]
 800ab56:	469b      	mov	fp, r3
 800ab58:	45a8      	cmp	r8, r5
 800ab5a:	d342      	bcc.n	800abe2 <__gethex+0x1fe>
 800ab5c:	9801      	ldr	r0, [sp, #4]
 800ab5e:	f840 bb04 	str.w	fp, [r0], #4
 800ab62:	eba0 000a 	sub.w	r0, r0, sl
 800ab66:	1080      	asrs	r0, r0, #2
 800ab68:	6120      	str	r0, [r4, #16]
 800ab6a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ab6e:	4658      	mov	r0, fp
 800ab70:	f000 fb2c 	bl	800b1cc <__hi0bits>
 800ab74:	683d      	ldr	r5, [r7, #0]
 800ab76:	eba8 0000 	sub.w	r0, r8, r0
 800ab7a:	42a8      	cmp	r0, r5
 800ab7c:	dd59      	ble.n	800ac32 <__gethex+0x24e>
 800ab7e:	eba0 0805 	sub.w	r8, r0, r5
 800ab82:	4641      	mov	r1, r8
 800ab84:	4620      	mov	r0, r4
 800ab86:	f000 febb 	bl	800b900 <__any_on>
 800ab8a:	4683      	mov	fp, r0
 800ab8c:	b1b8      	cbz	r0, 800abbe <__gethex+0x1da>
 800ab8e:	f108 33ff 	add.w	r3, r8, #4294967295
 800ab92:	1159      	asrs	r1, r3, #5
 800ab94:	f003 021f 	and.w	r2, r3, #31
 800ab98:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ab9c:	f04f 0b01 	mov.w	fp, #1
 800aba0:	fa0b f202 	lsl.w	r2, fp, r2
 800aba4:	420a      	tst	r2, r1
 800aba6:	d00a      	beq.n	800abbe <__gethex+0x1da>
 800aba8:	455b      	cmp	r3, fp
 800abaa:	dd06      	ble.n	800abba <__gethex+0x1d6>
 800abac:	f1a8 0102 	sub.w	r1, r8, #2
 800abb0:	4620      	mov	r0, r4
 800abb2:	f000 fea5 	bl	800b900 <__any_on>
 800abb6:	2800      	cmp	r0, #0
 800abb8:	d138      	bne.n	800ac2c <__gethex+0x248>
 800abba:	f04f 0b02 	mov.w	fp, #2
 800abbe:	4641      	mov	r1, r8
 800abc0:	4620      	mov	r0, r4
 800abc2:	f7ff fea7 	bl	800a914 <rshift>
 800abc6:	4446      	add	r6, r8
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	42b3      	cmp	r3, r6
 800abcc:	da41      	bge.n	800ac52 <__gethex+0x26e>
 800abce:	4621      	mov	r1, r4
 800abd0:	4648      	mov	r0, r9
 800abd2:	f000 fa49 	bl	800b068 <_Bfree>
 800abd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abd8:	2300      	movs	r3, #0
 800abda:	6013      	str	r3, [r2, #0]
 800abdc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800abe0:	e78a      	b.n	800aaf8 <__gethex+0x114>
 800abe2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800abe6:	2a2e      	cmp	r2, #46	; 0x2e
 800abe8:	d014      	beq.n	800ac14 <__gethex+0x230>
 800abea:	2b20      	cmp	r3, #32
 800abec:	d106      	bne.n	800abfc <__gethex+0x218>
 800abee:	9b01      	ldr	r3, [sp, #4]
 800abf0:	f843 bb04 	str.w	fp, [r3], #4
 800abf4:	f04f 0b00 	mov.w	fp, #0
 800abf8:	9301      	str	r3, [sp, #4]
 800abfa:	465b      	mov	r3, fp
 800abfc:	7828      	ldrb	r0, [r5, #0]
 800abfe:	9303      	str	r3, [sp, #12]
 800ac00:	f7ff feda 	bl	800a9b8 <__hexdig_fun>
 800ac04:	9b03      	ldr	r3, [sp, #12]
 800ac06:	f000 000f 	and.w	r0, r0, #15
 800ac0a:	4098      	lsls	r0, r3
 800ac0c:	ea4b 0b00 	orr.w	fp, fp, r0
 800ac10:	3304      	adds	r3, #4
 800ac12:	e7a1      	b.n	800ab58 <__gethex+0x174>
 800ac14:	45a8      	cmp	r8, r5
 800ac16:	d8e8      	bhi.n	800abea <__gethex+0x206>
 800ac18:	2201      	movs	r2, #1
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	9303      	str	r3, [sp, #12]
 800ac1e:	f7fe feb6 	bl	800998e <strncmp>
 800ac22:	4926      	ldr	r1, [pc, #152]	; (800acbc <__gethex+0x2d8>)
 800ac24:	9b03      	ldr	r3, [sp, #12]
 800ac26:	2800      	cmp	r0, #0
 800ac28:	d1df      	bne.n	800abea <__gethex+0x206>
 800ac2a:	e795      	b.n	800ab58 <__gethex+0x174>
 800ac2c:	f04f 0b03 	mov.w	fp, #3
 800ac30:	e7c5      	b.n	800abbe <__gethex+0x1da>
 800ac32:	da0b      	bge.n	800ac4c <__gethex+0x268>
 800ac34:	eba5 0800 	sub.w	r8, r5, r0
 800ac38:	4621      	mov	r1, r4
 800ac3a:	4642      	mov	r2, r8
 800ac3c:	4648      	mov	r0, r9
 800ac3e:	f000 fc2d 	bl	800b49c <__lshift>
 800ac42:	eba6 0608 	sub.w	r6, r6, r8
 800ac46:	4604      	mov	r4, r0
 800ac48:	f100 0a14 	add.w	sl, r0, #20
 800ac4c:	f04f 0b00 	mov.w	fp, #0
 800ac50:	e7ba      	b.n	800abc8 <__gethex+0x1e4>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	42b3      	cmp	r3, r6
 800ac56:	dd73      	ble.n	800ad40 <__gethex+0x35c>
 800ac58:	1b9e      	subs	r6, r3, r6
 800ac5a:	42b5      	cmp	r5, r6
 800ac5c:	dc34      	bgt.n	800acc8 <__gethex+0x2e4>
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	d023      	beq.n	800acac <__gethex+0x2c8>
 800ac64:	2b03      	cmp	r3, #3
 800ac66:	d025      	beq.n	800acb4 <__gethex+0x2d0>
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d115      	bne.n	800ac98 <__gethex+0x2b4>
 800ac6c:	42b5      	cmp	r5, r6
 800ac6e:	d113      	bne.n	800ac98 <__gethex+0x2b4>
 800ac70:	2d01      	cmp	r5, #1
 800ac72:	d10b      	bne.n	800ac8c <__gethex+0x2a8>
 800ac74:	9a02      	ldr	r2, [sp, #8]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6013      	str	r3, [r2, #0]
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	6123      	str	r3, [r4, #16]
 800ac7e:	f8ca 3000 	str.w	r3, [sl]
 800ac82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac84:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ac88:	601c      	str	r4, [r3, #0]
 800ac8a:	e735      	b.n	800aaf8 <__gethex+0x114>
 800ac8c:	1e69      	subs	r1, r5, #1
 800ac8e:	4620      	mov	r0, r4
 800ac90:	f000 fe36 	bl	800b900 <__any_on>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	d1ed      	bne.n	800ac74 <__gethex+0x290>
 800ac98:	4621      	mov	r1, r4
 800ac9a:	4648      	mov	r0, r9
 800ac9c:	f000 f9e4 	bl	800b068 <_Bfree>
 800aca0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aca2:	2300      	movs	r3, #0
 800aca4:	6013      	str	r3, [r2, #0]
 800aca6:	f04f 0850 	mov.w	r8, #80	; 0x50
 800acaa:	e725      	b.n	800aaf8 <__gethex+0x114>
 800acac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d1f2      	bne.n	800ac98 <__gethex+0x2b4>
 800acb2:	e7df      	b.n	800ac74 <__gethex+0x290>
 800acb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1dc      	bne.n	800ac74 <__gethex+0x290>
 800acba:	e7ed      	b.n	800ac98 <__gethex+0x2b4>
 800acbc:	0800c6de 	.word	0x0800c6de
 800acc0:	0800c8e9 	.word	0x0800c8e9
 800acc4:	0800c8fa 	.word	0x0800c8fa
 800acc8:	f106 38ff 	add.w	r8, r6, #4294967295
 800accc:	f1bb 0f00 	cmp.w	fp, #0
 800acd0:	d133      	bne.n	800ad3a <__gethex+0x356>
 800acd2:	f1b8 0f00 	cmp.w	r8, #0
 800acd6:	d004      	beq.n	800ace2 <__gethex+0x2fe>
 800acd8:	4641      	mov	r1, r8
 800acda:	4620      	mov	r0, r4
 800acdc:	f000 fe10 	bl	800b900 <__any_on>
 800ace0:	4683      	mov	fp, r0
 800ace2:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ace6:	2301      	movs	r3, #1
 800ace8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800acec:	f008 081f 	and.w	r8, r8, #31
 800acf0:	fa03 f308 	lsl.w	r3, r3, r8
 800acf4:	4213      	tst	r3, r2
 800acf6:	4631      	mov	r1, r6
 800acf8:	4620      	mov	r0, r4
 800acfa:	bf18      	it	ne
 800acfc:	f04b 0b02 	orrne.w	fp, fp, #2
 800ad00:	1bad      	subs	r5, r5, r6
 800ad02:	f7ff fe07 	bl	800a914 <rshift>
 800ad06:	687e      	ldr	r6, [r7, #4]
 800ad08:	f04f 0802 	mov.w	r8, #2
 800ad0c:	f1bb 0f00 	cmp.w	fp, #0
 800ad10:	d04a      	beq.n	800ada8 <__gethex+0x3c4>
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2b02      	cmp	r3, #2
 800ad16:	d016      	beq.n	800ad46 <__gethex+0x362>
 800ad18:	2b03      	cmp	r3, #3
 800ad1a:	d018      	beq.n	800ad4e <__gethex+0x36a>
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d109      	bne.n	800ad34 <__gethex+0x350>
 800ad20:	f01b 0f02 	tst.w	fp, #2
 800ad24:	d006      	beq.n	800ad34 <__gethex+0x350>
 800ad26:	f8da 3000 	ldr.w	r3, [sl]
 800ad2a:	ea4b 0b03 	orr.w	fp, fp, r3
 800ad2e:	f01b 0f01 	tst.w	fp, #1
 800ad32:	d10f      	bne.n	800ad54 <__gethex+0x370>
 800ad34:	f048 0810 	orr.w	r8, r8, #16
 800ad38:	e036      	b.n	800ada8 <__gethex+0x3c4>
 800ad3a:	f04f 0b01 	mov.w	fp, #1
 800ad3e:	e7d0      	b.n	800ace2 <__gethex+0x2fe>
 800ad40:	f04f 0801 	mov.w	r8, #1
 800ad44:	e7e2      	b.n	800ad0c <__gethex+0x328>
 800ad46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad48:	f1c3 0301 	rsb	r3, r3, #1
 800ad4c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d0ef      	beq.n	800ad34 <__gethex+0x350>
 800ad54:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ad58:	f104 0214 	add.w	r2, r4, #20
 800ad5c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ad60:	9301      	str	r3, [sp, #4]
 800ad62:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ad66:	2300      	movs	r3, #0
 800ad68:	4694      	mov	ip, r2
 800ad6a:	f852 1b04 	ldr.w	r1, [r2], #4
 800ad6e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ad72:	d01e      	beq.n	800adb2 <__gethex+0x3ce>
 800ad74:	3101      	adds	r1, #1
 800ad76:	f8cc 1000 	str.w	r1, [ip]
 800ad7a:	f1b8 0f02 	cmp.w	r8, #2
 800ad7e:	f104 0214 	add.w	r2, r4, #20
 800ad82:	d13d      	bne.n	800ae00 <__gethex+0x41c>
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	3b01      	subs	r3, #1
 800ad88:	42ab      	cmp	r3, r5
 800ad8a:	d10b      	bne.n	800ada4 <__gethex+0x3c0>
 800ad8c:	1169      	asrs	r1, r5, #5
 800ad8e:	2301      	movs	r3, #1
 800ad90:	f005 051f 	and.w	r5, r5, #31
 800ad94:	fa03 f505 	lsl.w	r5, r3, r5
 800ad98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad9c:	421d      	tst	r5, r3
 800ad9e:	bf18      	it	ne
 800ada0:	f04f 0801 	movne.w	r8, #1
 800ada4:	f048 0820 	orr.w	r8, r8, #32
 800ada8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800adaa:	601c      	str	r4, [r3, #0]
 800adac:	9b02      	ldr	r3, [sp, #8]
 800adae:	601e      	str	r6, [r3, #0]
 800adb0:	e6a2      	b.n	800aaf8 <__gethex+0x114>
 800adb2:	4290      	cmp	r0, r2
 800adb4:	f842 3c04 	str.w	r3, [r2, #-4]
 800adb8:	d8d6      	bhi.n	800ad68 <__gethex+0x384>
 800adba:	68a2      	ldr	r2, [r4, #8]
 800adbc:	4593      	cmp	fp, r2
 800adbe:	db17      	blt.n	800adf0 <__gethex+0x40c>
 800adc0:	6861      	ldr	r1, [r4, #4]
 800adc2:	4648      	mov	r0, r9
 800adc4:	3101      	adds	r1, #1
 800adc6:	f000 f90f 	bl	800afe8 <_Balloc>
 800adca:	4682      	mov	sl, r0
 800adcc:	b918      	cbnz	r0, 800add6 <__gethex+0x3f2>
 800adce:	4b1b      	ldr	r3, [pc, #108]	; (800ae3c <__gethex+0x458>)
 800add0:	4602      	mov	r2, r0
 800add2:	2184      	movs	r1, #132	; 0x84
 800add4:	e6b3      	b.n	800ab3e <__gethex+0x15a>
 800add6:	6922      	ldr	r2, [r4, #16]
 800add8:	3202      	adds	r2, #2
 800adda:	f104 010c 	add.w	r1, r4, #12
 800adde:	0092      	lsls	r2, r2, #2
 800ade0:	300c      	adds	r0, #12
 800ade2:	f7fe feb2 	bl	8009b4a <memcpy>
 800ade6:	4621      	mov	r1, r4
 800ade8:	4648      	mov	r0, r9
 800adea:	f000 f93d 	bl	800b068 <_Bfree>
 800adee:	4654      	mov	r4, sl
 800adf0:	6922      	ldr	r2, [r4, #16]
 800adf2:	1c51      	adds	r1, r2, #1
 800adf4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800adf8:	6121      	str	r1, [r4, #16]
 800adfa:	2101      	movs	r1, #1
 800adfc:	6151      	str	r1, [r2, #20]
 800adfe:	e7bc      	b.n	800ad7a <__gethex+0x396>
 800ae00:	6921      	ldr	r1, [r4, #16]
 800ae02:	4559      	cmp	r1, fp
 800ae04:	dd0b      	ble.n	800ae1e <__gethex+0x43a>
 800ae06:	2101      	movs	r1, #1
 800ae08:	4620      	mov	r0, r4
 800ae0a:	f7ff fd83 	bl	800a914 <rshift>
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	3601      	adds	r6, #1
 800ae12:	42b3      	cmp	r3, r6
 800ae14:	f6ff aedb 	blt.w	800abce <__gethex+0x1ea>
 800ae18:	f04f 0801 	mov.w	r8, #1
 800ae1c:	e7c2      	b.n	800ada4 <__gethex+0x3c0>
 800ae1e:	f015 051f 	ands.w	r5, r5, #31
 800ae22:	d0f9      	beq.n	800ae18 <__gethex+0x434>
 800ae24:	9b01      	ldr	r3, [sp, #4]
 800ae26:	441a      	add	r2, r3
 800ae28:	f1c5 0520 	rsb	r5, r5, #32
 800ae2c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ae30:	f000 f9cc 	bl	800b1cc <__hi0bits>
 800ae34:	42a8      	cmp	r0, r5
 800ae36:	dbe6      	blt.n	800ae06 <__gethex+0x422>
 800ae38:	e7ee      	b.n	800ae18 <__gethex+0x434>
 800ae3a:	bf00      	nop
 800ae3c:	0800c8e9 	.word	0x0800c8e9

0800ae40 <L_shift>:
 800ae40:	f1c2 0208 	rsb	r2, r2, #8
 800ae44:	0092      	lsls	r2, r2, #2
 800ae46:	b570      	push	{r4, r5, r6, lr}
 800ae48:	f1c2 0620 	rsb	r6, r2, #32
 800ae4c:	6843      	ldr	r3, [r0, #4]
 800ae4e:	6804      	ldr	r4, [r0, #0]
 800ae50:	fa03 f506 	lsl.w	r5, r3, r6
 800ae54:	432c      	orrs	r4, r5
 800ae56:	40d3      	lsrs	r3, r2
 800ae58:	6004      	str	r4, [r0, #0]
 800ae5a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ae5e:	4288      	cmp	r0, r1
 800ae60:	d3f4      	bcc.n	800ae4c <L_shift+0xc>
 800ae62:	bd70      	pop	{r4, r5, r6, pc}

0800ae64 <__match>:
 800ae64:	b530      	push	{r4, r5, lr}
 800ae66:	6803      	ldr	r3, [r0, #0]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae6e:	b914      	cbnz	r4, 800ae76 <__match+0x12>
 800ae70:	6003      	str	r3, [r0, #0]
 800ae72:	2001      	movs	r0, #1
 800ae74:	bd30      	pop	{r4, r5, pc}
 800ae76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ae7e:	2d19      	cmp	r5, #25
 800ae80:	bf98      	it	ls
 800ae82:	3220      	addls	r2, #32
 800ae84:	42a2      	cmp	r2, r4
 800ae86:	d0f0      	beq.n	800ae6a <__match+0x6>
 800ae88:	2000      	movs	r0, #0
 800ae8a:	e7f3      	b.n	800ae74 <__match+0x10>

0800ae8c <__hexnan>:
 800ae8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae90:	680b      	ldr	r3, [r1, #0]
 800ae92:	6801      	ldr	r1, [r0, #0]
 800ae94:	115e      	asrs	r6, r3, #5
 800ae96:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ae9a:	f013 031f 	ands.w	r3, r3, #31
 800ae9e:	b087      	sub	sp, #28
 800aea0:	bf18      	it	ne
 800aea2:	3604      	addne	r6, #4
 800aea4:	2500      	movs	r5, #0
 800aea6:	1f37      	subs	r7, r6, #4
 800aea8:	4682      	mov	sl, r0
 800aeaa:	4690      	mov	r8, r2
 800aeac:	9301      	str	r3, [sp, #4]
 800aeae:	f846 5c04 	str.w	r5, [r6, #-4]
 800aeb2:	46b9      	mov	r9, r7
 800aeb4:	463c      	mov	r4, r7
 800aeb6:	9502      	str	r5, [sp, #8]
 800aeb8:	46ab      	mov	fp, r5
 800aeba:	784a      	ldrb	r2, [r1, #1]
 800aebc:	1c4b      	adds	r3, r1, #1
 800aebe:	9303      	str	r3, [sp, #12]
 800aec0:	b342      	cbz	r2, 800af14 <__hexnan+0x88>
 800aec2:	4610      	mov	r0, r2
 800aec4:	9105      	str	r1, [sp, #20]
 800aec6:	9204      	str	r2, [sp, #16]
 800aec8:	f7ff fd76 	bl	800a9b8 <__hexdig_fun>
 800aecc:	2800      	cmp	r0, #0
 800aece:	d14f      	bne.n	800af70 <__hexnan+0xe4>
 800aed0:	9a04      	ldr	r2, [sp, #16]
 800aed2:	9905      	ldr	r1, [sp, #20]
 800aed4:	2a20      	cmp	r2, #32
 800aed6:	d818      	bhi.n	800af0a <__hexnan+0x7e>
 800aed8:	9b02      	ldr	r3, [sp, #8]
 800aeda:	459b      	cmp	fp, r3
 800aedc:	dd13      	ble.n	800af06 <__hexnan+0x7a>
 800aede:	454c      	cmp	r4, r9
 800aee0:	d206      	bcs.n	800aef0 <__hexnan+0x64>
 800aee2:	2d07      	cmp	r5, #7
 800aee4:	dc04      	bgt.n	800aef0 <__hexnan+0x64>
 800aee6:	462a      	mov	r2, r5
 800aee8:	4649      	mov	r1, r9
 800aeea:	4620      	mov	r0, r4
 800aeec:	f7ff ffa8 	bl	800ae40 <L_shift>
 800aef0:	4544      	cmp	r4, r8
 800aef2:	d950      	bls.n	800af96 <__hexnan+0x10a>
 800aef4:	2300      	movs	r3, #0
 800aef6:	f1a4 0904 	sub.w	r9, r4, #4
 800aefa:	f844 3c04 	str.w	r3, [r4, #-4]
 800aefe:	f8cd b008 	str.w	fp, [sp, #8]
 800af02:	464c      	mov	r4, r9
 800af04:	461d      	mov	r5, r3
 800af06:	9903      	ldr	r1, [sp, #12]
 800af08:	e7d7      	b.n	800aeba <__hexnan+0x2e>
 800af0a:	2a29      	cmp	r2, #41	; 0x29
 800af0c:	d155      	bne.n	800afba <__hexnan+0x12e>
 800af0e:	3102      	adds	r1, #2
 800af10:	f8ca 1000 	str.w	r1, [sl]
 800af14:	f1bb 0f00 	cmp.w	fp, #0
 800af18:	d04f      	beq.n	800afba <__hexnan+0x12e>
 800af1a:	454c      	cmp	r4, r9
 800af1c:	d206      	bcs.n	800af2c <__hexnan+0xa0>
 800af1e:	2d07      	cmp	r5, #7
 800af20:	dc04      	bgt.n	800af2c <__hexnan+0xa0>
 800af22:	462a      	mov	r2, r5
 800af24:	4649      	mov	r1, r9
 800af26:	4620      	mov	r0, r4
 800af28:	f7ff ff8a 	bl	800ae40 <L_shift>
 800af2c:	4544      	cmp	r4, r8
 800af2e:	d934      	bls.n	800af9a <__hexnan+0x10e>
 800af30:	f1a8 0204 	sub.w	r2, r8, #4
 800af34:	4623      	mov	r3, r4
 800af36:	f853 1b04 	ldr.w	r1, [r3], #4
 800af3a:	f842 1f04 	str.w	r1, [r2, #4]!
 800af3e:	429f      	cmp	r7, r3
 800af40:	d2f9      	bcs.n	800af36 <__hexnan+0xaa>
 800af42:	1b3b      	subs	r3, r7, r4
 800af44:	f023 0303 	bic.w	r3, r3, #3
 800af48:	3304      	adds	r3, #4
 800af4a:	3e03      	subs	r6, #3
 800af4c:	3401      	adds	r4, #1
 800af4e:	42a6      	cmp	r6, r4
 800af50:	bf38      	it	cc
 800af52:	2304      	movcc	r3, #4
 800af54:	4443      	add	r3, r8
 800af56:	2200      	movs	r2, #0
 800af58:	f843 2b04 	str.w	r2, [r3], #4
 800af5c:	429f      	cmp	r7, r3
 800af5e:	d2fb      	bcs.n	800af58 <__hexnan+0xcc>
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	b91b      	cbnz	r3, 800af6c <__hexnan+0xe0>
 800af64:	4547      	cmp	r7, r8
 800af66:	d126      	bne.n	800afb6 <__hexnan+0x12a>
 800af68:	2301      	movs	r3, #1
 800af6a:	603b      	str	r3, [r7, #0]
 800af6c:	2005      	movs	r0, #5
 800af6e:	e025      	b.n	800afbc <__hexnan+0x130>
 800af70:	3501      	adds	r5, #1
 800af72:	2d08      	cmp	r5, #8
 800af74:	f10b 0b01 	add.w	fp, fp, #1
 800af78:	dd06      	ble.n	800af88 <__hexnan+0xfc>
 800af7a:	4544      	cmp	r4, r8
 800af7c:	d9c3      	bls.n	800af06 <__hexnan+0x7a>
 800af7e:	2300      	movs	r3, #0
 800af80:	f844 3c04 	str.w	r3, [r4, #-4]
 800af84:	2501      	movs	r5, #1
 800af86:	3c04      	subs	r4, #4
 800af88:	6822      	ldr	r2, [r4, #0]
 800af8a:	f000 000f 	and.w	r0, r0, #15
 800af8e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800af92:	6020      	str	r0, [r4, #0]
 800af94:	e7b7      	b.n	800af06 <__hexnan+0x7a>
 800af96:	2508      	movs	r5, #8
 800af98:	e7b5      	b.n	800af06 <__hexnan+0x7a>
 800af9a:	9b01      	ldr	r3, [sp, #4]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d0df      	beq.n	800af60 <__hexnan+0xd4>
 800afa0:	f1c3 0320 	rsb	r3, r3, #32
 800afa4:	f04f 32ff 	mov.w	r2, #4294967295
 800afa8:	40da      	lsrs	r2, r3
 800afaa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800afae:	4013      	ands	r3, r2
 800afb0:	f846 3c04 	str.w	r3, [r6, #-4]
 800afb4:	e7d4      	b.n	800af60 <__hexnan+0xd4>
 800afb6:	3f04      	subs	r7, #4
 800afb8:	e7d2      	b.n	800af60 <__hexnan+0xd4>
 800afba:	2004      	movs	r0, #4
 800afbc:	b007      	add	sp, #28
 800afbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800afc2 <__ascii_mbtowc>:
 800afc2:	b082      	sub	sp, #8
 800afc4:	b901      	cbnz	r1, 800afc8 <__ascii_mbtowc+0x6>
 800afc6:	a901      	add	r1, sp, #4
 800afc8:	b142      	cbz	r2, 800afdc <__ascii_mbtowc+0x1a>
 800afca:	b14b      	cbz	r3, 800afe0 <__ascii_mbtowc+0x1e>
 800afcc:	7813      	ldrb	r3, [r2, #0]
 800afce:	600b      	str	r3, [r1, #0]
 800afd0:	7812      	ldrb	r2, [r2, #0]
 800afd2:	1e10      	subs	r0, r2, #0
 800afd4:	bf18      	it	ne
 800afd6:	2001      	movne	r0, #1
 800afd8:	b002      	add	sp, #8
 800afda:	4770      	bx	lr
 800afdc:	4610      	mov	r0, r2
 800afde:	e7fb      	b.n	800afd8 <__ascii_mbtowc+0x16>
 800afe0:	f06f 0001 	mvn.w	r0, #1
 800afe4:	e7f8      	b.n	800afd8 <__ascii_mbtowc+0x16>
	...

0800afe8 <_Balloc>:
 800afe8:	b570      	push	{r4, r5, r6, lr}
 800afea:	69c6      	ldr	r6, [r0, #28]
 800afec:	4604      	mov	r4, r0
 800afee:	460d      	mov	r5, r1
 800aff0:	b976      	cbnz	r6, 800b010 <_Balloc+0x28>
 800aff2:	2010      	movs	r0, #16
 800aff4:	f7fc fdb8 	bl	8007b68 <malloc>
 800aff8:	4602      	mov	r2, r0
 800affa:	61e0      	str	r0, [r4, #28]
 800affc:	b920      	cbnz	r0, 800b008 <_Balloc+0x20>
 800affe:	4b18      	ldr	r3, [pc, #96]	; (800b060 <_Balloc+0x78>)
 800b000:	4818      	ldr	r0, [pc, #96]	; (800b064 <_Balloc+0x7c>)
 800b002:	216b      	movs	r1, #107	; 0x6b
 800b004:	f000 feb0 	bl	800bd68 <__assert_func>
 800b008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b00c:	6006      	str	r6, [r0, #0]
 800b00e:	60c6      	str	r6, [r0, #12]
 800b010:	69e6      	ldr	r6, [r4, #28]
 800b012:	68f3      	ldr	r3, [r6, #12]
 800b014:	b183      	cbz	r3, 800b038 <_Balloc+0x50>
 800b016:	69e3      	ldr	r3, [r4, #28]
 800b018:	68db      	ldr	r3, [r3, #12]
 800b01a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b01e:	b9b8      	cbnz	r0, 800b050 <_Balloc+0x68>
 800b020:	2101      	movs	r1, #1
 800b022:	fa01 f605 	lsl.w	r6, r1, r5
 800b026:	1d72      	adds	r2, r6, #5
 800b028:	0092      	lsls	r2, r2, #2
 800b02a:	4620      	mov	r0, r4
 800b02c:	f000 feba 	bl	800bda4 <_calloc_r>
 800b030:	b160      	cbz	r0, 800b04c <_Balloc+0x64>
 800b032:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b036:	e00e      	b.n	800b056 <_Balloc+0x6e>
 800b038:	2221      	movs	r2, #33	; 0x21
 800b03a:	2104      	movs	r1, #4
 800b03c:	4620      	mov	r0, r4
 800b03e:	f000 feb1 	bl	800bda4 <_calloc_r>
 800b042:	69e3      	ldr	r3, [r4, #28]
 800b044:	60f0      	str	r0, [r6, #12]
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1e4      	bne.n	800b016 <_Balloc+0x2e>
 800b04c:	2000      	movs	r0, #0
 800b04e:	bd70      	pop	{r4, r5, r6, pc}
 800b050:	6802      	ldr	r2, [r0, #0]
 800b052:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b056:	2300      	movs	r3, #0
 800b058:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b05c:	e7f7      	b.n	800b04e <_Balloc+0x66>
 800b05e:	bf00      	nop
 800b060:	0800c87a 	.word	0x0800c87a
 800b064:	0800c95a 	.word	0x0800c95a

0800b068 <_Bfree>:
 800b068:	b570      	push	{r4, r5, r6, lr}
 800b06a:	69c6      	ldr	r6, [r0, #28]
 800b06c:	4605      	mov	r5, r0
 800b06e:	460c      	mov	r4, r1
 800b070:	b976      	cbnz	r6, 800b090 <_Bfree+0x28>
 800b072:	2010      	movs	r0, #16
 800b074:	f7fc fd78 	bl	8007b68 <malloc>
 800b078:	4602      	mov	r2, r0
 800b07a:	61e8      	str	r0, [r5, #28]
 800b07c:	b920      	cbnz	r0, 800b088 <_Bfree+0x20>
 800b07e:	4b09      	ldr	r3, [pc, #36]	; (800b0a4 <_Bfree+0x3c>)
 800b080:	4809      	ldr	r0, [pc, #36]	; (800b0a8 <_Bfree+0x40>)
 800b082:	218f      	movs	r1, #143	; 0x8f
 800b084:	f000 fe70 	bl	800bd68 <__assert_func>
 800b088:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b08c:	6006      	str	r6, [r0, #0]
 800b08e:	60c6      	str	r6, [r0, #12]
 800b090:	b13c      	cbz	r4, 800b0a2 <_Bfree+0x3a>
 800b092:	69eb      	ldr	r3, [r5, #28]
 800b094:	6862      	ldr	r2, [r4, #4]
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b09c:	6021      	str	r1, [r4, #0]
 800b09e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b0a2:	bd70      	pop	{r4, r5, r6, pc}
 800b0a4:	0800c87a 	.word	0x0800c87a
 800b0a8:	0800c95a 	.word	0x0800c95a

0800b0ac <__multadd>:
 800b0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b0:	690d      	ldr	r5, [r1, #16]
 800b0b2:	4607      	mov	r7, r0
 800b0b4:	460c      	mov	r4, r1
 800b0b6:	461e      	mov	r6, r3
 800b0b8:	f101 0c14 	add.w	ip, r1, #20
 800b0bc:	2000      	movs	r0, #0
 800b0be:	f8dc 3000 	ldr.w	r3, [ip]
 800b0c2:	b299      	uxth	r1, r3
 800b0c4:	fb02 6101 	mla	r1, r2, r1, r6
 800b0c8:	0c1e      	lsrs	r6, r3, #16
 800b0ca:	0c0b      	lsrs	r3, r1, #16
 800b0cc:	fb02 3306 	mla	r3, r2, r6, r3
 800b0d0:	b289      	uxth	r1, r1
 800b0d2:	3001      	adds	r0, #1
 800b0d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b0d8:	4285      	cmp	r5, r0
 800b0da:	f84c 1b04 	str.w	r1, [ip], #4
 800b0de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b0e2:	dcec      	bgt.n	800b0be <__multadd+0x12>
 800b0e4:	b30e      	cbz	r6, 800b12a <__multadd+0x7e>
 800b0e6:	68a3      	ldr	r3, [r4, #8]
 800b0e8:	42ab      	cmp	r3, r5
 800b0ea:	dc19      	bgt.n	800b120 <__multadd+0x74>
 800b0ec:	6861      	ldr	r1, [r4, #4]
 800b0ee:	4638      	mov	r0, r7
 800b0f0:	3101      	adds	r1, #1
 800b0f2:	f7ff ff79 	bl	800afe8 <_Balloc>
 800b0f6:	4680      	mov	r8, r0
 800b0f8:	b928      	cbnz	r0, 800b106 <__multadd+0x5a>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	4b0c      	ldr	r3, [pc, #48]	; (800b130 <__multadd+0x84>)
 800b0fe:	480d      	ldr	r0, [pc, #52]	; (800b134 <__multadd+0x88>)
 800b100:	21ba      	movs	r1, #186	; 0xba
 800b102:	f000 fe31 	bl	800bd68 <__assert_func>
 800b106:	6922      	ldr	r2, [r4, #16]
 800b108:	3202      	adds	r2, #2
 800b10a:	f104 010c 	add.w	r1, r4, #12
 800b10e:	0092      	lsls	r2, r2, #2
 800b110:	300c      	adds	r0, #12
 800b112:	f7fe fd1a 	bl	8009b4a <memcpy>
 800b116:	4621      	mov	r1, r4
 800b118:	4638      	mov	r0, r7
 800b11a:	f7ff ffa5 	bl	800b068 <_Bfree>
 800b11e:	4644      	mov	r4, r8
 800b120:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b124:	3501      	adds	r5, #1
 800b126:	615e      	str	r6, [r3, #20]
 800b128:	6125      	str	r5, [r4, #16]
 800b12a:	4620      	mov	r0, r4
 800b12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b130:	0800c8e9 	.word	0x0800c8e9
 800b134:	0800c95a 	.word	0x0800c95a

0800b138 <__s2b>:
 800b138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b13c:	460c      	mov	r4, r1
 800b13e:	4615      	mov	r5, r2
 800b140:	461f      	mov	r7, r3
 800b142:	2209      	movs	r2, #9
 800b144:	3308      	adds	r3, #8
 800b146:	4606      	mov	r6, r0
 800b148:	fb93 f3f2 	sdiv	r3, r3, r2
 800b14c:	2100      	movs	r1, #0
 800b14e:	2201      	movs	r2, #1
 800b150:	429a      	cmp	r2, r3
 800b152:	db09      	blt.n	800b168 <__s2b+0x30>
 800b154:	4630      	mov	r0, r6
 800b156:	f7ff ff47 	bl	800afe8 <_Balloc>
 800b15a:	b940      	cbnz	r0, 800b16e <__s2b+0x36>
 800b15c:	4602      	mov	r2, r0
 800b15e:	4b19      	ldr	r3, [pc, #100]	; (800b1c4 <__s2b+0x8c>)
 800b160:	4819      	ldr	r0, [pc, #100]	; (800b1c8 <__s2b+0x90>)
 800b162:	21d3      	movs	r1, #211	; 0xd3
 800b164:	f000 fe00 	bl	800bd68 <__assert_func>
 800b168:	0052      	lsls	r2, r2, #1
 800b16a:	3101      	adds	r1, #1
 800b16c:	e7f0      	b.n	800b150 <__s2b+0x18>
 800b16e:	9b08      	ldr	r3, [sp, #32]
 800b170:	6143      	str	r3, [r0, #20]
 800b172:	2d09      	cmp	r5, #9
 800b174:	f04f 0301 	mov.w	r3, #1
 800b178:	6103      	str	r3, [r0, #16]
 800b17a:	dd16      	ble.n	800b1aa <__s2b+0x72>
 800b17c:	f104 0909 	add.w	r9, r4, #9
 800b180:	46c8      	mov	r8, r9
 800b182:	442c      	add	r4, r5
 800b184:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b188:	4601      	mov	r1, r0
 800b18a:	3b30      	subs	r3, #48	; 0x30
 800b18c:	220a      	movs	r2, #10
 800b18e:	4630      	mov	r0, r6
 800b190:	f7ff ff8c 	bl	800b0ac <__multadd>
 800b194:	45a0      	cmp	r8, r4
 800b196:	d1f5      	bne.n	800b184 <__s2b+0x4c>
 800b198:	f1a5 0408 	sub.w	r4, r5, #8
 800b19c:	444c      	add	r4, r9
 800b19e:	1b2d      	subs	r5, r5, r4
 800b1a0:	1963      	adds	r3, r4, r5
 800b1a2:	42bb      	cmp	r3, r7
 800b1a4:	db04      	blt.n	800b1b0 <__s2b+0x78>
 800b1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1aa:	340a      	adds	r4, #10
 800b1ac:	2509      	movs	r5, #9
 800b1ae:	e7f6      	b.n	800b19e <__s2b+0x66>
 800b1b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b1b4:	4601      	mov	r1, r0
 800b1b6:	3b30      	subs	r3, #48	; 0x30
 800b1b8:	220a      	movs	r2, #10
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	f7ff ff76 	bl	800b0ac <__multadd>
 800b1c0:	e7ee      	b.n	800b1a0 <__s2b+0x68>
 800b1c2:	bf00      	nop
 800b1c4:	0800c8e9 	.word	0x0800c8e9
 800b1c8:	0800c95a 	.word	0x0800c95a

0800b1cc <__hi0bits>:
 800b1cc:	0c03      	lsrs	r3, r0, #16
 800b1ce:	041b      	lsls	r3, r3, #16
 800b1d0:	b9d3      	cbnz	r3, 800b208 <__hi0bits+0x3c>
 800b1d2:	0400      	lsls	r0, r0, #16
 800b1d4:	2310      	movs	r3, #16
 800b1d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b1da:	bf04      	itt	eq
 800b1dc:	0200      	lsleq	r0, r0, #8
 800b1de:	3308      	addeq	r3, #8
 800b1e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b1e4:	bf04      	itt	eq
 800b1e6:	0100      	lsleq	r0, r0, #4
 800b1e8:	3304      	addeq	r3, #4
 800b1ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b1ee:	bf04      	itt	eq
 800b1f0:	0080      	lsleq	r0, r0, #2
 800b1f2:	3302      	addeq	r3, #2
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	db05      	blt.n	800b204 <__hi0bits+0x38>
 800b1f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b1fc:	f103 0301 	add.w	r3, r3, #1
 800b200:	bf08      	it	eq
 800b202:	2320      	moveq	r3, #32
 800b204:	4618      	mov	r0, r3
 800b206:	4770      	bx	lr
 800b208:	2300      	movs	r3, #0
 800b20a:	e7e4      	b.n	800b1d6 <__hi0bits+0xa>

0800b20c <__lo0bits>:
 800b20c:	6803      	ldr	r3, [r0, #0]
 800b20e:	f013 0207 	ands.w	r2, r3, #7
 800b212:	d00c      	beq.n	800b22e <__lo0bits+0x22>
 800b214:	07d9      	lsls	r1, r3, #31
 800b216:	d422      	bmi.n	800b25e <__lo0bits+0x52>
 800b218:	079a      	lsls	r2, r3, #30
 800b21a:	bf49      	itett	mi
 800b21c:	085b      	lsrmi	r3, r3, #1
 800b21e:	089b      	lsrpl	r3, r3, #2
 800b220:	6003      	strmi	r3, [r0, #0]
 800b222:	2201      	movmi	r2, #1
 800b224:	bf5c      	itt	pl
 800b226:	6003      	strpl	r3, [r0, #0]
 800b228:	2202      	movpl	r2, #2
 800b22a:	4610      	mov	r0, r2
 800b22c:	4770      	bx	lr
 800b22e:	b299      	uxth	r1, r3
 800b230:	b909      	cbnz	r1, 800b236 <__lo0bits+0x2a>
 800b232:	0c1b      	lsrs	r3, r3, #16
 800b234:	2210      	movs	r2, #16
 800b236:	b2d9      	uxtb	r1, r3
 800b238:	b909      	cbnz	r1, 800b23e <__lo0bits+0x32>
 800b23a:	3208      	adds	r2, #8
 800b23c:	0a1b      	lsrs	r3, r3, #8
 800b23e:	0719      	lsls	r1, r3, #28
 800b240:	bf04      	itt	eq
 800b242:	091b      	lsreq	r3, r3, #4
 800b244:	3204      	addeq	r2, #4
 800b246:	0799      	lsls	r1, r3, #30
 800b248:	bf04      	itt	eq
 800b24a:	089b      	lsreq	r3, r3, #2
 800b24c:	3202      	addeq	r2, #2
 800b24e:	07d9      	lsls	r1, r3, #31
 800b250:	d403      	bmi.n	800b25a <__lo0bits+0x4e>
 800b252:	085b      	lsrs	r3, r3, #1
 800b254:	f102 0201 	add.w	r2, r2, #1
 800b258:	d003      	beq.n	800b262 <__lo0bits+0x56>
 800b25a:	6003      	str	r3, [r0, #0]
 800b25c:	e7e5      	b.n	800b22a <__lo0bits+0x1e>
 800b25e:	2200      	movs	r2, #0
 800b260:	e7e3      	b.n	800b22a <__lo0bits+0x1e>
 800b262:	2220      	movs	r2, #32
 800b264:	e7e1      	b.n	800b22a <__lo0bits+0x1e>
	...

0800b268 <__i2b>:
 800b268:	b510      	push	{r4, lr}
 800b26a:	460c      	mov	r4, r1
 800b26c:	2101      	movs	r1, #1
 800b26e:	f7ff febb 	bl	800afe8 <_Balloc>
 800b272:	4602      	mov	r2, r0
 800b274:	b928      	cbnz	r0, 800b282 <__i2b+0x1a>
 800b276:	4b05      	ldr	r3, [pc, #20]	; (800b28c <__i2b+0x24>)
 800b278:	4805      	ldr	r0, [pc, #20]	; (800b290 <__i2b+0x28>)
 800b27a:	f240 1145 	movw	r1, #325	; 0x145
 800b27e:	f000 fd73 	bl	800bd68 <__assert_func>
 800b282:	2301      	movs	r3, #1
 800b284:	6144      	str	r4, [r0, #20]
 800b286:	6103      	str	r3, [r0, #16]
 800b288:	bd10      	pop	{r4, pc}
 800b28a:	bf00      	nop
 800b28c:	0800c8e9 	.word	0x0800c8e9
 800b290:	0800c95a 	.word	0x0800c95a

0800b294 <__multiply>:
 800b294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b298:	4691      	mov	r9, r2
 800b29a:	690a      	ldr	r2, [r1, #16]
 800b29c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	bfb8      	it	lt
 800b2a4:	460b      	movlt	r3, r1
 800b2a6:	460c      	mov	r4, r1
 800b2a8:	bfbc      	itt	lt
 800b2aa:	464c      	movlt	r4, r9
 800b2ac:	4699      	movlt	r9, r3
 800b2ae:	6927      	ldr	r7, [r4, #16]
 800b2b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b2b4:	68a3      	ldr	r3, [r4, #8]
 800b2b6:	6861      	ldr	r1, [r4, #4]
 800b2b8:	eb07 060a 	add.w	r6, r7, sl
 800b2bc:	42b3      	cmp	r3, r6
 800b2be:	b085      	sub	sp, #20
 800b2c0:	bfb8      	it	lt
 800b2c2:	3101      	addlt	r1, #1
 800b2c4:	f7ff fe90 	bl	800afe8 <_Balloc>
 800b2c8:	b930      	cbnz	r0, 800b2d8 <__multiply+0x44>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	4b44      	ldr	r3, [pc, #272]	; (800b3e0 <__multiply+0x14c>)
 800b2ce:	4845      	ldr	r0, [pc, #276]	; (800b3e4 <__multiply+0x150>)
 800b2d0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b2d4:	f000 fd48 	bl	800bd68 <__assert_func>
 800b2d8:	f100 0514 	add.w	r5, r0, #20
 800b2dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b2e0:	462b      	mov	r3, r5
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	4543      	cmp	r3, r8
 800b2e6:	d321      	bcc.n	800b32c <__multiply+0x98>
 800b2e8:	f104 0314 	add.w	r3, r4, #20
 800b2ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b2f0:	f109 0314 	add.w	r3, r9, #20
 800b2f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b2f8:	9202      	str	r2, [sp, #8]
 800b2fa:	1b3a      	subs	r2, r7, r4
 800b2fc:	3a15      	subs	r2, #21
 800b2fe:	f022 0203 	bic.w	r2, r2, #3
 800b302:	3204      	adds	r2, #4
 800b304:	f104 0115 	add.w	r1, r4, #21
 800b308:	428f      	cmp	r7, r1
 800b30a:	bf38      	it	cc
 800b30c:	2204      	movcc	r2, #4
 800b30e:	9201      	str	r2, [sp, #4]
 800b310:	9a02      	ldr	r2, [sp, #8]
 800b312:	9303      	str	r3, [sp, #12]
 800b314:	429a      	cmp	r2, r3
 800b316:	d80c      	bhi.n	800b332 <__multiply+0x9e>
 800b318:	2e00      	cmp	r6, #0
 800b31a:	dd03      	ble.n	800b324 <__multiply+0x90>
 800b31c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b320:	2b00      	cmp	r3, #0
 800b322:	d05b      	beq.n	800b3dc <__multiply+0x148>
 800b324:	6106      	str	r6, [r0, #16]
 800b326:	b005      	add	sp, #20
 800b328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b32c:	f843 2b04 	str.w	r2, [r3], #4
 800b330:	e7d8      	b.n	800b2e4 <__multiply+0x50>
 800b332:	f8b3 a000 	ldrh.w	sl, [r3]
 800b336:	f1ba 0f00 	cmp.w	sl, #0
 800b33a:	d024      	beq.n	800b386 <__multiply+0xf2>
 800b33c:	f104 0e14 	add.w	lr, r4, #20
 800b340:	46a9      	mov	r9, r5
 800b342:	f04f 0c00 	mov.w	ip, #0
 800b346:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b34a:	f8d9 1000 	ldr.w	r1, [r9]
 800b34e:	fa1f fb82 	uxth.w	fp, r2
 800b352:	b289      	uxth	r1, r1
 800b354:	fb0a 110b 	mla	r1, sl, fp, r1
 800b358:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b35c:	f8d9 2000 	ldr.w	r2, [r9]
 800b360:	4461      	add	r1, ip
 800b362:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b366:	fb0a c20b 	mla	r2, sl, fp, ip
 800b36a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b36e:	b289      	uxth	r1, r1
 800b370:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b374:	4577      	cmp	r7, lr
 800b376:	f849 1b04 	str.w	r1, [r9], #4
 800b37a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b37e:	d8e2      	bhi.n	800b346 <__multiply+0xb2>
 800b380:	9a01      	ldr	r2, [sp, #4]
 800b382:	f845 c002 	str.w	ip, [r5, r2]
 800b386:	9a03      	ldr	r2, [sp, #12]
 800b388:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b38c:	3304      	adds	r3, #4
 800b38e:	f1b9 0f00 	cmp.w	r9, #0
 800b392:	d021      	beq.n	800b3d8 <__multiply+0x144>
 800b394:	6829      	ldr	r1, [r5, #0]
 800b396:	f104 0c14 	add.w	ip, r4, #20
 800b39a:	46ae      	mov	lr, r5
 800b39c:	f04f 0a00 	mov.w	sl, #0
 800b3a0:	f8bc b000 	ldrh.w	fp, [ip]
 800b3a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b3a8:	fb09 220b 	mla	r2, r9, fp, r2
 800b3ac:	4452      	add	r2, sl
 800b3ae:	b289      	uxth	r1, r1
 800b3b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b3b4:	f84e 1b04 	str.w	r1, [lr], #4
 800b3b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b3bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b3c0:	f8be 1000 	ldrh.w	r1, [lr]
 800b3c4:	fb09 110a 	mla	r1, r9, sl, r1
 800b3c8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b3cc:	4567      	cmp	r7, ip
 800b3ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b3d2:	d8e5      	bhi.n	800b3a0 <__multiply+0x10c>
 800b3d4:	9a01      	ldr	r2, [sp, #4]
 800b3d6:	50a9      	str	r1, [r5, r2]
 800b3d8:	3504      	adds	r5, #4
 800b3da:	e799      	b.n	800b310 <__multiply+0x7c>
 800b3dc:	3e01      	subs	r6, #1
 800b3de:	e79b      	b.n	800b318 <__multiply+0x84>
 800b3e0:	0800c8e9 	.word	0x0800c8e9
 800b3e4:	0800c95a 	.word	0x0800c95a

0800b3e8 <__pow5mult>:
 800b3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3ec:	4615      	mov	r5, r2
 800b3ee:	f012 0203 	ands.w	r2, r2, #3
 800b3f2:	4606      	mov	r6, r0
 800b3f4:	460f      	mov	r7, r1
 800b3f6:	d007      	beq.n	800b408 <__pow5mult+0x20>
 800b3f8:	4c25      	ldr	r4, [pc, #148]	; (800b490 <__pow5mult+0xa8>)
 800b3fa:	3a01      	subs	r2, #1
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b402:	f7ff fe53 	bl	800b0ac <__multadd>
 800b406:	4607      	mov	r7, r0
 800b408:	10ad      	asrs	r5, r5, #2
 800b40a:	d03d      	beq.n	800b488 <__pow5mult+0xa0>
 800b40c:	69f4      	ldr	r4, [r6, #28]
 800b40e:	b97c      	cbnz	r4, 800b430 <__pow5mult+0x48>
 800b410:	2010      	movs	r0, #16
 800b412:	f7fc fba9 	bl	8007b68 <malloc>
 800b416:	4602      	mov	r2, r0
 800b418:	61f0      	str	r0, [r6, #28]
 800b41a:	b928      	cbnz	r0, 800b428 <__pow5mult+0x40>
 800b41c:	4b1d      	ldr	r3, [pc, #116]	; (800b494 <__pow5mult+0xac>)
 800b41e:	481e      	ldr	r0, [pc, #120]	; (800b498 <__pow5mult+0xb0>)
 800b420:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b424:	f000 fca0 	bl	800bd68 <__assert_func>
 800b428:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b42c:	6004      	str	r4, [r0, #0]
 800b42e:	60c4      	str	r4, [r0, #12]
 800b430:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b434:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b438:	b94c      	cbnz	r4, 800b44e <__pow5mult+0x66>
 800b43a:	f240 2171 	movw	r1, #625	; 0x271
 800b43e:	4630      	mov	r0, r6
 800b440:	f7ff ff12 	bl	800b268 <__i2b>
 800b444:	2300      	movs	r3, #0
 800b446:	f8c8 0008 	str.w	r0, [r8, #8]
 800b44a:	4604      	mov	r4, r0
 800b44c:	6003      	str	r3, [r0, #0]
 800b44e:	f04f 0900 	mov.w	r9, #0
 800b452:	07eb      	lsls	r3, r5, #31
 800b454:	d50a      	bpl.n	800b46c <__pow5mult+0x84>
 800b456:	4639      	mov	r1, r7
 800b458:	4622      	mov	r2, r4
 800b45a:	4630      	mov	r0, r6
 800b45c:	f7ff ff1a 	bl	800b294 <__multiply>
 800b460:	4639      	mov	r1, r7
 800b462:	4680      	mov	r8, r0
 800b464:	4630      	mov	r0, r6
 800b466:	f7ff fdff 	bl	800b068 <_Bfree>
 800b46a:	4647      	mov	r7, r8
 800b46c:	106d      	asrs	r5, r5, #1
 800b46e:	d00b      	beq.n	800b488 <__pow5mult+0xa0>
 800b470:	6820      	ldr	r0, [r4, #0]
 800b472:	b938      	cbnz	r0, 800b484 <__pow5mult+0x9c>
 800b474:	4622      	mov	r2, r4
 800b476:	4621      	mov	r1, r4
 800b478:	4630      	mov	r0, r6
 800b47a:	f7ff ff0b 	bl	800b294 <__multiply>
 800b47e:	6020      	str	r0, [r4, #0]
 800b480:	f8c0 9000 	str.w	r9, [r0]
 800b484:	4604      	mov	r4, r0
 800b486:	e7e4      	b.n	800b452 <__pow5mult+0x6a>
 800b488:	4638      	mov	r0, r7
 800b48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b48e:	bf00      	nop
 800b490:	0800caa8 	.word	0x0800caa8
 800b494:	0800c87a 	.word	0x0800c87a
 800b498:	0800c95a 	.word	0x0800c95a

0800b49c <__lshift>:
 800b49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a0:	460c      	mov	r4, r1
 800b4a2:	6849      	ldr	r1, [r1, #4]
 800b4a4:	6923      	ldr	r3, [r4, #16]
 800b4a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b4aa:	68a3      	ldr	r3, [r4, #8]
 800b4ac:	4607      	mov	r7, r0
 800b4ae:	4691      	mov	r9, r2
 800b4b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b4b4:	f108 0601 	add.w	r6, r8, #1
 800b4b8:	42b3      	cmp	r3, r6
 800b4ba:	db0b      	blt.n	800b4d4 <__lshift+0x38>
 800b4bc:	4638      	mov	r0, r7
 800b4be:	f7ff fd93 	bl	800afe8 <_Balloc>
 800b4c2:	4605      	mov	r5, r0
 800b4c4:	b948      	cbnz	r0, 800b4da <__lshift+0x3e>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	4b28      	ldr	r3, [pc, #160]	; (800b56c <__lshift+0xd0>)
 800b4ca:	4829      	ldr	r0, [pc, #164]	; (800b570 <__lshift+0xd4>)
 800b4cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b4d0:	f000 fc4a 	bl	800bd68 <__assert_func>
 800b4d4:	3101      	adds	r1, #1
 800b4d6:	005b      	lsls	r3, r3, #1
 800b4d8:	e7ee      	b.n	800b4b8 <__lshift+0x1c>
 800b4da:	2300      	movs	r3, #0
 800b4dc:	f100 0114 	add.w	r1, r0, #20
 800b4e0:	f100 0210 	add.w	r2, r0, #16
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	4553      	cmp	r3, sl
 800b4e8:	db33      	blt.n	800b552 <__lshift+0xb6>
 800b4ea:	6920      	ldr	r0, [r4, #16]
 800b4ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4f0:	f104 0314 	add.w	r3, r4, #20
 800b4f4:	f019 091f 	ands.w	r9, r9, #31
 800b4f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b500:	d02b      	beq.n	800b55a <__lshift+0xbe>
 800b502:	f1c9 0e20 	rsb	lr, r9, #32
 800b506:	468a      	mov	sl, r1
 800b508:	2200      	movs	r2, #0
 800b50a:	6818      	ldr	r0, [r3, #0]
 800b50c:	fa00 f009 	lsl.w	r0, r0, r9
 800b510:	4310      	orrs	r0, r2
 800b512:	f84a 0b04 	str.w	r0, [sl], #4
 800b516:	f853 2b04 	ldr.w	r2, [r3], #4
 800b51a:	459c      	cmp	ip, r3
 800b51c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b520:	d8f3      	bhi.n	800b50a <__lshift+0x6e>
 800b522:	ebac 0304 	sub.w	r3, ip, r4
 800b526:	3b15      	subs	r3, #21
 800b528:	f023 0303 	bic.w	r3, r3, #3
 800b52c:	3304      	adds	r3, #4
 800b52e:	f104 0015 	add.w	r0, r4, #21
 800b532:	4584      	cmp	ip, r0
 800b534:	bf38      	it	cc
 800b536:	2304      	movcc	r3, #4
 800b538:	50ca      	str	r2, [r1, r3]
 800b53a:	b10a      	cbz	r2, 800b540 <__lshift+0xa4>
 800b53c:	f108 0602 	add.w	r6, r8, #2
 800b540:	3e01      	subs	r6, #1
 800b542:	4638      	mov	r0, r7
 800b544:	612e      	str	r6, [r5, #16]
 800b546:	4621      	mov	r1, r4
 800b548:	f7ff fd8e 	bl	800b068 <_Bfree>
 800b54c:	4628      	mov	r0, r5
 800b54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b552:	f842 0f04 	str.w	r0, [r2, #4]!
 800b556:	3301      	adds	r3, #1
 800b558:	e7c5      	b.n	800b4e6 <__lshift+0x4a>
 800b55a:	3904      	subs	r1, #4
 800b55c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b560:	f841 2f04 	str.w	r2, [r1, #4]!
 800b564:	459c      	cmp	ip, r3
 800b566:	d8f9      	bhi.n	800b55c <__lshift+0xc0>
 800b568:	e7ea      	b.n	800b540 <__lshift+0xa4>
 800b56a:	bf00      	nop
 800b56c:	0800c8e9 	.word	0x0800c8e9
 800b570:	0800c95a 	.word	0x0800c95a

0800b574 <__mcmp>:
 800b574:	b530      	push	{r4, r5, lr}
 800b576:	6902      	ldr	r2, [r0, #16]
 800b578:	690c      	ldr	r4, [r1, #16]
 800b57a:	1b12      	subs	r2, r2, r4
 800b57c:	d10e      	bne.n	800b59c <__mcmp+0x28>
 800b57e:	f100 0314 	add.w	r3, r0, #20
 800b582:	3114      	adds	r1, #20
 800b584:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b588:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b58c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b590:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b594:	42a5      	cmp	r5, r4
 800b596:	d003      	beq.n	800b5a0 <__mcmp+0x2c>
 800b598:	d305      	bcc.n	800b5a6 <__mcmp+0x32>
 800b59a:	2201      	movs	r2, #1
 800b59c:	4610      	mov	r0, r2
 800b59e:	bd30      	pop	{r4, r5, pc}
 800b5a0:	4283      	cmp	r3, r0
 800b5a2:	d3f3      	bcc.n	800b58c <__mcmp+0x18>
 800b5a4:	e7fa      	b.n	800b59c <__mcmp+0x28>
 800b5a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5aa:	e7f7      	b.n	800b59c <__mcmp+0x28>

0800b5ac <__mdiff>:
 800b5ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b0:	460c      	mov	r4, r1
 800b5b2:	4606      	mov	r6, r0
 800b5b4:	4611      	mov	r1, r2
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	4690      	mov	r8, r2
 800b5ba:	f7ff ffdb 	bl	800b574 <__mcmp>
 800b5be:	1e05      	subs	r5, r0, #0
 800b5c0:	d110      	bne.n	800b5e4 <__mdiff+0x38>
 800b5c2:	4629      	mov	r1, r5
 800b5c4:	4630      	mov	r0, r6
 800b5c6:	f7ff fd0f 	bl	800afe8 <_Balloc>
 800b5ca:	b930      	cbnz	r0, 800b5da <__mdiff+0x2e>
 800b5cc:	4b3a      	ldr	r3, [pc, #232]	; (800b6b8 <__mdiff+0x10c>)
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	f240 2137 	movw	r1, #567	; 0x237
 800b5d4:	4839      	ldr	r0, [pc, #228]	; (800b6bc <__mdiff+0x110>)
 800b5d6:	f000 fbc7 	bl	800bd68 <__assert_func>
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b5e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5e4:	bfa4      	itt	ge
 800b5e6:	4643      	movge	r3, r8
 800b5e8:	46a0      	movge	r8, r4
 800b5ea:	4630      	mov	r0, r6
 800b5ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b5f0:	bfa6      	itte	ge
 800b5f2:	461c      	movge	r4, r3
 800b5f4:	2500      	movge	r5, #0
 800b5f6:	2501      	movlt	r5, #1
 800b5f8:	f7ff fcf6 	bl	800afe8 <_Balloc>
 800b5fc:	b920      	cbnz	r0, 800b608 <__mdiff+0x5c>
 800b5fe:	4b2e      	ldr	r3, [pc, #184]	; (800b6b8 <__mdiff+0x10c>)
 800b600:	4602      	mov	r2, r0
 800b602:	f240 2145 	movw	r1, #581	; 0x245
 800b606:	e7e5      	b.n	800b5d4 <__mdiff+0x28>
 800b608:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b60c:	6926      	ldr	r6, [r4, #16]
 800b60e:	60c5      	str	r5, [r0, #12]
 800b610:	f104 0914 	add.w	r9, r4, #20
 800b614:	f108 0514 	add.w	r5, r8, #20
 800b618:	f100 0e14 	add.w	lr, r0, #20
 800b61c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b620:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b624:	f108 0210 	add.w	r2, r8, #16
 800b628:	46f2      	mov	sl, lr
 800b62a:	2100      	movs	r1, #0
 800b62c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b630:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b634:	fa11 f88b 	uxtah	r8, r1, fp
 800b638:	b299      	uxth	r1, r3
 800b63a:	0c1b      	lsrs	r3, r3, #16
 800b63c:	eba8 0801 	sub.w	r8, r8, r1
 800b640:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b644:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b648:	fa1f f888 	uxth.w	r8, r8
 800b64c:	1419      	asrs	r1, r3, #16
 800b64e:	454e      	cmp	r6, r9
 800b650:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b654:	f84a 3b04 	str.w	r3, [sl], #4
 800b658:	d8e8      	bhi.n	800b62c <__mdiff+0x80>
 800b65a:	1b33      	subs	r3, r6, r4
 800b65c:	3b15      	subs	r3, #21
 800b65e:	f023 0303 	bic.w	r3, r3, #3
 800b662:	3304      	adds	r3, #4
 800b664:	3415      	adds	r4, #21
 800b666:	42a6      	cmp	r6, r4
 800b668:	bf38      	it	cc
 800b66a:	2304      	movcc	r3, #4
 800b66c:	441d      	add	r5, r3
 800b66e:	4473      	add	r3, lr
 800b670:	469e      	mov	lr, r3
 800b672:	462e      	mov	r6, r5
 800b674:	4566      	cmp	r6, ip
 800b676:	d30e      	bcc.n	800b696 <__mdiff+0xea>
 800b678:	f10c 0203 	add.w	r2, ip, #3
 800b67c:	1b52      	subs	r2, r2, r5
 800b67e:	f022 0203 	bic.w	r2, r2, #3
 800b682:	3d03      	subs	r5, #3
 800b684:	45ac      	cmp	ip, r5
 800b686:	bf38      	it	cc
 800b688:	2200      	movcc	r2, #0
 800b68a:	4413      	add	r3, r2
 800b68c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b690:	b17a      	cbz	r2, 800b6b2 <__mdiff+0x106>
 800b692:	6107      	str	r7, [r0, #16]
 800b694:	e7a4      	b.n	800b5e0 <__mdiff+0x34>
 800b696:	f856 8b04 	ldr.w	r8, [r6], #4
 800b69a:	fa11 f288 	uxtah	r2, r1, r8
 800b69e:	1414      	asrs	r4, r2, #16
 800b6a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b6a4:	b292      	uxth	r2, r2
 800b6a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b6aa:	f84e 2b04 	str.w	r2, [lr], #4
 800b6ae:	1421      	asrs	r1, r4, #16
 800b6b0:	e7e0      	b.n	800b674 <__mdiff+0xc8>
 800b6b2:	3f01      	subs	r7, #1
 800b6b4:	e7ea      	b.n	800b68c <__mdiff+0xe0>
 800b6b6:	bf00      	nop
 800b6b8:	0800c8e9 	.word	0x0800c8e9
 800b6bc:	0800c95a 	.word	0x0800c95a

0800b6c0 <__ulp>:
 800b6c0:	b082      	sub	sp, #8
 800b6c2:	ed8d 0b00 	vstr	d0, [sp]
 800b6c6:	9a01      	ldr	r2, [sp, #4]
 800b6c8:	4b0f      	ldr	r3, [pc, #60]	; (800b708 <__ulp+0x48>)
 800b6ca:	4013      	ands	r3, r2
 800b6cc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	dc08      	bgt.n	800b6e6 <__ulp+0x26>
 800b6d4:	425b      	negs	r3, r3
 800b6d6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b6da:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b6de:	da04      	bge.n	800b6ea <__ulp+0x2a>
 800b6e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b6e4:	4113      	asrs	r3, r2
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	e008      	b.n	800b6fc <__ulp+0x3c>
 800b6ea:	f1a2 0314 	sub.w	r3, r2, #20
 800b6ee:	2b1e      	cmp	r3, #30
 800b6f0:	bfda      	itte	le
 800b6f2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b6f6:	40da      	lsrle	r2, r3
 800b6f8:	2201      	movgt	r2, #1
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	4610      	mov	r0, r2
 800b700:	ec41 0b10 	vmov	d0, r0, r1
 800b704:	b002      	add	sp, #8
 800b706:	4770      	bx	lr
 800b708:	7ff00000 	.word	0x7ff00000

0800b70c <__b2d>:
 800b70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b710:	6906      	ldr	r6, [r0, #16]
 800b712:	f100 0814 	add.w	r8, r0, #20
 800b716:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b71a:	1f37      	subs	r7, r6, #4
 800b71c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b720:	4610      	mov	r0, r2
 800b722:	f7ff fd53 	bl	800b1cc <__hi0bits>
 800b726:	f1c0 0320 	rsb	r3, r0, #32
 800b72a:	280a      	cmp	r0, #10
 800b72c:	600b      	str	r3, [r1, #0]
 800b72e:	491b      	ldr	r1, [pc, #108]	; (800b79c <__b2d+0x90>)
 800b730:	dc15      	bgt.n	800b75e <__b2d+0x52>
 800b732:	f1c0 0c0b 	rsb	ip, r0, #11
 800b736:	fa22 f30c 	lsr.w	r3, r2, ip
 800b73a:	45b8      	cmp	r8, r7
 800b73c:	ea43 0501 	orr.w	r5, r3, r1
 800b740:	bf34      	ite	cc
 800b742:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b746:	2300      	movcs	r3, #0
 800b748:	3015      	adds	r0, #21
 800b74a:	fa02 f000 	lsl.w	r0, r2, r0
 800b74e:	fa23 f30c 	lsr.w	r3, r3, ip
 800b752:	4303      	orrs	r3, r0
 800b754:	461c      	mov	r4, r3
 800b756:	ec45 4b10 	vmov	d0, r4, r5
 800b75a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b75e:	45b8      	cmp	r8, r7
 800b760:	bf3a      	itte	cc
 800b762:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b766:	f1a6 0708 	subcc.w	r7, r6, #8
 800b76a:	2300      	movcs	r3, #0
 800b76c:	380b      	subs	r0, #11
 800b76e:	d012      	beq.n	800b796 <__b2d+0x8a>
 800b770:	f1c0 0120 	rsb	r1, r0, #32
 800b774:	fa23 f401 	lsr.w	r4, r3, r1
 800b778:	4082      	lsls	r2, r0
 800b77a:	4322      	orrs	r2, r4
 800b77c:	4547      	cmp	r7, r8
 800b77e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b782:	bf8c      	ite	hi
 800b784:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b788:	2200      	movls	r2, #0
 800b78a:	4083      	lsls	r3, r0
 800b78c:	40ca      	lsrs	r2, r1
 800b78e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b792:	4313      	orrs	r3, r2
 800b794:	e7de      	b.n	800b754 <__b2d+0x48>
 800b796:	ea42 0501 	orr.w	r5, r2, r1
 800b79a:	e7db      	b.n	800b754 <__b2d+0x48>
 800b79c:	3ff00000 	.word	0x3ff00000

0800b7a0 <__d2b>:
 800b7a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b7a4:	460f      	mov	r7, r1
 800b7a6:	2101      	movs	r1, #1
 800b7a8:	ec59 8b10 	vmov	r8, r9, d0
 800b7ac:	4616      	mov	r6, r2
 800b7ae:	f7ff fc1b 	bl	800afe8 <_Balloc>
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	b930      	cbnz	r0, 800b7c4 <__d2b+0x24>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	4b24      	ldr	r3, [pc, #144]	; (800b84c <__d2b+0xac>)
 800b7ba:	4825      	ldr	r0, [pc, #148]	; (800b850 <__d2b+0xb0>)
 800b7bc:	f240 310f 	movw	r1, #783	; 0x30f
 800b7c0:	f000 fad2 	bl	800bd68 <__assert_func>
 800b7c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b7c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b7cc:	bb2d      	cbnz	r5, 800b81a <__d2b+0x7a>
 800b7ce:	9301      	str	r3, [sp, #4]
 800b7d0:	f1b8 0300 	subs.w	r3, r8, #0
 800b7d4:	d026      	beq.n	800b824 <__d2b+0x84>
 800b7d6:	4668      	mov	r0, sp
 800b7d8:	9300      	str	r3, [sp, #0]
 800b7da:	f7ff fd17 	bl	800b20c <__lo0bits>
 800b7de:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b7e2:	b1e8      	cbz	r0, 800b820 <__d2b+0x80>
 800b7e4:	f1c0 0320 	rsb	r3, r0, #32
 800b7e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ec:	430b      	orrs	r3, r1
 800b7ee:	40c2      	lsrs	r2, r0
 800b7f0:	6163      	str	r3, [r4, #20]
 800b7f2:	9201      	str	r2, [sp, #4]
 800b7f4:	9b01      	ldr	r3, [sp, #4]
 800b7f6:	61a3      	str	r3, [r4, #24]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	bf14      	ite	ne
 800b7fc:	2202      	movne	r2, #2
 800b7fe:	2201      	moveq	r2, #1
 800b800:	6122      	str	r2, [r4, #16]
 800b802:	b1bd      	cbz	r5, 800b834 <__d2b+0x94>
 800b804:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b808:	4405      	add	r5, r0
 800b80a:	603d      	str	r5, [r7, #0]
 800b80c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b810:	6030      	str	r0, [r6, #0]
 800b812:	4620      	mov	r0, r4
 800b814:	b003      	add	sp, #12
 800b816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b81a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b81e:	e7d6      	b.n	800b7ce <__d2b+0x2e>
 800b820:	6161      	str	r1, [r4, #20]
 800b822:	e7e7      	b.n	800b7f4 <__d2b+0x54>
 800b824:	a801      	add	r0, sp, #4
 800b826:	f7ff fcf1 	bl	800b20c <__lo0bits>
 800b82a:	9b01      	ldr	r3, [sp, #4]
 800b82c:	6163      	str	r3, [r4, #20]
 800b82e:	3020      	adds	r0, #32
 800b830:	2201      	movs	r2, #1
 800b832:	e7e5      	b.n	800b800 <__d2b+0x60>
 800b834:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b838:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b83c:	6038      	str	r0, [r7, #0]
 800b83e:	6918      	ldr	r0, [r3, #16]
 800b840:	f7ff fcc4 	bl	800b1cc <__hi0bits>
 800b844:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b848:	e7e2      	b.n	800b810 <__d2b+0x70>
 800b84a:	bf00      	nop
 800b84c:	0800c8e9 	.word	0x0800c8e9
 800b850:	0800c95a 	.word	0x0800c95a

0800b854 <__ratio>:
 800b854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b858:	4688      	mov	r8, r1
 800b85a:	4669      	mov	r1, sp
 800b85c:	4681      	mov	r9, r0
 800b85e:	f7ff ff55 	bl	800b70c <__b2d>
 800b862:	a901      	add	r1, sp, #4
 800b864:	4640      	mov	r0, r8
 800b866:	ec55 4b10 	vmov	r4, r5, d0
 800b86a:	f7ff ff4f 	bl	800b70c <__b2d>
 800b86e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b872:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b876:	eba3 0c02 	sub.w	ip, r3, r2
 800b87a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b87e:	1a9b      	subs	r3, r3, r2
 800b880:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b884:	ec51 0b10 	vmov	r0, r1, d0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	bfd6      	itet	le
 800b88c:	460a      	movle	r2, r1
 800b88e:	462a      	movgt	r2, r5
 800b890:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b894:	468b      	mov	fp, r1
 800b896:	462f      	mov	r7, r5
 800b898:	bfd4      	ite	le
 800b89a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b89e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	ee10 2a10 	vmov	r2, s0
 800b8a8:	465b      	mov	r3, fp
 800b8aa:	4639      	mov	r1, r7
 800b8ac:	f7f4 ffee 	bl	800088c <__aeabi_ddiv>
 800b8b0:	ec41 0b10 	vmov	d0, r0, r1
 800b8b4:	b003      	add	sp, #12
 800b8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b8ba <__copybits>:
 800b8ba:	3901      	subs	r1, #1
 800b8bc:	b570      	push	{r4, r5, r6, lr}
 800b8be:	1149      	asrs	r1, r1, #5
 800b8c0:	6914      	ldr	r4, [r2, #16]
 800b8c2:	3101      	adds	r1, #1
 800b8c4:	f102 0314 	add.w	r3, r2, #20
 800b8c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b8cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b8d0:	1f05      	subs	r5, r0, #4
 800b8d2:	42a3      	cmp	r3, r4
 800b8d4:	d30c      	bcc.n	800b8f0 <__copybits+0x36>
 800b8d6:	1aa3      	subs	r3, r4, r2
 800b8d8:	3b11      	subs	r3, #17
 800b8da:	f023 0303 	bic.w	r3, r3, #3
 800b8de:	3211      	adds	r2, #17
 800b8e0:	42a2      	cmp	r2, r4
 800b8e2:	bf88      	it	hi
 800b8e4:	2300      	movhi	r3, #0
 800b8e6:	4418      	add	r0, r3
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	4288      	cmp	r0, r1
 800b8ec:	d305      	bcc.n	800b8fa <__copybits+0x40>
 800b8ee:	bd70      	pop	{r4, r5, r6, pc}
 800b8f0:	f853 6b04 	ldr.w	r6, [r3], #4
 800b8f4:	f845 6f04 	str.w	r6, [r5, #4]!
 800b8f8:	e7eb      	b.n	800b8d2 <__copybits+0x18>
 800b8fa:	f840 3b04 	str.w	r3, [r0], #4
 800b8fe:	e7f4      	b.n	800b8ea <__copybits+0x30>

0800b900 <__any_on>:
 800b900:	f100 0214 	add.w	r2, r0, #20
 800b904:	6900      	ldr	r0, [r0, #16]
 800b906:	114b      	asrs	r3, r1, #5
 800b908:	4298      	cmp	r0, r3
 800b90a:	b510      	push	{r4, lr}
 800b90c:	db11      	blt.n	800b932 <__any_on+0x32>
 800b90e:	dd0a      	ble.n	800b926 <__any_on+0x26>
 800b910:	f011 011f 	ands.w	r1, r1, #31
 800b914:	d007      	beq.n	800b926 <__any_on+0x26>
 800b916:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b91a:	fa24 f001 	lsr.w	r0, r4, r1
 800b91e:	fa00 f101 	lsl.w	r1, r0, r1
 800b922:	428c      	cmp	r4, r1
 800b924:	d10b      	bne.n	800b93e <__any_on+0x3e>
 800b926:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d803      	bhi.n	800b936 <__any_on+0x36>
 800b92e:	2000      	movs	r0, #0
 800b930:	bd10      	pop	{r4, pc}
 800b932:	4603      	mov	r3, r0
 800b934:	e7f7      	b.n	800b926 <__any_on+0x26>
 800b936:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b93a:	2900      	cmp	r1, #0
 800b93c:	d0f5      	beq.n	800b92a <__any_on+0x2a>
 800b93e:	2001      	movs	r0, #1
 800b940:	e7f6      	b.n	800b930 <__any_on+0x30>

0800b942 <__ascii_wctomb>:
 800b942:	b149      	cbz	r1, 800b958 <__ascii_wctomb+0x16>
 800b944:	2aff      	cmp	r2, #255	; 0xff
 800b946:	bf85      	ittet	hi
 800b948:	238a      	movhi	r3, #138	; 0x8a
 800b94a:	6003      	strhi	r3, [r0, #0]
 800b94c:	700a      	strbls	r2, [r1, #0]
 800b94e:	f04f 30ff 	movhi.w	r0, #4294967295
 800b952:	bf98      	it	ls
 800b954:	2001      	movls	r0, #1
 800b956:	4770      	bx	lr
 800b958:	4608      	mov	r0, r1
 800b95a:	4770      	bx	lr

0800b95c <__ssputs_r>:
 800b95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b960:	688e      	ldr	r6, [r1, #8]
 800b962:	461f      	mov	r7, r3
 800b964:	42be      	cmp	r6, r7
 800b966:	680b      	ldr	r3, [r1, #0]
 800b968:	4682      	mov	sl, r0
 800b96a:	460c      	mov	r4, r1
 800b96c:	4690      	mov	r8, r2
 800b96e:	d82c      	bhi.n	800b9ca <__ssputs_r+0x6e>
 800b970:	898a      	ldrh	r2, [r1, #12]
 800b972:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b976:	d026      	beq.n	800b9c6 <__ssputs_r+0x6a>
 800b978:	6965      	ldr	r5, [r4, #20]
 800b97a:	6909      	ldr	r1, [r1, #16]
 800b97c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b980:	eba3 0901 	sub.w	r9, r3, r1
 800b984:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b988:	1c7b      	adds	r3, r7, #1
 800b98a:	444b      	add	r3, r9
 800b98c:	106d      	asrs	r5, r5, #1
 800b98e:	429d      	cmp	r5, r3
 800b990:	bf38      	it	cc
 800b992:	461d      	movcc	r5, r3
 800b994:	0553      	lsls	r3, r2, #21
 800b996:	d527      	bpl.n	800b9e8 <__ssputs_r+0x8c>
 800b998:	4629      	mov	r1, r5
 800b99a:	f7fc f915 	bl	8007bc8 <_malloc_r>
 800b99e:	4606      	mov	r6, r0
 800b9a0:	b360      	cbz	r0, 800b9fc <__ssputs_r+0xa0>
 800b9a2:	6921      	ldr	r1, [r4, #16]
 800b9a4:	464a      	mov	r2, r9
 800b9a6:	f7fe f8d0 	bl	8009b4a <memcpy>
 800b9aa:	89a3      	ldrh	r3, [r4, #12]
 800b9ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b9b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9b4:	81a3      	strh	r3, [r4, #12]
 800b9b6:	6126      	str	r6, [r4, #16]
 800b9b8:	6165      	str	r5, [r4, #20]
 800b9ba:	444e      	add	r6, r9
 800b9bc:	eba5 0509 	sub.w	r5, r5, r9
 800b9c0:	6026      	str	r6, [r4, #0]
 800b9c2:	60a5      	str	r5, [r4, #8]
 800b9c4:	463e      	mov	r6, r7
 800b9c6:	42be      	cmp	r6, r7
 800b9c8:	d900      	bls.n	800b9cc <__ssputs_r+0x70>
 800b9ca:	463e      	mov	r6, r7
 800b9cc:	6820      	ldr	r0, [r4, #0]
 800b9ce:	4632      	mov	r2, r6
 800b9d0:	4641      	mov	r1, r8
 800b9d2:	f7fd ffba 	bl	800994a <memmove>
 800b9d6:	68a3      	ldr	r3, [r4, #8]
 800b9d8:	1b9b      	subs	r3, r3, r6
 800b9da:	60a3      	str	r3, [r4, #8]
 800b9dc:	6823      	ldr	r3, [r4, #0]
 800b9de:	4433      	add	r3, r6
 800b9e0:	6023      	str	r3, [r4, #0]
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9e8:	462a      	mov	r2, r5
 800b9ea:	f000 f9f1 	bl	800bdd0 <_realloc_r>
 800b9ee:	4606      	mov	r6, r0
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	d1e0      	bne.n	800b9b6 <__ssputs_r+0x5a>
 800b9f4:	6921      	ldr	r1, [r4, #16]
 800b9f6:	4650      	mov	r0, sl
 800b9f8:	f7fe ff40 	bl	800a87c <_free_r>
 800b9fc:	230c      	movs	r3, #12
 800b9fe:	f8ca 3000 	str.w	r3, [sl]
 800ba02:	89a3      	ldrh	r3, [r4, #12]
 800ba04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba08:	81a3      	strh	r3, [r4, #12]
 800ba0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba0e:	e7e9      	b.n	800b9e4 <__ssputs_r+0x88>

0800ba10 <_svfiprintf_r>:
 800ba10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba14:	4698      	mov	r8, r3
 800ba16:	898b      	ldrh	r3, [r1, #12]
 800ba18:	061b      	lsls	r3, r3, #24
 800ba1a:	b09d      	sub	sp, #116	; 0x74
 800ba1c:	4607      	mov	r7, r0
 800ba1e:	460d      	mov	r5, r1
 800ba20:	4614      	mov	r4, r2
 800ba22:	d50e      	bpl.n	800ba42 <_svfiprintf_r+0x32>
 800ba24:	690b      	ldr	r3, [r1, #16]
 800ba26:	b963      	cbnz	r3, 800ba42 <_svfiprintf_r+0x32>
 800ba28:	2140      	movs	r1, #64	; 0x40
 800ba2a:	f7fc f8cd 	bl	8007bc8 <_malloc_r>
 800ba2e:	6028      	str	r0, [r5, #0]
 800ba30:	6128      	str	r0, [r5, #16]
 800ba32:	b920      	cbnz	r0, 800ba3e <_svfiprintf_r+0x2e>
 800ba34:	230c      	movs	r3, #12
 800ba36:	603b      	str	r3, [r7, #0]
 800ba38:	f04f 30ff 	mov.w	r0, #4294967295
 800ba3c:	e0d0      	b.n	800bbe0 <_svfiprintf_r+0x1d0>
 800ba3e:	2340      	movs	r3, #64	; 0x40
 800ba40:	616b      	str	r3, [r5, #20]
 800ba42:	2300      	movs	r3, #0
 800ba44:	9309      	str	r3, [sp, #36]	; 0x24
 800ba46:	2320      	movs	r3, #32
 800ba48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba50:	2330      	movs	r3, #48	; 0x30
 800ba52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bbf8 <_svfiprintf_r+0x1e8>
 800ba56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba5a:	f04f 0901 	mov.w	r9, #1
 800ba5e:	4623      	mov	r3, r4
 800ba60:	469a      	mov	sl, r3
 800ba62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba66:	b10a      	cbz	r2, 800ba6c <_svfiprintf_r+0x5c>
 800ba68:	2a25      	cmp	r2, #37	; 0x25
 800ba6a:	d1f9      	bne.n	800ba60 <_svfiprintf_r+0x50>
 800ba6c:	ebba 0b04 	subs.w	fp, sl, r4
 800ba70:	d00b      	beq.n	800ba8a <_svfiprintf_r+0x7a>
 800ba72:	465b      	mov	r3, fp
 800ba74:	4622      	mov	r2, r4
 800ba76:	4629      	mov	r1, r5
 800ba78:	4638      	mov	r0, r7
 800ba7a:	f7ff ff6f 	bl	800b95c <__ssputs_r>
 800ba7e:	3001      	adds	r0, #1
 800ba80:	f000 80a9 	beq.w	800bbd6 <_svfiprintf_r+0x1c6>
 800ba84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba86:	445a      	add	r2, fp
 800ba88:	9209      	str	r2, [sp, #36]	; 0x24
 800ba8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	f000 80a1 	beq.w	800bbd6 <_svfiprintf_r+0x1c6>
 800ba94:	2300      	movs	r3, #0
 800ba96:	f04f 32ff 	mov.w	r2, #4294967295
 800ba9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba9e:	f10a 0a01 	add.w	sl, sl, #1
 800baa2:	9304      	str	r3, [sp, #16]
 800baa4:	9307      	str	r3, [sp, #28]
 800baa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800baaa:	931a      	str	r3, [sp, #104]	; 0x68
 800baac:	4654      	mov	r4, sl
 800baae:	2205      	movs	r2, #5
 800bab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bab4:	4850      	ldr	r0, [pc, #320]	; (800bbf8 <_svfiprintf_r+0x1e8>)
 800bab6:	f7f4 fbab 	bl	8000210 <memchr>
 800baba:	9a04      	ldr	r2, [sp, #16]
 800babc:	b9d8      	cbnz	r0, 800baf6 <_svfiprintf_r+0xe6>
 800babe:	06d0      	lsls	r0, r2, #27
 800bac0:	bf44      	itt	mi
 800bac2:	2320      	movmi	r3, #32
 800bac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bac8:	0711      	lsls	r1, r2, #28
 800baca:	bf44      	itt	mi
 800bacc:	232b      	movmi	r3, #43	; 0x2b
 800bace:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bad2:	f89a 3000 	ldrb.w	r3, [sl]
 800bad6:	2b2a      	cmp	r3, #42	; 0x2a
 800bad8:	d015      	beq.n	800bb06 <_svfiprintf_r+0xf6>
 800bada:	9a07      	ldr	r2, [sp, #28]
 800badc:	4654      	mov	r4, sl
 800bade:	2000      	movs	r0, #0
 800bae0:	f04f 0c0a 	mov.w	ip, #10
 800bae4:	4621      	mov	r1, r4
 800bae6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800baea:	3b30      	subs	r3, #48	; 0x30
 800baec:	2b09      	cmp	r3, #9
 800baee:	d94d      	bls.n	800bb8c <_svfiprintf_r+0x17c>
 800baf0:	b1b0      	cbz	r0, 800bb20 <_svfiprintf_r+0x110>
 800baf2:	9207      	str	r2, [sp, #28]
 800baf4:	e014      	b.n	800bb20 <_svfiprintf_r+0x110>
 800baf6:	eba0 0308 	sub.w	r3, r0, r8
 800bafa:	fa09 f303 	lsl.w	r3, r9, r3
 800bafe:	4313      	orrs	r3, r2
 800bb00:	9304      	str	r3, [sp, #16]
 800bb02:	46a2      	mov	sl, r4
 800bb04:	e7d2      	b.n	800baac <_svfiprintf_r+0x9c>
 800bb06:	9b03      	ldr	r3, [sp, #12]
 800bb08:	1d19      	adds	r1, r3, #4
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	9103      	str	r1, [sp, #12]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	bfbb      	ittet	lt
 800bb12:	425b      	neglt	r3, r3
 800bb14:	f042 0202 	orrlt.w	r2, r2, #2
 800bb18:	9307      	strge	r3, [sp, #28]
 800bb1a:	9307      	strlt	r3, [sp, #28]
 800bb1c:	bfb8      	it	lt
 800bb1e:	9204      	strlt	r2, [sp, #16]
 800bb20:	7823      	ldrb	r3, [r4, #0]
 800bb22:	2b2e      	cmp	r3, #46	; 0x2e
 800bb24:	d10c      	bne.n	800bb40 <_svfiprintf_r+0x130>
 800bb26:	7863      	ldrb	r3, [r4, #1]
 800bb28:	2b2a      	cmp	r3, #42	; 0x2a
 800bb2a:	d134      	bne.n	800bb96 <_svfiprintf_r+0x186>
 800bb2c:	9b03      	ldr	r3, [sp, #12]
 800bb2e:	1d1a      	adds	r2, r3, #4
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	9203      	str	r2, [sp, #12]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	bfb8      	it	lt
 800bb38:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb3c:	3402      	adds	r4, #2
 800bb3e:	9305      	str	r3, [sp, #20]
 800bb40:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bc08 <_svfiprintf_r+0x1f8>
 800bb44:	7821      	ldrb	r1, [r4, #0]
 800bb46:	2203      	movs	r2, #3
 800bb48:	4650      	mov	r0, sl
 800bb4a:	f7f4 fb61 	bl	8000210 <memchr>
 800bb4e:	b138      	cbz	r0, 800bb60 <_svfiprintf_r+0x150>
 800bb50:	9b04      	ldr	r3, [sp, #16]
 800bb52:	eba0 000a 	sub.w	r0, r0, sl
 800bb56:	2240      	movs	r2, #64	; 0x40
 800bb58:	4082      	lsls	r2, r0
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	3401      	adds	r4, #1
 800bb5e:	9304      	str	r3, [sp, #16]
 800bb60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb64:	4825      	ldr	r0, [pc, #148]	; (800bbfc <_svfiprintf_r+0x1ec>)
 800bb66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb6a:	2206      	movs	r2, #6
 800bb6c:	f7f4 fb50 	bl	8000210 <memchr>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	d038      	beq.n	800bbe6 <_svfiprintf_r+0x1d6>
 800bb74:	4b22      	ldr	r3, [pc, #136]	; (800bc00 <_svfiprintf_r+0x1f0>)
 800bb76:	bb1b      	cbnz	r3, 800bbc0 <_svfiprintf_r+0x1b0>
 800bb78:	9b03      	ldr	r3, [sp, #12]
 800bb7a:	3307      	adds	r3, #7
 800bb7c:	f023 0307 	bic.w	r3, r3, #7
 800bb80:	3308      	adds	r3, #8
 800bb82:	9303      	str	r3, [sp, #12]
 800bb84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb86:	4433      	add	r3, r6
 800bb88:	9309      	str	r3, [sp, #36]	; 0x24
 800bb8a:	e768      	b.n	800ba5e <_svfiprintf_r+0x4e>
 800bb8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb90:	460c      	mov	r4, r1
 800bb92:	2001      	movs	r0, #1
 800bb94:	e7a6      	b.n	800bae4 <_svfiprintf_r+0xd4>
 800bb96:	2300      	movs	r3, #0
 800bb98:	3401      	adds	r4, #1
 800bb9a:	9305      	str	r3, [sp, #20]
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	f04f 0c0a 	mov.w	ip, #10
 800bba2:	4620      	mov	r0, r4
 800bba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bba8:	3a30      	subs	r2, #48	; 0x30
 800bbaa:	2a09      	cmp	r2, #9
 800bbac:	d903      	bls.n	800bbb6 <_svfiprintf_r+0x1a6>
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d0c6      	beq.n	800bb40 <_svfiprintf_r+0x130>
 800bbb2:	9105      	str	r1, [sp, #20]
 800bbb4:	e7c4      	b.n	800bb40 <_svfiprintf_r+0x130>
 800bbb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbba:	4604      	mov	r4, r0
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e7f0      	b.n	800bba2 <_svfiprintf_r+0x192>
 800bbc0:	ab03      	add	r3, sp, #12
 800bbc2:	9300      	str	r3, [sp, #0]
 800bbc4:	462a      	mov	r2, r5
 800bbc6:	4b0f      	ldr	r3, [pc, #60]	; (800bc04 <_svfiprintf_r+0x1f4>)
 800bbc8:	a904      	add	r1, sp, #16
 800bbca:	4638      	mov	r0, r7
 800bbcc:	f7fd f9ae 	bl	8008f2c <_printf_float>
 800bbd0:	1c42      	adds	r2, r0, #1
 800bbd2:	4606      	mov	r6, r0
 800bbd4:	d1d6      	bne.n	800bb84 <_svfiprintf_r+0x174>
 800bbd6:	89ab      	ldrh	r3, [r5, #12]
 800bbd8:	065b      	lsls	r3, r3, #25
 800bbda:	f53f af2d 	bmi.w	800ba38 <_svfiprintf_r+0x28>
 800bbde:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbe0:	b01d      	add	sp, #116	; 0x74
 800bbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe6:	ab03      	add	r3, sp, #12
 800bbe8:	9300      	str	r3, [sp, #0]
 800bbea:	462a      	mov	r2, r5
 800bbec:	4b05      	ldr	r3, [pc, #20]	; (800bc04 <_svfiprintf_r+0x1f4>)
 800bbee:	a904      	add	r1, sp, #16
 800bbf0:	4638      	mov	r0, r7
 800bbf2:	f7fd fc3f 	bl	8009474 <_printf_i>
 800bbf6:	e7eb      	b.n	800bbd0 <_svfiprintf_r+0x1c0>
 800bbf8:	0800cab4 	.word	0x0800cab4
 800bbfc:	0800cabe 	.word	0x0800cabe
 800bc00:	08008f2d 	.word	0x08008f2d
 800bc04:	0800b95d 	.word	0x0800b95d
 800bc08:	0800caba 	.word	0x0800caba

0800bc0c <__sflush_r>:
 800bc0c:	898a      	ldrh	r2, [r1, #12]
 800bc0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc12:	4605      	mov	r5, r0
 800bc14:	0710      	lsls	r0, r2, #28
 800bc16:	460c      	mov	r4, r1
 800bc18:	d458      	bmi.n	800bccc <__sflush_r+0xc0>
 800bc1a:	684b      	ldr	r3, [r1, #4]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	dc05      	bgt.n	800bc2c <__sflush_r+0x20>
 800bc20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	dc02      	bgt.n	800bc2c <__sflush_r+0x20>
 800bc26:	2000      	movs	r0, #0
 800bc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc2e:	2e00      	cmp	r6, #0
 800bc30:	d0f9      	beq.n	800bc26 <__sflush_r+0x1a>
 800bc32:	2300      	movs	r3, #0
 800bc34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc38:	682f      	ldr	r7, [r5, #0]
 800bc3a:	6a21      	ldr	r1, [r4, #32]
 800bc3c:	602b      	str	r3, [r5, #0]
 800bc3e:	d032      	beq.n	800bca6 <__sflush_r+0x9a>
 800bc40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc42:	89a3      	ldrh	r3, [r4, #12]
 800bc44:	075a      	lsls	r2, r3, #29
 800bc46:	d505      	bpl.n	800bc54 <__sflush_r+0x48>
 800bc48:	6863      	ldr	r3, [r4, #4]
 800bc4a:	1ac0      	subs	r0, r0, r3
 800bc4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc4e:	b10b      	cbz	r3, 800bc54 <__sflush_r+0x48>
 800bc50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc52:	1ac0      	subs	r0, r0, r3
 800bc54:	2300      	movs	r3, #0
 800bc56:	4602      	mov	r2, r0
 800bc58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc5a:	6a21      	ldr	r1, [r4, #32]
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	47b0      	blx	r6
 800bc60:	1c43      	adds	r3, r0, #1
 800bc62:	89a3      	ldrh	r3, [r4, #12]
 800bc64:	d106      	bne.n	800bc74 <__sflush_r+0x68>
 800bc66:	6829      	ldr	r1, [r5, #0]
 800bc68:	291d      	cmp	r1, #29
 800bc6a:	d82b      	bhi.n	800bcc4 <__sflush_r+0xb8>
 800bc6c:	4a29      	ldr	r2, [pc, #164]	; (800bd14 <__sflush_r+0x108>)
 800bc6e:	410a      	asrs	r2, r1
 800bc70:	07d6      	lsls	r6, r2, #31
 800bc72:	d427      	bmi.n	800bcc4 <__sflush_r+0xb8>
 800bc74:	2200      	movs	r2, #0
 800bc76:	6062      	str	r2, [r4, #4]
 800bc78:	04d9      	lsls	r1, r3, #19
 800bc7a:	6922      	ldr	r2, [r4, #16]
 800bc7c:	6022      	str	r2, [r4, #0]
 800bc7e:	d504      	bpl.n	800bc8a <__sflush_r+0x7e>
 800bc80:	1c42      	adds	r2, r0, #1
 800bc82:	d101      	bne.n	800bc88 <__sflush_r+0x7c>
 800bc84:	682b      	ldr	r3, [r5, #0]
 800bc86:	b903      	cbnz	r3, 800bc8a <__sflush_r+0x7e>
 800bc88:	6560      	str	r0, [r4, #84]	; 0x54
 800bc8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc8c:	602f      	str	r7, [r5, #0]
 800bc8e:	2900      	cmp	r1, #0
 800bc90:	d0c9      	beq.n	800bc26 <__sflush_r+0x1a>
 800bc92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc96:	4299      	cmp	r1, r3
 800bc98:	d002      	beq.n	800bca0 <__sflush_r+0x94>
 800bc9a:	4628      	mov	r0, r5
 800bc9c:	f7fe fdee 	bl	800a87c <_free_r>
 800bca0:	2000      	movs	r0, #0
 800bca2:	6360      	str	r0, [r4, #52]	; 0x34
 800bca4:	e7c0      	b.n	800bc28 <__sflush_r+0x1c>
 800bca6:	2301      	movs	r3, #1
 800bca8:	4628      	mov	r0, r5
 800bcaa:	47b0      	blx	r6
 800bcac:	1c41      	adds	r1, r0, #1
 800bcae:	d1c8      	bne.n	800bc42 <__sflush_r+0x36>
 800bcb0:	682b      	ldr	r3, [r5, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d0c5      	beq.n	800bc42 <__sflush_r+0x36>
 800bcb6:	2b1d      	cmp	r3, #29
 800bcb8:	d001      	beq.n	800bcbe <__sflush_r+0xb2>
 800bcba:	2b16      	cmp	r3, #22
 800bcbc:	d101      	bne.n	800bcc2 <__sflush_r+0xb6>
 800bcbe:	602f      	str	r7, [r5, #0]
 800bcc0:	e7b1      	b.n	800bc26 <__sflush_r+0x1a>
 800bcc2:	89a3      	ldrh	r3, [r4, #12]
 800bcc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcc8:	81a3      	strh	r3, [r4, #12]
 800bcca:	e7ad      	b.n	800bc28 <__sflush_r+0x1c>
 800bccc:	690f      	ldr	r7, [r1, #16]
 800bcce:	2f00      	cmp	r7, #0
 800bcd0:	d0a9      	beq.n	800bc26 <__sflush_r+0x1a>
 800bcd2:	0793      	lsls	r3, r2, #30
 800bcd4:	680e      	ldr	r6, [r1, #0]
 800bcd6:	bf08      	it	eq
 800bcd8:	694b      	ldreq	r3, [r1, #20]
 800bcda:	600f      	str	r7, [r1, #0]
 800bcdc:	bf18      	it	ne
 800bcde:	2300      	movne	r3, #0
 800bce0:	eba6 0807 	sub.w	r8, r6, r7
 800bce4:	608b      	str	r3, [r1, #8]
 800bce6:	f1b8 0f00 	cmp.w	r8, #0
 800bcea:	dd9c      	ble.n	800bc26 <__sflush_r+0x1a>
 800bcec:	6a21      	ldr	r1, [r4, #32]
 800bcee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bcf0:	4643      	mov	r3, r8
 800bcf2:	463a      	mov	r2, r7
 800bcf4:	4628      	mov	r0, r5
 800bcf6:	47b0      	blx	r6
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	dc06      	bgt.n	800bd0a <__sflush_r+0xfe>
 800bcfc:	89a3      	ldrh	r3, [r4, #12]
 800bcfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd02:	81a3      	strh	r3, [r4, #12]
 800bd04:	f04f 30ff 	mov.w	r0, #4294967295
 800bd08:	e78e      	b.n	800bc28 <__sflush_r+0x1c>
 800bd0a:	4407      	add	r7, r0
 800bd0c:	eba8 0800 	sub.w	r8, r8, r0
 800bd10:	e7e9      	b.n	800bce6 <__sflush_r+0xda>
 800bd12:	bf00      	nop
 800bd14:	dfbffffe 	.word	0xdfbffffe

0800bd18 <_fflush_r>:
 800bd18:	b538      	push	{r3, r4, r5, lr}
 800bd1a:	690b      	ldr	r3, [r1, #16]
 800bd1c:	4605      	mov	r5, r0
 800bd1e:	460c      	mov	r4, r1
 800bd20:	b913      	cbnz	r3, 800bd28 <_fflush_r+0x10>
 800bd22:	2500      	movs	r5, #0
 800bd24:	4628      	mov	r0, r5
 800bd26:	bd38      	pop	{r3, r4, r5, pc}
 800bd28:	b118      	cbz	r0, 800bd32 <_fflush_r+0x1a>
 800bd2a:	6a03      	ldr	r3, [r0, #32]
 800bd2c:	b90b      	cbnz	r3, 800bd32 <_fflush_r+0x1a>
 800bd2e:	f7fd fd4f 	bl	80097d0 <__sinit>
 800bd32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d0f3      	beq.n	800bd22 <_fflush_r+0xa>
 800bd3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd3c:	07d0      	lsls	r0, r2, #31
 800bd3e:	d404      	bmi.n	800bd4a <_fflush_r+0x32>
 800bd40:	0599      	lsls	r1, r3, #22
 800bd42:	d402      	bmi.n	800bd4a <_fflush_r+0x32>
 800bd44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd46:	f7fd fefe 	bl	8009b46 <__retarget_lock_acquire_recursive>
 800bd4a:	4628      	mov	r0, r5
 800bd4c:	4621      	mov	r1, r4
 800bd4e:	f7ff ff5d 	bl	800bc0c <__sflush_r>
 800bd52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd54:	07da      	lsls	r2, r3, #31
 800bd56:	4605      	mov	r5, r0
 800bd58:	d4e4      	bmi.n	800bd24 <_fflush_r+0xc>
 800bd5a:	89a3      	ldrh	r3, [r4, #12]
 800bd5c:	059b      	lsls	r3, r3, #22
 800bd5e:	d4e1      	bmi.n	800bd24 <_fflush_r+0xc>
 800bd60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd62:	f7fd fef1 	bl	8009b48 <__retarget_lock_release_recursive>
 800bd66:	e7dd      	b.n	800bd24 <_fflush_r+0xc>

0800bd68 <__assert_func>:
 800bd68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd6a:	4614      	mov	r4, r2
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	4b09      	ldr	r3, [pc, #36]	; (800bd94 <__assert_func+0x2c>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4605      	mov	r5, r0
 800bd74:	68d8      	ldr	r0, [r3, #12]
 800bd76:	b14c      	cbz	r4, 800bd8c <__assert_func+0x24>
 800bd78:	4b07      	ldr	r3, [pc, #28]	; (800bd98 <__assert_func+0x30>)
 800bd7a:	9100      	str	r1, [sp, #0]
 800bd7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd80:	4906      	ldr	r1, [pc, #24]	; (800bd9c <__assert_func+0x34>)
 800bd82:	462b      	mov	r3, r5
 800bd84:	f000 f854 	bl	800be30 <fiprintf>
 800bd88:	f7fb fee6 	bl	8007b58 <abort>
 800bd8c:	4b04      	ldr	r3, [pc, #16]	; (800bda0 <__assert_func+0x38>)
 800bd8e:	461c      	mov	r4, r3
 800bd90:	e7f3      	b.n	800bd7a <__assert_func+0x12>
 800bd92:	bf00      	nop
 800bd94:	200001ec 	.word	0x200001ec
 800bd98:	0800cac5 	.word	0x0800cac5
 800bd9c:	0800cad2 	.word	0x0800cad2
 800bda0:	0800cb00 	.word	0x0800cb00

0800bda4 <_calloc_r>:
 800bda4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bda6:	fba1 2402 	umull	r2, r4, r1, r2
 800bdaa:	b94c      	cbnz	r4, 800bdc0 <_calloc_r+0x1c>
 800bdac:	4611      	mov	r1, r2
 800bdae:	9201      	str	r2, [sp, #4]
 800bdb0:	f7fb ff0a 	bl	8007bc8 <_malloc_r>
 800bdb4:	9a01      	ldr	r2, [sp, #4]
 800bdb6:	4605      	mov	r5, r0
 800bdb8:	b930      	cbnz	r0, 800bdc8 <_calloc_r+0x24>
 800bdba:	4628      	mov	r0, r5
 800bdbc:	b003      	add	sp, #12
 800bdbe:	bd30      	pop	{r4, r5, pc}
 800bdc0:	220c      	movs	r2, #12
 800bdc2:	6002      	str	r2, [r0, #0]
 800bdc4:	2500      	movs	r5, #0
 800bdc6:	e7f8      	b.n	800bdba <_calloc_r+0x16>
 800bdc8:	4621      	mov	r1, r4
 800bdca:	f7fd fdd8 	bl	800997e <memset>
 800bdce:	e7f4      	b.n	800bdba <_calloc_r+0x16>

0800bdd0 <_realloc_r>:
 800bdd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd4:	4680      	mov	r8, r0
 800bdd6:	4614      	mov	r4, r2
 800bdd8:	460e      	mov	r6, r1
 800bdda:	b921      	cbnz	r1, 800bde6 <_realloc_r+0x16>
 800bddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bde0:	4611      	mov	r1, r2
 800bde2:	f7fb bef1 	b.w	8007bc8 <_malloc_r>
 800bde6:	b92a      	cbnz	r2, 800bdf4 <_realloc_r+0x24>
 800bde8:	f7fe fd48 	bl	800a87c <_free_r>
 800bdec:	4625      	mov	r5, r4
 800bdee:	4628      	mov	r0, r5
 800bdf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdf4:	f000 f82e 	bl	800be54 <_malloc_usable_size_r>
 800bdf8:	4284      	cmp	r4, r0
 800bdfa:	4607      	mov	r7, r0
 800bdfc:	d802      	bhi.n	800be04 <_realloc_r+0x34>
 800bdfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be02:	d812      	bhi.n	800be2a <_realloc_r+0x5a>
 800be04:	4621      	mov	r1, r4
 800be06:	4640      	mov	r0, r8
 800be08:	f7fb fede 	bl	8007bc8 <_malloc_r>
 800be0c:	4605      	mov	r5, r0
 800be0e:	2800      	cmp	r0, #0
 800be10:	d0ed      	beq.n	800bdee <_realloc_r+0x1e>
 800be12:	42bc      	cmp	r4, r7
 800be14:	4622      	mov	r2, r4
 800be16:	4631      	mov	r1, r6
 800be18:	bf28      	it	cs
 800be1a:	463a      	movcs	r2, r7
 800be1c:	f7fd fe95 	bl	8009b4a <memcpy>
 800be20:	4631      	mov	r1, r6
 800be22:	4640      	mov	r0, r8
 800be24:	f7fe fd2a 	bl	800a87c <_free_r>
 800be28:	e7e1      	b.n	800bdee <_realloc_r+0x1e>
 800be2a:	4635      	mov	r5, r6
 800be2c:	e7df      	b.n	800bdee <_realloc_r+0x1e>
	...

0800be30 <fiprintf>:
 800be30:	b40e      	push	{r1, r2, r3}
 800be32:	b503      	push	{r0, r1, lr}
 800be34:	4601      	mov	r1, r0
 800be36:	ab03      	add	r3, sp, #12
 800be38:	4805      	ldr	r0, [pc, #20]	; (800be50 <fiprintf+0x20>)
 800be3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800be3e:	6800      	ldr	r0, [r0, #0]
 800be40:	9301      	str	r3, [sp, #4]
 800be42:	f000 f839 	bl	800beb8 <_vfiprintf_r>
 800be46:	b002      	add	sp, #8
 800be48:	f85d eb04 	ldr.w	lr, [sp], #4
 800be4c:	b003      	add	sp, #12
 800be4e:	4770      	bx	lr
 800be50:	200001ec 	.word	0x200001ec

0800be54 <_malloc_usable_size_r>:
 800be54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be58:	1f18      	subs	r0, r3, #4
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	bfbc      	itt	lt
 800be5e:	580b      	ldrlt	r3, [r1, r0]
 800be60:	18c0      	addlt	r0, r0, r3
 800be62:	4770      	bx	lr

0800be64 <__sfputc_r>:
 800be64:	6893      	ldr	r3, [r2, #8]
 800be66:	3b01      	subs	r3, #1
 800be68:	2b00      	cmp	r3, #0
 800be6a:	b410      	push	{r4}
 800be6c:	6093      	str	r3, [r2, #8]
 800be6e:	da08      	bge.n	800be82 <__sfputc_r+0x1e>
 800be70:	6994      	ldr	r4, [r2, #24]
 800be72:	42a3      	cmp	r3, r4
 800be74:	db01      	blt.n	800be7a <__sfputc_r+0x16>
 800be76:	290a      	cmp	r1, #10
 800be78:	d103      	bne.n	800be82 <__sfputc_r+0x1e>
 800be7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be7e:	f000 b935 	b.w	800c0ec <__swbuf_r>
 800be82:	6813      	ldr	r3, [r2, #0]
 800be84:	1c58      	adds	r0, r3, #1
 800be86:	6010      	str	r0, [r2, #0]
 800be88:	7019      	strb	r1, [r3, #0]
 800be8a:	4608      	mov	r0, r1
 800be8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be90:	4770      	bx	lr

0800be92 <__sfputs_r>:
 800be92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be94:	4606      	mov	r6, r0
 800be96:	460f      	mov	r7, r1
 800be98:	4614      	mov	r4, r2
 800be9a:	18d5      	adds	r5, r2, r3
 800be9c:	42ac      	cmp	r4, r5
 800be9e:	d101      	bne.n	800bea4 <__sfputs_r+0x12>
 800bea0:	2000      	movs	r0, #0
 800bea2:	e007      	b.n	800beb4 <__sfputs_r+0x22>
 800bea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bea8:	463a      	mov	r2, r7
 800beaa:	4630      	mov	r0, r6
 800beac:	f7ff ffda 	bl	800be64 <__sfputc_r>
 800beb0:	1c43      	adds	r3, r0, #1
 800beb2:	d1f3      	bne.n	800be9c <__sfputs_r+0xa>
 800beb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800beb8 <_vfiprintf_r>:
 800beb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bebc:	460d      	mov	r5, r1
 800bebe:	b09d      	sub	sp, #116	; 0x74
 800bec0:	4614      	mov	r4, r2
 800bec2:	4698      	mov	r8, r3
 800bec4:	4606      	mov	r6, r0
 800bec6:	b118      	cbz	r0, 800bed0 <_vfiprintf_r+0x18>
 800bec8:	6a03      	ldr	r3, [r0, #32]
 800beca:	b90b      	cbnz	r3, 800bed0 <_vfiprintf_r+0x18>
 800becc:	f7fd fc80 	bl	80097d0 <__sinit>
 800bed0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bed2:	07d9      	lsls	r1, r3, #31
 800bed4:	d405      	bmi.n	800bee2 <_vfiprintf_r+0x2a>
 800bed6:	89ab      	ldrh	r3, [r5, #12]
 800bed8:	059a      	lsls	r2, r3, #22
 800beda:	d402      	bmi.n	800bee2 <_vfiprintf_r+0x2a>
 800bedc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bede:	f7fd fe32 	bl	8009b46 <__retarget_lock_acquire_recursive>
 800bee2:	89ab      	ldrh	r3, [r5, #12]
 800bee4:	071b      	lsls	r3, r3, #28
 800bee6:	d501      	bpl.n	800beec <_vfiprintf_r+0x34>
 800bee8:	692b      	ldr	r3, [r5, #16]
 800beea:	b99b      	cbnz	r3, 800bf14 <_vfiprintf_r+0x5c>
 800beec:	4629      	mov	r1, r5
 800beee:	4630      	mov	r0, r6
 800bef0:	f000 f93a 	bl	800c168 <__swsetup_r>
 800bef4:	b170      	cbz	r0, 800bf14 <_vfiprintf_r+0x5c>
 800bef6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bef8:	07dc      	lsls	r4, r3, #31
 800befa:	d504      	bpl.n	800bf06 <_vfiprintf_r+0x4e>
 800befc:	f04f 30ff 	mov.w	r0, #4294967295
 800bf00:	b01d      	add	sp, #116	; 0x74
 800bf02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf06:	89ab      	ldrh	r3, [r5, #12]
 800bf08:	0598      	lsls	r0, r3, #22
 800bf0a:	d4f7      	bmi.n	800befc <_vfiprintf_r+0x44>
 800bf0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf0e:	f7fd fe1b 	bl	8009b48 <__retarget_lock_release_recursive>
 800bf12:	e7f3      	b.n	800befc <_vfiprintf_r+0x44>
 800bf14:	2300      	movs	r3, #0
 800bf16:	9309      	str	r3, [sp, #36]	; 0x24
 800bf18:	2320      	movs	r3, #32
 800bf1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf22:	2330      	movs	r3, #48	; 0x30
 800bf24:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c0d8 <_vfiprintf_r+0x220>
 800bf28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf2c:	f04f 0901 	mov.w	r9, #1
 800bf30:	4623      	mov	r3, r4
 800bf32:	469a      	mov	sl, r3
 800bf34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf38:	b10a      	cbz	r2, 800bf3e <_vfiprintf_r+0x86>
 800bf3a:	2a25      	cmp	r2, #37	; 0x25
 800bf3c:	d1f9      	bne.n	800bf32 <_vfiprintf_r+0x7a>
 800bf3e:	ebba 0b04 	subs.w	fp, sl, r4
 800bf42:	d00b      	beq.n	800bf5c <_vfiprintf_r+0xa4>
 800bf44:	465b      	mov	r3, fp
 800bf46:	4622      	mov	r2, r4
 800bf48:	4629      	mov	r1, r5
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	f7ff ffa1 	bl	800be92 <__sfputs_r>
 800bf50:	3001      	adds	r0, #1
 800bf52:	f000 80a9 	beq.w	800c0a8 <_vfiprintf_r+0x1f0>
 800bf56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf58:	445a      	add	r2, fp
 800bf5a:	9209      	str	r2, [sp, #36]	; 0x24
 800bf5c:	f89a 3000 	ldrb.w	r3, [sl]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	f000 80a1 	beq.w	800c0a8 <_vfiprintf_r+0x1f0>
 800bf66:	2300      	movs	r3, #0
 800bf68:	f04f 32ff 	mov.w	r2, #4294967295
 800bf6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf70:	f10a 0a01 	add.w	sl, sl, #1
 800bf74:	9304      	str	r3, [sp, #16]
 800bf76:	9307      	str	r3, [sp, #28]
 800bf78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf7c:	931a      	str	r3, [sp, #104]	; 0x68
 800bf7e:	4654      	mov	r4, sl
 800bf80:	2205      	movs	r2, #5
 800bf82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf86:	4854      	ldr	r0, [pc, #336]	; (800c0d8 <_vfiprintf_r+0x220>)
 800bf88:	f7f4 f942 	bl	8000210 <memchr>
 800bf8c:	9a04      	ldr	r2, [sp, #16]
 800bf8e:	b9d8      	cbnz	r0, 800bfc8 <_vfiprintf_r+0x110>
 800bf90:	06d1      	lsls	r1, r2, #27
 800bf92:	bf44      	itt	mi
 800bf94:	2320      	movmi	r3, #32
 800bf96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf9a:	0713      	lsls	r3, r2, #28
 800bf9c:	bf44      	itt	mi
 800bf9e:	232b      	movmi	r3, #43	; 0x2b
 800bfa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfa4:	f89a 3000 	ldrb.w	r3, [sl]
 800bfa8:	2b2a      	cmp	r3, #42	; 0x2a
 800bfaa:	d015      	beq.n	800bfd8 <_vfiprintf_r+0x120>
 800bfac:	9a07      	ldr	r2, [sp, #28]
 800bfae:	4654      	mov	r4, sl
 800bfb0:	2000      	movs	r0, #0
 800bfb2:	f04f 0c0a 	mov.w	ip, #10
 800bfb6:	4621      	mov	r1, r4
 800bfb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfbc:	3b30      	subs	r3, #48	; 0x30
 800bfbe:	2b09      	cmp	r3, #9
 800bfc0:	d94d      	bls.n	800c05e <_vfiprintf_r+0x1a6>
 800bfc2:	b1b0      	cbz	r0, 800bff2 <_vfiprintf_r+0x13a>
 800bfc4:	9207      	str	r2, [sp, #28]
 800bfc6:	e014      	b.n	800bff2 <_vfiprintf_r+0x13a>
 800bfc8:	eba0 0308 	sub.w	r3, r0, r8
 800bfcc:	fa09 f303 	lsl.w	r3, r9, r3
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	9304      	str	r3, [sp, #16]
 800bfd4:	46a2      	mov	sl, r4
 800bfd6:	e7d2      	b.n	800bf7e <_vfiprintf_r+0xc6>
 800bfd8:	9b03      	ldr	r3, [sp, #12]
 800bfda:	1d19      	adds	r1, r3, #4
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	9103      	str	r1, [sp, #12]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	bfbb      	ittet	lt
 800bfe4:	425b      	neglt	r3, r3
 800bfe6:	f042 0202 	orrlt.w	r2, r2, #2
 800bfea:	9307      	strge	r3, [sp, #28]
 800bfec:	9307      	strlt	r3, [sp, #28]
 800bfee:	bfb8      	it	lt
 800bff0:	9204      	strlt	r2, [sp, #16]
 800bff2:	7823      	ldrb	r3, [r4, #0]
 800bff4:	2b2e      	cmp	r3, #46	; 0x2e
 800bff6:	d10c      	bne.n	800c012 <_vfiprintf_r+0x15a>
 800bff8:	7863      	ldrb	r3, [r4, #1]
 800bffa:	2b2a      	cmp	r3, #42	; 0x2a
 800bffc:	d134      	bne.n	800c068 <_vfiprintf_r+0x1b0>
 800bffe:	9b03      	ldr	r3, [sp, #12]
 800c000:	1d1a      	adds	r2, r3, #4
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	9203      	str	r2, [sp, #12]
 800c006:	2b00      	cmp	r3, #0
 800c008:	bfb8      	it	lt
 800c00a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c00e:	3402      	adds	r4, #2
 800c010:	9305      	str	r3, [sp, #20]
 800c012:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c0e8 <_vfiprintf_r+0x230>
 800c016:	7821      	ldrb	r1, [r4, #0]
 800c018:	2203      	movs	r2, #3
 800c01a:	4650      	mov	r0, sl
 800c01c:	f7f4 f8f8 	bl	8000210 <memchr>
 800c020:	b138      	cbz	r0, 800c032 <_vfiprintf_r+0x17a>
 800c022:	9b04      	ldr	r3, [sp, #16]
 800c024:	eba0 000a 	sub.w	r0, r0, sl
 800c028:	2240      	movs	r2, #64	; 0x40
 800c02a:	4082      	lsls	r2, r0
 800c02c:	4313      	orrs	r3, r2
 800c02e:	3401      	adds	r4, #1
 800c030:	9304      	str	r3, [sp, #16]
 800c032:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c036:	4829      	ldr	r0, [pc, #164]	; (800c0dc <_vfiprintf_r+0x224>)
 800c038:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c03c:	2206      	movs	r2, #6
 800c03e:	f7f4 f8e7 	bl	8000210 <memchr>
 800c042:	2800      	cmp	r0, #0
 800c044:	d03f      	beq.n	800c0c6 <_vfiprintf_r+0x20e>
 800c046:	4b26      	ldr	r3, [pc, #152]	; (800c0e0 <_vfiprintf_r+0x228>)
 800c048:	bb1b      	cbnz	r3, 800c092 <_vfiprintf_r+0x1da>
 800c04a:	9b03      	ldr	r3, [sp, #12]
 800c04c:	3307      	adds	r3, #7
 800c04e:	f023 0307 	bic.w	r3, r3, #7
 800c052:	3308      	adds	r3, #8
 800c054:	9303      	str	r3, [sp, #12]
 800c056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c058:	443b      	add	r3, r7
 800c05a:	9309      	str	r3, [sp, #36]	; 0x24
 800c05c:	e768      	b.n	800bf30 <_vfiprintf_r+0x78>
 800c05e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c062:	460c      	mov	r4, r1
 800c064:	2001      	movs	r0, #1
 800c066:	e7a6      	b.n	800bfb6 <_vfiprintf_r+0xfe>
 800c068:	2300      	movs	r3, #0
 800c06a:	3401      	adds	r4, #1
 800c06c:	9305      	str	r3, [sp, #20]
 800c06e:	4619      	mov	r1, r3
 800c070:	f04f 0c0a 	mov.w	ip, #10
 800c074:	4620      	mov	r0, r4
 800c076:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c07a:	3a30      	subs	r2, #48	; 0x30
 800c07c:	2a09      	cmp	r2, #9
 800c07e:	d903      	bls.n	800c088 <_vfiprintf_r+0x1d0>
 800c080:	2b00      	cmp	r3, #0
 800c082:	d0c6      	beq.n	800c012 <_vfiprintf_r+0x15a>
 800c084:	9105      	str	r1, [sp, #20]
 800c086:	e7c4      	b.n	800c012 <_vfiprintf_r+0x15a>
 800c088:	fb0c 2101 	mla	r1, ip, r1, r2
 800c08c:	4604      	mov	r4, r0
 800c08e:	2301      	movs	r3, #1
 800c090:	e7f0      	b.n	800c074 <_vfiprintf_r+0x1bc>
 800c092:	ab03      	add	r3, sp, #12
 800c094:	9300      	str	r3, [sp, #0]
 800c096:	462a      	mov	r2, r5
 800c098:	4b12      	ldr	r3, [pc, #72]	; (800c0e4 <_vfiprintf_r+0x22c>)
 800c09a:	a904      	add	r1, sp, #16
 800c09c:	4630      	mov	r0, r6
 800c09e:	f7fc ff45 	bl	8008f2c <_printf_float>
 800c0a2:	4607      	mov	r7, r0
 800c0a4:	1c78      	adds	r0, r7, #1
 800c0a6:	d1d6      	bne.n	800c056 <_vfiprintf_r+0x19e>
 800c0a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0aa:	07d9      	lsls	r1, r3, #31
 800c0ac:	d405      	bmi.n	800c0ba <_vfiprintf_r+0x202>
 800c0ae:	89ab      	ldrh	r3, [r5, #12]
 800c0b0:	059a      	lsls	r2, r3, #22
 800c0b2:	d402      	bmi.n	800c0ba <_vfiprintf_r+0x202>
 800c0b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0b6:	f7fd fd47 	bl	8009b48 <__retarget_lock_release_recursive>
 800c0ba:	89ab      	ldrh	r3, [r5, #12]
 800c0bc:	065b      	lsls	r3, r3, #25
 800c0be:	f53f af1d 	bmi.w	800befc <_vfiprintf_r+0x44>
 800c0c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0c4:	e71c      	b.n	800bf00 <_vfiprintf_r+0x48>
 800c0c6:	ab03      	add	r3, sp, #12
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	462a      	mov	r2, r5
 800c0cc:	4b05      	ldr	r3, [pc, #20]	; (800c0e4 <_vfiprintf_r+0x22c>)
 800c0ce:	a904      	add	r1, sp, #16
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	f7fd f9cf 	bl	8009474 <_printf_i>
 800c0d6:	e7e4      	b.n	800c0a2 <_vfiprintf_r+0x1ea>
 800c0d8:	0800cab4 	.word	0x0800cab4
 800c0dc:	0800cabe 	.word	0x0800cabe
 800c0e0:	08008f2d 	.word	0x08008f2d
 800c0e4:	0800be93 	.word	0x0800be93
 800c0e8:	0800caba 	.word	0x0800caba

0800c0ec <__swbuf_r>:
 800c0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ee:	460e      	mov	r6, r1
 800c0f0:	4614      	mov	r4, r2
 800c0f2:	4605      	mov	r5, r0
 800c0f4:	b118      	cbz	r0, 800c0fe <__swbuf_r+0x12>
 800c0f6:	6a03      	ldr	r3, [r0, #32]
 800c0f8:	b90b      	cbnz	r3, 800c0fe <__swbuf_r+0x12>
 800c0fa:	f7fd fb69 	bl	80097d0 <__sinit>
 800c0fe:	69a3      	ldr	r3, [r4, #24]
 800c100:	60a3      	str	r3, [r4, #8]
 800c102:	89a3      	ldrh	r3, [r4, #12]
 800c104:	071a      	lsls	r2, r3, #28
 800c106:	d525      	bpl.n	800c154 <__swbuf_r+0x68>
 800c108:	6923      	ldr	r3, [r4, #16]
 800c10a:	b31b      	cbz	r3, 800c154 <__swbuf_r+0x68>
 800c10c:	6823      	ldr	r3, [r4, #0]
 800c10e:	6922      	ldr	r2, [r4, #16]
 800c110:	1a98      	subs	r0, r3, r2
 800c112:	6963      	ldr	r3, [r4, #20]
 800c114:	b2f6      	uxtb	r6, r6
 800c116:	4283      	cmp	r3, r0
 800c118:	4637      	mov	r7, r6
 800c11a:	dc04      	bgt.n	800c126 <__swbuf_r+0x3a>
 800c11c:	4621      	mov	r1, r4
 800c11e:	4628      	mov	r0, r5
 800c120:	f7ff fdfa 	bl	800bd18 <_fflush_r>
 800c124:	b9e0      	cbnz	r0, 800c160 <__swbuf_r+0x74>
 800c126:	68a3      	ldr	r3, [r4, #8]
 800c128:	3b01      	subs	r3, #1
 800c12a:	60a3      	str	r3, [r4, #8]
 800c12c:	6823      	ldr	r3, [r4, #0]
 800c12e:	1c5a      	adds	r2, r3, #1
 800c130:	6022      	str	r2, [r4, #0]
 800c132:	701e      	strb	r6, [r3, #0]
 800c134:	6962      	ldr	r2, [r4, #20]
 800c136:	1c43      	adds	r3, r0, #1
 800c138:	429a      	cmp	r2, r3
 800c13a:	d004      	beq.n	800c146 <__swbuf_r+0x5a>
 800c13c:	89a3      	ldrh	r3, [r4, #12]
 800c13e:	07db      	lsls	r3, r3, #31
 800c140:	d506      	bpl.n	800c150 <__swbuf_r+0x64>
 800c142:	2e0a      	cmp	r6, #10
 800c144:	d104      	bne.n	800c150 <__swbuf_r+0x64>
 800c146:	4621      	mov	r1, r4
 800c148:	4628      	mov	r0, r5
 800c14a:	f7ff fde5 	bl	800bd18 <_fflush_r>
 800c14e:	b938      	cbnz	r0, 800c160 <__swbuf_r+0x74>
 800c150:	4638      	mov	r0, r7
 800c152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c154:	4621      	mov	r1, r4
 800c156:	4628      	mov	r0, r5
 800c158:	f000 f806 	bl	800c168 <__swsetup_r>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	d0d5      	beq.n	800c10c <__swbuf_r+0x20>
 800c160:	f04f 37ff 	mov.w	r7, #4294967295
 800c164:	e7f4      	b.n	800c150 <__swbuf_r+0x64>
	...

0800c168 <__swsetup_r>:
 800c168:	b538      	push	{r3, r4, r5, lr}
 800c16a:	4b2a      	ldr	r3, [pc, #168]	; (800c214 <__swsetup_r+0xac>)
 800c16c:	4605      	mov	r5, r0
 800c16e:	6818      	ldr	r0, [r3, #0]
 800c170:	460c      	mov	r4, r1
 800c172:	b118      	cbz	r0, 800c17c <__swsetup_r+0x14>
 800c174:	6a03      	ldr	r3, [r0, #32]
 800c176:	b90b      	cbnz	r3, 800c17c <__swsetup_r+0x14>
 800c178:	f7fd fb2a 	bl	80097d0 <__sinit>
 800c17c:	89a3      	ldrh	r3, [r4, #12]
 800c17e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c182:	0718      	lsls	r0, r3, #28
 800c184:	d422      	bmi.n	800c1cc <__swsetup_r+0x64>
 800c186:	06d9      	lsls	r1, r3, #27
 800c188:	d407      	bmi.n	800c19a <__swsetup_r+0x32>
 800c18a:	2309      	movs	r3, #9
 800c18c:	602b      	str	r3, [r5, #0]
 800c18e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c192:	81a3      	strh	r3, [r4, #12]
 800c194:	f04f 30ff 	mov.w	r0, #4294967295
 800c198:	e034      	b.n	800c204 <__swsetup_r+0x9c>
 800c19a:	0758      	lsls	r0, r3, #29
 800c19c:	d512      	bpl.n	800c1c4 <__swsetup_r+0x5c>
 800c19e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1a0:	b141      	cbz	r1, 800c1b4 <__swsetup_r+0x4c>
 800c1a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1a6:	4299      	cmp	r1, r3
 800c1a8:	d002      	beq.n	800c1b0 <__swsetup_r+0x48>
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	f7fe fb66 	bl	800a87c <_free_r>
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	6363      	str	r3, [r4, #52]	; 0x34
 800c1b4:	89a3      	ldrh	r3, [r4, #12]
 800c1b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c1ba:	81a3      	strh	r3, [r4, #12]
 800c1bc:	2300      	movs	r3, #0
 800c1be:	6063      	str	r3, [r4, #4]
 800c1c0:	6923      	ldr	r3, [r4, #16]
 800c1c2:	6023      	str	r3, [r4, #0]
 800c1c4:	89a3      	ldrh	r3, [r4, #12]
 800c1c6:	f043 0308 	orr.w	r3, r3, #8
 800c1ca:	81a3      	strh	r3, [r4, #12]
 800c1cc:	6923      	ldr	r3, [r4, #16]
 800c1ce:	b94b      	cbnz	r3, 800c1e4 <__swsetup_r+0x7c>
 800c1d0:	89a3      	ldrh	r3, [r4, #12]
 800c1d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c1d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1da:	d003      	beq.n	800c1e4 <__swsetup_r+0x7c>
 800c1dc:	4621      	mov	r1, r4
 800c1de:	4628      	mov	r0, r5
 800c1e0:	f000 f840 	bl	800c264 <__smakebuf_r>
 800c1e4:	89a0      	ldrh	r0, [r4, #12]
 800c1e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1ea:	f010 0301 	ands.w	r3, r0, #1
 800c1ee:	d00a      	beq.n	800c206 <__swsetup_r+0x9e>
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	60a3      	str	r3, [r4, #8]
 800c1f4:	6963      	ldr	r3, [r4, #20]
 800c1f6:	425b      	negs	r3, r3
 800c1f8:	61a3      	str	r3, [r4, #24]
 800c1fa:	6923      	ldr	r3, [r4, #16]
 800c1fc:	b943      	cbnz	r3, 800c210 <__swsetup_r+0xa8>
 800c1fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c202:	d1c4      	bne.n	800c18e <__swsetup_r+0x26>
 800c204:	bd38      	pop	{r3, r4, r5, pc}
 800c206:	0781      	lsls	r1, r0, #30
 800c208:	bf58      	it	pl
 800c20a:	6963      	ldrpl	r3, [r4, #20]
 800c20c:	60a3      	str	r3, [r4, #8]
 800c20e:	e7f4      	b.n	800c1fa <__swsetup_r+0x92>
 800c210:	2000      	movs	r0, #0
 800c212:	e7f7      	b.n	800c204 <__swsetup_r+0x9c>
 800c214:	200001ec 	.word	0x200001ec

0800c218 <__swhatbuf_r>:
 800c218:	b570      	push	{r4, r5, r6, lr}
 800c21a:	460c      	mov	r4, r1
 800c21c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c220:	2900      	cmp	r1, #0
 800c222:	b096      	sub	sp, #88	; 0x58
 800c224:	4615      	mov	r5, r2
 800c226:	461e      	mov	r6, r3
 800c228:	da0d      	bge.n	800c246 <__swhatbuf_r+0x2e>
 800c22a:	89a3      	ldrh	r3, [r4, #12]
 800c22c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c230:	f04f 0100 	mov.w	r1, #0
 800c234:	bf0c      	ite	eq
 800c236:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c23a:	2340      	movne	r3, #64	; 0x40
 800c23c:	2000      	movs	r0, #0
 800c23e:	6031      	str	r1, [r6, #0]
 800c240:	602b      	str	r3, [r5, #0]
 800c242:	b016      	add	sp, #88	; 0x58
 800c244:	bd70      	pop	{r4, r5, r6, pc}
 800c246:	466a      	mov	r2, sp
 800c248:	f000 f848 	bl	800c2dc <_fstat_r>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	dbec      	blt.n	800c22a <__swhatbuf_r+0x12>
 800c250:	9901      	ldr	r1, [sp, #4]
 800c252:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c256:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c25a:	4259      	negs	r1, r3
 800c25c:	4159      	adcs	r1, r3
 800c25e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c262:	e7eb      	b.n	800c23c <__swhatbuf_r+0x24>

0800c264 <__smakebuf_r>:
 800c264:	898b      	ldrh	r3, [r1, #12]
 800c266:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c268:	079d      	lsls	r5, r3, #30
 800c26a:	4606      	mov	r6, r0
 800c26c:	460c      	mov	r4, r1
 800c26e:	d507      	bpl.n	800c280 <__smakebuf_r+0x1c>
 800c270:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c274:	6023      	str	r3, [r4, #0]
 800c276:	6123      	str	r3, [r4, #16]
 800c278:	2301      	movs	r3, #1
 800c27a:	6163      	str	r3, [r4, #20]
 800c27c:	b002      	add	sp, #8
 800c27e:	bd70      	pop	{r4, r5, r6, pc}
 800c280:	ab01      	add	r3, sp, #4
 800c282:	466a      	mov	r2, sp
 800c284:	f7ff ffc8 	bl	800c218 <__swhatbuf_r>
 800c288:	9900      	ldr	r1, [sp, #0]
 800c28a:	4605      	mov	r5, r0
 800c28c:	4630      	mov	r0, r6
 800c28e:	f7fb fc9b 	bl	8007bc8 <_malloc_r>
 800c292:	b948      	cbnz	r0, 800c2a8 <__smakebuf_r+0x44>
 800c294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c298:	059a      	lsls	r2, r3, #22
 800c29a:	d4ef      	bmi.n	800c27c <__smakebuf_r+0x18>
 800c29c:	f023 0303 	bic.w	r3, r3, #3
 800c2a0:	f043 0302 	orr.w	r3, r3, #2
 800c2a4:	81a3      	strh	r3, [r4, #12]
 800c2a6:	e7e3      	b.n	800c270 <__smakebuf_r+0xc>
 800c2a8:	89a3      	ldrh	r3, [r4, #12]
 800c2aa:	6020      	str	r0, [r4, #0]
 800c2ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2b0:	81a3      	strh	r3, [r4, #12]
 800c2b2:	9b00      	ldr	r3, [sp, #0]
 800c2b4:	6163      	str	r3, [r4, #20]
 800c2b6:	9b01      	ldr	r3, [sp, #4]
 800c2b8:	6120      	str	r0, [r4, #16]
 800c2ba:	b15b      	cbz	r3, 800c2d4 <__smakebuf_r+0x70>
 800c2bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2c0:	4630      	mov	r0, r6
 800c2c2:	f000 f81d 	bl	800c300 <_isatty_r>
 800c2c6:	b128      	cbz	r0, 800c2d4 <__smakebuf_r+0x70>
 800c2c8:	89a3      	ldrh	r3, [r4, #12]
 800c2ca:	f023 0303 	bic.w	r3, r3, #3
 800c2ce:	f043 0301 	orr.w	r3, r3, #1
 800c2d2:	81a3      	strh	r3, [r4, #12]
 800c2d4:	89a3      	ldrh	r3, [r4, #12]
 800c2d6:	431d      	orrs	r5, r3
 800c2d8:	81a5      	strh	r5, [r4, #12]
 800c2da:	e7cf      	b.n	800c27c <__smakebuf_r+0x18>

0800c2dc <_fstat_r>:
 800c2dc:	b538      	push	{r3, r4, r5, lr}
 800c2de:	4d07      	ldr	r5, [pc, #28]	; (800c2fc <_fstat_r+0x20>)
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	4604      	mov	r4, r0
 800c2e4:	4608      	mov	r0, r1
 800c2e6:	4611      	mov	r1, r2
 800c2e8:	602b      	str	r3, [r5, #0]
 800c2ea:	f7f7 fc04 	bl	8003af6 <_fstat>
 800c2ee:	1c43      	adds	r3, r0, #1
 800c2f0:	d102      	bne.n	800c2f8 <_fstat_r+0x1c>
 800c2f2:	682b      	ldr	r3, [r5, #0]
 800c2f4:	b103      	cbz	r3, 800c2f8 <_fstat_r+0x1c>
 800c2f6:	6023      	str	r3, [r4, #0]
 800c2f8:	bd38      	pop	{r3, r4, r5, pc}
 800c2fa:	bf00      	nop
 800c2fc:	20002cac 	.word	0x20002cac

0800c300 <_isatty_r>:
 800c300:	b538      	push	{r3, r4, r5, lr}
 800c302:	4d06      	ldr	r5, [pc, #24]	; (800c31c <_isatty_r+0x1c>)
 800c304:	2300      	movs	r3, #0
 800c306:	4604      	mov	r4, r0
 800c308:	4608      	mov	r0, r1
 800c30a:	602b      	str	r3, [r5, #0]
 800c30c:	f7f7 fc03 	bl	8003b16 <_isatty>
 800c310:	1c43      	adds	r3, r0, #1
 800c312:	d102      	bne.n	800c31a <_isatty_r+0x1a>
 800c314:	682b      	ldr	r3, [r5, #0]
 800c316:	b103      	cbz	r3, 800c31a <_isatty_r+0x1a>
 800c318:	6023      	str	r3, [r4, #0]
 800c31a:	bd38      	pop	{r3, r4, r5, pc}
 800c31c:	20002cac 	.word	0x20002cac

0800c320 <_init>:
 800c320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c322:	bf00      	nop
 800c324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c326:	bc08      	pop	{r3}
 800c328:	469e      	mov	lr, r3
 800c32a:	4770      	bx	lr

0800c32c <_fini>:
 800c32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c32e:	bf00      	nop
 800c330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c332:	bc08      	pop	{r3}
 800c334:	469e      	mov	lr, r3
 800c336:	4770      	bx	lr
